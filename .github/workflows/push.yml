on:
  push:
    branches:
      - master
      - v*
      - issue/*
      - housekeeping/*
      - release/*
name: 'Porsche Design System'
jobs:
  install:
    name: 'Install'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache yarn.lock'
        uses: actions/cache@v2
        id: cache-check
        with:
          path: './yarn.lock'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}-lock
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        if: steps.cache-check.outputs.cache-hit != 'true'
        id: cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        if: steps.cache.outputs.cache-hit != 'true'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Install'
        if: steps.cache.outputs.cache-hit != 'true'
        uses: ./.github/actions/docker-run
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
        with:
          entrypoint: run-install
  core-and-components:
    name: 'Core and Components'
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build Core Dependencies'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --core-dependencies
      - name: 'Build Components JS'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --components-js
      - name: 'Store Assets CDN Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: assets-cdn-dev
          path: ./packages/assets/cdn
      - name: 'Store Assets Build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: assets-build-dev
          path: ./packages/assets/dist
      - name: 'Store Assets Bin Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: assets-bin-dev
          path: ./packages/assets/bin
      - name: 'Store Components JS Build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: components-js-build
          path: ./packages/components-js/dist/components-wrapper
      - name: 'Store Angular Wrapper Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: components-angular-wrapper
          path: ./packages/components-angular/projects/components-wrapper/src/lib
      - name: 'Store React Wrapper Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: components-react-wrapper
          path: ./packages/components-react/projects/components-wrapper/src/lib
      - name: 'Store Partials Build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: partials-build-dev
          path: ./packages/partials/dist
      - name: 'Store Utilities Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: utilities-build-dev
          path: ./packages/utilities/projects/utilities
  components-e2e:
    name: 'Components E2E'
    needs: [core-and-components]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Assets CDN Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-cdn-dev
          path: ./packages/assets/cdn
      - name: 'Restore Assets Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-build-dev
          path: ./packages/assets/dist
      - name: 'Restore Assets Bin Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-bin-dev
          path: ./packages/assets/bin
      - name: 'Restore Components JS Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-js-build
          path: ./packages/components-js/dist/components-wrapper
      - name: 'Restore Partials Artifact'
        uses: actions/download-artifact@v2
        with:
          name: partials-build-dev
          path: ./packages/partials/dist
      - name: 'Restore Utilities Artifact'
        uses: actions/download-artifact@v2
        with:
          name: utilities-build-dev
          path: ./packages/utilities/projects/utilities
      - name: 'Lint'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-lint
          args: --components
      - name: 'Unit Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-unit
          args: --components
      - name: 'Chmod CDN'
        run: chmod +x ./packages/assets/bin/serve-cdn.js
      - name: 'E2E Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-e2e
          args: --components-js
  components-vrt:
    name: 'Components VRT'
    needs: [core-and-components]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Assets CDN Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-cdn-dev
          path: ./packages/assets/cdn
      - name: 'Restore Assets Bin Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-bin-dev
          path: ./packages/assets/bin
      - name: 'Restore Components JS Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-js-build
          path: ./packages/components-js/dist/components-wrapper
      - name: 'Restore Partials Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: partials-build-dev
          path: ./packages/partials/dist
      - name: 'Chmod CDN'
        run: chmod +x ./packages/assets/bin/serve-cdn.js
      - name: 'VRT Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-vrt
          args: --components-js
      - name: 'VRT Regression'
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: components-js-vrt-regression
          path: ./packages/components-js/tests/vrt/results
  components-angular:
    name: 'Components Angular'
    needs: [core-and-components]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Assets CDN Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-cdn-dev
          path: ./packages/assets/cdn
      - name: 'Restore Components JS Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-js-build
          path: ./packages/components-js/dist/components-wrapper
      - name: 'Restore Components Angular Wrapper Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-angular-wrapper
          path: ./packages/components-angular/projects/components-wrapper/src/lib
      - name: 'Build Components Angular'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --components-angular
      - name: 'E2E Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-e2e
          args: --components-angular
      - name: 'Chmod CDN'
        run: chmod +x ./packages/assets/bin/serve-cdn.js
      - name: 'VRT Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-vrt
          args: --components-angular
      - name: 'VRT Regression'
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: components-angular-vrt-regression
          path: ./packages/components-angular/tests/vrt/results
  components-react:
    name: 'Components React'
    needs: [core-and-components]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Assets CDN Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-cdn-dev
          path: ./packages/assets/cdn
      - name: 'Restore Components JS Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-js-build
          path: ./packages/components-js/dist/components-wrapper
      - name: 'Restore Components React Wrapper Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-react-wrapper
          path: ./packages/components-react/projects/components-wrapper/src/lib
      - name: 'Build Components React'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --components-react
      - name: 'JSDOM Polyfill Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-jsdom-polyfill
          args: --components-react
      - name: 'Chmod CDN'
        run: chmod +x ./packages/assets/bin/serve-cdn.js
      - name: 'VRT Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-vrt
          args: --components-react
      - name: 'VRT Regression'
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: components-react-vrt-regression
          path: ./packages/components-react/tests/vrt/results
  partials:
    name: 'Partials'
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build Fonts'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --fonts
      - name: 'Build Utilities'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --utilities
      - name: 'Unit Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-unit
          args: --partials
  storefront:
    name: 'Storefront'
    needs: [core-and-components]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Assets CDN Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-cdn-dev
          path: ./packages/assets/cdn
      - name: 'Restore Assets Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-build-dev
          path: ./packages/assets/dist
      - name: 'Restore Assets Bin Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-bin-dev
          path: ./packages/assets/bin
      - name: 'Restore Components JS Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-js-build
          path: ./packages/components-js/dist/components-wrapper
      - name: 'Restore Partials Artifact'
        uses: actions/download-artifact@v2
        with:
          name: partials-build-dev
          path: ./packages/partials/dist
      - name: 'Restore Utilities Artifact'
        uses: actions/download-artifact@v2
        with:
          name: utilities-build-dev
          path: ./packages/utilities/projects/utilities
      - name: 'Lint'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-lint
          args: --storefront
      - name: 'Unit Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-unit
          args: --storefront
      - name: 'Build Storefront'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --storefront
      - name: 'Chmod CDN'
        run: chmod +x ./packages/assets/bin/serve-cdn.js
      - name: 'E2E Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-e2e
          args: --storefront
      - name: 'VRT Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-vrt
          args: --storefront
      - name: 'VRT Regression'
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: storefront-vrt-regression
          path: ./packages/storefront/tests/vrt/results
  production-builds:
    name: 'Production Builds'
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build Core Dependencies'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --core-dependencies
      - name: 'Build Components JS Prod'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --components-js-prod
      - name: 'Build Components Angular Prod'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --components-angular
      - name: 'Build Components React Prod'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --components-react
      - name: 'Build Storefront'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --storefront
      - name: 'Store Assets CDN Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: assets-cdn
          path: ./packages/assets/cdn
      - name: 'Store Assets Build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: assets-build
          path: ./packages/assets/dist
      - name: 'Store Components JS Build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: components-js-prod-build
          path: ./packages/components-js/dist/components-wrapper
      - name: 'Store Components Angular Build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: components-angular-prod-build
          path: ./packages/components-angular/dist/components-wrapper
      - name: 'Store Components React Build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: components-react-prod-build
          path: ./packages/components-react/dist/components-wrapper
      - name: 'Store Partials Build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: partials-build
          path: ./packages/partials/dist
      - name: 'Store Storefront Build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: storefront-build
          path: ./packages/storefront/dist
      - name: 'Store Utilities Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: utilities-full-build
          path: ./packages/utilities/projects/utilities # We have to provide the full directory to avoid nested directory in npm package (scss.scss in package directory)
  utilities:
    name: 'Utilities'
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Build Fonts'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --fonts
      - name: 'Build Utilities'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-build
          args: --utilities
      - name: 'Unit Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-unit
          args: --utilities
      - name: 'VRT Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-vrt
          args: --utilities
      - name: 'VRT Regression'
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: utilities-vrt-regression
          path: ./packages/utilities/tests/vrt/results
  assets-deployment:
    name: 'Assets Deployment'
    needs: [production-builds, components-e2e, components-vrt, components-angular, components-react, storefront, utilities, partials]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Assets Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-cdn
          path: ./packages/assets/cdn
      - name: 'Restore Utilities Artifact'
        uses: actions/download-artifact@v2
        with:
          name: utilities-full-build
          path: ./packages/utilities/projects/utilities # See store artifact comment -> full directory and build of utilities
      - name: 'Deploy Assets to CDN'
        uses: ./.github/actions/docker-run
        env:
          CDN_USER: ${{ secrets.CDN_USER }}
          CDN_SSH_KEY: ${{ secrets.CDN_SSH_KEY }}
        with:
          entrypoint: run-deploy-assets
  storefront-deployment:
    name: 'Storefront Deployment'
    needs: [production-builds, components-e2e, components-vrt, components-angular, components-react, storefront, utilities, partials]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: storefront-build
          path: ./packages/storefront/dist
      - name: 'Deploy'
        uses: ./.github/actions/docker-run
        env:
          GIT_DEPLOY_KEY: ${{ secrets.GIT_DEPLOY_KEY }}
        with:
          entrypoint: run-deploy-storefront
  smoke-test:
    name: 'Smoke Test'
    needs: [install, assets-deployment]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache node_modules'
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-js-prod-build
          path: ./packages/components-js/dist/components-wrapper
      - name: 'Smoke Test'
        uses: ./.github/actions/docker-run
        with:
          entrypoint: run-test-smoke
          args: --components-js
  release-components-js:
    name: 'Release Components JS'
    needs: [smoke-test, storefront-deployment]
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-js-prod-build
          path: ./packages/components-js/dist/components-wrapper
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/components-js/dist/components-wrapper
  release-components-angular:
    name: 'Release Components Angular'
    needs: [release-components-js]
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-angular-prod-build
          path: ./packages/components-angular/dist/components-wrapper
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/components-angular/dist/components-wrapper
  release-components-react:
    name: 'Release Components React'
    needs: [release-components-js]
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: components-react-prod-build
          path: ./packages/components-react/dist/components-wrapper
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/components-react/dist/components-wrapper
  release-assets:
    name: 'Release Assets'
    needs: [smoke-test, storefront-deployment]
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Build Artifact'
        uses: actions/download-artifact@v2
        with:
          name: assets-build
          path: ./packages/assets/dist
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/assets/dist
  release-partials:
    name: 'Release Partials'
    needs: [smoke-test, storefront-deployment]
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Partials Artifact'
        uses: actions/download-artifact@v2
        with:
          name: partials-build
          path: ./packages/partials/dist
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/partials
  release-utilities:
    name: 'Release Utilities'
    needs: [smoke-test, storefront-deployment]
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Restore Utilities Artifact'
        uses: actions/download-artifact@v2
        with:
          name: utilities-full-build
          path: ./packages/utilities/projects/utilities # See store artifact comment -> full directory and build of utilities
      - name: 'Publish NPM Package'
        uses: ./.github/actions/docker-run
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-npm
          args: packages/utilities/projects/utilities
  release-sketch-library-basic:
    name: 'Release Sketch Library Basic'
    needs: [smoke-test, storefront-deployment]
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Publish Sketch Library'
        uses: ./.github/actions/docker-run
        env:
          GIT_DEPLOY_KEY: ${{ secrets.GIT_DEPLOY_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-sketch
          args: sketch/basic
  release-sketch-library-web:
    name: 'Release Sketch Library Web'
    needs: [release-sketch-library-basic]
    if: startsWith( github.ref, 'refs/heads/v') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Docker Login'
        uses: ./.github/actions/docker-login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Publish Sketch Library'
        uses: ./.github/actions/docker-run
        env:
          GIT_DEPLOY_KEY: ${{ secrets.GIT_DEPLOY_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: run-release-sketch
          args: sketch/web
