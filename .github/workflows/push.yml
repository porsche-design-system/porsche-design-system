on:
  push:
    branches:
      - v*
      - issue/*
      - housekeeping/*
name: 'Porsche Design System'
jobs:
  components-js:
    name: 'Components JS'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: 'Install'
        uses: ./docker/node/
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
        with:
          entrypoint: run-install
      - name: 'Build'
        uses: ./docker/node/
        with:
          entrypoint: run-build
      - name: 'Lint'
        uses: ./docker/node/
        with:
          entrypoint: run-lint
          args: --components-js
      - name: 'Unit Test'
        uses: ./docker/node/
        with:
          entrypoint: run-test-unit
          args: --components-js
      - name: 'E2E Test'
        uses: ./docker/node/
        with:
          entrypoint: run-test-e2e
          args: --components-js
      - name: 'VRT Test'
        uses: ./docker/node/
        with:
          entrypoint: run-test-vrt
          args: --components-js
      - name: 'VRT Regression'
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: components-js-vrt-regression
          path: ./packages/components-js/tests/vrt/results
      - name: 'CBT Test'
        uses: ./docker/node/
        env:
          BROWSERSTACK_USER_NAME: ${{ secrets.BROWSERSTACK_USER_NAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        with:
          entrypoint: run-test-cbt
          args: --components-js
      - name: 'CBT Regression'
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: components-js-cbt-regression
          path: ./packages/components-js/tests/cbt/results
  components-angular:
    name: 'Components Angular'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: 'Install'
        uses: ./docker/node/
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
        with:
          entrypoint: run-install
      - name: 'Build'
        uses: ./docker/node/
        with:
          entrypoint: run-build
      - name: 'VRT Test'
        uses: ./docker/node/
        with:
          entrypoint: run-test-vrt
          args: --components-angular
      - name: 'VRT Regression'
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: components-angular-vrt-regression
          path: ./packages/components-angular/tests/vrt/results
      - name: 'CBT Test'
        uses: ./docker/node/
        env:
          BROWSERSTACK_USER_NAME: ${{ secrets.BROWSERSTACK_USER_NAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        with:
          entrypoint: run-test-cbt
          args: --components-angular
      - name: 'CBT Regression'
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: components-angular-cbt-regression
          path: ./packages/components-angular/tests/cbt/results
  components-react:
    name: 'Components React'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: 'Install'
        uses: ./docker/node/
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
        with:
          entrypoint: run-install
      - name: 'Build'
        uses: ./docker/node/
        with:
          entrypoint: run-build
      - name: 'VRT Test'
        uses: ./docker/node/
        with:
          entrypoint: run-test-vrt
          args: --components-react
      - name: 'VRT Regression'
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: components-react-vrt-regression
          path: ./packages/components-react/tests/vrt/results
      - name: 'CBT Test'
        uses: ./docker/node/
        env:
          BROWSERSTACK_USER_NAME: ${{ secrets.BROWSERSTACK_USER_NAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        with:
          entrypoint: run-test-cbt
          args: --components-react
      - name: 'CBT Regression'
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: components-react-cbt-regression
          path: ./packages/components-react/tests/cbt/results
  storefront:
    name: 'Storefront'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: 'Install'
        uses: ./docker/node/
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
        with:
          entrypoint: run-install
      - name: 'Build'
        uses: ./docker/node/
        with:
          entrypoint: run-build
      - name: 'Lint'
        uses: ./docker/node/
        with:
          entrypoint: run-lint
          args: --storefront
      - name: 'Unit Test'
        uses: ./docker/node/
        with:
          entrypoint: run-test-unit
          args: --storefront
      - name: 'E2E Test'
        uses: ./docker/node/
        with:
          entrypoint: run-test-e2e
          args: --storefront
      - name: 'VRT Test'
        uses: ./docker/node/
        with:
          entrypoint: run-test-vrt
          args: --storefront
      - name: 'VRT Regression'
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: storefront-vrt-regression
          path: ./packages/storefront/tests/vrt/results
  deployment:
    name: 'Deployment'
    needs: [components-js, components-angular, components-react, storefront]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: 'Install'
        uses: ./docker/node/
        env:
          PORSCHE_NPM_REGISTRY_TOKEN: ${{ secrets.PORSCHE_NPM_REGISTRY_TOKEN }}
        with:
          entrypoint: run-install
      - name: 'Build'
        uses: ./docker/node/
        with:
          entrypoint: run-build
      - name: 'Deploy'
        uses: ./docker/node/
        env:
          GIT_DEPLOY_KEY: ${{ secrets.GIT_DEPLOY_KEY }}
        with:
          entrypoint: run-deploy
      - name: 'Slack'
        uses: ./docker/node/
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          entrypoint: run-slack
