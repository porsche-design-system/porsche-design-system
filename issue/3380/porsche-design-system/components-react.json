{"@porsche-design-system/components-react/package.json":"{\n  \"name\": \"@porsche-design-system/components-react\",\n  \"version\": \"3.17.0-rc.0\",\n  \"description\": \"Porsche Design System is a component library designed to help developers create the best experience for software or services distributed by Dr. Ing. h.c. F. Porsche AG.\",\n  \"keywords\": [\n    \"porsche\",\n    \"design\",\n    \"system\",\n    \"web\",\n    \"component\",\n    \"library\",\n    \"react\",\n    \"js\"\n  ],\n  \"scope\": \"@porsche-design-system\",\n  \"author\": \"Dr. Ing. h.c. F. Porsche AG\",\n  \"license\": \"SEE LICENSE IN LICENSE\",\n  \"homepage\": \"https://designsystem.porsche.com\",\n  \"dependencies\": {\n    \"./../components-js\": \"3.17.0-rc.0\"\n  },\n  \"peerDependencies\": {\n    \"react\": \">=18.0.0 <19.0.0\",\n    \"react-dom\": \">=18.0.0 <19.0.0\"\n  },\n  \"main\": \"cjs/public-api.cjs\",\n  \"module\": \"esm/public-api.mjs\",\n  \"types\": \"esm/public-api.d.ts\",\n  \"bin\": {\n    \"patchRemixRunProcessBrowserGlobalIdentifier\": \"./bin/patchRemixRunProcessBrowserGlobalIdentifier.js\"\n  },\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"types\": \"./esm/public-api.d.ts\",\n      \"import\": \"./esm/public-api.mjs\",\n      \"default\": \"./cjs/public-api.cjs\"\n    },\n    \"./jsdom-polyfill\": {\n      \"types\": \"./jsdom-polyfill/index.d.ts\",\n      \"default\": \"./jsdom-polyfill/index.cjs\"\n    },\n    \"./partials\": {\n      \"types\": \"./partials/index.d.ts\",\n      \"module\": \"./partials/index.js\",\n      \"default\": \"./partials/index.cjs\"\n    },\n    \"./ssr\": {\n      \"types\": \"./ssr/esm/public-api.d.ts\",\n      \"import\": \"./ssr/esm/components-react/projects/react-ssr-wrapper/src/public-api.mjs\",\n      \"default\": \"./ssr/cjs/components-react/projects/react-ssr-wrapper/src/public-api.cjs\"\n    },\n    \"./styles\": {\n      \"sass\": \"./styles/_index.scss\",\n      \"types\": \"./styles/esm/index.d.ts\",\n      \"import\": \"./styles/esm/index.mjs\",\n      \"default\": \"./styles/cjs/index.cjs\"\n    },\n    \"./testing\": {\n      \"types\": \"./testing/index.d.ts\",\n      \"default\": \"./testing/index.cjs\"\n    }\n  }\n}\n","@porsche-design-system/components-react/cjs/hooks.cjs":"\"use client\";\n'use strict';\n\nvar react = require('react');\nvar provider = require('./provider.cjs');\nvar utils = require('./utils.cjs');\n\nlet skipCheck = false;\n/**\n * sets a flag that skips the need for `PorscheDesignSystemProvider` during testing\n * when `process.env.NODE_ENV === 'test'`\n */\nconst skipCheckForPorscheDesignSystemProviderDuringTests = () => {\n    skipCheck = true;\n};\nconst usePrefix = (tagName) => {\n    if (process.env.NODE_ENV === 'test' && skipCheck) {\n        return tagName;\n    }\n    else {\n        const { prefix } = react.useContext(provider.PorscheDesignSystemContext); // eslint-disable-line react-hooks/rules-of-hooks\n        if (prefix === undefined) {\n            throw new Error('It appears the <PorscheDesignSystemProvider /> is missing. Make sure to wrap your App in it.');\n        }\n        return prefix ? prefix + '-' + tagName : tagName;\n    }\n};\nconst useTheme = () => {\n    if (process.env.NODE_ENV === 'test' && skipCheck) {\n        return 'light';\n    }\n    else {\n        return react.useContext(provider.PorscheDesignSystemContext).theme; // eslint-disable-line react-hooks/rules-of-hooks\n    }\n};\nconst useEventCallback = (ref, eventName, eventHandler) => {\n    react.useEffect(() => {\n        const { current } = ref;\n        if (current && eventHandler) {\n            current.addEventListener(eventName, eventHandler);\n            return () => current?.removeEventListener(eventName, eventHandler);\n        }\n    }, [eventHandler]); // eslint-disable-line react-hooks/exhaustive-deps\n};\nconst useMergedClass = (ref, className) => {\n    const prevComponentClassName = react.useRef();\n    return react.useMemo(() => {\n        if (!className) {\n            return undefined;\n        }\n        const { current } = ref;\n        let newClassName = className;\n        if (current) {\n            newClassName = utils.getMergedClassName(current.className, prevComponentClassName.current, className);\n            // the jsx does not override className when the attribute changes\n            current.className = newClassName;\n        }\n        prevComponentClassName.current = className;\n        return newClassName;\n    }, [className]); // eslint-disable-line react-hooks/exhaustive-deps\n};\nconst useBrowserLayoutEffect = typeof window !== 'undefined' ? react.useLayoutEffect : react.useEffect;\nconst useToastManager = () => {\n    const tagName = usePrefix('p-toast');\n    return {\n        addMessage: (message) => {\n            const toast = document.body.querySelector(tagName);\n            customElements.whenDefined(tagName).then(() => toast.addMessage(message));\n        },\n    };\n};\n\nexports.skipCheckForPorscheDesignSystemProviderDuringTests = skipCheckForPorscheDesignSystemProviderDuringTests;\nexports.useBrowserLayoutEffect = useBrowserLayoutEffect;\nexports.useEventCallback = useEventCallback;\nexports.useMergedClass = useMergedClass;\nexports.usePrefix = usePrefix;\nexports.useTheme = useTheme;\nexports.useToastManager = useToastManager;\n","@porsche-design-system/components-react/cjs/provider.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar componentsJs = require('./../../components-js');\n\n// to warn users about missing PorscheDesignSystemProvider, we set the default values as undefined\nconst PorscheDesignSystemContext = react.createContext({\n    prefix: undefined,\n    theme: 'light',\n});\nconst PorscheDesignSystemProvider = ({ prefix = '', cdn, theme = 'light', ...props }) => {\n    react.useEffect(() => {\n        componentsJs.load({ prefix, cdn });\n    }, []); // runtime prefix or cdn change is not supported\n    return jsxRuntime.jsx(PorscheDesignSystemContext.Provider, { value: { prefix, theme }, ...props });\n};\n\nexports.PorscheDesignSystemContext = PorscheDesignSystemContext;\nexports.PorscheDesignSystemProvider = PorscheDesignSystemProvider;\n","@porsche-design-system/components-react/cjs/public-api.cjs":"'use strict';\n\nvar componentsJs = require('./../../components-js');\nvar accordion_wrapper = require('./lib/components/accordion.wrapper.cjs');\nvar banner_wrapper = require('./lib/components/banner.wrapper.cjs');\nvar button_wrapper = require('./lib/components/button.wrapper.cjs');\nvar buttonGroup_wrapper = require('./lib/components/button-group.wrapper.cjs');\nvar buttonPure_wrapper = require('./lib/components/button-pure.wrapper.cjs');\nvar buttonTile_wrapper = require('./lib/components/button-tile.wrapper.cjs');\nvar canvas_wrapper = require('./lib/components/canvas.wrapper.cjs');\nvar carousel_wrapper = require('./lib/components/carousel.wrapper.cjs');\nvar checkboxWrapper_wrapper = require('./lib/components/checkbox-wrapper.wrapper.cjs');\nvar contentWrapper_wrapper = require('./lib/components/content-wrapper.wrapper.cjs');\nvar crest_wrapper = require('./lib/components/crest.wrapper.cjs');\nvar display_wrapper = require('./lib/components/display.wrapper.cjs');\nvar divider_wrapper = require('./lib/components/divider.wrapper.cjs');\nvar fieldset_wrapper = require('./lib/components/fieldset.wrapper.cjs');\nvar fieldsetWrapper_wrapper = require('./lib/components/fieldset-wrapper.wrapper.cjs');\nvar flex_wrapper = require('./lib/components/flex.wrapper.cjs');\nvar flexItem_wrapper = require('./lib/components/flex-item.wrapper.cjs');\nvar flyout_wrapper = require('./lib/components/flyout.wrapper.cjs');\nvar flyoutMultilevel_wrapper = require('./lib/components/flyout-multilevel.wrapper.cjs');\nvar flyoutMultilevelItem_wrapper = require('./lib/components/flyout-multilevel-item.wrapper.cjs');\nvar grid_wrapper = require('./lib/components/grid.wrapper.cjs');\nvar gridItem_wrapper = require('./lib/components/grid-item.wrapper.cjs');\nvar heading_wrapper = require('./lib/components/heading.wrapper.cjs');\nvar headline_wrapper = require('./lib/components/headline.wrapper.cjs');\nvar icon_wrapper = require('./lib/components/icon.wrapper.cjs');\nvar inlineNotification_wrapper = require('./lib/components/inline-notification.wrapper.cjs');\nvar link_wrapper = require('./lib/components/link.wrapper.cjs');\nvar linkPure_wrapper = require('./lib/components/link-pure.wrapper.cjs');\nvar linkSocial_wrapper = require('./lib/components/link-social.wrapper.cjs');\nvar linkTile_wrapper = require('./lib/components/link-tile.wrapper.cjs');\nvar linkTileModelSignature_wrapper = require('./lib/components/link-tile-model-signature.wrapper.cjs');\nvar linkTileProduct_wrapper = require('./lib/components/link-tile-product.wrapper.cjs');\nvar marque_wrapper = require('./lib/components/marque.wrapper.cjs');\nvar modal_wrapper = require('./lib/components/modal.wrapper.cjs');\nvar modelSignature_wrapper = require('./lib/components/model-signature.wrapper.cjs');\nvar multiSelect_wrapper = require('./lib/components/multi-select.wrapper.cjs');\nvar multiSelectOption_wrapper = require('./lib/components/multi-select-option.wrapper.cjs');\nvar optgroup_wrapper = require('./lib/components/optgroup.wrapper.cjs');\nvar pagination_wrapper = require('./lib/components/pagination.wrapper.cjs');\nvar pinCode_wrapper = require('./lib/components/pin-code.wrapper.cjs');\nvar popover_wrapper = require('./lib/components/popover.wrapper.cjs');\nvar radioButtonWrapper_wrapper = require('./lib/components/radio-button-wrapper.wrapper.cjs');\nvar scroller_wrapper = require('./lib/components/scroller.wrapper.cjs');\nvar segmentedControl_wrapper = require('./lib/components/segmented-control.wrapper.cjs');\nvar segmentedControlItem_wrapper = require('./lib/components/segmented-control-item.wrapper.cjs');\nvar select_wrapper = require('./lib/components/select.wrapper.cjs');\nvar selectOption_wrapper = require('./lib/components/select-option.wrapper.cjs');\nvar selectWrapper_wrapper = require('./lib/components/select-wrapper.wrapper.cjs');\nvar spinner_wrapper = require('./lib/components/spinner.wrapper.cjs');\nvar stepperHorizontal_wrapper = require('./lib/components/stepper-horizontal.wrapper.cjs');\nvar stepperHorizontalItem_wrapper = require('./lib/components/stepper-horizontal-item.wrapper.cjs');\nvar switch_wrapper = require('./lib/components/switch.wrapper.cjs');\nvar table_wrapper = require('./lib/components/table.wrapper.cjs');\nvar tableBody_wrapper = require('./lib/components/table-body.wrapper.cjs');\nvar tableCell_wrapper = require('./lib/components/table-cell.wrapper.cjs');\nvar tableHead_wrapper = require('./lib/components/table-head.wrapper.cjs');\nvar tableHeadCell_wrapper = require('./lib/components/table-head-cell.wrapper.cjs');\nvar tableHeadRow_wrapper = require('./lib/components/table-head-row.wrapper.cjs');\nvar tableRow_wrapper = require('./lib/components/table-row.wrapper.cjs');\nvar tabs_wrapper = require('./lib/components/tabs.wrapper.cjs');\nvar tabsBar_wrapper = require('./lib/components/tabs-bar.wrapper.cjs');\nvar tabsItem_wrapper = require('./lib/components/tabs-item.wrapper.cjs');\nvar tag_wrapper = require('./lib/components/tag.wrapper.cjs');\nvar tagDismissible_wrapper = require('./lib/components/tag-dismissible.wrapper.cjs');\nvar text_wrapper = require('./lib/components/text.wrapper.cjs');\nvar textFieldWrapper_wrapper = require('./lib/components/text-field-wrapper.wrapper.cjs');\nvar textList_wrapper = require('./lib/components/text-list.wrapper.cjs');\nvar textListItem_wrapper = require('./lib/components/text-list-item.wrapper.cjs');\nvar textareaWrapper_wrapper = require('./lib/components/textarea-wrapper.wrapper.cjs');\nvar toast_wrapper = require('./lib/components/toast.wrapper.cjs');\nvar wordmark_wrapper = require('./lib/components/wordmark.wrapper.cjs');\nvar provider = require('./provider.cjs');\nvar hooks = require('./hooks.cjs');\nvar utils = require('./utils.cjs');\n\n\n\nObject.defineProperty(exports, \"componentsReady\", {\n\tenumerable: true,\n\tget: function () { return componentsJs.componentsReady; }\n});\nexports.PAccordion = accordion_wrapper.PAccordion;\nexports.PBanner = banner_wrapper.PBanner;\nexports.PButton = button_wrapper.PButton;\nexports.PButtonGroup = buttonGroup_wrapper.PButtonGroup;\nexports.PButtonPure = buttonPure_wrapper.PButtonPure;\nexports.PButtonTile = buttonTile_wrapper.PButtonTile;\nexports.PCanvas = canvas_wrapper.PCanvas;\nexports.PCarousel = carousel_wrapper.PCarousel;\nexports.PCheckboxWrapper = checkboxWrapper_wrapper.PCheckboxWrapper;\nexports.PContentWrapper = contentWrapper_wrapper.PContentWrapper;\nexports.PCrest = crest_wrapper.PCrest;\nexports.PDisplay = display_wrapper.PDisplay;\nexports.PDivider = divider_wrapper.PDivider;\nexports.PFieldset = fieldset_wrapper.PFieldset;\nexports.PFieldsetWrapper = fieldsetWrapper_wrapper.PFieldsetWrapper;\nexports.PFlex = flex_wrapper.PFlex;\nexports.PFlexItem = flexItem_wrapper.PFlexItem;\nexports.PFlyout = flyout_wrapper.PFlyout;\nexports.PFlyoutMultilevel = flyoutMultilevel_wrapper.PFlyoutMultilevel;\nexports.PFlyoutMultilevelItem = flyoutMultilevelItem_wrapper.PFlyoutMultilevelItem;\nexports.PGrid = grid_wrapper.PGrid;\nexports.PGridItem = gridItem_wrapper.PGridItem;\nexports.PHeading = heading_wrapper.PHeading;\nexports.PHeadline = headline_wrapper.PHeadline;\nexports.PIcon = icon_wrapper.PIcon;\nexports.PInlineNotification = inlineNotification_wrapper.PInlineNotification;\nexports.PLink = link_wrapper.PLink;\nexports.PLinkPure = linkPure_wrapper.PLinkPure;\nexports.PLinkSocial = linkSocial_wrapper.PLinkSocial;\nexports.PLinkTile = linkTile_wrapper.PLinkTile;\nexports.PLinkTileModelSignature = linkTileModelSignature_wrapper.PLinkTileModelSignature;\nexports.PLinkTileProduct = linkTileProduct_wrapper.PLinkTileProduct;\nexports.PMarque = marque_wrapper.PMarque;\nexports.PModal = modal_wrapper.PModal;\nexports.PModelSignature = modelSignature_wrapper.PModelSignature;\nexports.PMultiSelect = multiSelect_wrapper.PMultiSelect;\nexports.PMultiSelectOption = multiSelectOption_wrapper.PMultiSelectOption;\nexports.POptgroup = optgroup_wrapper.POptgroup;\nexports.PPagination = pagination_wrapper.PPagination;\nexports.PPinCode = pinCode_wrapper.PPinCode;\nexports.PPopover = popover_wrapper.PPopover;\nexports.PRadioButtonWrapper = radioButtonWrapper_wrapper.PRadioButtonWrapper;\nexports.PScroller = scroller_wrapper.PScroller;\nexports.PSegmentedControl = segmentedControl_wrapper.PSegmentedControl;\nexports.PSegmentedControlItem = segmentedControlItem_wrapper.PSegmentedControlItem;\nexports.PSelect = select_wrapper.PSelect;\nexports.PSelectOption = selectOption_wrapper.PSelectOption;\nexports.PSelectWrapper = selectWrapper_wrapper.PSelectWrapper;\nexports.PSpinner = spinner_wrapper.PSpinner;\nexports.PStepperHorizontal = stepperHorizontal_wrapper.PStepperHorizontal;\nexports.PStepperHorizontalItem = stepperHorizontalItem_wrapper.PStepperHorizontalItem;\nexports.PSwitch = switch_wrapper.PSwitch;\nexports.PTable = table_wrapper.PTable;\nexports.PTableBody = tableBody_wrapper.PTableBody;\nexports.PTableCell = tableCell_wrapper.PTableCell;\nexports.PTableHead = tableHead_wrapper.PTableHead;\nexports.PTableHeadCell = tableHeadCell_wrapper.PTableHeadCell;\nexports.PTableHeadRow = tableHeadRow_wrapper.PTableHeadRow;\nexports.PTableRow = tableRow_wrapper.PTableRow;\nexports.PTabs = tabs_wrapper.PTabs;\nexports.PTabsBar = tabsBar_wrapper.PTabsBar;\nexports.PTabsItem = tabsItem_wrapper.PTabsItem;\nexports.PTag = tag_wrapper.PTag;\nexports.PTagDismissible = tagDismissible_wrapper.PTagDismissible;\nexports.PText = text_wrapper.PText;\nexports.PTextFieldWrapper = textFieldWrapper_wrapper.PTextFieldWrapper;\nexports.PTextList = textList_wrapper.PTextList;\nexports.PTextListItem = textListItem_wrapper.PTextListItem;\nexports.PTextareaWrapper = textareaWrapper_wrapper.PTextareaWrapper;\nexports.PToast = toast_wrapper.PToast;\nexports.PWordmark = wordmark_wrapper.PWordmark;\nexports.PorscheDesignSystemProvider = provider.PorscheDesignSystemProvider;\nexports.skipCheckForPorscheDesignSystemProviderDuringTests = hooks.skipCheckForPorscheDesignSystemProviderDuringTests;\nexports.useToastManager = hooks.useToastManager;\nexports.skipPorscheDesignSystemCDNRequestsDuringTests = utils.skipPorscheDesignSystemCDNRequestsDuringTests;\n","@porsche-design-system/components-react/cjs/utils.cjs":"'use strict';\n\nconst splitToArray = (str) => str.split(' ').filter((str) => str);\nconst getMergedClassName = (domClassName, oldClassName = '', newClassName = '') => {\n    // classes previously set by component\n    const prevComponentClassNames = splitToArray(oldClassName);\n    // all classes not set by component -> to keep hydrated class and other classes set on host element\n    // (usually dom-manipulated class additions would be lost on rerender)\n    let domClasses = splitToArray(domClassName);\n    if (prevComponentClassNames.length) {\n        domClasses = domClasses.filter((x) => !prevComponentClassNames.includes(x));\n    }\n    // all classes set by component\n    const componentClasses = splitToArray(newClassName);\n    return componentClasses.concat(domClasses).join(' ');\n};\nconst syncRef = (elementRef, ref) => (el) => {\n    elementRef.current = el;\n    if (typeof ref === 'function') {\n        ref(el);\n    }\n    else if (ref !== null) {\n        ref.current = el;\n    }\n};\nconst skipPorscheDesignSystemCDNRequestsDuringTests = () => {\n    window.PDS_SKIP_FETCH = true;\n};\n\nexports.getMergedClassName = getMergedClassName;\nexports.skipPorscheDesignSystemCDNRequestsDuringTests = skipPorscheDesignSystemCDNRequestsDuringTests;\nexports.syncRef = syncRef;\n","@porsche-design-system/components-react/esm/BaseProps.d.ts":"import type { DOMAttributes, HTMLAttributes } from 'react';\nexport type BaseProps = DOMAttributes<{}> & Pick<HTMLAttributes<{}>, 'suppressHydrationWarning' | 'autoFocus' | 'className' | 'dir' | 'hidden' | 'id' | 'lang' | 'slot' | 'style' | 'tabIndex' | 'title' | 'translate' | 'role'>;\n","@porsche-design-system/components-react/esm/hooks.d.ts":"import type { MutableRefObject } from 'react';\nimport { useEffect } from 'react';\nimport type { Theme, ToastMessage } from './lib/types';\n/**\n * sets a flag that skips the need for `PorscheDesignSystemProvider` during testing\n * when `process.env.NODE_ENV === 'test'`\n */\nexport declare const skipCheckForPorscheDesignSystemProviderDuringTests: () => void;\nexport declare const usePrefix: (tagName: string) => string;\nexport declare const useTheme: () => Theme;\nexport declare const useEventCallback: (ref: MutableRefObject<HTMLElement | undefined>, eventName: string, eventHandler: (e: Event) => void) => void;\nexport declare const useMergedClass: (ref: MutableRefObject<HTMLElement | undefined>, className?: string) => string | undefined;\nexport declare const useBrowserLayoutEffect: typeof useEffect;\nexport declare const useToastManager: () => {\n    addMessage: (msg: ToastMessage) => void;\n};\n","@porsche-design-system/components-react/esm/provider.d.ts":"import type { PropsWithChildren, JSX } from 'react';\nimport type { Theme } from './lib/types';\nexport declare const PorscheDesignSystemContext: import(\"react\").Context<{\n    prefix?: string;\n    theme: Theme;\n}>;\ntype Props = {\n    prefix?: string;\n    cdn?: 'auto' | 'cn';\n    theme?: Theme;\n};\nexport declare const PorscheDesignSystemProvider: ({ prefix, cdn, theme, ...props }: PropsWithChildren<Props>) => JSX.Element;\nexport {};\n","@porsche-design-system/components-react/esm/public-api.d.ts":"export { componentsReady } from './../../components-js';\nexport * from './lib/components';\nexport * from './lib/types';\nexport { PorscheDesignSystemProvider } from './provider';\nexport { skipCheckForPorscheDesignSystemProviderDuringTests, useToastManager } from './hooks';\nexport { skipPorscheDesignSystemCDNRequestsDuringTests } from './utils';\n","@porsche-design-system/components-react/esm/utils.d.ts":"import type { ForwardedRef, MutableRefObject } from 'react';\nexport declare const getMergedClassName: (domClassName: string, oldClassName?: string, newClassName?: string) => string;\nexport declare const syncRef: (elementRef: MutableRefObject<HTMLElement | undefined>, ref: ForwardedRef<HTMLElement>) => (el: HTMLElement) => void;\nexport declare const skipPorscheDesignSystemCDNRequestsDuringTests: () => void;\n","@porsche-design-system/components-react/styles/_index.scss":"@import './../../components-js/styles';\n","@porsche-design-system/components-react/styles/package.json":"{\n  \"main\": \"cjs/index.cjs\",\n  \"module\": \"esm/index.mjs\",\n  \"types\": \"esm/index.d.ts\",\n  \"sideEffects\": false\n}\n","@porsche-design-system/components-react/esm/lib/types.d.ts":"export type Booleanish = boolean | \"true\" | \"false\";\nexport type AriaAttributes = {\n    /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n    \"aria-activedescendant\"?: string | undefined;\n    /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n    \"aria-atomic\"?: Booleanish | undefined;\n    /**\n     * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n     * presented if they are made.\n     */\n    \"aria-autocomplete\"?: \"none\" | \"inline\" | \"list\" | \"both\" | undefined;\n    /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n    /**\n     * Defines a string value that labels the current element, which is intended to be converted into Braille.\n     * @see aria-label.\n     */\n    \"aria-braillelabel\"?: string | undefined;\n    /**\n     * Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n     * @see aria-roledescription.\n     */\n    \"aria-brailleroledescription\"?: string | undefined;\n    \"aria-busy\"?: Booleanish | undefined;\n    /**\n     * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n     * @see aria-pressed @see aria-selected.\n     */\n    \"aria-checked\"?: boolean | \"false\" | \"mixed\" | \"true\" | undefined;\n    /**\n     * Defines the total number of columns in a table, grid, or treegrid.\n     * @see aria-colindex.\n     */\n    \"aria-colcount\"?: number | undefined;\n    /**\n     * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n     * @see aria-colcount @see aria-colspan.\n     */\n    \"aria-colindex\"?: number | undefined;\n    /**\n     * Defines a human readable text alternative of aria-colindex.\n     * @see aria-rowindextext.\n     */\n    \"aria-colindextext\"?: string | undefined;\n    /**\n     * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n     * @see aria-colindex @see aria-rowspan.\n     */\n    \"aria-colspan\"?: number | undefined;\n    /**\n     * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n     * @see aria-owns.\n     */\n    \"aria-controls\"?: string | undefined;\n    /** Indicates the element that represents the current item within a container or set of related elements. */\n    \"aria-current\"?: boolean | \"false\" | \"true\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\" | undefined;\n    /**\n     * Identifies the element (or elements) that describes the object.\n     * @see aria-labelledby\n     */\n    \"aria-describedby\"?: string | undefined;\n    /**\n     * Defines a string value that describes or annotates the current element.\n     * @see related aria-describedby.\n     */\n    \"aria-description\"?: string | undefined;\n    /**\n     * Identifies the element that provides a detailed, extended description for the object.\n     * @see aria-describedby.\n     */\n    \"aria-details\"?: string | undefined;\n    /**\n     * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n     * @see aria-hidden @see aria-readonly.\n     */\n    \"aria-disabled\"?: Booleanish | undefined;\n    /**\n     * Indicates what functions can be performed when a dragged object is released on the drop target.\n     * @deprecated in ARIA 1.1\n     */\n    \"aria-dropeffect\"?: \"none\" | \"copy\" | \"execute\" | \"link\" | \"move\" | \"popup\" | undefined;\n    /**\n     * Identifies the element that provides an error message for the object.\n     * @see aria-invalid @see aria-describedby.\n     */\n    \"aria-errormessage\"?: string | undefined;\n    /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n    \"aria-expanded\"?: Booleanish | undefined;\n    /**\n     * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n     * allows assistive technology to override the general default of reading in document source order.\n     */\n    \"aria-flowto\"?: string | undefined;\n    /**\n     * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n     * @deprecated in ARIA 1.1\n     */\n    \"aria-grabbed\"?: Booleanish | undefined;\n    /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n    \"aria-haspopup\"?: boolean | \"false\" | \"true\" | \"menu\" | \"listbox\" | \"tree\" | \"grid\" | \"dialog\" | undefined;\n    /**\n     * Indicates whether the element is exposed to an accessibility API.\n     * @see aria-disabled.\n     */\n    \"aria-hidden\"?: Booleanish | undefined;\n    /**\n     * Indicates the entered value does not conform to the format expected by the application.\n     * @see aria-errormessage.\n     */\n    \"aria-invalid\"?: boolean | \"false\" | \"true\" | \"grammar\" | \"spelling\" | undefined;\n    /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n    \"aria-keyshortcuts\"?: string | undefined;\n    /**\n     * Defines a string value that labels the current element.\n     * @see aria-labelledby.\n     */\n    \"aria-label\"?: string | undefined;\n    /**\n     * Identifies the element (or elements) that labels the current element.\n     * @see aria-describedby.\n     */\n    \"aria-labelledby\"?: string | undefined;\n    /** Defines the hierarchical level of an element within a structure. */\n    \"aria-level\"?: number | undefined;\n    /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n    \"aria-live\"?: \"off\" | \"assertive\" | \"polite\" | undefined;\n    /** Indicates whether an element is modal when displayed. */\n    \"aria-modal\"?: Booleanish | undefined;\n    /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n    \"aria-multiline\"?: Booleanish | undefined;\n    /** Indicates that the user may select more than one item from the current selectable descendants. */\n    \"aria-multiselectable\"?: Booleanish | undefined;\n    /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n    \"aria-orientation\"?: \"horizontal\" | \"vertical\" | undefined;\n    /**\n     * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n     * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n     * @see aria-controls.\n     */\n    \"aria-owns\"?: string | undefined;\n    /**\n     * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n     * A hint could be a sample value or a brief description of the expected format.\n     */\n    \"aria-placeholder\"?: string | undefined;\n    /**\n     * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n     * @see aria-setsize.\n     */\n    \"aria-posinset\"?: number | undefined;\n    /**\n     * Indicates the current \"pressed\" state of toggle buttons.\n     * @see aria-checked @see aria-selected.\n     */\n    \"aria-pressed\"?: boolean | \"false\" | \"mixed\" | \"true\" | undefined;\n    /**\n     * Indicates that the element is not editable, but is otherwise operable.\n     * @see aria-disabled.\n     */\n    \"aria-readonly\"?: Booleanish | undefined;\n    /**\n     * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n     * @see aria-atomic.\n     */\n    \"aria-relevant\"?: \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text\" | \"text additions\" | \"text removals\" | undefined;\n    /** Indicates that user input is required on the element before a form may be submitted. */\n    \"aria-required\"?: Booleanish | undefined;\n    /** Defines a human-readable, author-localized description for the role of an element. */\n    \"aria-roledescription\"?: string | undefined;\n    /**\n     * Defines the total number of rows in a table, grid, or treegrid.\n     * @see aria-rowindex.\n     */\n    \"aria-rowcount\"?: number | undefined;\n    /**\n     * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n     * @see aria-rowcount @see aria-rowspan.\n     */\n    \"aria-rowindex\"?: number | undefined;\n    /**\n     * Defines a human readable text alternative of aria-rowindex.\n     * @see aria-colindextext.\n     */\n    \"aria-rowindextext\"?: string | undefined;\n    /**\n     * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n     * @see aria-rowindex @see aria-colspan.\n     */\n    \"aria-rowspan\"?: number | undefined;\n    /**\n     * Indicates the current \"selected\" state of various widgets.\n     * @see aria-checked @see aria-pressed.\n     */\n    \"aria-selected\"?: Booleanish | undefined;\n    /**\n     * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n     * @see aria-posinset.\n     */\n    \"aria-setsize\"?: number | undefined;\n    /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n    \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\" | undefined;\n    /** Defines the maximum allowed value for a range widget. */\n    \"aria-valuemax\"?: number | undefined;\n    /** Defines the minimum allowed value for a range widget. */\n    \"aria-valuemin\"?: number | undefined;\n    /**\n     * Defines the current value for a range widget.\n     * @see aria-valuetext.\n     */\n    \"aria-valuenow\"?: number | undefined;\n    /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n    \"aria-valuetext\"?: string | undefined;\n    /** All the WAI-ARIA 1.1 role attribute values from https://w3.org/TR/wai-aria-1.1/#role_definitions */\n    role?: AriaRole;\n};\nexport type AriaRole = \"alert\" | \"alertdialog\" | \"application\" | \"article\" | \"banner\" | \"button\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"dialog\" | \"directory\" | \"document\" | \"feed\" | \"figure\" | \"form\" | \"grid\" | \"gridcell\" | \"group\" | \"heading\" | \"img\" | \"link\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"main\" | \"marquee\" | \"math\" | \"menu\" | \"menubar\" | \"menuitem\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"option\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"search\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"switch\" | \"tab\" | \"table\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\";\ndeclare const ICON_NAMES: readonly [\n    \"360\",\n    \"accessibility\",\n    \"active-cabin-ventilation\",\n    \"add\",\n    \"adjust\",\n    \"arrow-double-down\",\n    \"arrow-double-left\",\n    \"arrow-double-right\",\n    \"arrow-double-up\",\n    \"arrow-down\",\n    \"arrow-first\",\n    \"arrow-head-down\",\n    \"arrow-head-left\",\n    \"arrow-head-right\",\n    \"arrow-head-up\",\n    \"arrow-last\",\n    \"arrow-left\",\n    \"arrow-right\",\n    \"arrow-up\",\n    \"augmented-reality\",\n    \"battery-empty\",\n    \"battery-empty-co2\",\n    \"battery-empty-fuel\",\n    \"battery-full\",\n    \"bell\",\n    \"bookmark\",\n    \"bookmark-filled\",\n    \"broadcast\",\n    \"calculator\",\n    \"calendar\",\n    \"camera\",\n    \"car\",\n    \"car-battery\",\n    \"card\",\n    \"charging-active\",\n    \"charging-state\",\n    \"charging-station\",\n    \"chart\",\n    \"chat\",\n    \"check\",\n    \"city\",\n    \"climate\",\n    \"climate-control\",\n    \"clock\",\n    \"close\",\n    \"closed-caption\",\n    \"co2-class\",\n    \"co2-emission\",\n    \"compare\",\n    \"configurate\",\n    \"copy\",\n    \"country-road\",\n    \"cubic-capacity\",\n    \"delete\",\n    \"disable\",\n    \"document\",\n    \"download\",\n    \"duration\",\n    \"edit\",\n    \"email\",\n    \"error-filled\",\n    \"exclamation\",\n    \"external\",\n    \"filter\",\n    \"fingerprint\",\n    \"flash\",\n    \"fuel-station\",\n    \"garage\",\n    \"gift\",\n    \"globe\",\n    \"grid\",\n    \"heart\",\n    \"heart-filled\",\n    \"highway\",\n    \"home\",\n    \"horn\",\n    \"image\",\n    \"increase\",\n    \"information\",\n    \"information-filled\",\n    \"key\",\n    \"leaf\",\n    \"leather\",\n    \"light\",\n    \"list\",\n    \"locate\",\n    \"lock\",\n    \"lock-open\",\n    \"logo-apple-podcast\",\n    \"logo-baidu\",\n    \"logo-delicious\",\n    \"logo-digg\",\n    \"logo-facebook\",\n    \"logo-foursquare\",\n    \"logo-gmail\",\n    \"logo-google\",\n    \"logo-hatena\",\n    \"logo-instagram\",\n    \"logo-kaixin\",\n    \"logo-kakaotalk\",\n    \"logo-linkedin\",\n    \"logo-naver\",\n    \"logo-pinterest\",\n    \"logo-qq\",\n    \"logo-qq-share\",\n    \"logo-reddit\",\n    \"logo-skyrock\",\n    \"logo-sohu\",\n    \"logo-spotify\",\n    \"logo-tecent\",\n    \"logo-telegram\",\n    \"logo-tiktok\",\n    \"logo-tumblr\",\n    \"logo-twitter\",\n    \"logo-viber\",\n    \"logo-vk\",\n    \"logo-wechat\",\n    \"logo-weibo\",\n    \"logo-whatsapp\",\n    \"logo-x\",\n    \"logo-xing\",\n    \"logo-yahoo\",\n    \"logo-youku\",\n    \"logo-youtube\",\n    \"logout\",\n    \"map\",\n    \"menu-dots-horizontal\",\n    \"menu-dots-vertical\",\n    \"menu-lines\",\n    \"minus\",\n    \"mobile\",\n    \"moon\",\n    \"oil-can\",\n    \"parking-brake\",\n    \"parking-light\",\n    \"pause\",\n    \"phone\",\n    \"pin\",\n    \"pin-filled\",\n    \"play\",\n    \"plug\",\n    \"plus\",\n    \"preheating\",\n    \"printer\",\n    \"purchase\",\n    \"push-pin\",\n    \"push-pin-off\",\n    \"qr\",\n    \"question\",\n    \"racing-flag\",\n    \"refresh\",\n    \"replay\",\n    \"reset\",\n    \"roof-closed\",\n    \"roof-open\",\n    \"route\",\n    \"rss\",\n    \"save\",\n    \"screen\",\n    \"search\",\n    \"send\",\n    \"share\",\n    \"shopping-bag\",\n    \"shopping-bag-filled\",\n    \"shopping-cart\",\n    \"shopping-cart-filled\",\n    \"sidelights\",\n    \"snowflake\",\n    \"sort\",\n    \"stack\",\n    \"star\",\n    \"star-filled\",\n    \"steering-wheel\",\n    \"stopwatch\",\n    \"subtract\",\n    \"success\",\n    \"success-filled\",\n    \"sun\",\n    \"switch\",\n    \"tablet\",\n    \"tachometer\",\n    \"tire\",\n    \"truck\",\n    \"upload\",\n    \"user\",\n    \"user-filled\",\n    \"user-group\",\n    \"user-manual\",\n    \"video\",\n    \"view\",\n    \"view-off\",\n    \"volume-off\",\n    \"volume-up\",\n    \"warning\",\n    \"warning-filled\",\n    \"weight\",\n    \"wifi\",\n    \"work\",\n    \"wrench\",\n    \"wrenches\",\n    \"zoom-in\",\n    \"zoom-out\"\n];\nexport type IconName = typeof ICON_NAMES[number];\ndeclare const FORM_STATES: readonly [\n    \"none\",\n    \"error\",\n    \"success\"\n];\nexport type FormState = typeof FORM_STATES[number];\ndeclare const BUTTON_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\",\n    \"aria-expanded\",\n    \"aria-pressed\",\n    \"aria-haspopup\"\n];\nexport type ButtonAriaAttribute = typeof BUTTON_ARIA_ATTRIBUTES[number];\ndeclare const LINK_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\",\n    \"aria-current\"\n];\nexport type LinkAriaAttribute = (typeof LINK_ARIA_ATTRIBUTES)[number];\ndeclare const breakpoints: readonly [\n    \"base\",\n    \"xs\",\n    \"s\",\n    \"m\",\n    \"l\",\n    \"xl\",\n    \"xxl\"\n];\nexport type Breakpoint = (typeof breakpoints)[number];\nexport type BreakpointValues<T> = {\n    [key in Breakpoint]?: T;\n} & {\n    base: T;\n};\nexport type BreakpointCustomizable<T> = T | BreakpointValues<T>;\ndeclare const LINK_TARGETS: readonly [\n    \"_self\",\n    \"_blank\",\n    \"_parent\",\n    \"_top\"\n];\nexport type LinkTarget = (typeof LINK_TARGETS)[number] | string;\ndeclare const THEMES: readonly [\n    \"light\",\n    \"dark\",\n    \"auto\"\n];\nexport type Theme = (typeof THEMES)[number];\ndeclare const TILE_ASPECT_RATIOS: readonly [\n    \"1/1\",\n    \"4/3\",\n    \"3/4\",\n    \"16/9\",\n    \"9/16\",\n    \"1:1\",\n    \"4:3\",\n    \"3:4\",\n    \"16:9\",\n    \"9:16\"\n];\nexport type TileAspectRatio = (typeof TILE_ASPECT_RATIOS)[number];\ndeclare const TILE_SIZES: readonly [\n    \"medium\",\n    \"large\",\n    \"inherit\",\n    \"default\"\n];\nexport type TileSize = (typeof TILE_SIZES)[number];\ndeclare const TILE_WEIGHTS: readonly [\n    \"regular\",\n    \"semi-bold\"\n];\nexport type TileWeight = (typeof TILE_WEIGHTS)[number];\nexport type TileBackground = (typeof THEMES)[number];\ndeclare const TILE_ALIGNS: readonly [\n    \"top\",\n    \"bottom\"\n];\nexport type TileAlign = (typeof TILE_ALIGNS)[number];\ndeclare const SCROLLER_ARIA_ATTRIBUTES: readonly [\n    \"role\"\n];\nexport type ScrollerAriaAttribute = (typeof SCROLLER_ARIA_ATTRIBUTES)[number];\ndeclare const GRADIENT_COLOR_SCHEMES: readonly [\n    \"default\",\n    \"surface\"\n];\n/** @deprecated */\nexport type ScrollerGradientColorScheme = (typeof GRADIENT_COLOR_SCHEMES)[number];\ndeclare const GRADIENT_COLORS: readonly [\n    \"background-base\",\n    \"background-surface\"\n];\nexport type ScrollerGradientColor = (typeof GRADIENT_COLORS)[number];\nexport type ScrollerScrollToPosition = {\n    scrollPosition: number;\n    isSmooth?: boolean;\n} | string;\ndeclare const SCROLL_INDICATOR_POSITIONS: readonly [\n    \"top\",\n    \"center\"\n];\n/** @deprecated */\nexport type ScrollerScrollIndicatorPosition = (typeof SCROLL_INDICATOR_POSITIONS)[number];\nexport type ScrollerAlignScrollIndicator = ScrollerScrollIndicatorPosition;\ndeclare const SELECT_DROPDOWN_DIRECTIONS: readonly [\n    \"down\",\n    \"up\",\n    \"auto\"\n];\nexport type SelectComponentsDropdownDirection = (typeof SELECT_DROPDOWN_DIRECTIONS)[number];\ndeclare const HEADING_SIZES: readonly [\n    \"small\",\n    \"medium\",\n    \"large\",\n    \"x-large\",\n    \"xx-large\",\n    \"inherit\"\n];\nexport type HeadingSize = (typeof HEADING_SIZES)[number];\ndeclare const HEADING_TAGS: readonly [\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\"\n];\nexport type HeadingTag = typeof HEADING_TAGS[number];\ndeclare const TEXT_SIZES: readonly [\n    \"xx-small\",\n    \"x-small\",\n    \"small\",\n    \"medium\",\n    \"large\",\n    \"x-large\",\n    \"inherit\"\n];\nexport type TextSize = (typeof TEXT_SIZES)[number];\ndeclare const TYPOGRAPHY_ALIGNS: readonly [\n    \"start\",\n    \"center\",\n    \"end\",\n    \"left\",\n    \"right\"\n];\nexport type TypographyAlign = (typeof TYPOGRAPHY_ALIGNS)[number];\ndeclare const TYPOGRAPHY_TEXT_COLORS: readonly [\n    \"primary\",\n    \"contrast-low\",\n    \"contrast-medium\",\n    \"contrast-high\",\n    \"notification-success\",\n    \"notification-warning\",\n    \"notification-error\",\n    \"notification-info\",\n    \"inherit\",\n    \"brand\",\n    \"default\",\n    \"neutral-contrast-low\",\n    \"neutral-contrast-medium\",\n    \"neutral-contrast-high\",\n    \"notification-neutral\"\n];\nexport type TypographyTextColor = (typeof TYPOGRAPHY_TEXT_COLORS)[number];\ndeclare const TYPOGRAPHY_TEXT_WEIGHTS: readonly [\n    \"regular\",\n    \"semi-bold\",\n    \"bold\",\n    \"thin\",\n    \"semibold\"\n];\nexport type TypographyTextWeight = (typeof TYPOGRAPHY_TEXT_WEIGHTS)[number];\ndeclare const ALIGN_LABELS: readonly [\n    \"start\",\n    \"end\",\n    \"left\",\n    \"right\"\n];\nexport type AlignLabel = (typeof ALIGN_LABELS)[number];\ndeclare const BUTTON_TYPES: readonly [\n    \"button\",\n    \"submit\",\n    \"reset\"\n];\nexport type ButtonType = typeof BUTTON_TYPES[number];\ndeclare const LINK_BUTTON_VARIANTS: readonly [\n    \"primary\",\n    \"secondary\",\n    \"tertiary\"\n];\nexport type LinkButtonVariant = typeof LINK_BUTTON_VARIANTS[number];\nexport type LinkButtonIconName = IconName | \"none\";\nexport type ButtonVariant = LinkButtonVariant;\nexport type LinkVariant = LinkButtonVariant;\nexport type PorscheDesignSystem = {\n    [key: `${number}.${number}.${number}${`-rc.${number}` | \"\"}`]: {\n        prefixes: string[];\n        isReady: () => Promise<void>;\n        readyResolve: () => void;\n    };\n    cdn: {\n        url: string;\n        prefixes: string[];\n    };\n};\nexport type SelectedAriaAttributes<T extends keyof AriaAttributes> = Pick<AriaAttributes, T>;\ndeclare const ACCORDION_SIZES: readonly [\n    \"small\",\n    \"medium\"\n];\nexport type AccordionSize = (typeof ACCORDION_SIZES)[number];\n/** @deprecated */\nexport type AccordionUpdateEvent = {\n    open: boolean;\n};\nexport type AccordionUpdateEventDetail = AccordionUpdateEvent;\n/** @deprecated */\nexport type AccordionTag = HeadingTag;\nexport type AccordionHeadingTag = HeadingTag;\ndeclare const INLINE_NOTIFICATION_STATES: readonly [\n    \"success\",\n    \"info\",\n    \"warning\",\n    \"error\",\n    \"neutral\"\n];\nexport type InlineNotificationState = (typeof INLINE_NOTIFICATION_STATES)[number];\nexport type InlineNotificationActionIcon = IconName;\nexport type InlineNotificationHeadingTag = HeadingTag;\ndeclare const BANNER_STATES: readonly [\n    \"info\",\n    \"warning\",\n    \"error\",\n    \"neutral\"\n];\nexport type BannerState = (typeof BANNER_STATES)[number];\ndeclare const BANNER_WIDTHS: readonly [\n    \"extended\",\n    \"basic\",\n    \"fluid\"\n];\n/** @deprecated */\nexport type BannerWidth = (typeof BANNER_WIDTHS)[number];\nexport type BannerHeadingTag = InlineNotificationHeadingTag;\nexport type ButtonIcon = LinkButtonIconName;\ndeclare const GROUP_DIRECTIONS: readonly [\n    \"row\",\n    \"column\"\n];\nexport type GroupDirection = (typeof GROUP_DIRECTIONS)[number];\nexport type ButtonGroupDirection = GroupDirection;\nexport type ButtonPureType = ButtonType;\nexport type ButtonPureIcon = LinkButtonIconName;\nexport type ButtonPureAriaAttribute = ButtonAriaAttribute;\nexport type ButtonPureAlignLabel = AlignLabel;\nexport type ButtonPureWeight = TypographyTextWeight;\nexport type ButtonPureSize = TextSize;\nexport type ButtonTileAriaAttribute = ButtonAriaAttribute;\nexport type ButtonTileIcon = LinkButtonIconName;\nexport type ButtonTileType = ButtonType;\nexport type ButtonTileAspectRatio = TileAspectRatio;\nexport type ButtonTileSize = TileSize;\nexport type ButtonTileBackground = TileBackground;\nexport type ButtonTileWeight = TileWeight;\nexport type ButtonTileAlign = TileAlign;\ndeclare const CANVAS_SIDEBAR_WIDTHS: readonly [\n    \"medium\",\n    \"large\"\n];\nexport type CanvasSidebarWidth = (typeof CANVAS_SIDEBAR_WIDTHS)[number];\nexport type CanvasSidebarStartWidth = CanvasSidebarWidth;\nexport type CanvasSidebarEndWidth = CanvasSidebarWidth;\ndeclare const CAROUSEL_WIDTHS: readonly [\n    \"basic\",\n    \"extended\"\n];\nexport type CarouselWidth = (typeof CAROUSEL_WIDTHS)[number];\ndeclare const CAROUSEL_ALIGN_HEADERS: readonly [\n    \"start\",\n    \"center\",\n    \"left\"\n];\nexport type CarouselAlignHeader = (typeof CAROUSEL_ALIGN_HEADERS)[number];\nexport type CarouselHeadingSize = Extract<HeadingSize, \"x-large\" | \"xx-large\">;\ndeclare const CAROUSEL_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\"\n];\nexport type CarouselAriaAttribute = (typeof CAROUSEL_ARIA_ATTRIBUTES)[number];\nexport type CarouselInternationalization = Partial<Record<\"prev\" | \"next\" | \"first\" | \"last\" | \"slideLabel\" | \"slide\", string>>;\n/** @deprecated */\nexport type CarouselUpdateEvent = {\n    activeIndex: number;\n    previousIndex: number;\n};\nexport type CarouselUpdateEventDetail = CarouselUpdateEvent;\nexport type CheckboxWrapperState = FormState;\ndeclare const CONTENT_WRAPPER_BACKGROUND_COLORS: readonly [\n    \"transparent\",\n    \"default\"\n];\nexport type ContentWrapperBackgroundColor = typeof CONTENT_WRAPPER_BACKGROUND_COLORS[number];\ndeclare const CONTENT_WRAPPER_WIDTHS: readonly [\n    \"narrow\",\n    \"basic\",\n    \"extended\",\n    \"fluid\",\n    \"full\"\n];\nexport type ContentWrapperWidth = typeof CONTENT_WRAPPER_WIDTHS[number];\nexport type CrestTarget = LinkTarget;\nexport type CrestAriaAttribute = LinkAriaAttribute;\ndeclare const DISPLAY_TAGS: readonly [\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\"\n];\nexport type DisplayTag = (typeof DISPLAY_TAGS)[number];\ndeclare const DISPLAY_SIZES: readonly [\n    \"small\",\n    \"medium\",\n    \"large\",\n    \"inherit\"\n];\nexport type DisplaySize = (typeof DISPLAY_SIZES)[number];\ndeclare const DISPLAY_COLORS: readonly [\n    \"primary\",\n    \"inherit\"\n];\nexport type DisplayColor = (typeof DISPLAY_COLORS)[number];\nexport type DisplayAlign = TypographyAlign;\ndeclare const DIVIDER_COLORS: readonly [\n    \"contrast-low\",\n    \"contrast-medium\",\n    \"contrast-high\",\n    \"neutral-contrast-high\",\n    \"neutral-contrast-medium\",\n    \"neutral-contrast-low\"\n];\nexport type DividerColor = typeof DIVIDER_COLORS[number];\ndeclare const DIVIDER_DIRECTIONS: readonly [\n    \"vertical\",\n    \"horizontal\"\n];\nexport type DividerDirection = typeof DIVIDER_DIRECTIONS[number];\nexport type DividerOrientation = DividerDirection;\ndeclare const FIELDSET_LABEL_SIZES: readonly [\n    \"small\",\n    \"medium\"\n];\nexport type FieldsetLabelSize = (typeof FIELDSET_LABEL_SIZES)[number];\nexport type FieldsetState = FormState;\nexport type FieldsetWrapperLabelSize = FieldsetLabelSize;\nexport type FieldsetWrapperState = FieldsetState;\nexport type FlexInline = boolean;\ndeclare const FLEX_WRAPS: readonly [\n    \"nowrap\",\n    \"wrap\",\n    \"wrap-reverse\"\n];\nexport type FlexWrap = typeof FLEX_WRAPS[number];\ndeclare const FLEX_DIRECTIONS: readonly [\n    \"row\",\n    \"row-reverse\",\n    \"column\",\n    \"column-reverse\"\n];\nexport type FlexDirection = typeof FLEX_DIRECTIONS[number];\ndeclare const FLEX_JUSTIFY_CONTENTS: readonly [\n    \"flex-start\",\n    \"flex-end\",\n    \"center\",\n    \"space-between\",\n    \"space-around\",\n    \"space-evenly\"\n];\nexport type FlexJustifyContent = typeof FLEX_JUSTIFY_CONTENTS[number];\ndeclare const FLEX_ALIGN_ITEMS: readonly [\n    \"stretch\",\n    \"flex-start\",\n    \"flex-end\",\n    \"center\",\n    \"baseline\"\n];\nexport type FlexAlignItems = typeof FLEX_ALIGN_ITEMS[number];\ndeclare const FLEX_ALIGN_CONTENTS: readonly [\n    \"stretch\",\n    \"flex-start\",\n    \"flex-end\",\n    \"center\",\n    \"space-between\",\n    \"space-around\",\n    \"space-evenly\"\n];\nexport type FlexAlignContent = typeof FLEX_ALIGN_CONTENTS[number];\ndeclare const FLEX_ITEM_WIDTHS: readonly [\n    \"auto\",\n    \"one-quarter\",\n    \"one-third\",\n    \"half\",\n    \"two-thirds\",\n    \"three-quarters\",\n    \"full\"\n];\nexport type FlexItemWidth = typeof FLEX_ITEM_WIDTHS[number];\ndeclare const FLEX_ITEM_OFFSETS: readonly [\n    \"none\",\n    \"one-quarter\",\n    \"one-third\",\n    \"half\",\n    \"two-thirds\",\n    \"three-quarters\"\n];\nexport type FlexItemOffset = typeof FLEX_ITEM_OFFSETS[number];\ndeclare const FLEX_ITEM_ALIGN_SELFS: readonly [\n    \"auto\",\n    \"flex-start\",\n    \"flex-end\",\n    \"center\",\n    \"baseline\",\n    \"stretch\"\n];\nexport type FlexItemAlignSelf = typeof FLEX_ITEM_ALIGN_SELFS[number];\ndeclare const FLEX_ITEM_GROWS: readonly [\n    0,\n    1\n];\nexport type FlexItemGrow = typeof FLEX_ITEM_GROWS[number];\ndeclare const FLEX_ITEM_SHRINKS: readonly [\n    0,\n    1\n];\nexport type FlexItemShrink = typeof FLEX_ITEM_SHRINKS[number];\ndeclare const FLEX_ITEM_FLEXS: readonly [\n    \"initial\",\n    \"auto\",\n    \"none\",\n    \"equal\"\n];\nexport type FlexItemFlex = typeof FLEX_ITEM_FLEXS[number];\ndeclare const FLYOUT_POSITIONS: readonly [\n    \"start\",\n    \"end\",\n    \"left\",\n    \"right\"\n];\nexport type FlyoutPosition = (typeof FLYOUT_POSITIONS)[number];\ndeclare const FLYOUT_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\"\n];\nexport type FlyoutAriaAttribute = (typeof FLYOUT_ARIA_ATTRIBUTES)[number];\nexport type FlyoutMotionVisibleEndEventDetail = TransitionEvent;\nexport type FlyoutMotionHiddenEndEventDetail = TransitionEvent;\ndeclare const FLYOUT_MULTILEVEL_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\"\n];\nexport type FlyoutMultilevelAriaAttribute = (typeof FLYOUT_MULTILEVEL_ARIA_ATTRIBUTES)[number];\nexport type FlyoutMultilevelUpdate = {\n    activeIdentifier: string;\n};\n/** @deprecated */\nexport type FlyoutMultilevelUpdateEvent = FlyoutMultilevelUpdate;\nexport type FlyoutMultilevelUpdateEventDetail = FlyoutMultilevelUpdateEvent;\ndeclare const GRID_DIRECTIONS: readonly [\n    \"row\",\n    \"row-reverse\",\n    \"column\",\n    \"column-reverse\"\n];\nexport type GridDirection = typeof GRID_DIRECTIONS[number];\ndeclare const GRID_WRAPS: readonly [\n    \"nowrap\",\n    \"wrap\"\n];\nexport type GridWrap = typeof GRID_WRAPS[number];\ndeclare const GRID_GUTTERS: readonly [\n    16,\n    24,\n    36\n];\nexport type GridGutter = typeof GRID_GUTTERS[number];\ndeclare const GRID_ITEM_SIZES: readonly [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12\n];\nexport type GridItemSize = typeof GRID_ITEM_SIZES[number];\ndeclare const GRID_ITEM_OFFSETS: readonly [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11\n];\nexport type GridItemOffset = typeof GRID_ITEM_OFFSETS[number];\ndeclare const HEADING_COLORS: readonly [\n    \"primary\",\n    \"inherit\"\n];\nexport type HeadingColor = (typeof HEADING_COLORS)[number];\nexport type HeadingAlign = TypographyAlign;\ndeclare const HEADLINE_VARIANTS: readonly [\n    \"large-title\",\n    \"headline-1\",\n    \"headline-2\",\n    \"headline-3\",\n    \"headline-4\",\n    \"headline-5\"\n];\nexport type HeadlineVariantType = (typeof HEADLINE_VARIANTS)[number];\nexport type HeadlineVariantCustom = Exclude<BreakpointCustomizable<TextSize>, TextSize>;\nexport type HeadlineVariant = HeadlineVariantType | HeadlineVariantCustom | Extract<TextSize, \"inherit\">;\ndeclare const HEADLINE_TAGS: readonly [\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\"\n];\nexport type HeadlineTag = (typeof HEADLINE_TAGS)[number];\ndeclare const HEADLINE_COLORS: readonly [\n    \"primary\",\n    \"default\",\n    \"inherit\"\n];\nexport type HeadlineColor = (typeof HEADLINE_COLORS)[number];\nexport type HeadlineAlign = TypographyAlign;\ndeclare const ICON_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\"\n];\nexport type IconAriaAttribute = (typeof ICON_ARIA_ATTRIBUTES)[number];\nexport type IconSize = TextSize;\ndeclare const ICON_COLORS: readonly [\n    \"primary\",\n    \"contrast-low\",\n    \"contrast-medium\",\n    \"contrast-high\",\n    \"notification-success\",\n    \"notification-warning\",\n    \"notification-error\",\n    \"notification-info\",\n    \"inherit\",\n    \"brand\",\n    \"default\",\n    \"neutral-contrast-low\",\n    \"neutral-contrast-medium\",\n    \"neutral-contrast-high\",\n    \"notification-neutral\",\n    \"state-disabled\"\n];\nexport type IconColor = (typeof ICON_COLORS)[number];\nexport type LinkIcon = LinkButtonIconName;\nexport type LinkPureIcon = LinkButtonIconName;\nexport type LinkPureAriaAttribute = LinkAriaAttribute;\nexport type LinkPureAlignLabel = AlignLabel;\nexport type LinkPureWeight = TypographyTextWeight;\nexport type LinkPureSize = TextSize;\nexport type LinkPureTarget = LinkTarget;\nexport type LinkSocialIcon = Extract<IconName, \"logo-facebook\" | \"logo-google\" | \"logo-instagram\" | \"logo-linkedin\" | \"logo-pinterest\" | \"logo-twitter\" | \"logo-wechat\" | \"logo-whatsapp\" | \"logo-xing\" | \"logo-youtube\" | \"logo-baidu\" | \"logo-delicious\" | \"logo-digg\" | \"logo-foursquare\" | \"logo-gmail\" | \"logo-hatena\" | \"logo-kaixin\" | \"logo-kakaotalk\" | \"logo-naver\" | \"logo-qq-share\" | \"logo-qq\" | \"logo-reddit\" | \"logo-skyrock\" | \"logo-sohu\" | \"logo-tecent\" | \"logo-telegram\" | \"logo-tiktok\" | \"logo-tumblr\" | \"logo-viber\" | \"logo-vk\" | \"logo-weibo\" | \"logo-yahoo\" | \"logo-youku\">;\nexport type LinkSocialTarget = LinkTarget;\nexport type LinkTileTarget = LinkTarget;\nexport type LinkTileAriaAttribute = LinkAriaAttribute;\nexport type LinkTileAspectRatio = TileAspectRatio;\nexport type LinkTileSize = TileSize;\nexport type LinkTileBackground = TileBackground;\nexport type LinkTileAlign = TileAlign;\ndeclare const LINK_TILE_WEIGHTS: readonly [\n    \"regular\",\n    \"semi-bold\",\n    \"semibold\"\n];\nexport type LinkTileWeight = (typeof LINK_TILE_WEIGHTS)[number];\ndeclare const LINK_TILE_MODEL_SIGNATURE_MODELS: readonly [\n    \"718\",\n    \"911\",\n    \"boxster\",\n    \"cayenne\",\n    \"cayman\",\n    \"macan\",\n    \"panamera\",\n    \"taycan\",\n    \"turbo-s\",\n    \"turbo\"\n];\nexport type LinkTileModelSignatureModel = (typeof LINK_TILE_MODEL_SIGNATURE_MODELS)[number];\ndeclare const LINK_TILE_MODEL_SIGNATURE_HEADING_TAGS: readonly [\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\"\n];\nexport type LinkTileModelSignatureHeadingTag = (typeof LINK_TILE_MODEL_SIGNATURE_HEADING_TAGS)[number];\nexport type LinkTileModelSignatureWeight = TileWeight;\nexport type LinkTileModelSignatureAspectRatio = TileAspectRatio;\nexport type LinkTileModelSignatureLinkDirection = GroupDirection;\nexport type LinkTileProductTarget = LinkTarget;\n/** @deprecated */\nexport type LinkTileProductLikeEvent = {\n    liked: boolean;\n};\nexport type LinkTileProductLikeEventDetail = LinkTileProductLikeEvent;\ndeclare const TILE_PRODUCT_ASPECT_RATIOS: readonly [\n    \"3:4\",\n    \"9:16\"\n];\nexport type LinkTileProductAspectRatio = Extract<TileAspectRatio, (typeof TILE_PRODUCT_ASPECT_RATIOS)[number]>;\ndeclare const MODEL_SIGNATURES_MANIFEST: {\n    \"718\": {\n        src: string;\n        width: number;\n        height: number;\n    };\n    \"911\": {\n        src: string;\n        width: number;\n        height: number;\n    };\n    boxster: {\n        src: string;\n        width: number;\n        height: number;\n    };\n    cayenne: {\n        src: string;\n        width: number;\n        height: number;\n    };\n    cayman: {\n        src: string;\n        width: number;\n        height: number;\n    };\n    macan: {\n        src: string;\n        width: number;\n        height: number;\n    };\n    panamera: {\n        src: string;\n        width: number;\n        height: number;\n    };\n    taycan: {\n        src: string;\n        width: number;\n        height: number;\n    };\n    \"turbo-s\": {\n        src: string;\n        width: number;\n        height: number;\n    };\n    turbo: {\n        src: string;\n        width: number;\n        height: number;\n    };\n};\ndeclare const MARQUE_VARIANTS: readonly [\n    \"75-years\",\n    \"default\"\n];\nexport type MarqueVariant = (typeof MARQUE_VARIANTS)[number];\nexport type MarqueTarget = LinkTarget;\nexport type MarqueAriaAttribute = LinkAriaAttribute;\ndeclare const MARQUE_SIZES: readonly [\n    \"responsive\",\n    \"small\",\n    \"medium\"\n];\nexport type MarqueSize = typeof MARQUE_SIZES[number];\ndeclare const BACKDROPS: readonly [\n    \"blur\",\n    \"shading\"\n];\nexport type Backdrop = (typeof BACKDROPS)[number];\ndeclare const MODAL_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\"\n];\nexport type ModalAriaAttribute = (typeof MODAL_ARIA_ATTRIBUTES)[number];\nexport type ModalBackdrop = Backdrop;\nexport type ModalMotionVisibleEndEventDetail = TransitionEvent;\nexport type ModalMotionHiddenEndEventDetail = TransitionEvent;\ndeclare const MODEL_SIGNATURE_FETCH_PRIORITY: readonly [\n    \"low\",\n    \"high\",\n    \"auto\"\n];\nexport type ModelSignatureFetchPriority = (typeof MODEL_SIGNATURE_FETCH_PRIORITY)[number];\ndeclare const MODEL_SIGNATURE_SIZES: readonly [\n    \"small\",\n    \"inherit\"\n];\nexport type ModelSignatureSize = (typeof MODEL_SIGNATURE_SIZES)[number];\nexport type ModelSignatureModel = keyof typeof MODEL_SIGNATURES_MANIFEST;\ndeclare const MODEL_SIGNATURE_COLORS: readonly [\n    \"primary\",\n    \"contrast-low\",\n    \"contrast-medium\",\n    \"contrast-high\",\n    \"inherit\"\n];\nexport type ModelSignatureColor = (typeof MODEL_SIGNATURE_COLORS)[number];\nexport type MultiSelectState = FormState;\nexport type MultiSelectDropdownDirection = SelectComponentsDropdownDirection;\n/** @deprecated */\nexport type MultiSelectUpdateEvent = {\n    name: string;\n    value: string[];\n};\nexport type MultiSelectUpdateEventDetail = MultiSelectUpdateEvent;\ndeclare const PAGINATION_NUMBER_OF_PAGE_LINKS: readonly [\n    5,\n    7\n];\n/** @deprecated */\nexport type PaginationMaxNumberOfPageLinks = (typeof PAGINATION_NUMBER_OF_PAGE_LINKS)[number];\n/** @deprecated */\nexport type PaginationUpdateEvent = {\n    page: number;\n    previousPage: number;\n};\nexport type PaginationUpdateEventDetail = PaginationUpdateEvent;\nexport type PaginationInternationalization = Partial<Record<\"root\" | \"prev\" | \"next\" | \"page\", string>>;\ndeclare const PIN_CODE_TYPES: readonly [\n    \"number\",\n    \"password\"\n];\nexport type PinCodeType = (typeof PIN_CODE_TYPES)[number];\ndeclare const PIN_CODE_LENGTHS: readonly [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6\n];\nexport type PinCodeLength = (typeof PIN_CODE_LENGTHS)[number];\n/** @deprecated */\nexport type PinCodeUpdateEvent = {\n    value: string;\n    isComplete: boolean;\n};\nexport type PinCodeUpdateEventDetail = PinCodeUpdateEvent;\nexport type PinCodeState = FormState;\ndeclare const POPOVER_DIRECTIONS: readonly [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\"\n];\nexport type PopoverDirection = (typeof POPOVER_DIRECTIONS)[number];\ndeclare const POPOVER_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\"\n];\nexport type PopoverAriaAttribute = (typeof POPOVER_ARIA_ATTRIBUTES)[number];\nexport type RadioButtonWrapperState = FormState;\ndeclare const SEGMENTED_CONTROL_BACKGROUND_COLORS: readonly [\n    \"background-surface\",\n    \"background-default\"\n];\nexport type SegmentedControlBackgroundColor = (typeof SEGMENTED_CONTROL_BACKGROUND_COLORS)[number];\n/** @deprecated */\nexport type SegmentedControlUpdateEvent = {\n    value: string | number;\n};\nexport type SegmentedControlUpdateEventDetail = SegmentedControlUpdateEvent;\ndeclare const SEGMENTED_CONTROL_COLUMNS: (string | number)[];\nexport type SegmentedControlColumns = (typeof SEGMENTED_CONTROL_COLUMNS)[number];\nexport type SegmentedControlItemIcon = LinkButtonIconName;\ndeclare const SEGMENTED_CONTROL_ITEM_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\"\n];\nexport type SegmentedControlItemAriaAttribute = (typeof SEGMENTED_CONTROL_ITEM_ARIA_ATTRIBUTES)[number];\nexport type SelectState = FormState;\nexport type SelectDropdownDirection = SelectComponentsDropdownDirection;\nexport type SelectUpdateEventDetail = {\n    name: string;\n    value: string;\n};\ndeclare const DROPDOWN_DIRECTIONS: readonly [\n    \"down\",\n    \"up\",\n    \"auto\"\n];\nexport type SelectWrapperDropdownDirection = (typeof DROPDOWN_DIRECTIONS)[number];\nexport type SelectWrapperState = FormState;\ndeclare const SPINNER_SIZES: readonly [\n    \"small\",\n    \"medium\",\n    \"large\",\n    \"inherit\"\n];\nexport type SpinnerSize = typeof SPINNER_SIZES[number];\ndeclare const SPINNER_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\"\n];\nexport type SpinnerAriaAttribute = typeof SPINNER_ARIA_ATTRIBUTES[number];\ndeclare const STEPPER_HORIZONTAL_SIZES: readonly [\n    \"small\",\n    \"medium\"\n];\nexport type StepperHorizontalSize = (typeof STEPPER_HORIZONTAL_SIZES)[number];\n/** @deprecated */\nexport type StepperHorizontalUpdateEvent = {\n    activeStepIndex: number;\n};\nexport type StepperHorizontalUpdateEventDetail = StepperHorizontalUpdateEvent;\ndeclare const STEPPER_ITEM_STATES: readonly [\n    \"current\",\n    \"complete\",\n    \"warning\"\n];\nexport type StepperHorizontalItemState = (typeof STEPPER_ITEM_STATES)[number];\nexport type SwitchAlignLabel = AlignLabel;\n/** @deprecated */\nexport type SwitchUpdateEvent = {\n    checked: boolean;\n};\nexport type SwitchUpdateEventDetail = SwitchUpdateEvent;\nexport type Direction = \"asc\" | \"desc\";\nexport type TableHeadCellSort = {\n    id: string;\n    active?: boolean;\n    direction?: Direction;\n};\n/** @deprecated */\nexport type TableUpdateEvent = TableHeadCellSort;\nexport type TableUpdateEventDetail = TableUpdateEvent;\ndeclare const TABS_BAR_SIZES: readonly [\n    \"small\",\n    \"medium\"\n];\nexport type TabsBarSize = (typeof TABS_BAR_SIZES)[number];\ndeclare const TABS_BAR_WEIGHTS: readonly [\n    \"regular\",\n    \"semi-bold\",\n    \"semibold\"\n];\nexport type TabsBarWeight = (typeof TABS_BAR_WEIGHTS)[number];\n/** @deprecated */\nexport type TabsBarUpdateEvent = {\n    activeTabIndex: number;\n};\nexport type TabsBarUpdateEventDetail = TabsBarUpdateEvent;\n/** @deprecated */\nexport type TabsBarGradientColorScheme = ScrollerGradientColorScheme;\nexport type TabsBarGradientColor = ScrollerGradientColor;\nexport type TabsSize = TabsBarSize;\nexport type TabsWeight = TabsBarWeight;\n/** @deprecated */\nexport type TabsGradientColorScheme = TabsBarGradientColorScheme;\nexport type TabsGradientColor = TabsBarGradientColor;\n/** @deprecated */\nexport type TabsUpdateEvent = TabsBarUpdateEvent;\nexport type TabsUpdateEventDetail = TabsUpdateEvent;\ndeclare const TAG_DISMISSIBLE_COLORS: readonly [\n    \"background-base\",\n    \"background-surface\",\n    \"background-default\"\n];\nexport type TagDismissibleColor = typeof TAG_DISMISSIBLE_COLORS[number];\ndeclare const TAG_DISMISSIBLE_ARIA_ATTRIBUTES: readonly [\n    \"aria-label\"\n];\nexport type TagDismissibleAriaAttribute = typeof TAG_DISMISSIBLE_ARIA_ATTRIBUTES[number];\nexport type TagIcon = IconName;\ndeclare const TAG_COLORS: readonly [\n    \"background-base\",\n    \"background-surface\",\n    \"background-default\",\n    \"background-frosted\",\n    \"primary\",\n    \"notification-info-soft\",\n    \"notification-warning-soft\",\n    \"notification-success-soft\",\n    \"notification-error-soft\",\n    \"neutral-contrast-high\",\n    \"notification-neutral\",\n    \"notification-warning\",\n    \"notification-success\",\n    \"notification-error\"\n];\nexport type TagColor = (typeof TAG_COLORS)[number];\ndeclare const TEXT_TAGS: readonly [\n    \"p\",\n    \"span\",\n    \"div\",\n    \"address\",\n    \"blockquote\",\n    \"figcaption\",\n    \"cite\",\n    \"time\",\n    \"legend\"\n];\nexport type TextTag = (typeof TEXT_TAGS)[number];\nexport type TextAlign = TypographyAlign;\nexport type TextColor = TypographyTextColor;\nexport type TextWeight = TypographyTextWeight;\ndeclare const UNIT_POSITIONS: readonly [\n    \"prefix\",\n    \"suffix\"\n];\nexport type TextFieldWrapperUnitPosition = (typeof UNIT_POSITIONS)[number];\nexport type TextFieldWrapperActionIcon = Extract<IconName, \"locate\">;\nexport type TextFieldWrapperState = FormState;\ndeclare const LIST_TYPES: readonly [\n    \"unordered\",\n    \"ordered\"\n];\n/** @deprecated */\nexport type TextListListType = typeof LIST_TYPES[number];\ndeclare const ORDER_TYPES: readonly [\n    \"numbered\",\n    \"alphabetically\"\n];\n/** @deprecated */\nexport type TextListOrderType = typeof ORDER_TYPES[number];\ndeclare const TEXT_LIST_TYPES: readonly [\n    \"unordered\",\n    \"numbered\",\n    \"alphabetically\"\n];\nexport type TextListType = typeof TEXT_LIST_TYPES[number];\nexport type TextareaWrapperState = FormState;\ndeclare const TOAST_STATES: readonly [\n    \"info\",\n    \"success\",\n    \"neutral\"\n];\nexport type ToastState = typeof TOAST_STATES[number];\nexport type ToastMessage = {\n    text: string;\n    state?: ToastState;\n};\ndeclare const WORDMARK_SIZES: readonly [\n    \"small\",\n    \"inherit\"\n];\nexport type WordmarkSize = (typeof WORDMARK_SIZES)[number];\nexport type WordmarkTarget = LinkTarget;\nexport type WordmarkAriaAttribute = LinkAriaAttribute;\nexport {};\n","@porsche-design-system/components-react/styles/cjs/index.cjs":"'use strict';\n\nvar styles = require('./../../../components-js/styles');\n\n\n\nObject.keys(styles).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {\n\t\tenumerable: true,\n\t\tget: function () { return styles[k]; }\n\t});\n});\n","@porsche-design-system/components-react/styles/esm/index.d.ts":"export * from './../../../components-js/styles';\n","@porsche-design-system/components-react/cjs/lib/components/accordion.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PAccordion = react.forwardRef(({ compact, heading, headingTag = 'h2', onAccordionChange, onUpdate, open, size = 'small', sticky, tag, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'accordionChange', onAccordionChange);\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-accordion');\n    const propsToSync = [compact, heading, headingTag, open, size, sticky, tag, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['compact', 'heading', 'headingTag', 'open', 'size', 'sticky', 'tag', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PAccordion = PAccordion;\n","@porsche-design-system/components-react/cjs/lib/components/banner.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PBanner = react.forwardRef(({ description = '', dismissButton = true, heading = '', headingTag = 'h5', onDismiss, open = false, persistent, state = 'info', theme, width, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'dismiss', onDismiss);\n    const WebComponentTag = hooks.usePrefix('p-banner');\n    const propsToSync = [description, dismissButton, heading, headingTag, open, persistent, state, theme || hooks.useTheme(), width];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['description', 'dismissButton', 'heading', 'headingTag', 'open', 'persistent', 'state', 'theme', 'width'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PBanner = PBanner;\n","@porsche-design-system/components-react/cjs/lib/components/button-group.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PButtonGroup = react.forwardRef(({ direction = { base: 'column', xs: 'row' }, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-button-group');\n    hooks.useBrowserLayoutEffect(() => {\n        elementRef.current.direction = direction;\n    }, [direction]);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PButtonGroup = PButtonGroup;\n","@porsche-design-system/components-react/cjs/lib/components/button-pure.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PButtonPure = react.forwardRef(({ active = false, alignLabel = 'end', aria, disabled = false, hideLabel = false, icon = 'arrow-right', iconSource, loading = false, name, size = 'small', stretch = false, theme, type = 'submit', underline = false, value, weight = 'regular', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-button-pure');\n    const propsToSync = [active, alignLabel, aria, disabled, hideLabel, icon, iconSource, loading, name, size, stretch, theme || hooks.useTheme(), type, underline, value, weight];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['active', 'alignLabel', 'aria', 'disabled', 'hideLabel', 'icon', 'iconSource', 'loading', 'name', 'size', 'stretch', 'theme', 'type', 'underline', 'value', 'weight'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PButtonPure = PButtonPure;\n","@porsche-design-system/components-react/cjs/lib/components/button-tile.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PButtonTile = react.forwardRef(({ align = 'bottom', aria, aspectRatio = '4/3', background = 'dark', compact = false, description, disabled = false, gradient = true, icon = 'none', iconSource, label, loading = false, size = 'medium', type = 'submit', weight = 'semi-bold', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-button-tile');\n    const propsToSync = [align, aria, aspectRatio, background, compact, description, disabled, gradient, icon, iconSource, label, loading, size, type, weight];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['align', 'aria', 'aspectRatio', 'background', 'compact', 'description', 'disabled', 'gradient', 'icon', 'iconSource', 'label', 'loading', 'size', 'type', 'weight'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PButtonTile = PButtonTile;\n","@porsche-design-system/components-react/cjs/lib/components/button.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PButton = react.forwardRef(({ aria, disabled = false, hideLabel = false, icon = 'none', iconSource, loading = false, name, theme, type = 'submit', value, variant = 'primary', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-button');\n    const propsToSync = [aria, disabled, hideLabel, icon, iconSource, loading, name, theme || hooks.useTheme(), type, value, variant];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'disabled', 'hideLabel', 'icon', 'iconSource', 'loading', 'name', 'theme', 'type', 'value', 'variant'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PButton = PButton;\n","@porsche-design-system/components-react/cjs/lib/components/canvas.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PCanvas = react.forwardRef(({ onDismissSidebarEnd, onDismissSidebarStart, sidebarEndOpen = false, sidebarEndWidth = 'medium', sidebarStartOpen = false, sidebarStartWidth = 'medium', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'dismissSidebarEnd', onDismissSidebarEnd);\n    hooks.useEventCallback(elementRef, 'dismissSidebarStart', onDismissSidebarStart);\n    const WebComponentTag = hooks.usePrefix('p-canvas');\n    const propsToSync = [sidebarEndOpen, sidebarEndWidth, sidebarStartOpen, sidebarStartWidth];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['sidebarEndOpen', 'sidebarEndWidth', 'sidebarStartOpen', 'sidebarStartWidth'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PCanvas = PCanvas;\n","@porsche-design-system/components-react/cjs/lib/components/carousel.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PCarousel = react.forwardRef(({ activeSlideIndex = 0, alignHeader = 'start', aria, description, disablePagination, heading, headingSize = 'x-large', intl, onCarouselChange, onUpdate, pagination = true, rewind = true, skipLinkTarget, slidesPerPage = 1, theme, width = 'basic', wrapContent, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'carouselChange', onCarouselChange);\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-carousel');\n    const propsToSync = [activeSlideIndex, alignHeader, aria, description, disablePagination, heading, headingSize, intl, pagination, rewind, skipLinkTarget, slidesPerPage, theme || hooks.useTheme(), width, wrapContent];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['activeSlideIndex', 'alignHeader', 'aria', 'description', 'disablePagination', 'heading', 'headingSize', 'intl', 'pagination', 'rewind', 'skipLinkTarget', 'slidesPerPage', 'theme', 'width', 'wrapContent'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PCarousel = PCarousel;\n","@porsche-design-system/components-react/cjs/lib/components/checkbox-wrapper.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PCheckboxWrapper = react.forwardRef(({ hideLabel = false, label = '', loading = false, message = '', state = 'none', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-checkbox-wrapper');\n    const propsToSync = [hideLabel, label, loading, message, state, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['hideLabel', 'label', 'loading', 'message', 'state', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PCheckboxWrapper = PCheckboxWrapper;\n","@porsche-design-system/components-react/cjs/lib/components/content-wrapper.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PContentWrapper = react.forwardRef(({ backgroundColor = 'transparent', theme, width = 'extended', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-content-wrapper');\n    const propsToSync = [backgroundColor, theme || hooks.useTheme(), width];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['backgroundColor', 'theme', 'width'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PContentWrapper = PContentWrapper;\n","@porsche-design-system/components-react/cjs/lib/components/crest.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PCrest = react.forwardRef(({ aria, href, target = '_self', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-crest');\n    const propsToSync = [aria, href, target];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'href', 'target'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PCrest = PCrest;\n","@porsche-design-system/components-react/cjs/lib/components/display.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PDisplay = react.forwardRef(({ align = 'start', color = 'primary', ellipsis = false, size = 'large', tag, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-display');\n    const propsToSync = [align, color, ellipsis, size, tag, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['align', 'color', 'ellipsis', 'size', 'tag', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PDisplay = PDisplay;\n","@porsche-design-system/components-react/cjs/lib/components/divider.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PDivider = react.forwardRef(({ color = 'contrast-low', direction = 'horizontal', orientation, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-divider');\n    const propsToSync = [color, direction, orientation, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['color', 'direction', 'orientation', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PDivider = PDivider;\n","@porsche-design-system/components-react/cjs/lib/components/fieldset-wrapper.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PFieldsetWrapper = react.forwardRef(({ label = '', labelSize = 'medium', message = '', required = false, state = 'none', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-fieldset-wrapper');\n    const propsToSync = [label, labelSize, message, required, state, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['label', 'labelSize', 'message', 'required', 'state', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PFieldsetWrapper = PFieldsetWrapper;\n","@porsche-design-system/components-react/cjs/lib/components/fieldset.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PFieldset = react.forwardRef(({ label = '', labelSize = 'medium', message = '', required = false, state = 'none', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-fieldset');\n    const propsToSync = [label, labelSize, message, required, state, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['label', 'labelSize', 'message', 'required', 'state', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PFieldset = PFieldset;\n","@porsche-design-system/components-react/cjs/lib/components/flex-item.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PFlexItem = react.forwardRef(({ alignSelf = 'auto', flex = 'initial', grow = 0, offset = 'none', shrink = 1, width = 'auto', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-flex-item');\n    const propsToSync = [alignSelf, flex, grow, offset, shrink, width];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['alignSelf', 'flex', 'grow', 'offset', 'shrink', 'width'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PFlexItem = PFlexItem;\n","@porsche-design-system/components-react/cjs/lib/components/flex.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PFlex = react.forwardRef(({ alignContent = 'stretch', alignItems = 'stretch', direction = 'row', inline = false, justifyContent = 'flex-start', wrap = 'nowrap', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-flex');\n    const propsToSync = [alignContent, alignItems, direction, inline, justifyContent, wrap];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['alignContent', 'alignItems', 'direction', 'inline', 'justifyContent', 'wrap'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PFlex = PFlex;\n","@porsche-design-system/components-react/cjs/lib/components/flyout-multilevel-item.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PFlyoutMultilevelItem = react.forwardRef(({ identifier, label, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-flyout-multilevel-item');\n    const propsToSync = [identifier, label];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['identifier', 'label'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PFlyoutMultilevelItem = PFlyoutMultilevelItem;\n","@porsche-design-system/components-react/cjs/lib/components/flyout-multilevel.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PFlyoutMultilevel = react.forwardRef(({ activeIdentifier, aria, onDismiss, onUpdate, open = false, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'dismiss', onDismiss);\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-flyout-multilevel');\n    const propsToSync = [activeIdentifier, aria, open, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['activeIdentifier', 'aria', 'open', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PFlyoutMultilevel = PFlyoutMultilevel;\n","@porsche-design-system/components-react/cjs/lib/components/flyout.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PFlyout = react.forwardRef(({ aria, disableBackdropClick = false, onDismiss, onMotionHiddenEnd, onMotionVisibleEnd, open = false, position = 'end', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'dismiss', onDismiss);\n    hooks.useEventCallback(elementRef, 'motionHiddenEnd', onMotionHiddenEnd);\n    hooks.useEventCallback(elementRef, 'motionVisibleEnd', onMotionVisibleEnd);\n    const WebComponentTag = hooks.usePrefix('p-flyout');\n    const propsToSync = [aria, disableBackdropClick, open, position, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'disableBackdropClick', 'open', 'position', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PFlyout = PFlyout;\n","@porsche-design-system/components-react/cjs/lib/components/grid-item.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PGridItem = react.forwardRef(({ offset = 0, size = 1, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-grid-item');\n    const propsToSync = [offset, size];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['offset', 'size'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PGridItem = PGridItem;\n","@porsche-design-system/components-react/cjs/lib/components/grid.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PGrid = react.forwardRef(({ direction = 'row', gutter = { base: 16, s: 24, m: 36 }, wrap = 'wrap', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-grid');\n    const propsToSync = [direction, gutter, wrap];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['direction', 'gutter', 'wrap'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PGrid = PGrid;\n","@porsche-design-system/components-react/cjs/lib/components/heading.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PHeading = react.forwardRef(({ align = 'start', color = 'primary', ellipsis = false, size = 'xx-large', tag, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-heading');\n    const propsToSync = [align, color, ellipsis, size, tag, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['align', 'color', 'ellipsis', 'size', 'tag', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PHeading = PHeading;\n","@porsche-design-system/components-react/cjs/lib/components/headline.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PHeadline = react.forwardRef(({ align = 'start', color = 'primary', ellipsis = false, tag, theme, variant = 'headline-1', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-headline');\n    const propsToSync = [align, color, ellipsis, tag, theme || hooks.useTheme(), variant];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['align', 'color', 'ellipsis', 'tag', 'theme', 'variant'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PHeadline = PHeadline;\n","@porsche-design-system/components-react/cjs/lib/components/icon.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PIcon = react.forwardRef(({ aria, color = 'primary', lazy, name = 'arrow-right', size = 'small', source, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-icon');\n    const propsToSync = [aria, color, lazy, name, size, source, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'color', 'lazy', 'name', 'size', 'source', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PIcon = PIcon;\n","@porsche-design-system/components-react/cjs/lib/components/inline-notification.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PInlineNotification = react.forwardRef(({ actionIcon = 'arrow-right', actionLabel, actionLoading = false, description = '', dismissButton = true, heading = '', headingTag = 'h5', onAction, onDismiss, persistent, state = 'info', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'action', onAction);\n    hooks.useEventCallback(elementRef, 'dismiss', onDismiss);\n    const WebComponentTag = hooks.usePrefix('p-inline-notification');\n    const propsToSync = [actionIcon, actionLabel, actionLoading, description, dismissButton, heading, headingTag, persistent, state, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['actionIcon', 'actionLabel', 'actionLoading', 'description', 'dismissButton', 'heading', 'headingTag', 'persistent', 'state', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PInlineNotification = PInlineNotification;\n","@porsche-design-system/components-react/cjs/lib/components/link-pure.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PLinkPure = react.forwardRef(({ active = false, alignLabel = 'end', aria, download, hideLabel = false, href, icon = 'arrow-right', iconSource, rel, size = 'small', stretch = false, target = '_self', theme, underline = false, weight = 'regular', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-link-pure');\n    const propsToSync = [active, alignLabel, aria, download, hideLabel, href, icon, iconSource, rel, size, stretch, target, theme || hooks.useTheme(), underline, weight];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['active', 'alignLabel', 'aria', 'download', 'hideLabel', 'href', 'icon', 'iconSource', 'rel', 'size', 'stretch', 'target', 'theme', 'underline', 'weight'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PLinkPure = PLinkPure;\n","@porsche-design-system/components-react/cjs/lib/components/link-social.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PLinkSocial = react.forwardRef(({ hideLabel = false, href, icon, iconSource, rel, target = '_self', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-link-social');\n    const propsToSync = [hideLabel, href, icon, iconSource, rel, target, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['hideLabel', 'href', 'icon', 'iconSource', 'rel', 'target', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PLinkSocial = PLinkSocial;\n","@porsche-design-system/components-react/cjs/lib/components/link-tile-model-signature.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PLinkTileModelSignature = react.forwardRef(({ aspectRatio = '3/4', description, heading, headingTag = 'h2', linkDirection = { base: 'column', xs: 'row' }, model = '911', weight = 'semi-bold', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-link-tile-model-signature');\n    const propsToSync = [aspectRatio, description, heading, headingTag, linkDirection, model, weight];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aspectRatio', 'description', 'heading', 'headingTag', 'linkDirection', 'model', 'weight'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PLinkTileModelSignature = PLinkTileModelSignature;\n","@porsche-design-system/components-react/cjs/lib/components/link-tile-product.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PLinkTileProduct = react.forwardRef(({ aspectRatio = '3:4', description, heading, href, likeButton = true, liked = false, onLike, price, priceOriginal, rel, target = '_self', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'like', onLike);\n    const WebComponentTag = hooks.usePrefix('p-link-tile-product');\n    const propsToSync = [aspectRatio, description, heading, href, likeButton, liked, price, priceOriginal, rel, target, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aspectRatio', 'description', 'heading', 'href', 'likeButton', 'liked', 'price', 'priceOriginal', 'rel', 'target', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PLinkTileProduct = PLinkTileProduct;\n","@porsche-design-system/components-react/cjs/lib/components/link-tile.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PLinkTile = react.forwardRef(({ align = 'bottom', aria, aspectRatio = '4/3', background = 'dark', compact = false, description, download, gradient = true, href, label, rel, size = 'medium', target = '_self', weight = 'semi-bold', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-link-tile');\n    const propsToSync = [align, aria, aspectRatio, background, compact, description, download, gradient, href, label, rel, size, target, weight];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['align', 'aria', 'aspectRatio', 'background', 'compact', 'description', 'download', 'gradient', 'href', 'label', 'rel', 'size', 'target', 'weight'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PLinkTile = PLinkTile;\n","@porsche-design-system/components-react/cjs/lib/components/link.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PLink = react.forwardRef(({ aria, download, hideLabel = false, href, icon = 'none', iconSource, rel, target = '_self', theme, variant = 'primary', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-link');\n    const propsToSync = [aria, download, hideLabel, href, icon, iconSource, rel, target, theme || hooks.useTheme(), variant];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'download', 'hideLabel', 'href', 'icon', 'iconSource', 'rel', 'target', 'theme', 'variant'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PLink = PLink;\n","@porsche-design-system/components-react/cjs/lib/components/marque.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\n/** @deprecated since v3.0.0, will be removed with next major release. Please use \"p-wordmark\" instead. */\nconst PMarque = react.forwardRef(({ aria, href, size = 'responsive', target = '_self', trademark = true, variant = 'default', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-marque');\n    const propsToSync = [aria, href, size, target, trademark, variant];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'href', 'size', 'target', 'trademark', 'variant'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PMarque = PMarque;\n","@porsche-design-system/components-react/cjs/lib/components/modal.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PModal = react.forwardRef(({ aria, backdrop = 'blur', disableBackdropClick = false, disableCloseButton, dismissButton = true, fullscreen = false, heading, onClose, onDismiss, onMotionHiddenEnd, onMotionVisibleEnd, open = false, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'close', onClose);\n    hooks.useEventCallback(elementRef, 'dismiss', onDismiss);\n    hooks.useEventCallback(elementRef, 'motionHiddenEnd', onMotionHiddenEnd);\n    hooks.useEventCallback(elementRef, 'motionVisibleEnd', onMotionVisibleEnd);\n    const WebComponentTag = hooks.usePrefix('p-modal');\n    const propsToSync = [aria, backdrop, disableBackdropClick, disableCloseButton, dismissButton, fullscreen, heading, open, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'backdrop', 'disableBackdropClick', 'disableCloseButton', 'dismissButton', 'fullscreen', 'heading', 'open', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PModal = PModal;\n","@porsche-design-system/components-react/cjs/lib/components/model-signature.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PModelSignature = react.forwardRef(({ color = 'primary', fetchPriority = 'auto', lazy = false, model = '911', safeZone = true, size = 'small', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-model-signature');\n    const propsToSync = [color, fetchPriority, lazy, model, safeZone, size, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['color', 'fetchPriority', 'lazy', 'model', 'safeZone', 'size', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PModelSignature = PModelSignature;\n","@porsche-design-system/components-react/cjs/lib/components/multi-select-option.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PMultiSelectOption = react.forwardRef(({ disabled = false, value, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-multi-select-option');\n    const propsToSync = [disabled, value];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['disabled', 'value'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PMultiSelectOption = PMultiSelectOption;\n","@porsche-design-system/components-react/cjs/lib/components/multi-select.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PMultiSelect = react.forwardRef(({ description = '', disabled = false, dropdownDirection = 'auto', hideLabel = false, label = '', message = '', name, onUpdate, required = false, state = 'none', theme, value = [], className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-multi-select');\n    const propsToSync = [description, disabled, dropdownDirection, hideLabel, label, message, name, required, state, theme || hooks.useTheme(), value];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['description', 'disabled', 'dropdownDirection', 'hideLabel', 'label', 'message', 'name', 'required', 'state', 'theme', 'value'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PMultiSelect = PMultiSelect;\n","@porsche-design-system/components-react/cjs/lib/components/optgroup.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst POptgroup = react.forwardRef(({ disabled = false, label, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-optgroup');\n    const propsToSync = [disabled, label];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['disabled', 'label'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.POptgroup = POptgroup;\n","@porsche-design-system/components-react/cjs/lib/components/pagination.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PPagination = react.forwardRef(({ activePage = 1, allyLabel, allyLabelNext, allyLabelPage, allyLabelPrev, intl = { root: 'Pagination', prev: 'Previous page', next: 'Next page', page: 'Page', }, itemsPerPage = 1, maxNumberOfPageLinks, onPageChange, onUpdate, showLastPage = true, theme, totalItemsCount = 1, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'pageChange', onPageChange);\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-pagination');\n    const propsToSync = [activePage, allyLabel, allyLabelNext, allyLabelPage, allyLabelPrev, intl, itemsPerPage, maxNumberOfPageLinks, showLastPage, theme || hooks.useTheme(), totalItemsCount];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['activePage', 'allyLabel', 'allyLabelNext', 'allyLabelPage', 'allyLabelPrev', 'intl', 'itemsPerPage', 'maxNumberOfPageLinks', 'showLastPage', 'theme', 'totalItemsCount'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PPagination = PPagination;\n","@porsche-design-system/components-react/cjs/lib/components/pin-code.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PPinCode = react.forwardRef(({ description = '', disabled = false, hideLabel = false, label = '', length = 4, loading = false, message = '', name, onUpdate, required = false, state = 'none', theme, type = 'number', value = '', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-pin-code');\n    const propsToSync = [description, disabled, hideLabel, label, length, loading, message, name, required, state, theme || hooks.useTheme(), type, value];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['description', 'disabled', 'hideLabel', 'label', 'length', 'loading', 'message', 'name', 'required', 'state', 'theme', 'type', 'value'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PPinCode = PPinCode;\n","@porsche-design-system/components-react/cjs/lib/components/popover.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PPopover = react.forwardRef(({ aria, description, direction = 'bottom', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-popover');\n    const propsToSync = [aria, description, direction, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'description', 'direction', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PPopover = PPopover;\n","@porsche-design-system/components-react/cjs/lib/components/radio-button-wrapper.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PRadioButtonWrapper = react.forwardRef(({ hideLabel = false, label = '', loading = false, message = '', state = 'none', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-radio-button-wrapper');\n    const propsToSync = [hideLabel, label, loading, message, state, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['hideLabel', 'label', 'loading', 'message', 'state', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PRadioButtonWrapper = PRadioButtonWrapper;\n","@porsche-design-system/components-react/cjs/lib/components/scroller.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PScroller = react.forwardRef(({ alignScrollIndicator = 'center', aria, gradientColor = 'background-base', gradientColorScheme, scrollIndicatorPosition, scrollToPosition, scrollbar = false, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-scroller');\n    const propsToSync = [alignScrollIndicator, aria, gradientColor, gradientColorScheme, scrollIndicatorPosition, scrollToPosition, scrollbar, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['alignScrollIndicator', 'aria', 'gradientColor', 'gradientColorScheme', 'scrollIndicatorPosition', 'scrollToPosition', 'scrollbar', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PScroller = PScroller;\n","@porsche-design-system/components-react/cjs/lib/components/segmented-control-item.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PSegmentedControlItem = react.forwardRef(({ aria, disabled = false, icon, iconSource, label, value, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-segmented-control-item');\n    const propsToSync = [aria, disabled, icon, iconSource, label, value];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'disabled', 'icon', 'iconSource', 'label', 'value'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PSegmentedControlItem = PSegmentedControlItem;\n","@porsche-design-system/components-react/cjs/lib/components/segmented-control.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PSegmentedControl = react.forwardRef(({ backgroundColor, columns = 'auto', onSegmentedControlChange, onUpdate, theme, value, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'segmentedControlChange', onSegmentedControlChange);\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-segmented-control');\n    const propsToSync = [backgroundColor, columns, theme || hooks.useTheme(), value];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['backgroundColor', 'columns', 'theme', 'value'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PSegmentedControl = PSegmentedControl;\n","@porsche-design-system/components-react/cjs/lib/components/select-option.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PSelectOption = react.forwardRef(({ disabled = false, value, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-select-option');\n    const propsToSync = [disabled, value];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['disabled', 'value'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PSelectOption = PSelectOption;\n","@porsche-design-system/components-react/cjs/lib/components/select-wrapper.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PSelectWrapper = react.forwardRef(({ description = '', dropdownDirection = 'auto', filter = false, hideLabel = false, label = '', message = '', native = false, state = 'none', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-select-wrapper');\n    const propsToSync = [description, dropdownDirection, filter, hideLabel, label, message, native, state, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['description', 'dropdownDirection', 'filter', 'hideLabel', 'label', 'message', 'native', 'state', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PSelectWrapper = PSelectWrapper;\n","@porsche-design-system/components-react/cjs/lib/components/select.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PSelect = react.forwardRef(({ description = '', disabled = false, dropdownDirection = 'auto', hideLabel = false, label = '', message = '', name, onUpdate, required = false, state = 'none', theme, value, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-select');\n    const propsToSync = [description, disabled, dropdownDirection, hideLabel, label, message, name, required, state, theme || hooks.useTheme(), value];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['description', 'disabled', 'dropdownDirection', 'hideLabel', 'label', 'message', 'name', 'required', 'state', 'theme', 'value'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PSelect = PSelect;\n","@porsche-design-system/components-react/cjs/lib/components/spinner.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PSpinner = react.forwardRef(({ aria, size = 'small', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-spinner');\n    const propsToSync = [aria, size, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'size', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PSpinner = PSpinner;\n","@porsche-design-system/components-react/cjs/lib/components/stepper-horizontal-item.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PStepperHorizontalItem = react.forwardRef(({ disabled = false, state, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-stepper-horizontal-item');\n    const propsToSync = [disabled, state];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['disabled', 'state'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PStepperHorizontalItem = PStepperHorizontalItem;\n","@porsche-design-system/components-react/cjs/lib/components/stepper-horizontal.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PStepperHorizontal = react.forwardRef(({ onStepChange, onUpdate, size = 'small', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'stepChange', onStepChange);\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-stepper-horizontal');\n    const propsToSync = [size, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['size', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PStepperHorizontal = PStepperHorizontal;\n","@porsche-design-system/components-react/cjs/lib/components/switch.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PSwitch = react.forwardRef(({ alignLabel = 'end', checked = false, disabled = false, hideLabel = false, loading = false, onSwitchChange, onUpdate, stretch = false, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'switchChange', onSwitchChange);\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-switch');\n    const propsToSync = [alignLabel, checked, disabled, hideLabel, loading, stretch, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['alignLabel', 'checked', 'disabled', 'hideLabel', 'loading', 'stretch', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PSwitch = PSwitch;\n","@porsche-design-system/components-react/cjs/lib/components/table-body.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTableBody = react.forwardRef(({ className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-table-body');\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTableBody = PTableBody;\n","@porsche-design-system/components-react/cjs/lib/components/table-cell.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTableCell = react.forwardRef(({ multiline = false, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-table-cell');\n    hooks.useBrowserLayoutEffect(() => {\n        elementRef.current.multiline = multiline;\n    }, [multiline]);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTableCell = PTableCell;\n","@porsche-design-system/components-react/cjs/lib/components/table-head-cell.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTableHeadCell = react.forwardRef(({ hideLabel = false, multiline = false, sort, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-table-head-cell');\n    const propsToSync = [hideLabel, multiline, sort];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['hideLabel', 'multiline', 'sort'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTableHeadCell = PTableHeadCell;\n","@porsche-design-system/components-react/cjs/lib/components/table-head-row.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTableHeadRow = react.forwardRef(({ className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-table-head-row');\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTableHeadRow = PTableHeadRow;\n","@porsche-design-system/components-react/cjs/lib/components/table-head.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTableHead = react.forwardRef(({ className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-table-head');\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTableHead = PTableHead;\n","@porsche-design-system/components-react/cjs/lib/components/table-row.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTableRow = react.forwardRef(({ className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-table-row');\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTableRow = PTableRow;\n","@porsche-design-system/components-react/cjs/lib/components/table.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTable = react.forwardRef(({ caption, onSortingChange, onUpdate, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'sortingChange', onSortingChange);\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-table');\n    const propsToSync = [caption, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['caption', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTable = PTable;\n","@porsche-design-system/components-react/cjs/lib/components/tabs-bar.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTabsBar = react.forwardRef(({ activeTabIndex, gradientColor = 'background-base', gradientColorScheme, onTabChange, onUpdate, size = 'small', theme, weight = 'regular', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'tabChange', onTabChange);\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-tabs-bar');\n    const propsToSync = [activeTabIndex, gradientColor, gradientColorScheme, size, theme || hooks.useTheme(), weight];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['activeTabIndex', 'gradientColor', 'gradientColorScheme', 'size', 'theme', 'weight'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTabsBar = PTabsBar;\n","@porsche-design-system/components-react/cjs/lib/components/tabs-item.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTabsItem = react.forwardRef(({ label, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-tabs-item');\n    hooks.useBrowserLayoutEffect(() => {\n        elementRef.current.label = label;\n    }, [label]);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTabsItem = PTabsItem;\n","@porsche-design-system/components-react/cjs/lib/components/tabs.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTabs = react.forwardRef(({ activeTabIndex = 0, gradientColor = 'background-base', gradientColorScheme, onTabChange, onUpdate, size = 'small', theme, weight = 'regular', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'tabChange', onTabChange);\n    hooks.useEventCallback(elementRef, 'update', onUpdate);\n    const WebComponentTag = hooks.usePrefix('p-tabs');\n    const propsToSync = [activeTabIndex, gradientColor, gradientColorScheme, size, theme || hooks.useTheme(), weight];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['activeTabIndex', 'gradientColor', 'gradientColorScheme', 'size', 'theme', 'weight'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTabs = PTabs;\n","@porsche-design-system/components-react/cjs/lib/components/tag-dismissible.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTagDismissible = react.forwardRef(({ aria, color = 'background-surface', label, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-tag-dismissible');\n    const propsToSync = [aria, color, label, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'color', 'label', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTagDismissible = PTagDismissible;\n","@porsche-design-system/components-react/cjs/lib/components/tag.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTag = react.forwardRef(({ color = 'background-surface', compact = false, icon, iconSource, theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-tag');\n    const propsToSync = [color, compact, icon, iconSource, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['color', 'compact', 'icon', 'iconSource', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTag = PTag;\n","@porsche-design-system/components-react/cjs/lib/components/text-field-wrapper.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTextFieldWrapper = react.forwardRef(({ actionIcon, actionLoading = false, description = '', hideLabel = false, label = '', message = '', onAction, showCharacterCount, showCounter = true, showPasswordToggle = true, state = 'none', submitButton = true, theme, unit = '', unitPosition = 'prefix', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    hooks.useEventCallback(elementRef, 'action', onAction);\n    const WebComponentTag = hooks.usePrefix('p-text-field-wrapper');\n    const propsToSync = [actionIcon, actionLoading, description, hideLabel, label, message, showCharacterCount, showCounter, showPasswordToggle, state, submitButton, theme || hooks.useTheme(), unit, unitPosition];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['actionIcon', 'actionLoading', 'description', 'hideLabel', 'label', 'message', 'showCharacterCount', 'showCounter', 'showPasswordToggle', 'state', 'submitButton', 'theme', 'unit', 'unitPosition'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTextFieldWrapper = PTextFieldWrapper;\n","@porsche-design-system/components-react/cjs/lib/components/text-list-item.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTextListItem = react.forwardRef(({ className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-text-list-item');\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTextListItem = PTextListItem;\n","@porsche-design-system/components-react/cjs/lib/components/text-list.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTextList = react.forwardRef(({ listType, orderType, theme, type = 'unordered', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-text-list');\n    const propsToSync = [listType, orderType, theme || hooks.useTheme(), type];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['listType', 'orderType', 'theme', 'type'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTextList = PTextList;\n","@porsche-design-system/components-react/cjs/lib/components/text.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PText = react.forwardRef(({ align = 'start', color = 'primary', ellipsis = false, size = 'small', tag = 'p', theme, weight = 'regular', className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-text');\n    const propsToSync = [align, color, ellipsis, size, tag, theme || hooks.useTheme(), weight];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['align', 'color', 'ellipsis', 'size', 'tag', 'theme', 'weight'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PText = PText;\n","@porsche-design-system/components-react/cjs/lib/components/textarea-wrapper.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PTextareaWrapper = react.forwardRef(({ description = '', hideLabel = false, label = '', message = '', showCharacterCount, showCounter = true, state = 'none', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-textarea-wrapper');\n    const propsToSync = [description, hideLabel, label, message, showCharacterCount, showCounter, state, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['description', 'hideLabel', 'label', 'message', 'showCharacterCount', 'showCounter', 'state', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PTextareaWrapper = PTextareaWrapper;\n","@porsche-design-system/components-react/cjs/lib/components/toast.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PToast = react.forwardRef(({ theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-toast');\n    const themeValue = hooks.useTheme();\n    hooks.useBrowserLayoutEffect(() => {\n        elementRef.current.theme = theme || themeValue;\n    }, [theme, themeValue]);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PToast = PToast;\n","@porsche-design-system/components-react/cjs/lib/components/wordmark.wrapper.cjs":"\"use client\";\n'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar react = require('react');\nvar hooks = require('../../hooks.cjs');\nvar utils = require('../../utils.cjs');\n\nconst PWordmark = react.forwardRef(({ aria, href, size = 'small', target = '_self', theme, className, ...rest }, ref) => {\n    const elementRef = react.useRef();\n    const WebComponentTag = hooks.usePrefix('p-wordmark');\n    const propsToSync = [aria, href, size, target, theme || hooks.useTheme()];\n    hooks.useBrowserLayoutEffect(() => {\n        const { current } = elementRef;\n        ['aria', 'href', 'size', 'target', 'theme'].forEach((propName, i) => (current[propName] = propsToSync[i]));\n    }, propsToSync);\n    const props = {\n        ...rest,\n        class: hooks.useMergedClass(elementRef, className),\n        ref: utils.syncRef(elementRef, ref)\n    };\n    // @ts-ignore\n    return jsxRuntime.jsx(WebComponentTag, { ...props });\n});\n\nexports.PWordmark = PWordmark;\n","@porsche-design-system/components-react/esm/lib/components/accordion.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { AccordionHeadingTag, AccordionUpdateEventDetail, BreakpointCustomizable, AccordionSize, AccordionTag, Theme } from '../types';\nexport type PAccordionProps = BaseProps & {\n    /**\n     * Displays the Accordion as compact version with thinner border and smaller paddings.\n     */\n    compact?: boolean;\n    /**\n     * Defines the heading used in accordion.\n     */\n    heading?: string;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    headingTag?: AccordionHeadingTag;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when accordion state is changed.\n     */\n    onAccordionChange?: (event: CustomEvent<AccordionUpdateEventDetail>) => void;\n    /**\n     * Emitted when accordion state is changed.\n     */\n    onUpdate?: (event: CustomEvent<AccordionUpdateEventDetail>) => void;\n    /**\n     * Defines if accordion is open.\n     */\n    open?: boolean;\n    /**\n     * The text size.\n     */\n    size?: BreakpointCustomizable<AccordionSize>;\n    /**\n     * @experimental Sticks the Accordion heading at the top, fixed while scrolling\n     */\n    sticky?: boolean;\n    /**\n     * @deprecated , will be removed with next major release, use `heading-tag` instead. Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    tag?: AccordionTag;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n};\nexport declare const PAccordion: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Displays the Accordion as compact version with thinner border and smaller paddings.\n     */\n    compact?: boolean;\n    /**\n     * Defines the heading used in accordion.\n     */\n    heading?: string;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    headingTag?: AccordionHeadingTag;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when accordion state is changed.\n     */\n    onAccordionChange?: (event: CustomEvent<AccordionUpdateEventDetail>) => void;\n    /**\n     * Emitted when accordion state is changed.\n     */\n    onUpdate?: (event: CustomEvent<AccordionUpdateEventDetail>) => void;\n    /**\n     * Defines if accordion is open.\n     */\n    open?: boolean;\n    /**\n     * The text size.\n     */\n    size?: BreakpointCustomizable<AccordionSize>;\n    /**\n     * @experimental Sticks the Accordion heading at the top, fixed while scrolling\n     */\n    sticky?: boolean;\n    /**\n     * @deprecated , will be removed with next major release, use `heading-tag` instead. Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    tag?: AccordionTag;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/banner.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BannerHeadingTag, BannerState, Theme, BannerWidth } from '../types';\nexport type PBannerProps = BaseProps & {\n    /**\n     * Description of the banner.\n     */\n    description?: string;\n    /**\n     * If false, the banner will not have a dismiss button.\n     */\n    dismissButton?: boolean;\n    /**\n     * Heading of the banner.\n     */\n    heading?: string;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    headingTag?: BannerHeadingTag;\n    /**\n     * Emitted when the close button is clicked.\n     */\n    onDismiss?: (event: CustomEvent<void>) => void;\n    /**\n     * If true, the banner is open.\n     */\n    open: boolean;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `dismissButton` instead. Defines if the banner can be closed/removed by the user.\n     */\n    persistent?: boolean;\n    /**\n     * State of the banner.\n     */\n    state?: BannerState;\n    /**\n     * Adapts the banner color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    width?: BannerWidth;\n};\nexport declare const PBanner: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Description of the banner.\n     */\n    description?: string;\n    /**\n     * If false, the banner will not have a dismiss button.\n     */\n    dismissButton?: boolean;\n    /**\n     * Heading of the banner.\n     */\n    heading?: string;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    headingTag?: BannerHeadingTag;\n    /**\n     * Emitted when the close button is clicked.\n     */\n    onDismiss?: (event: CustomEvent<void>) => void;\n    /**\n     * If true, the banner is open.\n     */\n    open: boolean;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `dismissButton` instead. Defines if the banner can be closed/removed by the user.\n     */\n    persistent?: boolean;\n    /**\n     * State of the banner.\n     */\n    state?: BannerState;\n    /**\n     * Adapts the banner color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    width?: BannerWidth;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/button-group.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, ButtonGroupDirection } from '../types';\nexport type PButtonGroupProps = BaseProps & {\n    /**\n     * Defines the direction of the main and cross axis. The default is ’{base: ‘column’, xs: ‘row’}' showing buttons vertically stacked on mobile viewports and side-by-side in a horizontal row from breakpoint ‘xs’. You always need to provide a base value when using breakpoints.\n     */\n    direction?: BreakpointCustomizable<ButtonGroupDirection>;\n};\nexport declare const PButtonGroup: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Defines the direction of the main and cross axis. The default is ’{base: ‘column’, xs: ‘row’}' showing buttons vertically stacked on mobile viewports and side-by-side in a horizontal row from breakpoint ‘xs’. You always need to provide a base value when using breakpoints.\n     */\n    direction?: BreakpointCustomizable<ButtonGroupDirection>;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/button-pure.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, ButtonPureAlignLabel, SelectedAriaAttributes, ButtonPureAriaAttribute, ButtonPureIcon, ButtonPureSize, Theme, ButtonPureType, ButtonPureWeight } from '../types';\nexport type PButtonPureProps = BaseProps & {\n    /**\n     * Display button in active state.\n     */\n    active?: boolean;\n    /**\n     * Aligns the label.\n     */\n    alignLabel?: BreakpointCustomizable<ButtonPureAlignLabel>;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<ButtonPureAriaAttribute>;\n    /**\n     * Disables the button. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The icon shown.\n     */\n    icon?: ButtonPureIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Disables the button and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    loading?: boolean;\n    /**\n     * The name of the button, submitted as a pair with the button's value as part of the form data, when that button is used to submit the form.\n     */\n    name?: string;\n    /**\n     * Size of the button.\n     */\n    size?: BreakpointCustomizable<ButtonPureSize>;\n    /**\n     * Stretches the area between icon and label to max available space.\n     */\n    stretch?: BreakpointCustomizable<boolean>;\n    /**\n     * Adapts the button color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Specifies the type of the button.\n     */\n    type?: ButtonPureType;\n    /**\n     * Shows an underline under the label.\n     */\n    underline?: boolean;\n    /**\n     * Defines the value associated with the button's name when it's submitted with the form data. This value is passed to the server in params when the form is submitted using this button.\n     */\n    value?: string;\n    /**\n     * The weight of the text (only has effect with visible label).\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    weight?: ButtonPureWeight;\n};\nexport declare const PButtonPure: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Display button in active state.\n     */\n    active?: boolean;\n    /**\n     * Aligns the label.\n     */\n    alignLabel?: BreakpointCustomizable<ButtonPureAlignLabel>;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<ButtonPureAriaAttribute>;\n    /**\n     * Disables the button. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The icon shown.\n     */\n    icon?: ButtonPureIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Disables the button and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    loading?: boolean;\n    /**\n     * The name of the button, submitted as a pair with the button's value as part of the form data, when that button is used to submit the form.\n     */\n    name?: string;\n    /**\n     * Size of the button.\n     */\n    size?: BreakpointCustomizable<ButtonPureSize>;\n    /**\n     * Stretches the area between icon and label to max available space.\n     */\n    stretch?: BreakpointCustomizable<boolean>;\n    /**\n     * Adapts the button color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Specifies the type of the button.\n     */\n    type?: ButtonPureType;\n    /**\n     * Shows an underline under the label.\n     */\n    underline?: boolean;\n    /**\n     * Defines the value associated with the button's name when it's submitted with the form data. This value is passed to the server in params when the form is submitted using this button.\n     */\n    value?: string;\n    /**\n     * The weight of the text (only has effect with visible label).\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    weight?: ButtonPureWeight;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/button-tile.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { ButtonTileAlign, SelectedAriaAttributes, ButtonTileAriaAttribute, BreakpointCustomizable, ButtonTileAspectRatio, ButtonTileBackground, ButtonTileIcon, ButtonTileSize, ButtonTileType, ButtonTileWeight } from '../types';\nexport type PButtonTileProps = BaseProps & {\n    /**\n     * Alignment of button and description.\n     */\n    align?: ButtonTileAlign;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<ButtonTileAriaAttribute>;\n    /**\n     * Aspect ratio of the button-tile.\n     */\n    aspectRatio?: BreakpointCustomizable<ButtonTileAspectRatio>;\n    /**\n     * Adapts the description and button theme when used on light background image.\n     */\n    background?: ButtonTileBackground;\n    /**\n     * Displays the button-tile as compact version with description and button icon only.\n     */\n    compact?: BreakpointCustomizable<boolean>;\n    /**\n     * Description text.\n     */\n    description: string;\n    /**\n     * Disables the button. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * Show gradient.\n     */\n    gradient?: boolean;\n    /**\n     * The icon shown. By choosing 'none', no icon is displayed.\n     */\n    icon?: ButtonTileIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Label of the button.\n     */\n    label: string;\n    /**\n     * Disables the button-tile and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    loading?: boolean;\n    /**\n     * Font size of the description.\n     */\n    size?: BreakpointCustomizable<ButtonTileSize>;\n    /**\n     * Specifies the type of the button.\n     */\n    type?: ButtonTileType;\n    /**\n     * Font weight of the description.\n     */\n    weight?: BreakpointCustomizable<ButtonTileWeight>;\n};\nexport declare const PButtonTile: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Alignment of button and description.\n     */\n    align?: ButtonTileAlign;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<ButtonTileAriaAttribute>;\n    /**\n     * Aspect ratio of the button-tile.\n     */\n    aspectRatio?: BreakpointCustomizable<ButtonTileAspectRatio>;\n    /**\n     * Adapts the description and button theme when used on light background image.\n     */\n    background?: ButtonTileBackground;\n    /**\n     * Displays the button-tile as compact version with description and button icon only.\n     */\n    compact?: BreakpointCustomizable<boolean>;\n    /**\n     * Description text.\n     */\n    description: string;\n    /**\n     * Disables the button. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * Show gradient.\n     */\n    gradient?: boolean;\n    /**\n     * The icon shown. By choosing 'none', no icon is displayed.\n     */\n    icon?: ButtonTileIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Label of the button.\n     */\n    label: string;\n    /**\n     * Disables the button-tile and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    loading?: boolean;\n    /**\n     * Font size of the description.\n     */\n    size?: BreakpointCustomizable<ButtonTileSize>;\n    /**\n     * Specifies the type of the button.\n     */\n    type?: ButtonTileType;\n    /**\n     * Font weight of the description.\n     */\n    weight?: BreakpointCustomizable<ButtonTileWeight>;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/button.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, ButtonAriaAttribute, BreakpointCustomizable, ButtonIcon, Theme, ButtonType, ButtonVariant } from '../types';\nexport type PButtonProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<ButtonAriaAttribute>;\n    /**\n     * Disables the button. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The icon shown. By choosing 'none', no icon is displayed.\n     */\n    icon?: ButtonIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Disables the button and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    loading?: boolean;\n    /**\n     * The name of the button, submitted as a pair with the button's value as part of the form data, when that button is used to submit the form.\n     */\n    name?: string;\n    /**\n     * Adapts the button color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Specifies the type of the button.\n     */\n    type?: ButtonType;\n    /**\n     * Defines the value associated with the button's name when it's submitted with the form data. This value is passed to the server in params when the form is submitted using this button.\n     */\n    value?: string;\n    /**\n     * The style variant of the button.\n     */\n    variant?: ButtonVariant;\n};\nexport declare const PButton: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<ButtonAriaAttribute>;\n    /**\n     * Disables the button. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The icon shown. By choosing 'none', no icon is displayed.\n     */\n    icon?: ButtonIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Disables the button and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    loading?: boolean;\n    /**\n     * The name of the button, submitted as a pair with the button's value as part of the form data, when that button is used to submit the form.\n     */\n    name?: string;\n    /**\n     * Adapts the button color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Specifies the type of the button.\n     */\n    type?: ButtonType;\n    /**\n     * Defines the value associated with the button's name when it's submitted with the form data. This value is passed to the server in params when the form is submitted using this button.\n     */\n    value?: string;\n    /**\n     * The style variant of the button.\n     */\n    variant?: ButtonVariant;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/canvas.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { CanvasSidebarEndWidth, CanvasSidebarStartWidth } from '../types';\nexport type PCanvasProps = BaseProps & {\n    /**\n     * Emitted when the component requests to close the sidebar on the end side.\n     */\n    onDismissSidebarEnd?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when the component requests to close the sidebar on the start side.\n     */\n    onDismissSidebarStart?: (event: CustomEvent<void>) => void;\n    /**\n     * Open Sidebar on the end side\n     */\n    sidebarEndOpen?: boolean;\n    /**\n     * Defines the width of the sidebar on the end side\n     */\n    sidebarEndWidth?: CanvasSidebarEndWidth;\n    /**\n     * Open Sidebar on the start side\n     */\n    sidebarStartOpen?: boolean;\n    /**\n     * Defines the width of the sidebar on the start side\n     */\n    sidebarStartWidth?: CanvasSidebarStartWidth;\n};\nexport declare const PCanvas: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Emitted when the component requests to close the sidebar on the end side.\n     */\n    onDismissSidebarEnd?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when the component requests to close the sidebar on the start side.\n     */\n    onDismissSidebarStart?: (event: CustomEvent<void>) => void;\n    /**\n     * Open Sidebar on the end side\n     */\n    sidebarEndOpen?: boolean;\n    /**\n     * Defines the width of the sidebar on the end side\n     */\n    sidebarEndWidth?: CanvasSidebarEndWidth;\n    /**\n     * Open Sidebar on the start side\n     */\n    sidebarStartOpen?: boolean;\n    /**\n     * Defines the width of the sidebar on the start side\n     */\n    sidebarStartWidth?: CanvasSidebarStartWidth;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/carousel.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { CarouselAlignHeader, SelectedAriaAttributes, CarouselAriaAttribute, BreakpointCustomizable, CarouselHeadingSize, CarouselInternationalization, CarouselUpdateEventDetail, Theme, CarouselWidth } from '../types';\nexport type PCarouselProps = BaseProps & {\n    /**\n     * Defines which slide to be active (zero-based numbering).\n     */\n    activeSlideIndex?: number;\n    /**\n     * Alignment of heading and description\n     */\n    alignHeader?: CarouselAlignHeader;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<CarouselAriaAttribute>;\n    /**\n     * Defines the description used in the carousel.\n     */\n    description?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `pagination` instead. If true, the carousel will not show pagination bullets at the bottom.\n     */\n    disablePagination?: BreakpointCustomizable<boolean>;\n    /**\n     * Defines the heading used in the carousel.\n     */\n    heading?: string;\n    /**\n     * Defines the heading size used in the carousel.\n     */\n    headingSize?: CarouselHeadingSize;\n    /**\n     * Override the default wordings that are used for aria-labels on the next/prev buttons and pagination.\n     */\n    intl?: CarouselInternationalization;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when carousel's content slides.\n     */\n    onCarouselChange?: (event: CustomEvent<CarouselUpdateEventDetail>) => void;\n    /**\n     * Emitted when carousel's content slides.\n     */\n    onUpdate?: (event: CustomEvent<CarouselUpdateEventDetail>) => void;\n    /**\n     * If false, the carousel will not show pagination bullets at the bottom.\n     */\n    pagination?: BreakpointCustomizable<boolean>;\n    /**\n     * Whether the slides should rewind from last to first slide and vice versa.\n     */\n    rewind?: boolean;\n    /**\n     * Defines target of skip link (to skip carousel entries).\n     */\n    skipLinkTarget?: string;\n    /**\n     * Sets the amount of slides visible at the same time. Can be set to `auto` if you want to define different widths per slide via CSS.\n     */\n    slidesPerPage?: BreakpointCustomizable<number> | \"auto\";\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n    /**\n     * Defines the outer spacings between the carousel and the left and right screen sides.\n     */\n    width?: CarouselWidth;\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    wrapContent?: boolean;\n};\nexport declare const PCarousel: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Defines which slide to be active (zero-based numbering).\n     */\n    activeSlideIndex?: number;\n    /**\n     * Alignment of heading and description\n     */\n    alignHeader?: CarouselAlignHeader;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<CarouselAriaAttribute>;\n    /**\n     * Defines the description used in the carousel.\n     */\n    description?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `pagination` instead. If true, the carousel will not show pagination bullets at the bottom.\n     */\n    disablePagination?: BreakpointCustomizable<boolean>;\n    /**\n     * Defines the heading used in the carousel.\n     */\n    heading?: string;\n    /**\n     * Defines the heading size used in the carousel.\n     */\n    headingSize?: CarouselHeadingSize;\n    /**\n     * Override the default wordings that are used for aria-labels on the next/prev buttons and pagination.\n     */\n    intl?: CarouselInternationalization;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when carousel's content slides.\n     */\n    onCarouselChange?: (event: CustomEvent<CarouselUpdateEventDetail>) => void;\n    /**\n     * Emitted when carousel's content slides.\n     */\n    onUpdate?: (event: CustomEvent<CarouselUpdateEventDetail>) => void;\n    /**\n     * If false, the carousel will not show pagination bullets at the bottom.\n     */\n    pagination?: BreakpointCustomizable<boolean>;\n    /**\n     * Whether the slides should rewind from last to first slide and vice versa.\n     */\n    rewind?: boolean;\n    /**\n     * Defines target of skip link (to skip carousel entries).\n     */\n    skipLinkTarget?: string;\n    /**\n     * Sets the amount of slides visible at the same time. Can be set to `auto` if you want to define different widths per slide via CSS.\n     */\n    slidesPerPage?: BreakpointCustomizable<number> | \"auto\";\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n    /**\n     * Defines the outer spacings between the carousel and the left and right screen sides.\n     */\n    width?: CarouselWidth;\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    wrapContent?: boolean;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/checkbox-wrapper.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, CheckboxWrapperState, Theme } from '../types';\nexport type PCheckboxWrapperProps = BaseProps & {\n    /**\n     * Show or hide label. For better accessibility it's recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * @experimental Disables the checkbox and shows a loading indicator.\n     */\n    loading?: boolean;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * The validation state.\n     */\n    state?: CheckboxWrapperState;\n    /**\n     * Adapts the color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PCheckboxWrapper: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Show or hide label. For better accessibility it's recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * @experimental Disables the checkbox and shows a loading indicator.\n     */\n    loading?: boolean;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * The validation state.\n     */\n    state?: CheckboxWrapperState;\n    /**\n     * Adapts the color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/content-wrapper.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { ContentWrapperBackgroundColor, Theme, ContentWrapperWidth } from '../types';\nexport type PContentWrapperProps = BaseProps & {\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    backgroundColor?: ContentWrapperBackgroundColor;\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    theme?: Theme;\n    /**\n     * Defines the outer spacings between the content area and the left and right screen sides, as well as centering its content and setting a max-width.\n     */\n    width?: ContentWrapperWidth;\n};\nexport declare const PContentWrapper: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    backgroundColor?: ContentWrapperBackgroundColor;\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    theme?: Theme;\n    /**\n     * Defines the outer spacings between the content area and the left and right screen sides, as well as centering its content and setting a max-width.\n     */\n    width?: ContentWrapperWidth;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/crest.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, CrestAriaAttribute, CrestTarget } from '../types';\nexport type PCrestProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<CrestAriaAttribute>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: CrestTarget;\n};\nexport declare const PCrest: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<CrestAriaAttribute>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: CrestTarget;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/display.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { DisplayAlign, DisplayColor, BreakpointCustomizable, DisplaySize, DisplayTag, Theme } from '../types';\nexport type PDisplayProps = BaseProps & {\n    /**\n     * Text alignment of the component.\n     */\n    align?: DisplayAlign;\n    /**\n     * Basic text color variations depending on theme property.\n     */\n    color?: DisplayColor;\n    /**\n     * Adds an ellipsis to a single line of text if it overflows.\n     */\n    ellipsis?: boolean;\n    /**\n     * Size of the component. Also defines the size for specific breakpoints, like {base: \"medium\", l: \"large\"}. You always need to provide a base value when doing this.\n     */\n    size?: BreakpointCustomizable<DisplaySize>;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    tag?: DisplayTag;\n    /**\n     * Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop.\n     */\n    theme?: Theme;\n};\nexport declare const PDisplay: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Text alignment of the component.\n     */\n    align?: DisplayAlign;\n    /**\n     * Basic text color variations depending on theme property.\n     */\n    color?: DisplayColor;\n    /**\n     * Adds an ellipsis to a single line of text if it overflows.\n     */\n    ellipsis?: boolean;\n    /**\n     * Size of the component. Also defines the size for specific breakpoints, like {base: \"medium\", l: \"large\"}. You always need to provide a base value when doing this.\n     */\n    size?: BreakpointCustomizable<DisplaySize>;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    tag?: DisplayTag;\n    /**\n     * Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/divider.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { DividerColor, BreakpointCustomizable, DividerDirection, DividerOrientation, Theme } from '../types';\nexport type PDividerProps = BaseProps & {\n    /**\n     * Defines color depending on theme.\n     */\n    color?: DividerColor;\n    /**\n     * Defines direction.\n     */\n    direction?: BreakpointCustomizable<DividerDirection>;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `direction` instead. Defines orientation.\n     */\n    orientation?: BreakpointCustomizable<DividerOrientation>;\n    /**\n     * Adapts color depending on theme.\n     */\n    theme?: Theme;\n};\nexport declare const PDivider: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Defines color depending on theme.\n     */\n    color?: DividerColor;\n    /**\n     * Defines direction.\n     */\n    direction?: BreakpointCustomizable<DividerDirection>;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `direction` instead. Defines orientation.\n     */\n    orientation?: BreakpointCustomizable<DividerOrientation>;\n    /**\n     * Adapts color depending on theme.\n     */\n    theme?: Theme;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/fieldset-wrapper.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { FieldsetWrapperLabelSize, FieldsetWrapperState, Theme } from '../types';\nexport type PFieldsetWrapperProps = BaseProps & {\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The size of the label text.\n     */\n    labelSize?: FieldsetWrapperLabelSize;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * Marks the Fieldset as required.\n     */\n    required?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: FieldsetWrapperState;\n    /**\n     * Adapts color depending on theme.\n     */\n    theme?: Theme;\n};\nexport declare const PFieldsetWrapper: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The size of the label text.\n     */\n    labelSize?: FieldsetWrapperLabelSize;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * Marks the Fieldset as required.\n     */\n    required?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: FieldsetWrapperState;\n    /**\n     * Adapts color depending on theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/fieldset.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { FieldsetLabelSize, FieldsetState, Theme } from '../types';\nexport type PFieldsetProps = BaseProps & {\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The size of the label text.\n     */\n    labelSize?: FieldsetLabelSize;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * Marks the Fieldset as required.\n     */\n    required?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: FieldsetState;\n    /**\n     * Adapts color depending on theme.\n     */\n    theme?: Theme;\n};\nexport declare const PFieldset: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The size of the label text.\n     */\n    labelSize?: FieldsetLabelSize;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * Marks the Fieldset as required.\n     */\n    required?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: FieldsetState;\n    /**\n     * Adapts color depending on theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/flex-item.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, FlexItemAlignSelf, FlexItemFlex, FlexItemGrow, FlexItemOffset, FlexItemShrink, FlexItemWidth } from '../types';\nexport type PFlexItemProps = BaseProps & {\n    /**\n     * Defines how this flex item is aligned along the cross axis. This overwrites the cross axis alignment set by the container. Corresponds to the \"alignSelf\" css property.\n     */\n    alignSelf?: BreakpointCustomizable<FlexItemAlignSelf>;\n    /**\n     * The shorthand property for the combined definition of \"shrink\", \"grow\" and \"basis\"\n     */\n    flex?: BreakpointCustomizable<FlexItemFlex>;\n    /**\n     * The ability to allow/disallow the flex child to grow.\n     */\n    grow?: BreakpointCustomizable<FlexItemGrow>;\n    /**\n     * The offset of the column. You can also supply values for specific breakpoints, like {base: \"none\", l: \"one-quarter\"}. You always need to provide a base value when doing this.\n     */\n    offset?: BreakpointCustomizable<FlexItemOffset>;\n    /**\n     * The ability to allow/disallow the flex child to shrink.\n     */\n    shrink?: BreakpointCustomizable<FlexItemShrink>;\n    /**\n     * The width of the flex item. You can also supply values for specific breakpoints, like {base: \"full\", l: \"one-quarter\"}. You always need to provide a base value when doing this.\n     */\n    width?: BreakpointCustomizable<FlexItemWidth>;\n};\nexport declare const PFlexItem: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Defines how this flex item is aligned along the cross axis. This overwrites the cross axis alignment set by the container. Corresponds to the \"alignSelf\" css property.\n     */\n    alignSelf?: BreakpointCustomizable<FlexItemAlignSelf>;\n    /**\n     * The shorthand property for the combined definition of \"shrink\", \"grow\" and \"basis\"\n     */\n    flex?: BreakpointCustomizable<FlexItemFlex>;\n    /**\n     * The ability to allow/disallow the flex child to grow.\n     */\n    grow?: BreakpointCustomizable<FlexItemGrow>;\n    /**\n     * The offset of the column. You can also supply values for specific breakpoints, like {base: \"none\", l: \"one-quarter\"}. You always need to provide a base value when doing this.\n     */\n    offset?: BreakpointCustomizable<FlexItemOffset>;\n    /**\n     * The ability to allow/disallow the flex child to shrink.\n     */\n    shrink?: BreakpointCustomizable<FlexItemShrink>;\n    /**\n     * The width of the flex item. You can also supply values for specific breakpoints, like {base: \"full\", l: \"one-quarter\"}. You always need to provide a base value when doing this.\n     */\n    width?: BreakpointCustomizable<FlexItemWidth>;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/flex.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, FlexAlignContent, FlexAlignItems, FlexDirection, FlexInline, FlexJustifyContent, FlexWrap } from '../types';\nexport type PFlexProps = BaseProps & {\n    /**\n     * This aligns a flex container's individual lines when there is extra space in the cross-axis, similar to how \"justifyContent\" aligns individual items along the main axis.\n     */\n    alignContent?: BreakpointCustomizable<FlexAlignContent>;\n    /**\n     * Defines how the flex items are aligned along the cross axis.\n     */\n    alignItems?: BreakpointCustomizable<FlexAlignItems>;\n    /**\n     * Defines the direction of the main and cross axis. The default \"row\" defines the main axis as horizontal left to right.\n     */\n    direction?: BreakpointCustomizable<FlexDirection>;\n    /**\n     * Defines the flex containers content flow if 2 or more containers are siblings of each other.\n     */\n    inline?: BreakpointCustomizable<FlexInline>;\n    /**\n     * Defines how the flex items are aligned along the main axis.\n     */\n    justifyContent?: BreakpointCustomizable<FlexJustifyContent>;\n    /**\n     * Handles wrapping behaviour of elements.\n     */\n    wrap?: BreakpointCustomizable<FlexWrap>;\n};\nexport declare const PFlex: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * This aligns a flex container's individual lines when there is extra space in the cross-axis, similar to how \"justifyContent\" aligns individual items along the main axis.\n     */\n    alignContent?: BreakpointCustomizable<FlexAlignContent>;\n    /**\n     * Defines how the flex items are aligned along the cross axis.\n     */\n    alignItems?: BreakpointCustomizable<FlexAlignItems>;\n    /**\n     * Defines the direction of the main and cross axis. The default \"row\" defines the main axis as horizontal left to right.\n     */\n    direction?: BreakpointCustomizable<FlexDirection>;\n    /**\n     * Defines the flex containers content flow if 2 or more containers are siblings of each other.\n     */\n    inline?: BreakpointCustomizable<FlexInline>;\n    /**\n     * Defines how the flex items are aligned along the main axis.\n     */\n    justifyContent?: BreakpointCustomizable<FlexJustifyContent>;\n    /**\n     * Handles wrapping behaviour of elements.\n     */\n    wrap?: BreakpointCustomizable<FlexWrap>;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/flyout-multilevel-item.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type PFlyoutMultilevelItemProps = BaseProps & {\n    /**\n     * Unique identifier which controls if this item should be shown when the active-identifier on the flyout-multilevel is set to this value.\n     */\n    identifier: string;\n    /**\n     * Label of the item.\n     */\n    label?: string;\n};\nexport declare const PFlyoutMultilevelItem: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Unique identifier which controls if this item should be shown when the active-identifier on the flyout-multilevel is set to this value.\n     */\n    identifier: string;\n    /**\n     * Label of the item.\n     */\n    label?: string;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/flyout-multilevel.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, FlyoutMultilevelAriaAttribute, FlyoutMultilevelUpdateEventDetail, Theme } from '../types';\nexport type PFlyoutMultilevelProps = BaseProps & {\n    /**\n     * Defines which flyout-multilevel-item to be visualized as opened.\n     */\n    activeIdentifier?: string | undefined;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<FlyoutMultilevelAriaAttribute>;\n    /**\n     * Emitted when the component requests to be dismissed.\n     */\n    onDismiss?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when activeIdentifier is changed.\n     */\n    onUpdate?: (event: CustomEvent<FlyoutMultilevelUpdateEventDetail>) => void;\n    /**\n     * If true, the flyout-multilevel is visualized as opened.\n     */\n    open?: boolean;\n    /**\n     * Adapts the flyout-multilevel color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PFlyoutMultilevel: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Defines which flyout-multilevel-item to be visualized as opened.\n     */\n    activeIdentifier?: string | undefined;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<FlyoutMultilevelAriaAttribute>;\n    /**\n     * Emitted when the component requests to be dismissed.\n     */\n    onDismiss?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when activeIdentifier is changed.\n     */\n    onUpdate?: (event: CustomEvent<FlyoutMultilevelUpdateEventDetail>) => void;\n    /**\n     * If true, the flyout-multilevel is visualized as opened.\n     */\n    open?: boolean;\n    /**\n     * Adapts the flyout-multilevel color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/flyout.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, FlyoutAriaAttribute, FlyoutMotionHiddenEndEventDetail, FlyoutMotionVisibleEndEventDetail, FlyoutPosition, Theme } from '../types';\nexport type PFlyoutProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<FlyoutAriaAttribute>;\n    /**\n     * If true, the flyout will not be closable via backdrop click.\n     */\n    disableBackdropClick?: boolean;\n    /**\n     * Emitted when the component requests to be dismissed.\n     */\n    onDismiss?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when the flyout is closed and the transition is finished.\n     */\n    onMotionHiddenEnd?: (event: CustomEvent<FlyoutMotionHiddenEndEventDetail>) => void;\n    /**\n     * Emitted when the flyout is opened and the transition is finished.\n     */\n    onMotionVisibleEnd?: (event: CustomEvent<FlyoutMotionVisibleEndEventDetail>) => void;\n    /**\n     * If true, the flyout is open.\n     */\n    open: boolean;\n    /**\n     * The position of the flyout\n     */\n    position?: FlyoutPosition;\n    /**\n     * Adapts the flyout color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PFlyout: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<FlyoutAriaAttribute>;\n    /**\n     * If true, the flyout will not be closable via backdrop click.\n     */\n    disableBackdropClick?: boolean;\n    /**\n     * Emitted when the component requests to be dismissed.\n     */\n    onDismiss?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when the flyout is closed and the transition is finished.\n     */\n    onMotionHiddenEnd?: (event: CustomEvent<FlyoutMotionHiddenEndEventDetail>) => void;\n    /**\n     * Emitted when the flyout is opened and the transition is finished.\n     */\n    onMotionVisibleEnd?: (event: CustomEvent<FlyoutMotionVisibleEndEventDetail>) => void;\n    /**\n     * If true, the flyout is open.\n     */\n    open: boolean;\n    /**\n     * The position of the flyout\n     */\n    position?: FlyoutPosition;\n    /**\n     * Adapts the flyout color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/grid-item.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, GridItemOffset, GridItemSize } from '../types';\nexport type PGridItemProps = BaseProps & {\n    /**\n     * The offset of the column. Can be between 0 and 11. Also defines the offset of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this.\n     */\n    offset?: BreakpointCustomizable<GridItemOffset>;\n    /**\n     * The size of the column. Can be between 1 and 12. Also defines the size of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this.\n     */\n    size?: BreakpointCustomizable<GridItemSize>;\n};\nexport declare const PGridItem: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * The offset of the column. Can be between 0 and 11. Also defines the offset of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this.\n     */\n    offset?: BreakpointCustomizable<GridItemOffset>;\n    /**\n     * The size of the column. Can be between 1 and 12. Also defines the size of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this.\n     */\n    size?: BreakpointCustomizable<GridItemSize>;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/grid.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, GridDirection, GridGutter, GridWrap } from '../types';\nexport type PGridProps = BaseProps & {\n    /**\n     * Defines the direction of the main and cross axis. The default \"row\" defines the main axis as horizontal left to right. Also defines the direction for specific breakpoints, like {base: \"column\", l: \"row\"}. You always need to provide a base value when doing this.\n     */\n    direction?: BreakpointCustomizable<GridDirection>;\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    gutter?: BreakpointCustomizable<GridGutter>;\n    /**\n     * Handles wrapping behaviour of elements.\n     */\n    wrap?: BreakpointCustomizable<GridWrap>;\n};\nexport declare const PGrid: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Defines the direction of the main and cross axis. The default \"row\" defines the main axis as horizontal left to right. Also defines the direction for specific breakpoints, like {base: \"column\", l: \"row\"}. You always need to provide a base value when doing this.\n     */\n    direction?: BreakpointCustomizable<GridDirection>;\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    gutter?: BreakpointCustomizable<GridGutter>;\n    /**\n     * Handles wrapping behaviour of elements.\n     */\n    wrap?: BreakpointCustomizable<GridWrap>;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/heading.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { HeadingAlign, HeadingColor, BreakpointCustomizable, HeadingSize, HeadingTag, Theme } from '../types';\nexport type PHeadingProps = BaseProps & {\n    /**\n     * Text alignment of the component.\n     */\n    align?: HeadingAlign;\n    /**\n     * Basic text color variations depending on theme property.\n     */\n    color?: HeadingColor;\n    /**\n     * Adds an ellipsis to a single line of text if it overflows.\n     */\n    ellipsis?: boolean;\n    /**\n     * Size of the component. Also defines the size for specific breakpoints, like {base: \"small\", l: \"medium\"}. You always need to provide a base value when doing this.\n     */\n    size?: BreakpointCustomizable<HeadingSize>;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    tag?: HeadingTag;\n    /**\n     * Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop.\n     */\n    theme?: Theme;\n};\nexport declare const PHeading: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Text alignment of the component.\n     */\n    align?: HeadingAlign;\n    /**\n     * Basic text color variations depending on theme property.\n     */\n    color?: HeadingColor;\n    /**\n     * Adds an ellipsis to a single line of text if it overflows.\n     */\n    ellipsis?: boolean;\n    /**\n     * Size of the component. Also defines the size for specific breakpoints, like {base: \"small\", l: \"medium\"}. You always need to provide a base value when doing this.\n     */\n    size?: BreakpointCustomizable<HeadingSize>;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    tag?: HeadingTag;\n    /**\n     * Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/headline.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { HeadlineAlign, HeadlineColor, HeadlineTag, Theme, HeadlineVariant } from '../types';\nexport type PHeadlineProps = BaseProps & {\n    /**\n     * Text alignment of the component.\n     */\n    align?: HeadlineAlign;\n    /**\n     * Basic text color variations depending on theme property.\n     */\n    color?: HeadlineColor;\n    /**\n     * Adds an ellipsis to a single line of text if it overflows.\n     */\n    ellipsis?: boolean;\n    /**\n     * Sets a custom HTML tag depending on the usage of the headline component.\n     */\n    tag?: HeadlineTag;\n    /**\n     * Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop.\n     */\n    theme?: Theme;\n    /**\n     * Predefined style of the headline.\n     */\n    variant?: HeadlineVariant;\n};\nexport declare const PHeadline: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Text alignment of the component.\n     */\n    align?: HeadlineAlign;\n    /**\n     * Basic text color variations depending on theme property.\n     */\n    color?: HeadlineColor;\n    /**\n     * Adds an ellipsis to a single line of text if it overflows.\n     */\n    ellipsis?: boolean;\n    /**\n     * Sets a custom HTML tag depending on the usage of the headline component.\n     */\n    tag?: HeadlineTag;\n    /**\n     * Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop.\n     */\n    theme?: Theme;\n    /**\n     * Predefined style of the headline.\n     */\n    variant?: HeadlineVariant;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/icon.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, IconAriaAttribute, IconColor, IconName, IconSize, Theme } from '../types';\nexport type PIconProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<IconAriaAttribute>;\n    /**\n     * Basic color variations depending on theme property.\n     */\n    color?: IconColor;\n    /**\n     * Has no effect anymore (the component is now using the native `loading=\"lazy\"` attribute by default)\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    lazy?: boolean;\n    /**\n     * Specifies which icon to use.\n     */\n    name?: IconName;\n    /**\n     * The size of the icon.\n     */\n    size?: IconSize;\n    /**\n     * Specifies a whole icon path which can be used for custom icons.\n     */\n    source?: string;\n    /**\n     * Adapts the color depending on the theme. Has no effect when \"inherit\" is set as color prop.\n     */\n    theme?: Theme;\n};\nexport declare const PIcon: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<IconAriaAttribute>;\n    /**\n     * Basic color variations depending on theme property.\n     */\n    color?: IconColor;\n    /**\n     * Has no effect anymore (the component is now using the native `loading=\"lazy\"` attribute by default)\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    lazy?: boolean;\n    /**\n     * Specifies which icon to use.\n     */\n    name?: IconName;\n    /**\n     * The size of the icon.\n     */\n    size?: IconSize;\n    /**\n     * Specifies a whole icon path which can be used for custom icons.\n     */\n    source?: string;\n    /**\n     * Adapts the color depending on the theme. Has no effect when \"inherit\" is set as color prop.\n     */\n    theme?: Theme;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/index.d.ts":"export * from './accordion.wrapper';\nexport * from './banner.wrapper';\nexport * from './button.wrapper';\nexport * from './button-group.wrapper';\nexport * from './button-pure.wrapper';\nexport * from './button-tile.wrapper';\nexport * from './canvas.wrapper';\nexport * from './carousel.wrapper';\nexport * from './checkbox-wrapper.wrapper';\nexport * from './content-wrapper.wrapper';\nexport * from './crest.wrapper';\nexport * from './display.wrapper';\nexport * from './divider.wrapper';\nexport * from './fieldset.wrapper';\nexport * from './fieldset-wrapper.wrapper';\nexport * from './flex.wrapper';\nexport * from './flex-item.wrapper';\nexport * from './flyout.wrapper';\nexport * from './flyout-multilevel.wrapper';\nexport * from './flyout-multilevel-item.wrapper';\nexport * from './grid.wrapper';\nexport * from './grid-item.wrapper';\nexport * from './heading.wrapper';\nexport * from './headline.wrapper';\nexport * from './icon.wrapper';\nexport * from './inline-notification.wrapper';\nexport * from './link.wrapper';\nexport * from './link-pure.wrapper';\nexport * from './link-social.wrapper';\nexport * from './link-tile.wrapper';\nexport * from './link-tile-model-signature.wrapper';\nexport * from './link-tile-product.wrapper';\nexport * from './marque.wrapper';\nexport * from './modal.wrapper';\nexport * from './model-signature.wrapper';\nexport * from './multi-select.wrapper';\nexport * from './multi-select-option.wrapper';\nexport * from './optgroup.wrapper';\nexport * from './pagination.wrapper';\nexport * from './pin-code.wrapper';\nexport * from './popover.wrapper';\nexport * from './radio-button-wrapper.wrapper';\nexport * from './scroller.wrapper';\nexport * from './segmented-control.wrapper';\nexport * from './segmented-control-item.wrapper';\nexport * from './select.wrapper';\nexport * from './select-option.wrapper';\nexport * from './select-wrapper.wrapper';\nexport * from './spinner.wrapper';\nexport * from './stepper-horizontal.wrapper';\nexport * from './stepper-horizontal-item.wrapper';\nexport * from './switch.wrapper';\nexport * from './table.wrapper';\nexport * from './table-body.wrapper';\nexport * from './table-cell.wrapper';\nexport * from './table-head.wrapper';\nexport * from './table-head-cell.wrapper';\nexport * from './table-head-row.wrapper';\nexport * from './table-row.wrapper';\nexport * from './tabs.wrapper';\nexport * from './tabs-bar.wrapper';\nexport * from './tabs-item.wrapper';\nexport * from './tag.wrapper';\nexport * from './tag-dismissible.wrapper';\nexport * from './text.wrapper';\nexport * from './text-field-wrapper.wrapper';\nexport * from './text-list.wrapper';\nexport * from './text-list-item.wrapper';\nexport * from './textarea-wrapper.wrapper';\nexport * from './toast.wrapper';\nexport * from './wordmark.wrapper';\n","@porsche-design-system/components-react/esm/lib/components/inline-notification.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { InlineNotificationActionIcon, InlineNotificationHeadingTag, InlineNotificationState, Theme } from '../types';\nexport type PInlineNotificationProps = BaseProps & {\n    /**\n     * Action icon of the inline-notification.\n     */\n    actionIcon?: InlineNotificationActionIcon;\n    /**\n     * Action label of the inline-notification.\n     */\n    actionLabel?: string;\n    /**\n     * Disables the action button and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    actionLoading?: boolean;\n    /**\n     * Description of the inline-notification.\n     */\n    description?: string;\n    /**\n     * If false, the inline-notification will not have a dismiss button.\n     */\n    dismissButton?: boolean;\n    /**\n     * Heading of the inline-notification.\n     */\n    heading?: string;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    headingTag?: InlineNotificationHeadingTag;\n    /**\n     * Emitted when the action button is clicked.\n     */\n    onAction?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when the close button is clicked.\n     */\n    onDismiss?: (event: CustomEvent<void>) => void;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `dismissButton` instead. Defines if the inline-notification can be closed/removed by the user.\n     */\n    persistent?: boolean;\n    /**\n     * State of the inline-notification.\n     */\n    state?: InlineNotificationState;\n    /**\n     * Adapts the inline-notification color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PInlineNotification: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Action icon of the inline-notification.\n     */\n    actionIcon?: InlineNotificationActionIcon;\n    /**\n     * Action label of the inline-notification.\n     */\n    actionLabel?: string;\n    /**\n     * Disables the action button and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    actionLoading?: boolean;\n    /**\n     * Description of the inline-notification.\n     */\n    description?: string;\n    /**\n     * If false, the inline-notification will not have a dismiss button.\n     */\n    dismissButton?: boolean;\n    /**\n     * Heading of the inline-notification.\n     */\n    heading?: string;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    headingTag?: InlineNotificationHeadingTag;\n    /**\n     * Emitted when the action button is clicked.\n     */\n    onAction?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when the close button is clicked.\n     */\n    onDismiss?: (event: CustomEvent<void>) => void;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `dismissButton` instead. Defines if the inline-notification can be closed/removed by the user.\n     */\n    persistent?: boolean;\n    /**\n     * State of the inline-notification.\n     */\n    state?: InlineNotificationState;\n    /**\n     * Adapts the inline-notification color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/link-pure.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, LinkPureAlignLabel, SelectedAriaAttributes, LinkPureAriaAttribute, LinkPureIcon, LinkPureSize, LinkPureTarget, Theme, LinkPureWeight } from '../types';\nexport type PLinkPureProps = BaseProps & {\n    /**\n     * Display link in active state.\n     */\n    active?: boolean;\n    /**\n     * Aligns the label.\n     */\n    alignLabel?: BreakpointCustomizable<LinkPureAlignLabel>;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<LinkPureAriaAttribute>;\n    /**\n     * Special download attribute to open native browser download dialog if target url points to a downloadable file.\n     */\n    download?: string;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * The icon shown. By choosing 'none', no icon is displayed\n     */\n    icon?: LinkPureIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    rel?: string;\n    /**\n     * Size of the link.\n     */\n    size?: BreakpointCustomizable<LinkPureSize>;\n    /**\n     * Stretches the area between icon and label to max available space.\n     */\n    stretch?: BreakpointCustomizable<boolean>;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: LinkPureTarget;\n    /**\n     * Adapts the button color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Shows an underline under the label.\n     */\n    underline?: boolean;\n    /**\n     * The weight of the text (only has effect with visible label).\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    weight?: LinkPureWeight;\n};\nexport declare const PLinkPure: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Display link in active state.\n     */\n    active?: boolean;\n    /**\n     * Aligns the label.\n     */\n    alignLabel?: BreakpointCustomizable<LinkPureAlignLabel>;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<LinkPureAriaAttribute>;\n    /**\n     * Special download attribute to open native browser download dialog if target url points to a downloadable file.\n     */\n    download?: string;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * The icon shown. By choosing 'none', no icon is displayed\n     */\n    icon?: LinkPureIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    rel?: string;\n    /**\n     * Size of the link.\n     */\n    size?: BreakpointCustomizable<LinkPureSize>;\n    /**\n     * Stretches the area between icon and label to max available space.\n     */\n    stretch?: BreakpointCustomizable<boolean>;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: LinkPureTarget;\n    /**\n     * Adapts the button color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Shows an underline under the label.\n     */\n    underline?: boolean;\n    /**\n     * The weight of the text (only has effect with visible label).\n     * @deprecated since v3.0.0, will be removed with next major release\n     */\n    weight?: LinkPureWeight;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/link-social.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, LinkSocialIcon, LinkSocialTarget, Theme } from '../types';\nexport type PLinkSocialProps = BaseProps & {\n    /**\n     * Show or hide label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * The icon shown.\n     */\n    icon?: LinkSocialIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    rel?: string;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: LinkSocialTarget;\n    /**\n     * Adapts the link color when used on dark background.\n     */\n    theme?: Theme;\n};\nexport declare const PLinkSocial: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Show or hide label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * The icon shown.\n     */\n    icon?: LinkSocialIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    rel?: string;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: LinkSocialTarget;\n    /**\n     * Adapts the link color when used on dark background.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/link-tile-model-signature.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, LinkTileModelSignatureAspectRatio, LinkTileModelSignatureHeadingTag, LinkTileModelSignatureLinkDirection, LinkTileModelSignatureModel, LinkTileModelSignatureWeight } from '../types';\nexport type PLinkTileModelSignatureProps = BaseProps & {\n    /**\n     * Aspect ratio of the link-tile-model-signature.\n     */\n    aspectRatio?: BreakpointCustomizable<LinkTileModelSignatureAspectRatio>;\n    /**\n     * Description text.\n     */\n    description?: string;\n    /**\n     * Heading text.\n     */\n    heading: string;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    headingTag?: LinkTileModelSignatureHeadingTag;\n    /**\n     * Defines the direction of the main and cross axis of the links. The default is '{base: ‘column’, xs: ‘row’}' showing buttons vertically stacked on mobile viewports and side-by-side in a horizontal row from breakpoint 'xs'.\n     */\n    linkDirection?: BreakpointCustomizable<LinkTileModelSignatureLinkDirection>;\n    /**\n     * Adapts the model of the component.\n     */\n    model?: LinkTileModelSignatureModel;\n    /**\n     * Adapts the font weight of the heading.\n     */\n    weight?: BreakpointCustomizable<LinkTileModelSignatureWeight>;\n};\nexport declare const PLinkTileModelSignature: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Aspect ratio of the link-tile-model-signature.\n     */\n    aspectRatio?: BreakpointCustomizable<LinkTileModelSignatureAspectRatio>;\n    /**\n     * Description text.\n     */\n    description?: string;\n    /**\n     * Heading text.\n     */\n    heading: string;\n    /**\n     * Sets a heading tag, so it fits correctly within the outline of the page.\n     */\n    headingTag?: LinkTileModelSignatureHeadingTag;\n    /**\n     * Defines the direction of the main and cross axis of the links. The default is '{base: ‘column’, xs: ‘row’}' showing buttons vertically stacked on mobile viewports and side-by-side in a horizontal row from breakpoint 'xs'.\n     */\n    linkDirection?: BreakpointCustomizable<LinkTileModelSignatureLinkDirection>;\n    /**\n     * Adapts the model of the component.\n     */\n    model?: LinkTileModelSignatureModel;\n    /**\n     * Adapts the font weight of the heading.\n     */\n    weight?: BreakpointCustomizable<LinkTileModelSignatureWeight>;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/link-tile-product.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, LinkTileProductAspectRatio, LinkTileProductLikeEventDetail, LinkTileProductTarget, Theme } from '../types';\nexport type PLinkTileProductProps = BaseProps & {\n    /**\n     * Aspect ratio of the link-tile-product.\n     */\n    aspectRatio?: BreakpointCustomizable<LinkTileProductAspectRatio>;\n    /**\n     * Additional product description.\n     */\n    description?: string;\n    /**\n     * Product heading.\n     */\n    heading: string;\n    /**\n     * href of the `<a>`.\n     */\n    href?: string;\n    /**\n     * A Boolean attribute indicating that a like button should be shown.\n     */\n    likeButton?: boolean;\n    /**\n     * A Boolean attribute indicating that a product is liked.\n     */\n    liked?: boolean;\n    /**\n     * Emitted when the like button is clicked.\n     */\n    onLike?: (event: CustomEvent<LinkTileProductLikeEventDetail>) => void;\n    /**\n     * Product retail price (with or without discount).\n     */\n    price: string;\n    /**\n     * Shows original price (recommended retail price) with line-through. Needs prop \"price\" to be defined, otherwise this prop has no effect.\n     */\n    priceOriginal?: string;\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    rel?: string;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: LinkTileProductTarget;\n    /**\n     * Adapts the link-tile-product color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PLinkTileProduct: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Aspect ratio of the link-tile-product.\n     */\n    aspectRatio?: BreakpointCustomizable<LinkTileProductAspectRatio>;\n    /**\n     * Additional product description.\n     */\n    description?: string;\n    /**\n     * Product heading.\n     */\n    heading: string;\n    /**\n     * href of the `<a>`.\n     */\n    href?: string;\n    /**\n     * A Boolean attribute indicating that a like button should be shown.\n     */\n    likeButton?: boolean;\n    /**\n     * A Boolean attribute indicating that a product is liked.\n     */\n    liked?: boolean;\n    /**\n     * Emitted when the like button is clicked.\n     */\n    onLike?: (event: CustomEvent<LinkTileProductLikeEventDetail>) => void;\n    /**\n     * Product retail price (with or without discount).\n     */\n    price: string;\n    /**\n     * Shows original price (recommended retail price) with line-through. Needs prop \"price\" to be defined, otherwise this prop has no effect.\n     */\n    priceOriginal?: string;\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    rel?: string;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: LinkTileProductTarget;\n    /**\n     * Adapts the link-tile-product color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/link-tile.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { LinkTileAlign, SelectedAriaAttributes, LinkTileAriaAttribute, BreakpointCustomizable, LinkTileAspectRatio, LinkTileBackground, LinkTileSize, LinkTileTarget, LinkTileWeight } from '../types';\nexport type PLinkTileProps = BaseProps & {\n    /**\n     * Alignment of link and description.\n     */\n    align?: LinkTileAlign;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<LinkTileAriaAttribute>;\n    /**\n     * Aspect ratio of the link-tile.\n     */\n    aspectRatio?: BreakpointCustomizable<LinkTileAspectRatio>;\n    /**\n     * Adapts the description and link theme when used on light background image.\n     */\n    background?: LinkTileBackground;\n    /**\n     * Displays the link-tile as compact version with description and link icon only.\n     */\n    compact?: BreakpointCustomizable<boolean>;\n    /**\n     * Description text.\n     */\n    description: string;\n    /**\n     * Special download attribute to open native browser download dialog if target url points to a downloadable file.\n     */\n    download?: string;\n    /**\n     * Show gradient.\n     */\n    gradient?: boolean;\n    /**\n     * href of the `<a>`.\n     */\n    href: string;\n    /**\n     * Label of the <a />.\n     */\n    label: string;\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    rel?: string;\n    /**\n     * Font size of the description.\n     */\n    size?: BreakpointCustomizable<LinkTileSize>;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: LinkTileTarget;\n    /**\n     * Font weight of the description.\n     */\n    weight?: BreakpointCustomizable<LinkTileWeight>;\n};\nexport declare const PLinkTile: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Alignment of link and description.\n     */\n    align?: LinkTileAlign;\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<LinkTileAriaAttribute>;\n    /**\n     * Aspect ratio of the link-tile.\n     */\n    aspectRatio?: BreakpointCustomizable<LinkTileAspectRatio>;\n    /**\n     * Adapts the description and link theme when used on light background image.\n     */\n    background?: LinkTileBackground;\n    /**\n     * Displays the link-tile as compact version with description and link icon only.\n     */\n    compact?: BreakpointCustomizable<boolean>;\n    /**\n     * Description text.\n     */\n    description: string;\n    /**\n     * Special download attribute to open native browser download dialog if target url points to a downloadable file.\n     */\n    download?: string;\n    /**\n     * Show gradient.\n     */\n    gradient?: boolean;\n    /**\n     * href of the `<a>`.\n     */\n    href: string;\n    /**\n     * Label of the <a />.\n     */\n    label: string;\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    rel?: string;\n    /**\n     * Font size of the description.\n     */\n    size?: BreakpointCustomizable<LinkTileSize>;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: LinkTileTarget;\n    /**\n     * Font weight of the description.\n     */\n    weight?: BreakpointCustomizable<LinkTileWeight>;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/link.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, LinkAriaAttribute, BreakpointCustomizable, LinkIcon, LinkTarget, Theme, LinkVariant } from '../types';\nexport type PLinkProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<LinkAriaAttribute>;\n    /**\n     * Special download attribute to open native browser download dialog if target url points to a downloadable file.\n     */\n    download?: string;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * The icon shown. By choosing 'none', no icon is displayed.\n     */\n    icon?: LinkIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    rel?: string;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: LinkTarget;\n    /**\n     * Adapts the link color when used on dark background.\n     */\n    theme?: Theme;\n    /**\n     * The style variant of the link.\n     */\n    variant?: LinkVariant;\n};\nexport declare const PLink: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<LinkAriaAttribute>;\n    /**\n     * Special download attribute to open native browser download dialog if target url points to a downloadable file.\n     */\n    download?: string;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * The icon shown. By choosing 'none', no icon is displayed.\n     */\n    icon?: LinkIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Specifies the relationship of the target object to the link object.\n     */\n    rel?: string;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: LinkTarget;\n    /**\n     * Adapts the link color when used on dark background.\n     */\n    theme?: Theme;\n    /**\n     * The style variant of the link.\n     */\n    variant?: LinkVariant;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/marque.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, MarqueAriaAttribute, MarqueSize, MarqueTarget, MarqueVariant } from '../types';\nexport type PMarqueProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<MarqueAriaAttribute>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * Adapts sizing of marque.\n     */\n    size?: MarqueSize;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: MarqueTarget;\n    /**\n     * Show/hide trademark sign (only has effect when variant is set to default).\n     */\n    trademark?: boolean;\n    /**\n     * Shows marque in special editions\n     */\n    variant?: MarqueVariant;\n};\n/** @deprecated since v3.0.0, will be removed with next major release. Please use \"p-wordmark\" instead. */\nexport declare const PMarque: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<MarqueAriaAttribute>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * Adapts sizing of marque.\n     */\n    size?: MarqueSize;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: MarqueTarget;\n    /**\n     * Show/hide trademark sign (only has effect when variant is set to default).\n     */\n    trademark?: boolean;\n    /**\n     * Shows marque in special editions\n     */\n    variant?: MarqueVariant;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/modal.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, ModalAriaAttribute, ModalBackdrop, BreakpointCustomizable, ModalMotionHiddenEndEventDetail, ModalMotionVisibleEndEventDetail, Theme } from '../types';\nexport type PModalProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<ModalAriaAttribute>;\n    /**\n     * Defines the backdrop, 'blur' (should be used when Modal is opened by user interaction, e.g. after a click on a button) and 'shading' (should be used when Modal gets opened automatically, e.g. Cookie Consent).\n     */\n    backdrop?: ModalBackdrop;\n    /**\n     * If true, the modal will not be closable via backdrop click.\n     */\n    disableBackdropClick?: boolean;\n    /**\n     * If true, the modal will not have a dismiss button.\n     * @deprecated since v3.0.0, will be removed with next major release, use `dismissButton` instead.\n     */\n    disableCloseButton?: boolean;\n    /**\n     * If false, the modal will not have a dismiss button.\n     */\n    dismissButton?: boolean;\n    /**\n     * If true the modal uses max viewport height and width. Should only be used for mobile.\n     */\n    fullscreen?: BreakpointCustomizable<boolean>;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `header` slot instead The title of the modal\n     */\n    heading?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `dismiss` event instead. Emitted when the component requests to be dismissed.\n     */\n    onClose?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when the component requests to be dismissed.\n     */\n    onDismiss?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when the modal is closed and the transition is finished.\n     */\n    onMotionHiddenEnd?: (event: CustomEvent<ModalMotionHiddenEndEventDetail>) => void;\n    /**\n     * Emitted when the modal is opened and the transition is finished.\n     */\n    onMotionVisibleEnd?: (event: CustomEvent<ModalMotionVisibleEndEventDetail>) => void;\n    /**\n     * If true, the modal is open.\n     */\n    open: boolean;\n    /**\n     * Adapts the modal color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PModal: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<ModalAriaAttribute>;\n    /**\n     * Defines the backdrop, 'blur' (should be used when Modal is opened by user interaction, e.g. after a click on a button) and 'shading' (should be used when Modal gets opened automatically, e.g. Cookie Consent).\n     */\n    backdrop?: ModalBackdrop;\n    /**\n     * If true, the modal will not be closable via backdrop click.\n     */\n    disableBackdropClick?: boolean;\n    /**\n     * If true, the modal will not have a dismiss button.\n     * @deprecated since v3.0.0, will be removed with next major release, use `dismissButton` instead.\n     */\n    disableCloseButton?: boolean;\n    /**\n     * If false, the modal will not have a dismiss button.\n     */\n    dismissButton?: boolean;\n    /**\n     * If true the modal uses max viewport height and width. Should only be used for mobile.\n     */\n    fullscreen?: BreakpointCustomizable<boolean>;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `header` slot instead The title of the modal\n     */\n    heading?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `dismiss` event instead. Emitted when the component requests to be dismissed.\n     */\n    onClose?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when the component requests to be dismissed.\n     */\n    onDismiss?: (event: CustomEvent<void>) => void;\n    /**\n     * Emitted when the modal is closed and the transition is finished.\n     */\n    onMotionHiddenEnd?: (event: CustomEvent<ModalMotionHiddenEndEventDetail>) => void;\n    /**\n     * Emitted when the modal is opened and the transition is finished.\n     */\n    onMotionVisibleEnd?: (event: CustomEvent<ModalMotionVisibleEndEventDetail>) => void;\n    /**\n     * If true, the modal is open.\n     */\n    open: boolean;\n    /**\n     * Adapts the modal color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/model-signature.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { ModelSignatureColor, ModelSignatureFetchPriority, ModelSignatureModel, ModelSignatureSize, Theme } from '../types';\nexport type PModelSignatureProps = BaseProps & {\n    /**\n     * Adapts the color of the component.\n     */\n    color?: ModelSignatureColor;\n    /**\n     * Defines the fetch priority of the model signature. In the end it is just a recommendation to the browser, but it defines the priority on its own.\n     */\n    fetchPriority?: ModelSignatureFetchPriority;\n    /**\n     * Defines whether the model signature is always loaded or only loaded when it is in the viewport (this feature may not work reliably).\n     */\n    lazy?: boolean;\n    /**\n     * Adapts the model of the component.\n     */\n    model?: ModelSignatureModel;\n    /**\n     * When set to `true`, then all model signatures are visually aligned with each other. When set to `false` the model signature comes without any safe zone.\n     */\n    safeZone?: boolean;\n    /**\n     * Adapts the size of the component. When set to `inherit` a CSS `width` or `height` needs to be defined on the host but not both.\n     */\n    size?: ModelSignatureSize;\n    /**\n     * Adapts color depending on theme.\n     */\n    theme?: Theme;\n};\nexport declare const PModelSignature: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Adapts the color of the component.\n     */\n    color?: ModelSignatureColor;\n    /**\n     * Defines the fetch priority of the model signature. In the end it is just a recommendation to the browser, but it defines the priority on its own.\n     */\n    fetchPriority?: ModelSignatureFetchPriority;\n    /**\n     * Defines whether the model signature is always loaded or only loaded when it is in the viewport (this feature may not work reliably).\n     */\n    lazy?: boolean;\n    /**\n     * Adapts the model of the component.\n     */\n    model?: ModelSignatureModel;\n    /**\n     * When set to `true`, then all model signatures are visually aligned with each other. When set to `false` the model signature comes without any safe zone.\n     */\n    safeZone?: boolean;\n    /**\n     * Adapts the size of the component. When set to `inherit` a CSS `width` or `height` needs to be defined on the host but not both.\n     */\n    size?: ModelSignatureSize;\n    /**\n     * Adapts color depending on theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/multi-select-option.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type PMultiSelectOptionProps = BaseProps & {\n    /**\n     * Disables the option.\n     */\n    disabled?: boolean;\n    /**\n     * The option value.\n     */\n    value: string;\n};\nexport declare const PMultiSelectOption: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Disables the option.\n     */\n    disabled?: boolean;\n    /**\n     * The option value.\n     */\n    value: string;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/multi-select.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { MultiSelectDropdownDirection, BreakpointCustomizable, MultiSelectUpdateEventDetail, MultiSelectState, Theme } from '../types';\nexport type PMultiSelectProps = BaseProps & {\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Disables the multi-select\n     */\n    disabled?: boolean;\n    /**\n     * Changes the direction to which the dropdown list appears.\n     */\n    dropdownDirection?: MultiSelectDropdownDirection;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * The name of the control.\n     */\n    name: string;\n    /**\n     * Emitted when the selection is changed.\n     */\n    onUpdate?: (event: CustomEvent<MultiSelectUpdateEventDetail>) => void;\n    /**\n     * A Boolean attribute indicating that an option with a non-empty string value must be selected.\n     */\n    required?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: MultiSelectState;\n    /**\n     * Adapts the select color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * The selected values.\n     */\n    value?: string[];\n};\nexport declare const PMultiSelect: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Disables the multi-select\n     */\n    disabled?: boolean;\n    /**\n     * Changes the direction to which the dropdown list appears.\n     */\n    dropdownDirection?: MultiSelectDropdownDirection;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * The name of the control.\n     */\n    name: string;\n    /**\n     * Emitted when the selection is changed.\n     */\n    onUpdate?: (event: CustomEvent<MultiSelectUpdateEventDetail>) => void;\n    /**\n     * A Boolean attribute indicating that an option with a non-empty string value must be selected.\n     */\n    required?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: MultiSelectState;\n    /**\n     * Adapts the select color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * The selected values.\n     */\n    value?: string[];\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/optgroup.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type POptgroupProps = BaseProps & {\n    /**\n     * Disables the optgroup.\n     */\n    disabled?: boolean;\n    /**\n     * The optgroup label.\n     */\n    label?: string;\n};\nexport declare const POptgroup: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Disables the optgroup.\n     */\n    disabled?: boolean;\n    /**\n     * The optgroup label.\n     */\n    label?: string;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/pagination.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { PaginationInternationalization, BreakpointCustomizable, PaginationMaxNumberOfPageLinks, PaginationUpdateEventDetail, Theme } from '../types';\nexport type PPaginationProps = BaseProps & {\n    /**\n     * Index of the currently active page.\n     */\n    activePage: number;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `intl.root` instead. Aria label what the pagination is used for.\n     */\n    allyLabel?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `intl.next` instead. Aria label for next page icon.\n     */\n    allyLabelNext?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `intl.page` instead. Aria label for page navigation.\n     */\n    allyLabelPage?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `intl.prev` instead. Aria label for previous page icon.\n     */\n    allyLabelPrev?: string;\n    /**\n     * Override the default wordings that are used for aria-labels on the next/prev and page buttons.\n     */\n    intl?: PaginationInternationalization;\n    /**\n     * The total count of items which should be shown per page.\n     */\n    itemsPerPage?: number;\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.10.0, will be removed with next major release\n     */\n    maxNumberOfPageLinks?: BreakpointCustomizable<PaginationMaxNumberOfPageLinks>;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when the page changes.\n     */\n    onPageChange?: (event: CustomEvent<PaginationUpdateEventDetail>) => void;\n    /**\n     * Emitted when the page changes.\n     */\n    onUpdate?: (event: CustomEvent<PaginationUpdateEventDetail>) => void;\n    /**\n     * Show or hide the button to jump to the last page.\n     */\n    showLastPage?: boolean;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n    /**\n     * The total count of items.\n     */\n    totalItemsCount: number;\n};\nexport declare const PPagination: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Index of the currently active page.\n     */\n    activePage: number;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `intl.root` instead. Aria label what the pagination is used for.\n     */\n    allyLabel?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `intl.next` instead. Aria label for next page icon.\n     */\n    allyLabelNext?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `intl.page` instead. Aria label for page navigation.\n     */\n    allyLabelPage?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `intl.prev` instead. Aria label for previous page icon.\n     */\n    allyLabelPrev?: string;\n    /**\n     * Override the default wordings that are used for aria-labels on the next/prev and page buttons.\n     */\n    intl?: PaginationInternationalization;\n    /**\n     * The total count of items which should be shown per page.\n     */\n    itemsPerPage?: number;\n    /**\n     * Has no effect anymore\n     * @deprecated since v3.10.0, will be removed with next major release\n     */\n    maxNumberOfPageLinks?: BreakpointCustomizable<PaginationMaxNumberOfPageLinks>;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when the page changes.\n     */\n    onPageChange?: (event: CustomEvent<PaginationUpdateEventDetail>) => void;\n    /**\n     * Emitted when the page changes.\n     */\n    onUpdate?: (event: CustomEvent<PaginationUpdateEventDetail>) => void;\n    /**\n     * Show or hide the button to jump to the last page.\n     */\n    showLastPage?: boolean;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n    /**\n     * The total count of items.\n     */\n    totalItemsCount: number;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/pin-code.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, PinCodeLength, PinCodeUpdateEventDetail, PinCodeState, Theme, PinCodeType } from '../types';\nexport type PPinCodeProps = BaseProps & {\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Disables the Pin Code. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * Show or hide label and description text. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * Number of characters of the Pin Code.\n     */\n    length?: PinCodeLength;\n    /**\n     * Disables the Pin Code and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    loading?: boolean;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * Name of the control.\n     */\n    name?: string;\n    /**\n     * Emitted when selected element changes.\n     */\n    onUpdate?: (event: CustomEvent<PinCodeUpdateEventDetail>) => void;\n    /**\n     * Marks the Pin Code as required.\n     */\n    required?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: PinCodeState;\n    /**\n     * Adapts the color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Pin Code type.\n     */\n    type?: PinCodeType;\n    /**\n     * Sets the initial value of the Pin Code.\n     */\n    value?: string;\n};\nexport declare const PPinCode: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Disables the Pin Code. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * Show or hide label and description text. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * Number of characters of the Pin Code.\n     */\n    length?: PinCodeLength;\n    /**\n     * Disables the Pin Code and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    loading?: boolean;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * Name of the control.\n     */\n    name?: string;\n    /**\n     * Emitted when selected element changes.\n     */\n    onUpdate?: (event: CustomEvent<PinCodeUpdateEventDetail>) => void;\n    /**\n     * Marks the Pin Code as required.\n     */\n    required?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: PinCodeState;\n    /**\n     * Adapts the color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Pin Code type.\n     */\n    type?: PinCodeType;\n    /**\n     * Sets the initial value of the Pin Code.\n     */\n    value?: string;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/popover.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, PopoverAriaAttribute, PopoverDirection, Theme } from '../types';\nexport type PPopoverProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<PopoverAriaAttribute>;\n    /**\n     * Descriptive text to show additional information when popover is open\n     */\n    description?: string;\n    /**\n     * Preferred direction in which popover should open, given there is enough space in viewport. Otherwise, it will be opened in the direction with most available space.\n     */\n    direction?: PopoverDirection;\n    /**\n     * Adapts the popover color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PPopover: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<PopoverAriaAttribute>;\n    /**\n     * Descriptive text to show additional information when popover is open\n     */\n    description?: string;\n    /**\n     * Preferred direction in which popover should open, given there is enough space in viewport. Otherwise, it will be opened in the direction with most available space.\n     */\n    direction?: PopoverDirection;\n    /**\n     * Adapts the popover color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/radio-button-wrapper.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, RadioButtonWrapperState, Theme } from '../types';\nexport type PRadioButtonWrapperProps = BaseProps & {\n    /**\n     * Show or hide label. For better accessibility it's recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * @experimental Disables the radio button and shows a loading indicator.\n     */\n    loading?: boolean;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * The validation state.\n     */\n    state?: RadioButtonWrapperState;\n    /**\n     * Adapts the color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PRadioButtonWrapper: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Show or hide label. For better accessibility it's recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * @experimental Disables the radio button and shows a loading indicator.\n     */\n    loading?: boolean;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * The validation state.\n     */\n    state?: RadioButtonWrapperState;\n    /**\n     * Adapts the color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/scroller.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { ScrollerAlignScrollIndicator, SelectedAriaAttributes, ScrollerAriaAttribute, ScrollerGradientColor, ScrollerGradientColorScheme, ScrollerScrollIndicatorPosition, ScrollerScrollToPosition, Theme } from '../types';\nexport type PScrollerProps = BaseProps & {\n    /**\n     * Sets the vertical position of scroll indicator.\n     */\n    alignScrollIndicator?: ScrollerAlignScrollIndicator;\n    /**\n     * Add ARIA role.\n     */\n    aria?: SelectedAriaAttributes<ScrollerAriaAttribute>;\n    /**\n     * Adapts the background gradient color of prev and next button.\n     */\n    gradientColor?: ScrollerGradientColor;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `gradientColor` instead. Adapts the background gradient color of prev and next button.\n     */\n    gradientColorScheme?: ScrollerGradientColorScheme;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `alignScrollIndicator` instead. Sets the vertical position of scroll indicator\n     */\n    scrollIndicatorPosition?: ScrollerScrollIndicatorPosition;\n    /**\n     * Scrolls the scroll area to the left either smooth or immediately.\n     */\n    scrollToPosition?: ScrollerScrollToPosition;\n    /**\n     * Specifies if scrollbar should be shown.\n     */\n    scrollbar?: boolean;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n};\nexport declare const PScroller: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Sets the vertical position of scroll indicator.\n     */\n    alignScrollIndicator?: ScrollerAlignScrollIndicator;\n    /**\n     * Add ARIA role.\n     */\n    aria?: SelectedAriaAttributes<ScrollerAriaAttribute>;\n    /**\n     * Adapts the background gradient color of prev and next button.\n     */\n    gradientColor?: ScrollerGradientColor;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `gradientColor` instead. Adapts the background gradient color of prev and next button.\n     */\n    gradientColorScheme?: ScrollerGradientColorScheme;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `alignScrollIndicator` instead. Sets the vertical position of scroll indicator\n     */\n    scrollIndicatorPosition?: ScrollerScrollIndicatorPosition;\n    /**\n     * Scrolls the scroll area to the left either smooth or immediately.\n     */\n    scrollToPosition?: ScrollerScrollToPosition;\n    /**\n     * Specifies if scrollbar should be shown.\n     */\n    scrollbar?: boolean;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/segmented-control-item.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, SegmentedControlItemAriaAttribute, SegmentedControlItemIcon } from '../types';\nexport type PSegmentedControlItemProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<SegmentedControlItemAriaAttribute>;\n    /**\n     * Disables the button. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * The icon shown.\n     */\n    icon?: SegmentedControlItemIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The value of this item which is emitted by the parent element if it becomes selected. This property is **required**.\n     */\n    value: string | number;\n};\nexport declare const PSegmentedControlItem: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<SegmentedControlItemAriaAttribute>;\n    /**\n     * Disables the button. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * The icon shown.\n     */\n    icon?: SegmentedControlItemIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The value of this item which is emitted by the parent element if it becomes selected. This property is **required**.\n     */\n    value: string | number;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/segmented-control.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SegmentedControlBackgroundColor, BreakpointCustomizable, SegmentedControlColumns, SegmentedControlUpdateEventDetail, Theme } from '../types';\nexport type PSegmentedControlProps = BaseProps & {\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release. Background color variations\n     */\n    backgroundColor?: SegmentedControlBackgroundColor;\n    /**\n     * Sets the amount of columns.\n     */\n    columns?: BreakpointCustomizable<SegmentedControlColumns>;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when selected element changes.\n     */\n    onSegmentedControlChange?: (event: CustomEvent<SegmentedControlUpdateEventDetail>) => void;\n    /**\n     * Emitted when selected element changes.\n     */\n    onUpdate?: (event: CustomEvent<SegmentedControlUpdateEventDetail>) => void;\n    /**\n     * Adapts the segmented-control color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Sets the initial value of the segmented-control.\n     */\n    value?: string | number;\n};\nexport declare const PSegmentedControl: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release. Background color variations\n     */\n    backgroundColor?: SegmentedControlBackgroundColor;\n    /**\n     * Sets the amount of columns.\n     */\n    columns?: BreakpointCustomizable<SegmentedControlColumns>;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when selected element changes.\n     */\n    onSegmentedControlChange?: (event: CustomEvent<SegmentedControlUpdateEventDetail>) => void;\n    /**\n     * Emitted when selected element changes.\n     */\n    onUpdate?: (event: CustomEvent<SegmentedControlUpdateEventDetail>) => void;\n    /**\n     * Adapts the segmented-control color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * Sets the initial value of the segmented-control.\n     */\n    value?: string | number;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/select-option.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type PSelectOptionProps = BaseProps & {\n    /**\n     * Disables the option.\n     */\n    disabled?: boolean;\n    /**\n     * The option value.\n     */\n    value?: string;\n};\nexport declare const PSelectOption: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Disables the option.\n     */\n    disabled?: boolean;\n    /**\n     * The option value.\n     */\n    value?: string;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/select-wrapper.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectWrapperDropdownDirection, BreakpointCustomizable, SelectWrapperState, Theme } from '../types';\nexport type PSelectWrapperProps = BaseProps & {\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Changes the direction to which the dropdown list appears.\n     */\n    dropdownDirection?: SelectWrapperDropdownDirection;\n    /**\n     * Filters select options by typing a character\n     */\n    filter?: boolean;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * Forces rendering of native browser select dropdown\n     */\n    native?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: SelectWrapperState;\n    /**\n     * Adapts the select color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PSelectWrapper: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Changes the direction to which the dropdown list appears.\n     */\n    dropdownDirection?: SelectWrapperDropdownDirection;\n    /**\n     * Filters select options by typing a character\n     */\n    filter?: boolean;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * Forces rendering of native browser select dropdown\n     */\n    native?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: SelectWrapperState;\n    /**\n     * Adapts the select color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/select.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectDropdownDirection, BreakpointCustomizable, SelectUpdateEventDetail, SelectState, Theme } from '../types';\nexport type PSelectProps = BaseProps & {\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Disables the select\n     */\n    disabled?: boolean;\n    /**\n     * Changes the direction to which the dropdown list appears.\n     */\n    dropdownDirection?: SelectDropdownDirection;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * The name of the control.\n     */\n    name: string;\n    /**\n     * Emitted when the selection is changed.\n     */\n    onUpdate?: (event: CustomEvent<SelectUpdateEventDetail>) => void;\n    /**\n     * A Boolean attribute indicating that an option with a non-empty string value must be selected.\n     */\n    required?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: SelectState;\n    /**\n     * Adapts the select color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * The selected value.\n     */\n    value?: string;\n};\nexport declare const PSelect: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Disables the select\n     */\n    disabled?: boolean;\n    /**\n     * Changes the direction to which the dropdown list appears.\n     */\n    dropdownDirection?: SelectDropdownDirection;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * The name of the control.\n     */\n    name: string;\n    /**\n     * Emitted when the selection is changed.\n     */\n    onUpdate?: (event: CustomEvent<SelectUpdateEventDetail>) => void;\n    /**\n     * A Boolean attribute indicating that an option with a non-empty string value must be selected.\n     */\n    required?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: SelectState;\n    /**\n     * Adapts the select color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * The selected value.\n     */\n    value?: string;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/spinner.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, SpinnerAriaAttribute, BreakpointCustomizable, SpinnerSize, Theme } from '../types';\nexport type PSpinnerProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<SpinnerAriaAttribute>;\n    /**\n     * Size of the spinner.\n     */\n    size?: BreakpointCustomizable<SpinnerSize>;\n    /**\n     * Adapts the spinner color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PSpinner: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<SpinnerAriaAttribute>;\n    /**\n     * Size of the spinner.\n     */\n    size?: BreakpointCustomizable<SpinnerSize>;\n    /**\n     * Adapts the spinner color depending on the theme.\n     */\n    theme?: Theme;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/stepper-horizontal-item.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { StepperHorizontalItemState } from '../types';\nexport type PStepperHorizontalItemProps = BaseProps & {\n    /**\n     * Disables the stepper-horizontal-item. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: StepperHorizontalItemState;\n};\nexport declare const PStepperHorizontalItem: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Disables the stepper-horizontal-item. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: StepperHorizontalItemState;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/stepper-horizontal.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { StepperHorizontalUpdateEventDetail, BreakpointCustomizable, StepperHorizontalSize, Theme } from '../types';\nexport type PStepperHorizontalProps = BaseProps & {\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when active step is changed.\n     */\n    onStepChange?: (event: CustomEvent<StepperHorizontalUpdateEventDetail>) => void;\n    /**\n     * Emitted when active step is changed.\n     */\n    onUpdate?: (event: CustomEvent<StepperHorizontalUpdateEventDetail>) => void;\n    /**\n     * The text size.\n     */\n    size?: BreakpointCustomizable<StepperHorizontalSize>;\n    /**\n     * Adapts the tag color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PStepperHorizontal: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when active step is changed.\n     */\n    onStepChange?: (event: CustomEvent<StepperHorizontalUpdateEventDetail>) => void;\n    /**\n     * Emitted when active step is changed.\n     */\n    onUpdate?: (event: CustomEvent<StepperHorizontalUpdateEventDetail>) => void;\n    /**\n     * The text size.\n     */\n    size?: BreakpointCustomizable<StepperHorizontalSize>;\n    /**\n     * Adapts the tag color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/switch.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, SwitchAlignLabel, SwitchUpdateEventDetail, Theme } from '../types';\nexport type PSwitchProps = BaseProps & {\n    /**\n     * Aligns the label.\n     */\n    alignLabel?: BreakpointCustomizable<SwitchAlignLabel>;\n    /**\n     * Visualize the switch with on/off status.\n     */\n    checked?: boolean;\n    /**\n     * Disables the switch. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * Show or hide label. For better accessibility it's recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * Disables the switch and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    loading?: boolean;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when checked status is changed.\n     */\n    onSwitchChange?: (event: CustomEvent<SwitchUpdateEventDetail>) => void;\n    /**\n     * Emitted when checked status is changed.\n     */\n    onUpdate?: (event: CustomEvent<SwitchUpdateEventDetail>) => void;\n    /**\n     * Stretches the contents to max available space.\n     */\n    stretch?: BreakpointCustomizable<boolean>;\n    /**\n     * Adapts the switch color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PSwitch: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Aligns the label.\n     */\n    alignLabel?: BreakpointCustomizable<SwitchAlignLabel>;\n    /**\n     * Visualize the switch with on/off status.\n     */\n    checked?: boolean;\n    /**\n     * Disables the switch. No events will be triggered while disabled state is active.\n     */\n    disabled?: boolean;\n    /**\n     * Show or hide label. For better accessibility it's recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * Disables the switch and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    loading?: boolean;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when checked status is changed.\n     */\n    onSwitchChange?: (event: CustomEvent<SwitchUpdateEventDetail>) => void;\n    /**\n     * Emitted when checked status is changed.\n     */\n    onUpdate?: (event: CustomEvent<SwitchUpdateEventDetail>) => void;\n    /**\n     * Stretches the contents to max available space.\n     */\n    stretch?: BreakpointCustomizable<boolean>;\n    /**\n     * Adapts the switch color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/table-body.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type PTableBodyProps = BaseProps & {};\nexport declare const PTableBody: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/table-cell.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type PTableCellProps = BaseProps & {\n    /**\n     * Displays slotted text multiline or forced into a single line.\n     */\n    multiline?: boolean;\n};\nexport declare const PTableCell: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Displays slotted text multiline or forced into a single line.\n     */\n    multiline?: boolean;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/table-head-cell.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { TableHeadCellSort } from '../types';\nexport type PTableHeadCellProps = BaseProps & {\n    /**\n     * Hides the label but stays accessible for screen readers. This property only takes effect when sort property is not defined.\n     */\n    hideLabel?: boolean;\n    /**\n     * Displays slotted text multiline or forced into a single line.\n     */\n    multiline?: boolean;\n    /**\n     * Defines sortability properties.\n     */\n    sort?: TableHeadCellSort;\n};\nexport declare const PTableHeadCell: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Hides the label but stays accessible for screen readers. This property only takes effect when sort property is not defined.\n     */\n    hideLabel?: boolean;\n    /**\n     * Displays slotted text multiline or forced into a single line.\n     */\n    multiline?: boolean;\n    /**\n     * Defines sortability properties.\n     */\n    sort?: TableHeadCellSort;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/table-head-row.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type PTableHeadRowProps = BaseProps & {};\nexport declare const PTableHeadRow: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/table-head.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type PTableHeadProps = BaseProps & {};\nexport declare const PTableHead: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/table-row.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type PTableRowProps = BaseProps & {};\nexport declare const PTableRow: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/table.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { TableUpdateEventDetail, Theme } from '../types';\nexport type PTableProps = BaseProps & {\n    /**\n     * A caption describing the contents of the table for accessibility only. This won't be visible in the browser. Use an element with an attribute of `slot=\"caption\"` for a visible caption.\n     */\n    caption?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when sorting is changed.\n     */\n    onSortingChange?: (event: CustomEvent<TableUpdateEventDetail>) => void;\n    /**\n     * Emitted when sorting is changed.\n     */\n    onUpdate?: (event: CustomEvent<TableUpdateEventDetail>) => void;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n};\nexport declare const PTable: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * A caption describing the contents of the table for accessibility only. This won't be visible in the browser. Use an element with an attribute of `slot=\"caption\"` for a visible caption.\n     */\n    caption?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when sorting is changed.\n     */\n    onSortingChange?: (event: CustomEvent<TableUpdateEventDetail>) => void;\n    /**\n     * Emitted when sorting is changed.\n     */\n    onUpdate?: (event: CustomEvent<TableUpdateEventDetail>) => void;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/tabs-bar.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { TabsBarGradientColor, TabsBarGradientColorScheme, TabsBarUpdateEventDetail, BreakpointCustomizable, TabsBarSize, Theme, TabsBarWeight } from '../types';\nexport type PTabsBarProps = BaseProps & {\n    /**\n     * Defines which tab to be visualized as selected (zero-based numbering), undefined if none should be selected.\n     */\n    activeTabIndex?: number | undefined;\n    /**\n     * Adapts the background gradient color of prev and next button.\n     */\n    gradientColor?: TabsBarGradientColor;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `gradientColor` instead. Adapts the background gradient color of prev and next button.\n     */\n    gradientColorScheme?: TabsBarGradientColorScheme;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when active tab is changed.\n     */\n    onTabChange?: (event: CustomEvent<TabsBarUpdateEventDetail>) => void;\n    /**\n     * Emitted when active tab is changed.\n     */\n    onUpdate?: (event: CustomEvent<TabsBarUpdateEventDetail>) => void;\n    /**\n     * The text size.\n     */\n    size?: BreakpointCustomizable<TabsBarSize>;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n    /**\n     * The text weight.\n     */\n    weight?: TabsBarWeight;\n};\nexport declare const PTabsBar: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Defines which tab to be visualized as selected (zero-based numbering), undefined if none should be selected.\n     */\n    activeTabIndex?: number | undefined;\n    /**\n     * Adapts the background gradient color of prev and next button.\n     */\n    gradientColor?: TabsBarGradientColor;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `gradientColor` instead. Adapts the background gradient color of prev and next button.\n     */\n    gradientColorScheme?: TabsBarGradientColorScheme;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when active tab is changed.\n     */\n    onTabChange?: (event: CustomEvent<TabsBarUpdateEventDetail>) => void;\n    /**\n     * Emitted when active tab is changed.\n     */\n    onUpdate?: (event: CustomEvent<TabsBarUpdateEventDetail>) => void;\n    /**\n     * The text size.\n     */\n    size?: BreakpointCustomizable<TabsBarSize>;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n    /**\n     * The text weight.\n     */\n    weight?: TabsBarWeight;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/tabs-item.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type PTabsItemProps = BaseProps & {\n    /**\n     * Defines the label used in tabs.\n     */\n    label: string;\n};\nexport declare const PTabsItem: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Defines the label used in tabs.\n     */\n    label: string;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/tabs.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { TabsGradientColor, TabsGradientColorScheme, TabsUpdateEventDetail, BreakpointCustomizable, TabsSize, Theme, TabsWeight } from '../types';\nexport type PTabsProps = BaseProps & {\n    /**\n     * Defines which tab to be visualized as selected (zero-based numbering).\n     */\n    activeTabIndex?: number;\n    /**\n     * Adapts the background gradient color of prev and next button.\n     */\n    gradientColor?: TabsGradientColor;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `gradientColor` instead. Adapts the background gradient color of prev and next button.\n     */\n    gradientColorScheme?: TabsGradientColorScheme;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when active tab is changed.\n     */\n    onTabChange?: (event: CustomEvent<TabsUpdateEventDetail>) => void;\n    /**\n     * Emitted when active tab is changed.\n     */\n    onUpdate?: (event: CustomEvent<TabsUpdateEventDetail>) => void;\n    /**\n     * The text size.\n     */\n    size?: BreakpointCustomizable<TabsSize>;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n    /**\n     * The text weight.\n     */\n    weight?: TabsWeight;\n};\nexport declare const PTabs: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Defines which tab to be visualized as selected (zero-based numbering).\n     */\n    activeTabIndex?: number;\n    /**\n     * Adapts the background gradient color of prev and next button.\n     */\n    gradientColor?: TabsGradientColor;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `gradientColor` instead. Adapts the background gradient color of prev and next button.\n     */\n    gradientColorScheme?: TabsGradientColorScheme;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `update` event instead. Emitted when active tab is changed.\n     */\n    onTabChange?: (event: CustomEvent<TabsUpdateEventDetail>) => void;\n    /**\n     * Emitted when active tab is changed.\n     */\n    onUpdate?: (event: CustomEvent<TabsUpdateEventDetail>) => void;\n    /**\n     * The text size.\n     */\n    size?: BreakpointCustomizable<TabsSize>;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n    /**\n     * The text weight.\n     */\n    weight?: TabsWeight;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/tag-dismissible.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, TagDismissibleAriaAttribute, TagDismissibleColor, Theme } from '../types';\nexport type PTagDismissibleProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<TagDismissibleAriaAttribute>;\n    /**\n     * Background color variations\n     */\n    color?: TagDismissibleColor;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n};\nexport declare const PTagDismissible: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<TagDismissibleAriaAttribute>;\n    /**\n     * Background color variations\n     */\n    color?: TagDismissibleColor;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * Adapts the color when used on dark background.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/tag.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { TagColor, TagIcon, Theme } from '../types';\nexport type PTagProps = BaseProps & {\n    /**\n     * Background color variations depending on theme property.\n     */\n    color?: TagColor;\n    /**\n     * Displays as compact version.\n     */\n    compact?: boolean;\n    /**\n     * The icon shown.\n     */\n    icon?: TagIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Adapts the tag color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PTag: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Background color variations depending on theme property.\n     */\n    color?: TagColor;\n    /**\n     * Displays as compact version.\n     */\n    compact?: boolean;\n    /**\n     * The icon shown.\n     */\n    icon?: TagIcon;\n    /**\n     * A URL path to a custom icon.\n     */\n    iconSource?: string;\n    /**\n     * Adapts the tag color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/text-field-wrapper.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { TextFieldWrapperActionIcon, BreakpointCustomizable, TextFieldWrapperState, Theme, TextFieldWrapperUnitPosition } from '../types';\nexport type PTextFieldWrapperProps = BaseProps & {\n    /**\n     * Action icon can be set to `locate` for `input type=\"search\"` in order to display an action button.\n     */\n    actionIcon?: TextFieldWrapperActionIcon;\n    /**\n     * Disables the action button and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    actionLoading?: boolean;\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Show or hide label and description text. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * Emitted when the action button is clicked.\n     */\n    onAction?: (event: CustomEvent<void>) => void;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `showCounter` instead. Show or hide max character count.\n     */\n    showCharacterCount?: boolean;\n    /**\n     * Show or hide max character count.\n     */\n    showCounter?: boolean;\n    /**\n     * @experimental Show or hide password toggle for `input type=\"password\"`.\n     */\n    showPasswordToggle?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: TextFieldWrapperState;\n    /**\n     * Show search button if wrapped inside a form.\n     */\n    submitButton?: boolean;\n    /**\n     * Adapts the color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * The unit text.\n     */\n    unit?: string;\n    /**\n     * The unit position.\n     */\n    unitPosition?: TextFieldWrapperUnitPosition;\n};\nexport declare const PTextFieldWrapper: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Action icon can be set to `locate` for `input type=\"search\"` in order to display an action button.\n     */\n    actionIcon?: TextFieldWrapperActionIcon;\n    /**\n     * Disables the action button and shows a loading indicator. No events will be triggered while loading state is active.\n     */\n    actionLoading?: boolean;\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Show or hide label and description text. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * Emitted when the action button is clicked.\n     */\n    onAction?: (event: CustomEvent<void>) => void;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `showCounter` instead. Show or hide max character count.\n     */\n    showCharacterCount?: boolean;\n    /**\n     * Show or hide max character count.\n     */\n    showCounter?: boolean;\n    /**\n     * @experimental Show or hide password toggle for `input type=\"password\"`.\n     */\n    showPasswordToggle?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: TextFieldWrapperState;\n    /**\n     * Show search button if wrapped inside a form.\n     */\n    submitButton?: boolean;\n    /**\n     * Adapts the color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * The unit text.\n     */\n    unit?: string;\n    /**\n     * The unit position.\n     */\n    unitPosition?: TextFieldWrapperUnitPosition;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/text-list-item.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nexport type PTextListItemProps = BaseProps & {};\nexport declare const PTextListItem: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/text-list.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { TextListListType, TextListOrderType, Theme, TextListType } from '../types';\nexport type PTextListProps = BaseProps & {\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `type` instead. The type of the list.\n     */\n    listType?: TextListListType;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `type` instead. The list style type of ordered list. Only has effect when list type is set to 'ordered'.\n     */\n    orderType?: TextListOrderType;\n    /**\n     * Adapts the text color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * The list style type.\n     */\n    type?: TextListType;\n};\nexport declare const PTextList: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `type` instead. The type of the list.\n     */\n    listType?: TextListListType;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `type` instead. The list style type of ordered list. Only has effect when list type is set to 'ordered'.\n     */\n    orderType?: TextListOrderType;\n    /**\n     * Adapts the text color depending on the theme.\n     */\n    theme?: Theme;\n    /**\n     * The list style type.\n     */\n    type?: TextListType;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/text.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { TextAlign, TextColor, BreakpointCustomizable, TextSize, TextTag, Theme, TextWeight } from '../types';\nexport type PTextProps = BaseProps & {\n    /**\n     * Text alignment of the component.\n     */\n    align?: TextAlign;\n    /**\n     * Basic text color variations depending on theme property.\n     */\n    color?: TextColor;\n    /**\n     * Adds an ellipsis to a single line of text if it overflows.\n     */\n    ellipsis?: boolean;\n    /**\n     * Size of the text. Also defines the size for specific breakpoints, like {base: \"small\", l: \"medium\"}. You always need to provide a base value when doing this.\n     */\n    size?: BreakpointCustomizable<TextSize>;\n    /**\n     * Sets a custom HTML tag depending on the usage of the text component.\n     */\n    tag?: TextTag;\n    /**\n     * Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop.\n     */\n    theme?: Theme;\n    /**\n     * The weight of the text.\n     */\n    weight?: TextWeight;\n};\nexport declare const PText: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Text alignment of the component.\n     */\n    align?: TextAlign;\n    /**\n     * Basic text color variations depending on theme property.\n     */\n    color?: TextColor;\n    /**\n     * Adds an ellipsis to a single line of text if it overflows.\n     */\n    ellipsis?: boolean;\n    /**\n     * Size of the text. Also defines the size for specific breakpoints, like {base: \"small\", l: \"medium\"}. You always need to provide a base value when doing this.\n     */\n    size?: BreakpointCustomizable<TextSize>;\n    /**\n     * Sets a custom HTML tag depending on the usage of the text component.\n     */\n    tag?: TextTag;\n    /**\n     * Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop.\n     */\n    theme?: Theme;\n    /**\n     * The weight of the text.\n     */\n    weight?: TextWeight;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/textarea-wrapper.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { BreakpointCustomizable, TextareaWrapperState, Theme } from '../types';\nexport type PTextareaWrapperProps = BaseProps & {\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `showCounter` instead. Show or hide max character count.\n     */\n    showCharacterCount?: boolean;\n    /**\n     * Show or hide max character count.\n     */\n    showCounter?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: TextareaWrapperState;\n    /**\n     * Adapts the color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PTextareaWrapper: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * The description text.\n     */\n    description?: string;\n    /**\n     * Show or hide label. For better accessibility it is recommended to show the label.\n     */\n    hideLabel?: BreakpointCustomizable<boolean>;\n    /**\n     * The label text.\n     */\n    label?: string;\n    /**\n     * The message styled depending on validation state.\n     */\n    message?: string;\n    /**\n     * @deprecated since v3.0.0, will be removed with next major release, use `showCounter` instead. Show or hide max character count.\n     */\n    showCharacterCount?: boolean;\n    /**\n     * Show or hide max character count.\n     */\n    showCounter?: boolean;\n    /**\n     * The validation state.\n     */\n    state?: TextareaWrapperState;\n    /**\n     * Adapts the color depending on the theme.\n     */\n    theme?: Theme;\n} & {\n    children?: import(\"react\").ReactNode | undefined;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/toast.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { Theme } from '../types';\nexport type PToastProps = BaseProps & {\n    /**\n     * Adapts the toast color depending on the theme.\n     */\n    theme?: Theme;\n};\nexport declare const PToast: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Adapts the toast color depending on the theme.\n     */\n    theme?: Theme;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n","@porsche-design-system/components-react/esm/lib/components/wordmark.wrapper.d.ts":"import type { BaseProps } from '../../BaseProps';\nimport type { SelectedAriaAttributes, WordmarkAriaAttribute, WordmarkSize, WordmarkTarget, Theme } from '../types';\nexport type PWordmarkProps = BaseProps & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<WordmarkAriaAttribute>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * Adapts sizing of wordmark.\n     */\n    size?: WordmarkSize;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: WordmarkTarget;\n    /**\n     * Adapts color depending on theme.\n     */\n    theme?: Theme;\n};\nexport declare const PWordmark: import(\"react\").ForwardRefExoticComponent<import(\"react\").DOMAttributes<{}> & Pick<import(\"react\").HTMLAttributes<{}>, \"suppressHydrationWarning\" | \"autoFocus\" | \"className\" | \"dir\" | \"hidden\" | \"id\" | \"lang\" | \"slot\" | \"style\" | \"tabIndex\" | \"title\" | \"translate\" | \"role\"> & {\n    /**\n     * Add ARIA attributes.\n     */\n    aria?: SelectedAriaAttributes<WordmarkAriaAttribute>;\n    /**\n     * When providing an url then the component will be rendered as `<a>`.\n     */\n    href?: string;\n    /**\n     * Adapts sizing of wordmark.\n     */\n    size?: WordmarkSize;\n    /**\n     * Target attribute where the link should be opened.\n     */\n    target?: WordmarkTarget;\n    /**\n     * Adapts color depending on theme.\n     */\n    theme?: Theme;\n} & import(\"react\").RefAttributes<HTMLElement>>;\n"}