{"version":3,"sources":["webpack:///../components-js/dist/esm-es5/p-checkbox-wrapper.entry.js"],"names":["checkboxWrapperCss","CheckboxWrapper","hostRef","registerInstance","this","label","state","message","hideLabel","labelId","randomString","setInput","setState","bindStateListener","addSlottedStyles","labelClasses","cx","prefix","fakeCheckboxClasses","checked","indeterminate","disabled","iconClasses","labelTextClasses","mapBreakpointPropToPrefixedClasses","messageClasses","h","Host","class","id","isLabelVisible","tag","color","onClick","e","labelClick","name","theme","size","isMessageVisible","role","input","host","querySelector","setAttribute","event","shadowRoot","target","closest","click","transitionListener","tagName","toLowerCase","style","insertSlottedStyles","includes","isMessageDefined","getElement"],"mappings":"uQAGMA,EAAqB,g4NAErBC,EAAe,WACjB,WAAYC,GAAS,uBACjBC,eAAiBC,KAAMF,GAEvBE,KAAKC,MAAQ,GAEbD,KAAKE,MAAQ,OAEbF,KAAKG,QAAU,GAEfH,KAAKI,WAAY,EACjBJ,KAAKK,QAAUC,iBAXF,mEAcbN,KAAKO,WACLP,KAAKQ,WACLR,KAAKS,oBACLT,KAAKU,qBAjBQ,+BAmBR,WACCC,EAAeC,eAAGC,eAAO,4BACzBC,EAAsBF,eAAGC,eAAO,oCAAqCb,KAAKe,SAAWf,KAAKgB,gBAAkBH,eAAO,4CAA6Cb,KAAKiB,UAAYJ,eAAO,6CAA6D,SAAfb,KAAKE,OAAoBW,eAAO,oCAAD,OAAqCb,KAAKE,SAC/SgB,EAAcN,eAAGC,eAAO,2BAA4Bb,KAAKe,SAAWf,KAAKgB,gBAAkBH,eAAO,oCAClGM,EAAmBP,eAAGC,eAAO,gCAAiCO,eAAmC,gCAAiCpB,KAAKI,UAAW,CAAC,SAAU,YAAaJ,KAAKiB,UAAYJ,eAAO,2CAClMQ,EAAiBT,eAAGC,eAAO,6BAA6C,SAAfb,KAAKE,OAAoBW,eAAO,8BAAD,OAA+Bb,KAAKE,SAClI,OAAQoB,eAAEC,OAAM,KAAMD,eAAE,QAAS,CAAEE,MAAOb,EAAcc,GAAmB,UAAfzB,KAAKE,OAAqBF,KAAKK,SAAWL,KAAK0B,gBACvGJ,eAAE,SAAU,CAAEE,MAAOL,EAAkBQ,IAAK,OAAQC,MAAO,UAAWC,QAAS,SAACC,GAAD,OAAO,EAAKC,WAAWD,KAAM9B,KAAKC,MAAQD,KAAKC,MAAQqB,eAAE,OAAQ,KAAMA,eAAE,OAAQ,CAAEU,KAAM,YAAcV,eAAE,OAAQ,CAAEE,MAAOV,GAAuBQ,eAAE,SAAU,CAAEE,MAAON,EAAac,KAAMhC,KAAKgB,cAAgB,QAAU,QAASiB,MAAO,OAAQC,KAAM,YAAcZ,eAAE,OAAQ,QAAStB,KAAKmC,kBAC3Wb,eAAE,SAAU,CAAEE,MAAOH,EAAgBO,MAAO,UAAWQ,KAAqB,UAAfpC,KAAKE,OAAqB,QAAS,mBAAmC,UAAfF,KAAKE,OAAqBF,KAAKK,SAAWL,KAAKG,QAAUH,KAAKG,QAAUmB,eAAE,OAAQ,KAAMA,eAAE,OAAQ,CAAEU,KAAM,iBA3BrN,iCAuCbhC,KAAKqC,MAAQrC,KAAKsC,KAAKC,cAAc,0BACrCvC,KAAKqC,MAAMG,aAAa,aAAcxC,KAAKC,SAxC9B,iCA0CNwC,GAQHzC,KAAKsC,KAAKI,YAAc1C,KAAKsC,KAAKI,WAAWJ,MACZ,OAA9BG,EAAME,OAAOC,QAAQ,MACxB5C,KAAKqC,MAAMQ,UApDF,iCAwDb7C,KAAKe,QAAUf,KAAKqC,MAAMtB,QAC1Bf,KAAKiB,SAAWjB,KAAKqC,MAAMpB,SAC3BjB,KAAKgB,cAAgBhB,KAAKqC,MAAMrB,gBA1DnB,0CA4DG,WAChB8B,eAAmB9C,KAAKqC,MAAO,oBAAoB,WAC/C,EAAK7B,gBA9DI,yCAkEb,IAAMuC,EAAU/C,KAAKsC,KAAKS,QAAQC,cAC5BC,EAAQ,GAAH,OAAMF,EAAN,4PAQbA,EARa,2DAYbA,EAZa,oFAgBXG,eAAoBlD,KAAKsC,KAAMW,KAnFlB,qCA8Bb,QAASjD,KAAKC,SAAWD,KAAKsC,KAAKC,cAAc,oBA9BpC,uCAiCb,QAASvC,KAAKG,WAAaH,KAAKsC,KAAKC,cAAc,sBAjCtC,uCAoCb,MAAO,CAAC,UAAW,SAASY,SAASnD,KAAKE,QAAUF,KAAKoD,mBApC5C,2BAqFJ,OAAOC,eAAWrD,UArFd,KAuFrBH,EAAgBoD,MAAQrD","file":"js/stencil-p-checkbox-wrapper-entry-js.446783d6.js","sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-356901b5.js';\nimport { r as randomString, c as cx, p as prefix, m as mapBreakpointPropToPrefixedClasses, t as transitionListener, i as insertSlottedStyles } from './index-5cae920f.js';\n\nconst checkboxWrapperCss = \":host{display:block}::slotted(input){position:absolute !important;top:0 !important;left:0 !important;width:100% !important;height:100% !important;display:block !important;margin:0 !important;padding:0 !important;-webkit-appearance:none !important;-moz-appearance:none !important;appearance:none !important;border:0 !important;border-top-color:rgba(255, 255, 255, 0) !important;background-color:transparent !important;opacity:1 !important;outline:transparent solid 2px !important;outline-offset:1px !important;-webkit-transition:outline-color 0.24s ease, border-top-color 1ms linear !important;transition:outline-color 0.24s ease, border-top-color 1ms linear !important}::slotted(input::-ms-check){display:none !important}::slotted(input:focus){outline-color:#00d5b9 !important}::slotted(input:checked){border-top-color:rgba(255, 255, 255, 0.01) !important}::slotted(input:disabled){cursor:not-allowed !important;border-top-color:rgba(255, 255, 255, 0.02) !important}::slotted(input:indeterminate){border-top-color:rgba(255, 255, 255, 0.03) !important}::slotted(input:disabled:checked){border-top-color:rgba(255, 255, 255, 0.04) !important}::slotted(input:disabled:indeterminate){border-top-color:rgba(255, 255, 255, 0.05) !important}::slotted(input:checked:indeterminate){border-top-color:rgba(255, 255, 255, 0.06) !important}::slotted(input:disabled:checked:indeterminate){border-top-color:rgba(255, 255, 255, 0.07) !important}.p-checkbox-wrapper__label{position:relative;display:-ms-flexbox;display:flex}.p-checkbox-wrapper__label-text{-ms-flex-order:1;order:1;display:inline-block;color:#000;-webkit-transition:color 0.24s ease;transition:color 0.24s ease}.p-checkbox-wrapper__label-text--disabled{color:#96989a}.p-checkbox-wrapper__label-text--visible{position:static;width:auto;height:auto;margin:0;padding:0 0 0 0.5rem;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-checkbox-wrapper__label-text--hidden{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}@media (min-width: 480px){.p-checkbox-wrapper__label-text--visible-xs{position:static;width:auto;height:auto;margin:0;padding:0 0 0 0.5rem;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-checkbox-wrapper__label-text--hidden-xs{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}}@media (min-width: 760px){.p-checkbox-wrapper__label-text--visible-s{position:static;width:auto;height:auto;margin:0;padding:0 0 0 0.5rem;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-checkbox-wrapper__label-text--hidden-s{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}}@media (min-width: 1000px){.p-checkbox-wrapper__label-text--visible-m{position:static;width:auto;height:auto;margin:0;padding:0 0 0 0.5rem;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-checkbox-wrapper__label-text--hidden-m{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}}@media (min-width: 1300px){.p-checkbox-wrapper__label-text--visible-l{position:static;width:auto;height:auto;margin:0;padding:0 0 0 0.5rem;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-checkbox-wrapper__label-text--hidden-l{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}}@media (min-width: 1760px){.p-checkbox-wrapper__label-text--visible-xl{position:static;width:auto;height:auto;margin:0;padding:0 0 0 0.5rem;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-checkbox-wrapper__label-text--hidden-xl{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}}.p-checkbox-wrapper__fake-checkbox{position:relative;width:1.5rem;height:1.5rem;display:block;-ms-flex-negative:0;flex-shrink:0;background-color:#fff;-webkit-box-shadow:inset 0 0 0 1px #626669;box-shadow:inset 0 0 0 1px #626669;-webkit-transition:background-color 0.24s ease, -webkit-box-shadow 0.24s ease;transition:background-color 0.24s ease, -webkit-box-shadow 0.24s ease;transition:box-shadow 0.24s ease, background-color 0.24s ease;transition:box-shadow 0.24s ease, background-color 0.24s ease, -webkit-box-shadow 0.24s ease}.p-checkbox-wrapper__fake-checkbox:hover:not(.p-checkbox-wrapper__fake-checkbox--disabled):not(.p-checkbox-wrapper__fake-checkbox--success):not(.p-checkbox-wrapper__fake-checkbox--error),.p-checkbox-wrapper__label-text:hover~.p-checkbox-wrapper__fake-checkbox:not(.p-checkbox-wrapper__fake-checkbox--disabled):not(.p-checkbox-wrapper__fake-checkbox--success):not(.p-checkbox-wrapper__fake-checkbox--error){-webkit-box-shadow:inset 0 0 0 1px #000;box-shadow:inset 0 0 0 1px #000}.p-checkbox-wrapper__fake-checkbox--checked{-webkit-box-shadow:inset 0 0 0 1px #323639;box-shadow:inset 0 0 0 1px #323639;background-color:#323639}.p-checkbox-wrapper__fake-checkbox--checked.p-checkbox-wrapper__fake-checkbox--disabled{background-color:#96989a}.p-checkbox-wrapper__fake-checkbox--checked.p-checkbox-wrapper__fake-checkbox--error{background-color:#e00000}.p-checkbox-wrapper__fake-checkbox--checked.p-checkbox-wrapper__fake-checkbox--success{background-color:#018a16}.p-checkbox-wrapper__fake-checkbox--disabled{-webkit-box-shadow:inset 0 0 0 1px #96989a;box-shadow:inset 0 0 0 1px #96989a}.p-checkbox-wrapper__fake-checkbox--error{-webkit-box-shadow:inset 0 0 0 2px #e00000;box-shadow:inset 0 0 0 2px #e00000}.p-checkbox-wrapper__fake-checkbox--error:hover,.p-checkbox-wrapper__label-text:hover~.p-checkbox-wrapper__fake-checkbox--error{-webkit-box-shadow:inset 0 0 0 2px #a30000;box-shadow:inset 0 0 0 2px #a30000}.p-checkbox-wrapper__fake-checkbox--success{-webkit-box-shadow:inset 0 0 0 2px #018a16;box-shadow:inset 0 0 0 2px #018a16}.p-checkbox-wrapper__fake-checkbox--success:hover,.p-checkbox-wrapper__label-text:hover~.p-checkbox-wrapper__fake-checkbox--success{-webkit-box-shadow:inset 0 0 0 2px #014d0c;box-shadow:inset 0 0 0 2px #014d0c}.p-checkbox-wrapper__icon{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;-webkit-transition:opacity 0.24s ease;transition:opacity 0.24s ease}.p-checkbox-wrapper__icon--checked{opacity:1}.p-checkbox-wrapper__message{margin-top:0.25rem;color:#000;-webkit-transition:color 0.24s ease;transition:color 0.24s ease}.p-checkbox-wrapper__message--success{color:#018a16}.p-checkbox-wrapper__message--error{color:#e00000}\";\n\nconst CheckboxWrapper = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The label text. */\n        this.label = '';\n        /** The validation state. */\n        this.state = 'none';\n        /** The message styled depending on validation state. */\n        this.message = '';\n        /** Show or hide label. For better accessibility it's recommended to show the label. */\n        this.hideLabel = false;\n        this.labelId = randomString();\n    }\n    componentWillLoad() {\n        this.setInput();\n        this.setState();\n        this.bindStateListener();\n        this.addSlottedStyles();\n    }\n    render() {\n        const labelClasses = cx(prefix('checkbox-wrapper__label'));\n        const fakeCheckboxClasses = cx(prefix('checkbox-wrapper__fake-checkbox'), (this.checked || this.indeterminate) && prefix(`checkbox-wrapper__fake-checkbox--checked`), this.disabled && prefix(`checkbox-wrapper__fake-checkbox--disabled`), this.state !== 'none' && prefix(`checkbox-wrapper__fake-checkbox--${this.state}`));\n        const iconClasses = cx(prefix('checkbox-wrapper__icon'), (this.checked || this.indeterminate) && prefix(`checkbox-wrapper__icon--checked`));\n        const labelTextClasses = cx(prefix('checkbox-wrapper__label-text'), mapBreakpointPropToPrefixedClasses('checkbox-wrapper__label-text-', this.hideLabel, ['hidden', 'visible']), this.disabled && prefix('checkbox-wrapper__label-text--disabled'));\n        const messageClasses = cx(prefix('checkbox-wrapper__message'), this.state !== 'none' && prefix(`checkbox-wrapper__message--${this.state}`));\n        return (h(Host, null, h(\"label\", { class: labelClasses, id: this.state === 'error' && this.labelId }, this.isLabelVisible &&\n            h(\"p-text\", { class: labelTextClasses, tag: 'span', color: 'inherit', onClick: (e) => this.labelClick(e) }, this.label ? this.label : h(\"span\", null, h(\"slot\", { name: 'label' }))), h(\"span\", { class: fakeCheckboxClasses }, h(\"p-icon\", { class: iconClasses, name: this.indeterminate ? 'minus' : 'check', theme: 'dark', size: 'inherit' }), h(\"slot\", null))), this.isMessageVisible &&\n            h(\"p-text\", { class: messageClasses, color: 'inherit', role: this.state === 'error' && 'alert', \"aria-describedby\": this.state === 'error' && this.labelId }, this.message ? this.message : h(\"span\", null, h(\"slot\", { name: 'message' })))));\n    }\n    get isLabelVisible() {\n        return !!this.label || !!this.host.querySelector('[slot=\"label\"]');\n    }\n    get isMessageDefined() {\n        return !!this.message || !!this.host.querySelector('[slot=\"message\"]');\n    }\n    get isMessageVisible() {\n        return ['success', 'error'].includes(this.state) && this.isMessageDefined;\n    }\n    setInput() {\n        this.input = this.host.querySelector('input[type=\"checkbox\"]');\n        this.input.setAttribute('aria-label', this.label);\n    }\n    labelClick(event) {\n        /**\n         * we only want to simulate the checkbox click by label click\n         * for real shadow dom, else the native behaviour works out\n         * of the box.\n         * also we don't want to click to the input, if a link is\n         * clicked.\n         */\n        if (this.host.shadowRoot && this.host.shadowRoot.host\n            && event.target.closest('a') === null) {\n            this.input.click();\n        }\n    }\n    setState() {\n        this.checked = this.input.checked;\n        this.disabled = this.input.disabled;\n        this.indeterminate = this.input.indeterminate;\n    }\n    bindStateListener() {\n        transitionListener(this.input, 'border-top-color', () => {\n            this.setState();\n        });\n    }\n    addSlottedStyles() {\n        const tagName = this.host.tagName.toLowerCase();\n        const style = `${tagName} a {\n      outline: none transparent;\n      color: inherit;\n      text-decoration: underline;\n      -webkit-transition: outline-color .24s ease, color .24s ease;\n      transition: outline-color .24s ease, color .24s ease;\n    }\n\n    ${tagName} a:hover {\n      color: #d5001c;\n    }\n\n    ${tagName} a:focus {\n      outline: 2px solid #00d5b9;\n      outline-offset: 1px;\n    }`;\n        insertSlottedStyles(this.host, style);\n    }\n    get host() { return getElement(this); }\n};\nCheckboxWrapper.style = checkboxWrapperCss;\n\nexport { CheckboxWrapper as p_checkbox_wrapper };\n"],"sourceRoot":""}