{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.array.reduce.js","webpack:///./node_modules/core-js/modules/es.string.trim-end.js","webpack:///../components-js/dist/esm-es5/shadow-css-75456958.js","webpack:///./node_modules/core-js/modules/es.string.match.js","webpack:///./node_modules/core-js/internals/array-reduce.js"],"names":["$","$reduce","left","arrayMethodIsStrict","arrayMethodUsesToLength","STRICT_METHOD","USES_TO_LENGTH","1","target","proto","forced","reduce","callbackfn","this","arguments","length","undefined","$trimEnd","end","forcedStringTrimMethod","FORCED","trimEnd","trimRight","safeSelector","selector","content","placeholders","index","replace","_","keep","replaceBy","push","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","suffix","contentPrefix","startsWith","blocks","substring","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","applySimpleSelectorScope","hostSelector","lastIndex","before","colon","after","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","matches","safeContent","res","scopedSelector","startIndex","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach","fixRegExpWellKnownSymbolLogic","anObject","toLength","requireObjectCoercible","advanceStringIndex","regExpExec","MATCH","nativeMatch","maybeCallNative","regexp","O","matcher","call","String","done","value","rx","S","global","fullUnicode","unicode","A","n","matchStr","aFunction","toObject","IndexedObject","createMethod","IS_RIGHT","that","argumentsLength","memo","self","TypeError","module","exports","right"],"mappings":"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","file":"js/chunk-023f43b0.12ba3c96.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar $reduce = require('../internals/array-reduce').left;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar STRICT_METHOD = arrayMethodIsStrict('reduce');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });\n\n// `Array.prototype.reduce` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $trimEnd = require('../internals/string-trim').end;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\nvar FORCED = forcedStringTrimMethod('trimEnd');\n\nvar trimEnd = FORCED ? function trimEnd() {\n  return $trimEnd(this);\n} : ''.trimEnd;\n\n// `String.prototype.{ trimEnd, trimRight }` methods\n// https://github.com/tc39/ecmascript-string-left-right-trim\n$({ target: 'String', proto: true, forced: FORCED }, {\n  trimEnd: trimEnd,\n  trimRight: trimEnd\n});\n","/*\n Stencil Client Platform v1.11.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                return before + replaceBy + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                const matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map(shallowPart => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, rule => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach(slottedSelector => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toLength = require('../internals/to-length');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@match logic\nfixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = regexp == undefined ? undefined : regexp[MATCH];\n      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative(nativeMatch, regexp, this);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      if (!rx.global) return regExpExec(rx, S);\n\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n","var aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aFunction(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = toLength(O.length);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n"],"sourceRoot":""}