{"version":3,"sources":["webpack:///../components-js/dist/esm-es5/p-icon_2.entry.js"],"names":["isStr","val","validateContent","svgContent","div","document","createElement","innerHTML","i","childNodes","length","nodeName","toLowerCase","removeChild","svgElm","firstElementChild","setAttribute","isValid","elm","nodeType","attributes","value","indexOf","iconContent","Map","requests","getSvgContent","url","req","get","fetch","then","rsp","ok","text","set","iconCss","Icon","hostRef","registerInstance","this","name","variant","color","size","lazy","theme","isVisible","waitUntilVisible","el","loadIcon","io","disconnect","undefined","getSource","has","source","console","warn","iconClasses","cx","prefix","h","Host","role","class","rootMargin","cb","window","IntersectionObserver","data","isIntersecting","observe","getElement","style","textCss","Text","tag","weight","align","ellipsis","tagName","element","insertSlottedStyles","transitionListener","textTag","lineHeight","calcLineHeightForElement","TagType","textClasses","mapBreakpointPropToPrefixedClasses","ref"],"mappings":"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","file":"js/stencil-p-icon_2-entry-js.572c8bb5.js","sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-356901b5.js';\nimport { c as cx, p as prefix, i as insertSlottedStyles, t as transitionListener, m as mapBreakpointPropToPrefixedClasses, a as calcLineHeightForElement } from './index-5cae920f.js';\n\nconst isStr = (val) => typeof val === 'string';\n\nconst validateContent = (svgContent) => {\n    if (svgContent) {\n        const div = document.createElement('div');\n        div.innerHTML = svgContent;\n        // setup this way to ensure it works on our buddy IE\n        for (let i = div.childNodes.length - 1; i >= 0; i--) {\n            if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n                div.removeChild(div.childNodes[i]);\n            }\n        }\n        // must only have 1 root element\n        const svgElm = div.firstElementChild;\n        if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n            // fix IE11 focus SVG elements on tab\n            svgElm.setAttribute('focusable', 'false');\n            // Hide from Screen Readers\n            svgElm.setAttribute('aria-hidden', 'true');\n            // root element must be an svg\n            // lets double check we've got valid elements\n            // do not allow scripts\n            if (isValid(svgElm)) {\n                return div.innerHTML;\n            }\n        }\n    }\n    return '';\n};\nconst isValid = (elm) => {\n    if (elm.nodeType === 1) {\n        if (elm.nodeName.toLowerCase() === 'script') {\n            return false;\n        }\n        for (let i = 0; i < elm.attributes.length; i++) {\n            const val = elm.attributes[i].value;\n            if (isStr(val) && val.toLowerCase().indexOf('on') === 0) {\n                return false;\n            }\n        }\n        for (let i = 0; i < elm.childNodes.length; i++) {\n            if (!isValid(elm.childNodes[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nconst iconContent = new Map();\nconst requests = new Map();\nconst getSvgContent = (url) => {\n    // see if we already have a request for this url\n    let req = requests.get(url);\n    if (!req) {\n        // we don't already have a request\n        req = fetch(url).then(rsp => {\n            if (rsp.ok) {\n                return rsp.text().then(svgContent => {\n                    iconContent.set(url, validateContent(svgContent));\n                });\n            }\n            iconContent.set(url, '');\n        });\n        // cache for the same requests\n        requests.set(url, req);\n    }\n    return req;\n};\n\nconst iconCss = \":host{display:-ms-inline-flexbox;display:inline-flex;vertical-align:top}.p-icon{display:-ms-flexbox;display:flex;-ms-flex-negative:0;flex-shrink:0;margin:0;padding:0;-webkit-box-sizing:border-box;box-sizing:border-box;width:1.5rem;height:1.5rem}.p-icon--size-small{width:1.5rem;height:1.5rem}.p-icon--size-medium{width:2.25rem;height:2.25rem}.p-icon--size-large{width:3rem;height:3rem}.p-icon--size-inherit{width:inherit;height:inherit}.p-icon--color-brand.p-icon--theme-light{fill:#d5001c}.p-icon--color-brand.p-icon--theme-dark{fill:#d5001c}.p-icon--color-default.p-icon--theme-light{fill:#000}.p-icon--color-default.p-icon--theme-dark{fill:#fff}.p-icon--color-neutral-contrast-high.p-icon--theme-light{fill:#323639}.p-icon--color-neutral-contrast-high.p-icon--theme-dark{fill:#e3e4e5}.p-icon--color-neutral-contrast-medium.p-icon--theme-light{fill:#626669}.p-icon--color-neutral-contrast-medium.p-icon--theme-dark{fill:#b0b1b2}.p-icon--color-neutral-contrast-low.p-icon--theme-light{fill:#c9cacb}.p-icon--color-neutral-contrast-low.p-icon--theme-dark{fill:#4a4e51}.p-icon--color-notification-success.p-icon--theme-light{fill:#018a16}.p-icon--color-notification-success.p-icon--theme-dark{fill:#01ba1d}.p-icon--color-notification-warning.p-icon--theme-light{fill:#ff9b00}.p-icon--color-notification-warning.p-icon--theme-dark{fill:#ff9b00}.p-icon--color-notification-error.p-icon--theme-light{fill:#e00000}.p-icon--color-notification-error.p-icon--theme-dark{fill:#fc1717}.p-icon--color-inherit{fill:currentColor}\";\n\nconst Icon = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Specifies which icon to use.\n         */\n        this.name = 'arrow-head-right';\n        /**\n         * @internal\n         * Specifies which icon variant to use.\n         */\n        this.variant = 'outline';\n        /** Basic color variations depending on theme property. */\n        this.color = 'default';\n        /**\n         * The size of the icon.\n         */\n        this.size = 'small';\n        /**\n         * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n         * Default, `false`.\n         */\n        this.lazy = false;\n        /** Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop. */\n        this.theme = 'light';\n        this.isVisible = false;\n    }\n    connectedCallback() {\n        // purposely do not return the promise here because loading\n        // the svg file should not hold up loading the app\n        // only load the svg if it's visible\n        this.waitUntilVisible(this.el, '50px', () => {\n            this.isVisible = true;\n            this.loadIcon();\n        });\n    }\n    disconnectedCallback() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n    loadIcon() {\n        if ( this.isVisible) {\n            const url = this.getSource();\n            if (iconContent.has(url)) {\n                // sync if it's already loaded\n                this.svgContent = iconContent.get(url);\n            }\n            else {\n                // async if it hasn't been loaded\n                getSvgContent(url).then(() => this.svgContent = iconContent.get(url));\n            }\n        }\n    }\n    getSource() {\n        if (this.name && !this.source) {\n            return `https://cdn.ui.porsche.com/porsche-icons/v2/${this.variant}/${this.name}.svg`;\n        }\n        if (this.source) {\n            return this.source;\n        }\n        console.warn('Please provide either an name property or a source property!');\n        return '';\n    }\n    render() {\n        const iconClasses = cx(prefix('icon'), prefix(`icon--size-${this.size}`), prefix(`icon--color-${this.color}`), this.color !== 'inherit' && prefix(`icon--theme-${this.theme}`));\n        return (h(Host, { role: 'img' }, (( this.svgContent)\n            ? h(\"i\", { class: iconClasses, innerHTML: this.svgContent })\n            : h(\"i\", { class: iconClasses }))));\n    }\n    waitUntilVisible(el, rootMargin, cb) {\n        if ( this.lazy && typeof window !== 'undefined' && window.IntersectionObserver) {\n            const io = this.io = new window.IntersectionObserver((data) => {\n                if (data[0].isIntersecting) {\n                    io.disconnect();\n                    this.io = undefined;\n                    cb();\n                }\n            }, { rootMargin });\n            io.observe(el);\n        }\n        else {\n            // browser doesn't support IntersectionObserver\n            // so just fallback to always show it\n            cb();\n        }\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"source\": [\"loadIcon\"],\n        \"name\": [\"loadIcon\"]\n    }; }\n};\nIcon.style = iconCss;\n\nconst textCss = \":host{display:block}.p-text{font-size:1rem;line-height:1.5;font-family:\\\"Porsche Next\\\", \\\"Arial Narrow\\\", Arial, sans-serif;font-weight:400;padding:0;margin:0;list-style-type:none;display:inherit;-webkit-transition:font-size 1ms linear;transition:font-size 1ms linear}.p-text--size-x-small{font-size:0.75rem;line-height:1.6666666667}.p-text--size-small{font-size:1rem;line-height:1.5}.p-text--size-medium{font-size:1.5rem;line-height:1.5}.p-text--size-large{font-size:2.25rem;line-height:1.3333333333}.p-text--size-x-large{font-size:3.25rem;line-height:1.2307692308}.p-text--size-inherit{font-size:inherit;line-height:inherit}@media (min-width: 480px){.p-text--size-x-small-xs{font-size:0.75rem;line-height:1.6666666667}.p-text--size-small-xs{font-size:1rem;line-height:1.5}.p-text--size-medium-xs{font-size:1.5rem;line-height:1.5}.p-text--size-large-xs{font-size:2.25rem;line-height:1.3333333333}.p-text--size-x-large-xs{font-size:3.25rem;line-height:1.2307692308}.p-text--size-inherit-xs{font-size:inherit;line-height:inherit}}@media (min-width: 760px){.p-text--size-x-small-s{font-size:0.75rem;line-height:1.6666666667}.p-text--size-small-s{font-size:1rem;line-height:1.5}.p-text--size-medium-s{font-size:1.5rem;line-height:1.5}.p-text--size-large-s{font-size:2.25rem;line-height:1.3333333333}.p-text--size-x-large-s{font-size:3.25rem;line-height:1.2307692308}.p-text--size-inherit-s{font-size:inherit;line-height:inherit}}@media (min-width: 1000px){.p-text--size-x-small-m{font-size:0.75rem;line-height:1.6666666667}.p-text--size-small-m{font-size:1rem;line-height:1.5}.p-text--size-medium-m{font-size:1.5rem;line-height:1.5}.p-text--size-large-m{font-size:2.25rem;line-height:1.3333333333}.p-text--size-x-large-m{font-size:3.25rem;line-height:1.2307692308}.p-text--size-inherit-m{font-size:inherit;line-height:inherit}}@media (min-width: 1300px){.p-text--size-x-small-l{font-size:0.75rem;line-height:1.6666666667}.p-text--size-small-l{font-size:1rem;line-height:1.5}.p-text--size-medium-l{font-size:1.5rem;line-height:1.5}.p-text--size-large-l{font-size:2.25rem;line-height:1.3333333333}.p-text--size-x-large-l{font-size:3.25rem;line-height:1.2307692308}.p-text--size-inherit-l{font-size:inherit;line-height:inherit}}@media (min-width: 1760px){.p-text--size-x-small-xl{font-size:0.75rem;line-height:1.6666666667}.p-text--size-small-xl{font-size:1rem;line-height:1.5}.p-text--size-medium-xl{font-size:1.5rem;line-height:1.5}.p-text--size-large-xl{font-size:2.25rem;line-height:1.3333333333}.p-text--size-x-large-xl{font-size:3.25rem;line-height:1.2307692308}.p-text--size-inherit-xl{font-size:inherit;line-height:inherit}}.p-text--weight-thin{font-weight:100}.p-text--weight-regular{font-weight:400}.p-text--weight-bold{font-weight:700}.p-text--align-left{text-align:left}.p-text--align-center{text-align:center}.p-text--align-right{text-align:right}.p-text--color-brand.p-text--theme-light{color:#d5001c}.p-text--color-brand.p-text--theme-dark{color:#d5001c}.p-text--color-default.p-text--theme-light{color:#000}.p-text--color-default.p-text--theme-dark{color:#fff}.p-text--color-neutral-contrast-high.p-text--theme-light{color:#323639}.p-text--color-neutral-contrast-high.p-text--theme-dark{color:#e3e4e5}.p-text--color-neutral-contrast-medium.p-text--theme-light{color:#626669}.p-text--color-neutral-contrast-medium.p-text--theme-dark{color:#b0b1b2}.p-text--color-neutral-contrast-low.p-text--theme-light{color:#c9cacb}.p-text--color-neutral-contrast-low.p-text--theme-dark{color:#4a4e51}.p-text--color-notification-success.p-text--theme-light{color:#018a16}.p-text--color-notification-success.p-text--theme-dark{color:#01ba1d}.p-text--color-notification-warning.p-text--theme-light{color:#ff9b00}.p-text--color-notification-warning.p-text--theme-dark{color:#ff9b00}.p-text--color-notification-error.p-text--theme-light{color:#e00000}.p-text--color-notification-error.p-text--theme-dark{color:#fc1717}.p-text--color-inherit{color:inherit}.p-text--ellipsis{max-width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}\";\n\nconst Text = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Sets a custom HTML tag depending of the usage of the text component. */\n        this.tag = 'p';\n        /** Size of the text. Also defines the size for specific breakpoints, like {base: \"small\", l: \"medium\"}. You always need to provide a base value when doing this. */\n        this.size = 'small';\n        /** The weight of the text. */\n        this.weight = 'regular';\n        /** Text alignment of the component. */\n        this.align = 'left';\n        /** Basic text color variations depending on theme property. */\n        this.color = 'default';\n        /** Adds an ellipsis to a single line of text if it overflows. */\n        this.ellipsis = false;\n        /** Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop. */\n        this.theme = 'light';\n    }\n    componentDidLoad() {\n        const tagName = this.element.tagName.toLowerCase();\n        const style = `${tagName} a {\n      outline: none transparent;\n      color: inherit;\n      text-decoration: underline;\n      -webkit-transition: outline-color .24s ease, color .24s ease;\n      transition: outline-color .24s ease, color .24s ease;\n    }\n    \n    ${tagName} a:hover {\n      color: #d5001c;\n    }\n    \n    ${tagName} a:focus {\n      outline: 2px solid #00d5b9;\n      outline-offset: 1px;\n    }`;\n        insertSlottedStyles(this.element, style);\n        transitionListener(this.textTag, 'font-size', () => {\n            this.textTag.style.lineHeight = `${calcLineHeightForElement(this.textTag)}`;\n        });\n    }\n    render() {\n        const TagType = this.tag;\n        const textClasses = cx(prefix('text'), mapBreakpointPropToPrefixedClasses('text--size', this.size), prefix(`text--weight-${this.weight}`), prefix(`text--align-${this.align}`), prefix(`text--color-${this.color}`), this.ellipsis && prefix('text--ellipsis'), this.color !== 'inherit' && prefix(`text--theme-${this.theme}`));\n        return (h(TagType, { class: textClasses, ref: el => this.textTag = el }, h(\"slot\", null)));\n    }\n    get element() { return getElement(this); }\n};\nText.style = textCss;\n\nexport { Icon as p_icon, Text as p_text };\n"],"sourceRoot":""}