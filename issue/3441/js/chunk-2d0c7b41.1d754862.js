(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c7b41"],{"526d":function(n,e,t){"use strict";t.d(e,"a",(function(){return o})),t.d(e,"b",(function(){return i})),t.d(e,"c",(function(){return r})),t.d(e,"d",(function(){return l})),t.d(e,"e",(function(){return s})),t.d(e,"f",(function(){return a})),t.d(e,"g",(function(){return d})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return p})),t.d(e,"j",(function(){return m})),t.d(e,"k",(function(){return u})),t.d(e,"l",(function(){return g})),t.d(e,"m",(function(){return h})),t.d(e,"n",(function(){return b})),t.d(e,"o",(function(){return x})),t.d(e,"p",(function(){return T})),t.d(e,"q",(function(){return k})),t.d(e,"r",(function(){return C})),t.d(e,"s",(function(){return P})),t.d(e,"t",(function(){return L})),t.d(e,"u",(function(){return B})),t.d(e,"v",(function(){return w})),t.d(e,"w",(function(){return M})),t.d(e,"x",(function(){return D})),t.d(e,"y",(function(){return E})),t.d(e,"z",(function(){return I})),t.d(e,"A",(function(){return H})),t.d(e,"B",(function(){return y})),t.d(e,"C",(function(){return S})),t.d(e,"D",(function(){return f})),t.d(e,"E",(function(){return v}));const a=n=>{const e={default:{"vanilla-js":"import { componentsReady } from '@porsche-design-system/components-js';\nimport { getByRoleShadowed } from '@porsche-design-system/components-js/testing';\nimport userEvent from '@testing-library/user-event';\n\nconst getMarkup = (): string => {\n  return `<p-button>Button 1</p-button>`;\n};\n\nit('should return 0 when nothing is rendered', async () => {\n  document.body.innerHTML = '';\n  expect(await componentsReady()).toBe(0);\n});\n\nit('should return 1 after component is rendered initially', async () => {\n  document.body.innerHTML = getMarkup();\n  expect(document.body.innerHTML).toEqual('<p-button>Button 1</p-button>');\n\n  expect(await componentsReady()).toBe(1);\n  const el = document.body.firstElementChild;\n  expect(el.shadowRoot).not.toBeNull();\n  expect(el.className).toBe('hydrated');\n});\n\nit('should return 2 after button is clicked', async () => {\n  document.body.innerHTML = getMarkup();\n  expect(await componentsReady()).toBe(1);\n\n  const scriptEl = document.createElement('script');\n  scriptEl.textContent = `\ndocument.querySelector('p-button').addEventListener('click', () => {\n  const el = document.createElement('p-button');\n  el.innerText = 'Button 2';\n  document.body.append(el);\n});`;\n  document.body.append(scriptEl);\n\n  const button = getByRoleShadowed('button');\n  await userEvent.click(button);\n\n  expect(await componentsReady()).toBe(2);\n});",angular:"import { Component } from '@angular/core';\nimport { TestBed, waitForAsync } from '@angular/core/testing';\nimport { componentsReady, PorscheDesignSystemModule } from '@porsche-design-system/components-angular';\nimport { By } from '@angular/platform-browser';\n\n@Component({\n  selector: 'empty',\n  template: `<div></div>`,\n})\nclass EmptyComponent {}\n\n@Component({\n  selector: 'sample',\n  template: `\n    <p-button (click)=\"onClick()\">Button 1</p-button>\n    <p-button *ngIf=\"active\">Button 2</p-button>\n  `,\n})\nclass SampleComponent {\n  active = false;\n  onClick() {\n    this.active = true;\n  }\n}\n\nconst replaceHtmlComments = (input: string): string => input.replace(/\x3c!--[\\s\\S]+?--\x3e/g, '');\n\nbeforeEach(waitForAsync(() => {\n  TestBed.configureTestingModule({\n    imports: [PorscheDesignSystemModule],\n    declarations: [EmptyComponent, SampleComponent],\n  }).compileComponents();\n}));\n\nit('should return 0 when nothing is rendered', async () => {\n  // we need to create something to bootstrap the design system via PorscheDesignSystemModule, which is calling load()\n  TestBed.createComponent(EmptyComponent);\n\n  expect(await componentsReady()).toBe(0);\n});\n\nit('should return 1 after component is rendered initially', async () => {\n  const fixture = TestBed.createComponent(SampleComponent);\n  expect(replaceHtmlComments(fixture.nativeElement.innerHTML)).toEqual('<p-button>Button 1</p-button>');\n\n  expect(await componentsReady()).toBe(1);\n  expect(replaceHtmlComments(fixture.nativeElement.innerHTML)).toEqual(\n    '<p-button class=\"hydrated\">Button 1</p-button>'\n  );\n});\n\nit('should return 2 after button is clicked', async () => {\n  const fixture = TestBed.createComponent(SampleComponent);\n  await componentsReady();\n\n  const button = fixture.debugElement.query(By.css('p-button')).nativeElement.shadowRoot.querySelector('button');\n  button.click();\n  fixture.detectChanges();\n\n  expect(await componentsReady()).toBe(2);\n});",react:"import { useState } from 'react';\nimport { componentsReady, PButton } from '@porsche-design-system/components-react';\nimport { render } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { getByRoleShadowed } from '@porsche-design-system/components-react/testing';\nimport '@porsche-design-system/components-react/jsdom-polyfill';\n\nconst Sample = (): JSX.Element => {\n  const [active, setActive] = useState(false);\n\n  return (\n    <>\n      <PButton onClick={() => setActive(true)}>Button 1</PButton>\n      {active && <PButton>Button 2</PButton>}\n    </>\n  );\n};\n\nbeforeAll(() => {\n  (window as any).PDS_SKIP_FETCH = true;\n});\n\nit('should return 0 when nothing is rendered', async () => {\n  expect(await componentsReady()).toBe(0);\n});\n\nit('should return 1 after component is rendered initially', async () => {\n  const { container } = render(<Sample />);\n  expect(container.innerHTML).toEqual('<p-button>Button 1</p-button>');\n\n  expect(await componentsReady()).toBe(1);\n  expect(container.innerHTML).toEqual('<p-button class=\"hydrated\">Button 1</p-button>');\n});\n\nit('should return 2 after button is clicked', async () => {\n  render(<Sample />);\n  expect(await componentsReady()).toBe(1);\n\n  const button = getByRoleShadowed('button');\n  await userEvent.click(button);\n\n  expect(await componentsReady()).toBe(2);\n});"},testbed:{angular:"import { Component } from '@angular/core';\nimport { TestBed, waitForAsync } from '@angular/core/testing';\nimport { componentsReady } from '@porsche-design-system/components-angular';\nimport { By } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport '@porsche-design-system/components-angular/jsdom-polyfill';\n\n@Component({\n  selector: 'empty',\n  template: '<div></div>',\n})\nclass EmptyComponent {}\n\n@Component({\n  selector: 'sample',\n  template: `\n    <p-button (click)=\"onClick()\">Button 1</p-button>\n    <p-button *ngIf=\"active\">Button 2</p-button>\n  `,\n})\nclass SampleComponent {\n  active = false;\n\n  onClick() {\n    this.active = true;\n  }\n}\n\nconst replaceHtmlComments = (input: string): string => input.replace(/\x3c!--[\\s\\S]+?--\x3e/g, '');\n\nbeforeAll(() => {\n  (window as any).PDS_SKIP_FETCH = true;\n});\n\nbeforeEach(waitForAsync(() => {\n  return TestBed.configureTestingModule({\n    imports: [CommonModule],\n    declarations: [EmptyComponent, SampleComponent],\n  }).compileComponents();\n}));\n\nit('should return 0 when nothing is rendered', async () => {\n  TestBed.createComponent(EmptyComponent);\n\n  expect(await componentsReady()).toBe(0);\n});\n\nit('should return 1 after component is rendered initially', async () => {\n  const fixture = TestBed.createComponent(SampleComponent);\n  expect(replaceHtmlComments(fixture.nativeElement.innerHTML)).toEqual('<p-button>Button 1</p-button>');\n\n  expect(await componentsReady()).toBe(1);\n  expect(replaceHtmlComments(fixture.nativeElement.innerHTML)).toEqual(\n    '<p-button class=\"hydrated\">Button 1</p-button>'\n  );\n});\n\nit('should return 2 after button is clicked', async () => {\n  const fixture = TestBed.createComponent(SampleComponent);\n  await componentsReady();\n\n  const button = fixture.debugElement.query(By.css('p-button')).nativeElement.shadowRoot.querySelector('button');\n  button.click();\n  fixture.detectChanges();\n\n  expect(await componentsReady()).toBe(2);\n});"},"testing-library":{angular:"import { Component } from '@angular/core';\nimport { componentsReady } from '@porsche-design-system/components-angular';\nimport { getByRoleShadowed } from '@porsche-design-system/components-angular/testing';\nimport { render, fireEvent } from '@testing-library/angular';\nimport '@porsche-design-system/components-angular/jsdom-polyfill';\n\n@Component({\n  selector: 'empty',\n  template: `<div></div>`,\n})\nclass EmptyComponent {}\n\n@Component({\n  selector: 'sample',\n  template: `\n    <p-button (click)=\"onClick()\">Button 1</p-button>\n    <p-button *ngIf=\"active\">Button 2</p-button>\n  `,\n})\nclass SampleComponent {\n  active = false;\n  onClick() {\n    this.active = true;\n  }\n}\n\nconst replaceHtmlComments = (input: string): string => input.replace(/\x3c!--[\\s\\S]+?--\x3e/g, '');\n\nbeforeAll(() => {\n  (window as any).PDS_SKIP_FETCH = true;\n});\n\nit('should return 0 when nothing is rendered', async () => {\n  await render(EmptyComponent);\n\n  expect(await componentsReady()).toBe(0);\n});\n\nit('should return 1 after component is rendered initially', async () => {\n  const { container } = await render(SampleComponent);\n  expect(replaceHtmlComments(container.innerHTML)).toEqual('<p-button>Button 1</p-button>');\n\n  expect(await componentsReady()).toBe(1);\n  expect(replaceHtmlComments(container.innerHTML)).toEqual('<p-button class=\"hydrated\">Button 1</p-button>');\n});\n\nit('should return 2 after button is clicked', async () => {\n  await render(SampleComponent);\n  await componentsReady();\n\n  const button = getByRoleShadowed('button');\n  fireEvent.click(button);\n\n  expect(await componentsReady()).toBe(2);\n});"}};return e[n]},o=()=>{const n={"vanilla-js":'<p-accordion heading="Some Heading" heading-tag="h3">\n  <p-text>\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore\n    magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n  </p-text>\n</p-accordion>\n<p-accordion heading="Some Heading" heading-tag="h3">\n  <p-text>\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore\n    magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n  </p-text>\n</p-accordion>\n\n<script>\n  const accordions = document.querySelectorAll(\'p-accordion\');\n  accordions.forEach((accordion) =>\n    accordion.addEventListener(\'update\', (e) => {\n      e.target.open = e.detail.open;\n    })\n  );\n<\/script>',angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type { AccordionUpdateEventDetail } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-accordion-example',\n  template: `\n    <p-accordion [heading]=\"'Some Heading'\" [heading-tag]=\"'h3'\" [open]=\"isOpen1\" (update)=\"onUpdate1($event)\">\n      <p-text>{{ content }}</p-text>\n    </p-accordion>\n    <p-accordion [heading]=\"'Some Heading'\" [heading-tag]=\"'h3'\" [open]=\"isOpen2\" (update)=\"onUpdate2($event)\">\n      <p-text>{{ content }}</p-text>\n    </p-accordion>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccordionExampleComponent {\n  isOpen1 = false;\n  isOpen2 = false;\n  content =\n    'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et ' +\n    'dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.';\n\n  onUpdate1(e: CustomEvent<AccordionUpdateEventDetail>) {\n    this.isOpen1 = e.detail.open;\n  }\n  onUpdate2(e: CustomEvent<AccordionUpdateEventDetail>) {\n    this.isOpen2 = e.detail.open;\n  }\n}",react:"import { useCallback, useState } from 'react';\nimport { type AccordionUpdateEventDetail, PAccordion, PText } from '@porsche-design-system/components-react';\n\nexport const AccordionExamplePage = (): JSX.Element => {\n  const [isOpen1, setIsOpen1] = useState<boolean>(false);\n  const [isOpen2, setIsOpen2] = useState<boolean>(false);\n\n  const onUpdate1 = useCallback((e: CustomEvent<AccordionUpdateEventDetail>) => {\n    setIsOpen1(e.detail.open);\n  }, []);\n  const onUpdate2 = useCallback((e: CustomEvent<AccordionUpdateEventDetail>) => {\n    setIsOpen2(e.detail.open);\n  }, []);\n\n  const content =\n    'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et ' +\n    'dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.';\n\n  return (\n    <>\n      <PAccordion heading=\"Some Heading\" headingTag=\"h3\" open={isOpen1} onUpdate={onUpdate1}>\n        <PText>{content}</PText>\n      </PAccordion>\n      <PAccordion heading=\"Some Heading\" headingTag=\"h3\" open={isOpen2} onUpdate={onUpdate2}>\n        <PText>{content}</PText>\n      </PAccordion>\n    </>\n  );\n};",vue:'<script setup lang="ts">\n  import { type AccordionUpdateEventDetail, PAccordion, PText } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const isOpen1 = ref(false);\n  const isOpen2 = ref(false);\n\n  const onUpdate1 = (e: AccordionUpdateEventDetail): void => {\n    isOpen1.value = e.open;\n  };\n  const onUpdate2 = (e: AccordionUpdateEventDetail): void => {\n    isOpen2.value = e.open;\n  };\n\n  const content =\n    \'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et \' +\n    \'dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\';\n<\/script>\n\n<template>\n  <PAccordion :heading="\'Some Heading\'" :headingTag="\'h3\'" :open="isOpen1" @update="onUpdate1">\n    <PText>{{ content }}</PText>\n  </PAccordion>\n  <PAccordion :heading="\'Some Heading\'" :headingTag="\'h3\'" :open="isOpen2" @update="onUpdate2">\n    <PText>{{ content }}</PText>\n  </PAccordion>\n</template>'};return n},i=()=>{const n={"vanilla-js":'<p-button type="button">Open Banner</p-button>\n<p-banner open="false" heading="Some Heading" heading-tag="h3" description="Some Description"></p-banner>\n\n<script>\n  const banner = document.querySelector(\'p-banner\');\n  banner.addEventListener(\'dismiss\', () => {\n    banner.open = false;\n  });\n  document.querySelector(\'p-button\').addEventListener(\'click\', () => (banner.open = true));\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-banner-example\',\n  template: `\n    <p-button type="button" (click)="onOpen()">Open Banner</p-button>\n    <p-banner\n      [open]="isBannerOpen"\n      [heading]="\'Some Heading\'"\n      [heading-tag]="\'h3\'"\n      [description]="\'Some Description\'"\n      (dismiss)="onDismiss()"\n    >\n    </p-banner>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerExampleComponent {\n  isBannerOpen = false;\n\n  onOpen() {\n    this.isBannerOpen = true;\n  }\n  onDismiss() {\n    this.isBannerOpen = false;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport { PButton, PBanner } from \'@porsche-design-system/components-react\';\n\nexport const BannerExamplePage = (): JSX.Element => {\n  const [isBannerOpen, setIsBannerOpen] = useState(false);\n\n  const onOpen = useCallback(() => {\n    setIsBannerOpen(true);\n  }, []);\n\n  const onDismiss = useCallback(() => {\n    setIsBannerOpen(false);\n  }, []);\n\n  return (\n    <>\n      <PButton type="button" onClick={onOpen}>\n        Open Banner\n      </PButton>\n      <PBanner\n        open={isBannerOpen}\n        heading="Some Heading"\n        headingTag="h3"\n        description="Some Description"\n        onDismiss={onDismiss}\n      />\n    </>\n  );\n};'};return n},r=()=>{const n={"vanilla-js":'<form>\n  <p-button name="option" value="A" type="submit">Button A</p-button>\n  <p-button name="option" value="B" type="submit">Button B</p-button>\n</form>\n\n<p-text>Last submitted data: none</p-text>\n\n<script>\n  const debugElement = document.querySelector(\'p\');\n  const form = document.querySelector(\'form\');\n  form.addEventListener(\'submit\', (e) => {\n    e.preventDefault();\n    const formData = Array.from(new FormData(e.target, e.submitter).entries())[0];\n    debugElement.innerText = `Last submitted data: ${formData.join(\'=\') || \'none\'}`;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-button-example-form\',\n  template: `\n    <form (submit)="handleSubmit($event)">\n      <p-button name="option" value="A" type="submit">Button A</p-button>\n      <p-button name="option" value="B" type="submit">Button B</p-button>\n    </form>\n\n    <p-text>Last submitted data: {{ lastSubmittedData }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonExampleFormComponent {\n  lastSubmittedData: string = \'none\';\n\n  handleSubmit(e: Event): void {\n    e.preventDefault();\n    const submitter = (e as SubmitEvent).submitter as HTMLButtonElement;\n    this.lastSubmittedData = submitter.name + \'=\' + submitter.value || \'none\';\n  }\n}',react:'import { type FormEvent, useState } from \'react\';\nimport { PButton, PText } from \'@porsche-design-system/components-react\';\n\nexport const ButtonExampleFormPage = (): JSX.Element => {\n  const [lastSubmittedData, setLastSubmittedData] = useState(\'none\');\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = Array.from(new FormData(e.currentTarget, (e.nativeEvent as SubmitEvent).submitter).entries())[0];\n    setLastSubmittedData(formData.join(\'=\') || \'none\');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <PButton name="option" value="A" type="submit">\n          Button A\n        </PButton>\n        <PButton name="option" value="B" type="submit">\n          Button B\n        </PButton>\n      </form>\n\n      <PText>Last submitted data: {lastSubmittedData}</PText>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import { PButton, PText } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const lastSubmittedData = ref(\'none\');\n  const handleSubmit = (e: Event) => {\n    const formData = Array.from(new FormData(e.target as HTMLFormElement, (e as SubmitEvent).submitter).entries())[0];\n    lastSubmittedData.value = formData.join(\'=\') || \'none\';\n  };\n<\/script>\n\n<template>\n  <form @submit.prevent="handleSubmit">\n    <PButton name="option" value="A" type="submit">Button A</PButton>\n    <PButton name="option" value="B" type="submit">Button B</PButton>\n  </form>\n\n  <PText>Last submitted data: {{ lastSubmittedData }}</PText>\n</template>'};return n},l=()=>{const n={"vanilla-js":'<p-canvas sidebar-start-open="false" sidebar-start-width="medium" sidebar-end-open="false" sidebar-end-width="medium">\n  <div slot="header">\n    <p-tag color="background-base">Header</p-tag>\n    <p-button-pure id="open-sidebar-start" icon="menu-lines">Toggle Sidebar Start</p-button-pure>\n    <p-button-pure id="open-sidebar-end" icon="menu-lines">Toggle Sidebar End</p-button-pure>\n  </div>\n\n  <div class="module">\n    <div class="tile tile--full">Full</div>\n  </div>\n  <div class="module">\n    <div class="tile tile--one-half">One Half</div>\n    <div class="tile tile--one-half">One Half</div>\n  </div>\n  <div class="module">\n    <div class="tile tile--one-third">One Third</div>\n    <div class="tile tile--one-third">One Third</div>\n    <div class="tile tile--one-third">One Third</div>\n  </div>\n  <div class="module">\n    <div class="tile tile--one-third">One Third</div>\n    <div class="tile tile--two-thirds">Two Thirds</div>\n  </div>\n\n  <div slot="footer">\n    <p-tag color="background-base">Footer</p-tag>\n  </div>\n  <div slot="sidebar-start">\n    <p-tag color="background-base">Sidebar</p-tag>\n  </div>\n  <div slot="sidebar-end">\n    <p-tag color="background-base">Sidebar</p-tag>\n  </div>\n</p-canvas>\n\n<script>\n  const canvas = document.querySelector(\'p-canvas\');\n  canvas.addEventListener(\'dismissSidebarStart\', () => (canvas.sidebarStartOpen = false));\n  canvas.addEventListener(\'dismissSidebarEnd\', () => (canvas.sidebarEndOpen = false));\n  document\n    .getElementById(\'open-sidebar-start\')\n    .addEventListener(\'click\', () => (canvas.sidebarStartOpen = !canvas.sidebarStartOpen));\n  document\n    .getElementById(\'open-sidebar-end\')\n    .addEventListener(\'click\', () => (canvas.sidebarEndOpen = !canvas.sidebarEndOpen));\n<\/script>\n\n<style>\n  body {\n    overflow-x: hidden;\n  }\n\n  p-canvas::part(header) {\n    background: #d1fbc6;\n  }\n\n  p-canvas::part(main) {\n    background: #bed0ff;\n  }\n\n  p-canvas::part(footer) {\n    background: #f7c6fb;\n  }\n\n  p-canvas::part(sidebar-start) {\n    background: #ffbebe;\n  }\n\n  p-canvas::part(sidebar-end) {\n    background: #ffbebe;\n  }\n\n  .module {\n    display: grid;\n    grid-template-columns: subgrid;\n    grid-column: 1 / -1;\n  }\n\n  .tile {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 16px;\n    background: #fff;\n  }\n\n  .tile--full {\n    grid-column: var(--pds-grid-span-full);\n  }\n\n  .tile--one-half {\n    grid-column: var(--pds-grid-span-one-half);\n  }\n\n  .tile--one-third {\n    grid-column: var(--pds-grid-span-one-third);\n  }\n\n  .tile--two-thirds {\n    grid-column: var(--pds-grid-span-two-thirds);\n  }\n</style>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-canvas-example\',\n  styles: [\n    `\n      body {\n        overflow-x: hidden;\n      }\n\n      p-canvas::part(header) {\n        background: #d1fbc6;\n      }\n\n      p-canvas::part(main) {\n        background: #bed0ff;\n      }\n\n      p-canvas::part(footer) {\n        background: #f7c6fb;\n      }\n\n      p-canvas::part(sidebar-start) {\n        background: #ffbebe;\n      }\n\n      p-canvas::part(sidebar-end) {\n        background: #ffbebe;\n      }\n\n      .module {\n        display: grid;\n        grid-template-columns: subgrid;\n        grid-column: 1 / -1;\n      }\n\n      .tile {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 16px;\n        background: #fff;\n      }\n\n      .tile--full {\n        grid-column: var(--pds-grid-span-full);\n      }\n\n      .tile--one-half {\n        grid-column: var(--pds-grid-span-one-half);\n      }\n\n      .tile--one-third {\n        grid-column: var(--pds-grid-span-one-third);\n      }\n\n      .tile--two-thirds {\n        grid-column: var(--pds-grid-span-two-thirds);\n      }\n    `,\n  ],\n  template: `\n    <p-canvas\n      [sidebarStartWidth]="\'medium\'"\n      [sidebarEndWidth]="\'medium\'"\n      (dismissSidebarStart)="onDismissSidebarStart()"\n      [sidebarStartOpen]="isSidebarStartOpen"\n      (dismissSidebarEnd)="onDismissSidebarEnd()"\n      [sidebarEndOpen]="isSidebarEndOpen"\n    >\n      <div slot="header">\n        <p-tag color="background-base">Header</p-tag>\n        <p-button-pure icon="menu-lines" (click)="onToggleSidebarStart()">Toggle Sidebar Start</p-button-pure>\n        <p-button-pure icon="menu-lines" (click)="onToggleSidebarEnd()">Toggle Sidebar End</p-button-pure>\n      </div>\n\n      <div class="module">\n        <div class="tile tile--full">Full</div>\n      </div>\n      <div class="module">\n        <div class="tile tile--one-half">One Half</div>\n        <div class="tile tile--one-half">One Half</div>\n      </div>\n      <div class="module">\n        <div class="tile tile--one-third">One Third</div>\n        <div class="tile tile--one-third">One Third</div>\n        <div class="tile tile--one-third">One Third</div>\n      </div>\n      <div class="module">\n        <div class="tile tile--one-third">One Third</div>\n        <div class="tile tile--two-thirds">Two Thirds</div>\n      </div>\n\n      <div slot="footer">\n        <p-tag color="background-base">Footer</p-tag>\n      </div>\n      <div slot="sidebar-start">\n        <p-tag color="background-base">Sidebar</p-tag>\n      </div>\n      <div slot="sidebar-end">\n        <p-tag color="background-base">Sidebar</p-tag>\n      </div>\n    </p-canvas>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CanvasExampleComponent {\n  isSidebarStartOpen = false;\n  isSidebarEndOpen = false;\n\n  onToggleSidebarStart() {\n    this.isSidebarStartOpen = !this.isSidebarStartOpen;\n  }\n  onDismissSidebarStart() {\n    this.isSidebarStartOpen = false;\n  }\n  onToggleSidebarEnd() {\n    this.isSidebarEndOpen = !this.isSidebarEndOpen;\n  }\n  onDismissSidebarEnd() {\n    this.isSidebarEndOpen = false;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport { PButtonPure, PCanvas, PTag } from \'@porsche-design-system/components-react\';\n\nexport const CanvasExamplePage = (): JSX.Element => {\n  const [isSidebarStartOpen, setIsSidebarStartOpen] = useState<boolean>(false);\n  const onToggleSidebarStart = useCallback(() => {\n    setIsSidebarStartOpen((isSidebarStartOpen) => !isSidebarStartOpen);\n  }, []);\n  const onDismissSidebarStart = useCallback(() => {\n    setIsSidebarStartOpen(false);\n  }, []);\n\n  const [isSidebarEndOpen, setIsSidebarEndOpen] = useState<boolean>(false);\n  const onToggleSidebarEnd = useCallback(() => {\n    setIsSidebarEndOpen((isSidebarEndOpen) => !isSidebarEndOpen);\n  }, []);\n  const onDismissSidebarEnd = useCallback(() => {\n    setIsSidebarEndOpen(false);\n  }, []);\n\n  const style = `\n      body {\n        overflow-x: hidden;\n      }\n\n      p-canvas::part(header) {\n        background: #d1fbc6;\n      }\n\n      p-canvas::part(main) {\n        background: #bed0ff;\n      }\n\n      p-canvas::part(footer) {\n        background: #f7c6fb;\n      }\n\n      p-canvas::part(sidebar-start) {\n        background: #ffbebe;\n      }\n\n      p-canvas::part(sidebar-end) {\n        background: #ffbebe;\n      }\n\n      .module {\n        display: grid;\n        grid-template-columns: subgrid;\n        grid-column: 1 / -1;\n      }\n\n      .tile {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 16px;\n        background: #fff;\n      }\n\n      .tile--full {\n        grid-column: var(--pds-grid-span-full);\n      }\n\n      .tile--one-half {\n        grid-column: var(--pds-grid-span-one-half);\n      }\n\n      .tile--one-third {\n        grid-column: var(--pds-grid-span-one-third);\n      }\n\n      .tile--two-thirds {\n        grid-column: var(--pds-grid-span-two-thirds);\n      }\n  `;\n\n  return (\n    <>\n      <style dangerouslySetInnerHTML={{ __html: style }} />\n      <PCanvas\n        sidebarStartWidth="medium"\n        sidebarEndWidth="medium"\n        onDismissSidebarStart={onDismissSidebarStart}\n        sidebarStartOpen={isSidebarStartOpen}\n        onDismissSidebarEnd={onDismissSidebarEnd}\n        sidebarEndOpen={isSidebarEndOpen}\n      >\n        <div slot="header">\n          <PTag color="background-base">Header</PTag>\n          <PButtonPure icon="menu-lines" onClick={onToggleSidebarStart}>\n            Toggle Sidebar Start\n          </PButtonPure>\n          <PButtonPure icon="menu-lines" onClick={onToggleSidebarEnd}>\n            Toggle Sidebar End\n          </PButtonPure>\n        </div>\n\n        <div className="module">\n          <div className="tile tile--full">Full</div>\n        </div>\n        <div className="module">\n          <div className="tile tile--one-half">One Half</div>\n          <div className="tile tile--one-half">One Half</div>\n        </div>\n        <div className="module">\n          <div className="tile tile--one-third">One Third</div>\n          <div className="tile tile--one-third">One Third</div>\n          <div className="tile tile--one-third">One Third</div>\n        </div>\n        <div className="module">\n          <div className="tile tile--one-third">One Third</div>\n          <div className="tile tile--two-thirds">Two Thirds</div>\n        </div>\n\n        <div slot="footer">\n          <PTag color="background-base">Footer</PTag>\n        </div>\n        <div slot="sidebar-start">\n          <PTag color="background-base">Sidebar</PTag>\n        </div>\n        <div slot="sidebar-end">\n          <PTag color="background-base">Sidebar</PTag>\n        </div>\n      </PCanvas>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import { PButtonPure, PCanvas, PTag } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const isSidebarStartOpen = ref(false);\n  const onToggleSidebarStart = (): void => {\n    isSidebarStartOpen.value = !isSidebarStartOpen.value;\n  };\n  const onDismissSidebarStart = (): void => {\n    isSidebarStartOpen.value = false;\n  };\n\n  const isSidebarEndOpen = ref(false);\n  const onToggleSidebarEnd = (): void => {\n    isSidebarEndOpen.value = !isSidebarEndOpen.value;\n  };\n  const onDismissSidebarEnd = (): void => {\n    isSidebarEndOpen.value = false;\n  };\n<\/script>\n\n<template>\n  <PCanvas\n    :sidebarStartWidth="\'medium\'"\n    :sidebarEndWidth="\'medium\'"\n    @dismissSidebarStart="onDismissSidebarStart"\n    :sidebarStartOpen="isSidebarStartOpen"\n    @dismissSidebarEnd="onDismissSidebarEnd"\n    :sidebarEndOpen="isSidebarEndOpen"\n  >\n    <div slot="header">\n      <PTag color="background-base">Header</PTag>\n      <PButtonPure icon="menu-lines" @click="onToggleSidebarStart">Toggle Sidebar Start</PButtonPure>\n      <PButtonPure icon="menu-lines" @click="onToggleSidebarEnd">Toggle Sidebar End</PButtonPure>\n    </div>\n\n    <div class="module">\n      <div class="tile tile--full">Full</div>\n    </div>\n    <div class="module">\n      <div class="tile tile--one-half">One Half</div>\n      <div class="tile tile--one-half">One Half</div>\n    </div>\n    <div class="module">\n      <div class="tile tile--one-third">One Third</div>\n      <div class="tile tile--one-third">One Third</div>\n      <div class="tile tile--one-third">One Third</div>\n    </div>\n    <div class="module">\n      <div class="tile tile--one-third">One Third</div>\n      <div class="tile tile--two-thirds">Two Thirds</div>\n    </div>\n\n    <div slot="footer">\n      <PTag color="background-base">Footer</PTag>\n    </div>\n    <div slot="sidebar-start">\n      <PTag color="background-base">Sidebar</PTag>\n    </div>\n    <div slot="sidebar-end">\n      <PTag color="background-base">Sidebar</PTag>\n    </div>\n  </PCanvas>\n</template>\n\n<style>\n  body {\n    overflow-x: hidden;\n  }\n</style>\n\n<style scoped>\n  p-canvas::part(header) {\n    background: #d1fbc6;\n  }\n\n  p-canvas::part(main) {\n    background: #bed0ff;\n  }\n\n  p-canvas::part(footer) {\n    background: #f7c6fb;\n  }\n\n  p-canvas::part(sidebar-start) {\n    background: #ffbebe;\n  }\n\n  p-canvas::part(sidebar-end) {\n    background: #ffbebe;\n  }\n\n  .module {\n    display: grid;\n    grid-template-columns: subgrid;\n    grid-column: 1 / -1;\n  }\n\n  .tile {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 16px;\n    background: #fff;\n  }\n\n  .tile--full {\n    grid-column: var(--pds-grid-span-full);\n  }\n\n  .tile--one-half {\n    grid-column: var(--pds-grid-span-one-half);\n  }\n\n  .tile--one-third {\n    grid-column: var(--pds-grid-span-one-third);\n  }\n\n  .tile--two-thirds {\n    grid-column: var(--pds-grid-span-two-thirds);\n  }\n</style>'};return n},s=n=>{const e={"example-events":{"vanilla-js":"<p-carousel heading=\"Some Heading\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</p-carousel>\n\n<p-text>Last event detail: none</p-text>\n\n<script>\n  const carousel = document.querySelector('p-carousel');\n  const debugElement = document.querySelector('p-text');\n\n  carousel.addEventListener('update', (e) => {\n    debugElement.innerText = `Last event detail: ${JSON.stringify(e.detail)}`;\n  });\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type { CarouselUpdateEventDetail } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-carousel-example-events',\n  template: `\n    <p-carousel [heading]=\"'Some Heading'\" (update)=\"onUpdate($event)\">\n      <div>Slide 1</div>\n      <div>Slide 2</div>\n      <div>Slide 3</div>\n    </p-carousel>\n\n    <p-text>Last event detail: {{ lastEventDetail }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselExampleEventsComponent {\n  lastEventDetail = 'none';\n\n  onUpdate(e: CustomEvent<CarouselUpdateEventDetail>) {\n    this.lastEventDetail = JSON.stringify(e.detail);\n  }\n}",react:"import { useCallback, useState } from 'react';\nimport { type CarouselUpdateEventDetail, PCarousel, PText } from '@porsche-design-system/components-react';\n\nexport const CarouselExampleEventsPage = (): JSX.Element => {\n  const [lastEventDetail, setLastEventDetail] = useState('none');\n  const onUpdate = useCallback(\n    (e: CustomEvent<CarouselUpdateEventDetail>) => setLastEventDetail(JSON.stringify(e.detail)),\n    []\n  );\n\n  return (\n    <>\n      <PCarousel heading=\"Some Heading\" onUpdate={onUpdate}>\n        <div>Slide 1</div>\n        <div>Slide 2</div>\n        <div>Slide 3</div>\n      </PCarousel>\n      <PText children={`Last event detail: ${lastEventDetail}`} />\n    </>\n  );\n};",vue:"<script setup lang=\"ts\">\n  import { type CarouselUpdateEventDetail, PCarousel, PText } from '@porsche-design-system/components-vue';\n  import { ref } from 'vue';\n\n  const lastEventDetail = ref('none');\n  const onUpdate = (e: CarouselUpdateEventDetail): void => {\n    lastEventDetail.value = JSON.stringify(e);\n  };\n<\/script>\n\n<template>\n  <PCarousel :heading=\"'Some Heading'\" @update=\"onUpdate\">\n    <div>Slide 1</div>\n    <div>Slide 2</div>\n    <div>Slide 3</div>\n  </PCarousel>\n  <PText>Last event detail: {{ lastEventDetail }}</PText>\n</template>"},"example-dynamic-slides":{"vanilla-js":"<p-carousel slides-per-page=\"2\" heading=\"Some Heading\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</p-carousel>\n\n<button id=\"btn-add\" type=\"button\">Add slide</button>\n<button id=\"btn-remove\" type=\"button\">Remove last slide</button>\n\n<script>\n  const carousel = document.querySelector('p-carousel');\n\n  document.querySelector('#btn-add').addEventListener('click', () => {\n    const child = document.createElement('div');\n    child.innerText = `Slide ${carousel.children.length + 1}`;\n    carousel.append(child);\n  });\n\n  document.querySelector('#btn-remove').addEventListener('click', () => {\n    carousel.lastChild.remove();\n  });\n<\/script>",angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-carousel-example-dynamic-slides\',\n  template: `\n    <p-carousel [slides-per-page]="2" [heading]="\'Some Heading\'">\n      <div *ngFor="let _ of [].constructor(amountOfSlides); let i = index">Slide {{ i + 1 }}</div>\n    </p-carousel>\n\n    <button type="button" (click)="amountOfSlides = amountOfSlides + 1">Add slide</button>\n    <button type="button" (click)="amountOfSlides = amountOfSlides === 0 ? 0 : amountOfSlides - 1">\n      Remove last slide\n    </button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselExampleDynamicSlidesComponent {\n  amountOfSlides = 3;\n}',react:'import { useCallback, useState } from \'react\';\nimport { PCarousel } from \'@porsche-design-system/components-react\';\n\nexport const CarouselExampleDynamicSlidesPage = (): JSX.Element => {\n  const [amountOfSlides, setAmountOfSlides] = useState(3);\n  const onAddClick = useCallback(() => setAmountOfSlides((prev) => prev + 1), []);\n  const onRemoveClick = useCallback(() => setAmountOfSlides((prev) => (prev === 0 ? 0 : prev - 1)), []);\n\n  return (\n    <>\n      <PCarousel slidesPerPage={2} heading="Some Heading">\n        {Array.from(Array(amountOfSlides)).map((_, i) => (\n          <div key={i} children={`Slide ${i + 1}`} />\n        ))}\n      </PCarousel>\n\n      <button type="button" onClick={onAddClick} children="Add slide" />\n      <button type="button" onClick={onRemoveClick} children="Remove last slide" />\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import { PCarousel } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const amountOfSlides = ref(3);\n\n  const onAddClick = (): void => {\n    amountOfSlides.value = amountOfSlides.value + 1;\n  };\n  const onRemoveClick = (): void => {\n    amountOfSlides.value = amountOfSlides.value === 0 ? 0 : amountOfSlides.value - 1;\n  };\n<\/script>\n\n<template>\n  <PCarousel :slidesPerPage="2" :heading="\'Some Heading\'">\n    <div v-for="(_, i) in Array.from(Array(amountOfSlides))" :key="i">Slide {{ i + 1 }}</div>\n  </PCarousel>\n\n  <button type="button" @update="onAddClick">Add slide</button>\n  <button type="button" @update="onRemoveClick">Remove last slide</button>\n</template>'},"example-jump-to-slide":{"vanilla-js":'<p-carousel heading="Some Heading" active-slide-index="1">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</p-carousel>\n\n<button type="button">1</button>\n<button type="button" disabled>2</button>\n<button type="button">3</button>\n\n<script>\n  const carousel = document.querySelector(\'p-carousel\');\n  const buttons = document.querySelectorAll(\'button\');\n\n  const syncButtonsAndCarousel = (newIndex) => {\n    carousel.activeSlideIndex = newIndex;\n    buttons.forEach((el, i) => {\n      el.disabled = newIndex === i;\n    });\n  };\n\n  buttons.forEach((el) => {\n    el.addEventListener(\'click\', (e) => {\n      syncButtonsAndCarousel(parseInt(e.target.innerText) - 1);\n    });\n  });\n\n  carousel.addEventListener(\'update\', (e) => {\n    syncButtonsAndCarousel(e.detail.activeIndex);\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { CarouselUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-carousel-example-jump-to-slide\',\n  template: `\n    <p-carousel [heading]="\'Some Heading\'" [activeSlideIndex]="activeSlideIndex" (update)="onUpdate($event)">\n      <div>Slide 1</div>\n      <div>Slide 2</div>\n      <div>Slide 3</div>\n    </p-carousel>\n\n    <button\n      *ngFor="let _ of [].constructor(3); let i = index"\n      type="button"\n      (click)="onButtonClick($event)"\n      [disabled]="activeSlideIndex === i"\n    >\n      {{ i + 1 }}\n    </button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselExampleJumpToSlideComponent {\n  activeSlideIndex = 1;\n\n  onUpdate(e: CustomEvent<CarouselUpdateEventDetail>) {\n    this.activeSlideIndex = e.detail.activeIndex;\n  }\n  onButtonClick(e: MouseEvent) {\n    this.activeSlideIndex = parseInt((e.target as HTMLButtonElement).innerText) - 1;\n  }\n}',react:"import { type MouseEvent, useCallback, useState } from 'react';\nimport { type CarouselUpdateEventDetail, PCarousel } from '@porsche-design-system/components-react';\n\nexport const CarouselExampleJumpToSlidePage = (): JSX.Element => {\n  const [activeSlideIndex, setActiveSlideIndex] = useState(1);\n  const onUpdate = useCallback(\n    (e: CustomEvent<CarouselUpdateEventDetail>) => setActiveSlideIndex(e.detail.activeIndex),\n    []\n  );\n  const onButtonClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement> & { target: HTMLButtonElement }) =>\n      setActiveSlideIndex(parseInt(e.target.innerText) - 1),\n    []\n  );\n\n  return (\n    <>\n      <PCarousel heading=\"Some Heading\" activeSlideIndex={activeSlideIndex} onUpdate={onUpdate}>\n        <div>Slide 1</div>\n        <div>Slide 2</div>\n        <div>Slide 3</div>\n      </PCarousel>\n\n      {Array.from(Array(3)).map((_, i) => (\n        <button key={i} type=\"button\" onClick={onButtonClick} disabled={activeSlideIndex === i}>\n          {i + 1}\n        </button>\n      ))}\n    </>\n  );\n};",vue:'<script setup lang="ts">\n  import { type CarouselUpdateEventDetail, PCarousel } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const activeSlideIndex = ref(1);\n\n  const onUpdate = (e: CarouselUpdateEventDetail): void => {\n    activeSlideIndex.value = e.activeIndex;\n  };\n  const onButtonClick = (e: MouseEvent): void => {\n    activeSlideIndex.value = parseInt((e.target as HTMLButtonElement).innerText) - 1;\n  };\n<\/script>\n\n<template>\n  <PCarousel :heading="\'Some Heading\'" :activeSlideIndex="activeSlideIndex" @update="onUpdate">\n    <div>Slide 1</div>\n    <div>Slide 2</div>\n    <div>Slide 3</div>\n  </PCarousel>\n\n  <button\n    v-for="(_, i) in Array.from(Array(3))"\n    :key="i"\n    type="button"\n    @click="onButtonClick"\n    :disabled="activeSlideIndex === i"\n  >\n    {{ i + 1 }}\n  </button>\n</template>'}};return e[n]},d=()=>{const n={"vanilla-js":'<p-button type="button" aria="{ \'aria-haspopup\': \'dialog\' }">Open Flyout</p-button>\n\n<p-flyout open="false" aria="{ \'aria-label\': \'Some Heading\' }">\n  <p-heading slot="header" size="large" tag="h2">Some Heading</p-heading>\n  <p-text>Some Content</p-text>\n  <p-button-group slot="footer">\n    <p-button type="button">Proceed</p-button>\n    <p-button type="button" variant="secondary">Cancel</p-button>\n  </p-button-group>\n  <p-text slot="sub-footer">Some additional Sub-Footer</p-text>\n</p-flyout>\n\n<script>\n  const flyout = document.querySelector(\'p-flyout\');\n  flyout.addEventListener(\'dismiss\', () => (flyout.open = false));\n  document.querySelector(\'p-button\').addEventListener(\'click\', () => (flyout.open = true));\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-flyout-example\',\n  template: `\n    <p-button type="button" [aria]="{ \'aria-haspopup\': \'dialog\' }" (click)="onOpen()">Open Flyout</p-button>\n    <p-flyout [open]="isFlyoutOpen" (dismiss)="onDismiss()" [aria]="{ \'aria-label\': \'Some Heading\' }">\n      <p-heading slot="header" size="large" tag="h2">Some Heading</p-heading>\n      <p-text>Some Content</p-text>\n      <p-button-group slot="footer">\n        <p-button type="button">Proceed</p-button>\n        <p-button type="button" [variant]="\'secondary\'">Cancel</p-button>\n      </p-button-group>\n      <p-text slot="sub-footer">Some additional Sub-Footer</p-text>\n    </p-flyout>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FlyoutExampleComponent {\n  isFlyoutOpen = false;\n\n  onOpen() {\n    this.isFlyoutOpen = true;\n  }\n  onDismiss() {\n    this.isFlyoutOpen = false;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport { PButton, PText, PFlyout, PHeading, PButtonGroup } from \'@porsche-design-system/components-react\';\n\nexport const FlyoutExamplePage = (): JSX.Element => {\n  const [isFlyoutOpen, setIsFlyoutOpen] = useState<boolean>(false);\n  const onOpen = useCallback(() => {\n    setIsFlyoutOpen(true);\n  }, []);\n  const onDismiss = useCallback(() => {\n    setIsFlyoutOpen(false);\n  }, []);\n\n  return (\n    <>\n      <PButton type="button" aria={{ \'aria-haspopup\': \'dialog\' }} onClick={onOpen}>\n        Open Modal\n      </PButton>\n      <PFlyout open={isFlyoutOpen} onDismiss={onDismiss} aria={{ \'aria-label\': \'Some Heading\' }}>\n        <PHeading slot="header" size="large" tag="h2">\n          Some Heading\n        </PHeading>\n        <PText>Some Content</PText>\n        <PButtonGroup slot="footer">\n          <PButton type="button">Proceed</PButton>\n          <PButton type="button" variant="secondary">\n            Cancel\n          </PButton>\n        </PButtonGroup>\n        <PText slot="sub-footer">Some Content</PText>\n      </PFlyout>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import { PFlyout, PButton, PHeading, PText, PButtonGroup } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const isFlyoutOpen = ref(false);\n  const onOpen = (): void => {\n    isFlyoutOpen.value = true;\n  };\n  const onDismiss = (): void => {\n    isFlyoutOpen.value = false;\n  };\n<\/script>\n\n<template>\n  <PButton type="button" :aria="{ \'aria-haspopup\': \'dialog\' }" @click="onOpen">Open Flyout</PButton>\n  <PFlyout :open="isFlyoutOpen" :position="\'end\'" @dismiss="onDismiss">\n    <PHeading slot="header" size="large" tag="h2">Some Heading</PHeading>\n    <PText>Some Content</PText>\n    <PButtonGroup slot="footer">\n      <PButton type="button">Proceed</PButton>\n      <PButton type="button" variant="secondary">Cancel</PButton>\n    </PButtonGroup>\n    <PText slot="sub-footer">Some additional Sub-Footer</PText>\n  </PFlyout>\n</template>'};return n},c=n=>{const e={default:{"vanilla-js":'<p-button type="button" aria="{ \'aria-haspopup\': \'dialog\' }">Open Flyout Multilevel</p-button>\n\n<p-flyout-multilevel>\n  <p-flyout-multilevel-item identifier="item-1" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-2" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-3" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-4" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-5" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n</p-flyout-multilevel>\n\n<script>\n  const flyoutMultilevel = document.querySelector(\'p-flyout-multilevel\');\n  document.querySelector(\'p-button\').addEventListener(\'click\', () => {\n    flyoutMultilevel.open = true;\n  });\n  flyoutMultilevel.addEventListener(\'dismiss\', () => {\n    flyoutMultilevel.open = false;\n  });\n  flyoutMultilevel.addEventListener(\'update\', (e) => {\n    flyoutMultilevel.activeIdentifier = e.detail.activeIdentifier;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport { type FlyoutMultilevelUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-flyout-multilevel-example\',\n  template: `\n    <p-button type="button" [aria]="{ \'aria-haspopup\': \'dialog\' }" (click)="onOpen()">Open Flyout Multilevel</p-button>\n    <p-flyout-multilevel\n      [open]="isFlyoutMultilevelOpen"\n      [activeIdentifier]="flyoutMultilevelActiveIdentifier"\n      (dismiss)="onDismiss()"\n      (update)="onUpdate($event)"\n    >\n      <p-flyout-multilevel-item identifier="item-1" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-2" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-3" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-4" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-5" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n    </p-flyout-multilevel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FlyoutMultilevelExampleComponent {\n  isFlyoutMultilevelOpen = false;\n  flyoutMultilevelActiveIdentifier: string | undefined = undefined;\n\n  onOpen(): void {\n    this.isFlyoutMultilevelOpen = true;\n  }\n  onDismiss(): void {\n    this.isFlyoutMultilevelOpen = false;\n  }\n  onUpdate(e: CustomEvent<FlyoutMultilevelUpdateEventDetail>): void {\n    this.flyoutMultilevelActiveIdentifier = e.detail.activeIdentifier;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport {\n  type FlyoutMultilevelUpdateEventDetail,\n  PButton,\n  PFlyoutMultilevel,\n  PFlyoutMultilevelItem,\n} from \'@porsche-design-system/components-react\';\n\nexport const FlyoutMultilevelExamplePage = (): JSX.Element => {\n  const [isFlyoutMultilevelOpen, setIsFlyoutMultilevelOpen] = useState<boolean>(false);\n  const [flyoutMultilevelActiveIdentifier, setFlyoutMultilevelActiveIdentifier] = useState<string>();\n  const onOpen = useCallback(() => {\n    setIsFlyoutMultilevelOpen(true);\n  }, []);\n  const onDismiss = useCallback(() => {\n    setIsFlyoutMultilevelOpen(false);\n  }, []);\n  const onUpdate = useCallback(\n    (e: CustomEvent<FlyoutMultilevelUpdateEventDetail>) =>\n      setFlyoutMultilevelActiveIdentifier(e.detail.activeIdentifier),\n    []\n  );\n\n  return (\n    <>\n      <PButton type="button" aria={{ \'aria-haspopup\': \'dialog\' }} onClick={onOpen}>\n        Open Flyout Multilevel\n      </PButton>\n      <PFlyoutMultilevel\n        open={isFlyoutMultilevelOpen}\n        activeIdentifier={flyoutMultilevelActiveIdentifier}\n        onDismiss={onDismiss}\n        onUpdate={onUpdate}\n      >\n        <PFlyoutMultilevelItem identifier="item-1" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-2" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-3" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-4" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-5" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n      </PFlyoutMultilevel>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import {\n    PFlyoutMultilevel,\n    PFlyoutMultilevelItem,\n    PButton,\n    type FlyoutMultilevelUpdateEventDetail,\n  } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const isFlyoutMultilevelOpen = ref(false);\n  const flyoutMultilevelActiveIdentifier = ref();\n  const onOpen = (): void => {\n    isFlyoutMultilevelOpen.value = true;\n  };\n  const onDismiss = (): void => {\n    isFlyoutMultilevelOpen.value = false;\n  };\n  const onUpdate = (e: FlyoutMultilevelUpdateEventDetail): void => {\n    flyoutMultilevelActiveIdentifier.value = e.activeIdentifier;\n  };\n<\/script>\n\n<template>\n  <PButton type="button" :aria="{ \'aria-haspopup\': \'dialog\' }" @click="onOpen">Open Flyout Multilevel</PButton>\n  <PFlyoutMultilevel\n    :open="isFlyoutMultilevelOpen"\n    :active-identifier="flyoutMultilevelActiveIdentifier"\n    @dismiss="onDismiss"\n    @update="onUpdate"\n  >\n    <PFlyoutMultilevelItem identifier="item-1" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-2" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-3" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-4" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-5" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n  </PFlyoutMultilevel>\n</template>'},"example-active-identifier":{"vanilla-js":'<p-button type="button" aria="{ \'aria-haspopup\': \'dialog\' }">Open Flyout Multilevel</p-button>\n\n<p-flyout-multilevel active-identifier="item-2">\n  <p-flyout-multilevel-item identifier="item-1" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-2" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-3" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-4" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-5" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n</p-flyout-multilevel>\n\n<script>\n  const flyoutMultilevel = document.querySelector(\'p-flyout-multilevel\');\n  document.querySelector(\'p-button\').addEventListener(\'click\', () => {\n    flyoutMultilevel.open = true;\n  });\n  flyoutMultilevel.addEventListener(\'dismiss\', () => {\n    flyoutMultilevel.open = false;\n  });\n  flyoutMultilevel.addEventListener(\'update\', (e) => {\n    flyoutMultilevel.activeIdentifier = e.detail.activeIdentifier;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport { type FlyoutMultilevelUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-flyout-multilevel-example-active-identifier\',\n  template: `\n    <p-button type="button" [aria]="{ \'aria-haspopup\': \'dialog\' }" (click)="onOpen()">Open Flyout Multilevel</p-button>\n    <p-flyout-multilevel\n      [open]="isFlyoutMultilevelOpen"\n      [activeIdentifier]="flyoutMultilevelActiveIdentifier"\n      (dismiss)="onDismiss()"\n      (update)="onUpdate($event)"\n    >\n      <p-flyout-multilevel-item identifier="item-1" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-2" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-3" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-4" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-5" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n    </p-flyout-multilevel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FlyoutMultilevelExampleActiveIdentifierComponent {\n  isFlyoutMultilevelOpen = false;\n  flyoutMultilevelActiveIdentifier: string | undefined = \'item-2\';\n\n  onOpen(): void {\n    this.isFlyoutMultilevelOpen = true;\n  }\n  onDismiss(): void {\n    this.isFlyoutMultilevelOpen = false;\n  }\n  onUpdate(e: CustomEvent<FlyoutMultilevelUpdateEventDetail>): void {\n    this.flyoutMultilevelActiveIdentifier = e.detail.activeIdentifier;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport {\n  type FlyoutMultilevelUpdateEventDetail,\n  PButton,\n  PFlyoutMultilevel,\n  PFlyoutMultilevelItem,\n} from \'@porsche-design-system/components-react\';\n\nexport const FlyoutMultilevelExampleActiveIdentifierPage = (): JSX.Element => {\n  const [isFlyoutMultilevelOpen, setIsFlyoutMultilevelOpen] = useState<boolean>(false);\n  const [flyoutMultilevelActiveIdentifier, setFlyoutMultilevelActiveIdentifier] = useState<string>(\'item-2\');\n  const onOpen = useCallback(() => {\n    setIsFlyoutMultilevelOpen(true);\n  }, []);\n  const onDismiss = useCallback(() => {\n    setIsFlyoutMultilevelOpen(false);\n  }, []);\n  const onUpdate = useCallback(\n    (e: CustomEvent<FlyoutMultilevelUpdateEventDetail>) =>\n      setFlyoutMultilevelActiveIdentifier(e.detail.activeIdentifier),\n    []\n  );\n\n  return (\n    <>\n      <PButton type="button" aria={{ \'aria-haspopup\': \'dialog\' }} onClick={onOpen}>\n        Open Flyout Multilevel\n      </PButton>\n      <PFlyoutMultilevel\n        open={isFlyoutMultilevelOpen}\n        activeIdentifier={flyoutMultilevelActiveIdentifier}\n        onDismiss={onDismiss}\n        onUpdate={onUpdate}\n      >\n        <PFlyoutMultilevelItem identifier="item-1" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-2" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-3" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-4" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-5" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n      </PFlyoutMultilevel>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import {\n    PFlyoutMultilevel,\n    PFlyoutMultilevelItem,\n    PButton,\n    type FlyoutMultilevelUpdateEventDetail,\n  } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const isFlyoutMultilevelOpen = ref(false);\n  const flyoutMultilevelActiveIdentifier = ref(\'item-2\');\n  const onOpen = (): void => {\n    isFlyoutMultilevelOpen.value = true;\n  };\n  const onDismiss = (): void => {\n    isFlyoutMultilevelOpen.value = false;\n  };\n  const onUpdate = (e: FlyoutMultilevelUpdateEventDetail): void => {\n    flyoutMultilevelActiveIdentifier.value = e.activeIdentifier;\n  };\n<\/script>\n\n<template>\n  <PButton type="button" :aria="{ \'aria-haspopup\': \'dialog\' }" @click="onOpen">Open Flyout Multilevel</PButton>\n  <PFlyoutMultilevel\n    :open="isFlyoutMultilevelOpen"\n    :active-identifier="flyoutMultilevelActiveIdentifier"\n    @dismiss="onDismiss"\n    @update="onUpdate"\n  >\n    <PFlyoutMultilevelItem identifier="item-1" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-2" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-3" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-4" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-5" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n  </PFlyoutMultilevel>\n</template>'},"example-custom-content":{"vanilla-js":'<p-button type="button" aria="{ \'aria-haspopup\': \'dialog\' }">Open Flyout Multilevel</p-button>\n\n<p-flyout-multilevel active-identifier="item-1">\n  <p-flyout-multilevel-item identifier="item-1" label="Some Label">\n    <p-link-tile\n      href="#"\n      label="Some label"\n      description="Some Description"\n      weight="semi-bold"\n      compact="true"\n      aspect-ratio="{base: \'4:3\', xs: \'16:9\', s: \'1:1\'}"\n    >\n      <img\n        srcset="https://porsche-design-system.github.io/porsche-design-system/assets/porsche-963@2x.webp 2x"\n        src="https://porsche-design-system.github.io/porsche-design-system/assets/porsche-963.webp"\n        width="636"\n        height="847"\n        alt="Porsche 963"\n      />\n    </p-link-tile>\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor" aria-current="page">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-2" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-3" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-4" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-flyout-multilevel-item identifier="item-5" label="Some Label">\n    <h3>Some heading</h3>\n    <a href="#some-anchor">Some anchor</a>\n    <a href="#some-anchor">Some anchor</a>\n  </p-flyout-multilevel-item>\n  <p-link-pure\n    size="medium"\n    href="#"\n    icon="external"\n    style="padding: clamp(8px, 0.5vw + 6px, 16px); margin: 0 calc(clamp(8px, 0.5vw + 6px, 16px) * -1)"\n    >Some external anchor</p-link-pure\n  >\n</p-flyout-multilevel>\n\n<script>\n  const flyoutMultilevel = document.querySelector(\'p-flyout-multilevel\');\n  document.querySelector(\'p-button\').addEventListener(\'click\', () => {\n    flyoutMultilevel.open = true;\n  });\n  flyoutMultilevel.addEventListener(\'dismiss\', () => {\n    flyoutMultilevel.open = false;\n  });\n  flyoutMultilevel.addEventListener(\'update\', (e) => {\n    flyoutMultilevel.activeIdentifier = e.detail.activeIdentifier;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport { type FlyoutMultilevelUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-flyout-multilevel-example-custom-content\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      p-link-pure {\n        margin: 0 calc(#{$pds-spacing-fluid-small} * -1);\n        padding: $pds-spacing-fluid-small;\n      }\n    `,\n  ],\n  template: `\n    <p-button type="button" [aria]="{ \'aria-haspopup\': \'dialog\' }" (click)="onOpen()">Open Flyout Multilevel</p-button>\n    <p-flyout-multilevel\n      [open]="isFlyoutMultilevelOpen"\n      [activeIdentifier]="flyoutMultilevelActiveIdentifier"\n      (dismiss)="onDismiss()"\n      (update)="onUpdate($event)"\n    >\n      <p-flyout-multilevel-item identifier="item-1" label="Some Label">\n        <p-link-tile\n          href="#"\n          label="Some label"\n          description="Some Description"\n          weight="semi-bold"\n          [compact]="true"\n          [aspectRatio]="{ base: \'4:3\', xs: \'16:9\', s: \'1:1\' }"\n        >\n          <img\n            srcset="https://porsche-design-system.github.io/porsche-design-system/assets/porsche-963@2x.webp 2x"\n            src="https://porsche-design-system.github.io/porsche-design-system/assets/porsche-963.webp"\n            width="636"\n            height="847"\n            alt="Porsche 963"\n          />\n        </p-link-tile>\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor" aria-current="page">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-2" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-3" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-4" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-flyout-multilevel-item identifier="item-5" label="Some Label">\n        <h3>Some heading</h3>\n        <a href="#some-anchor">Some anchor</a>\n        <a href="#some-anchor">Some anchor</a>\n      </p-flyout-multilevel-item>\n      <p-link-pure size="medium" href="#" icon="external">Some external anchor</p-link-pure>\n    </p-flyout-multilevel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FlyoutMultilevelExampleCustomContentComponent {\n  isFlyoutMultilevelOpen = false;\n  flyoutMultilevelActiveIdentifier: string | undefined = \'item-1\';\n\n  onOpen(): void {\n    this.isFlyoutMultilevelOpen = true;\n  }\n\n  onDismiss(): void {\n    this.isFlyoutMultilevelOpen = false;\n  }\n\n  onUpdate(e: CustomEvent<FlyoutMultilevelUpdateEventDetail>): void {\n    this.flyoutMultilevelActiveIdentifier = e.detail.activeIdentifier;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport {\n  type FlyoutMultilevelUpdateEventDetail,\n  PButton,\n  PFlyoutMultilevel,\n  PFlyoutMultilevelItem,\n  PLinkPure,\n  PLinkTile,\n} from \'@porsche-design-system/components-react\';\nimport { spacingFluidSmall } from \'@porsche-design-system/components-react/styles\';\n\nexport const FlyoutMultilevelExampleCustomContentPage = (): JSX.Element => {\n  const [isFlyoutMultilevelOpen, setIsFlyoutMultilevelOpen] = useState<boolean>(false);\n  const [flyoutMultilevelActiveIdentifier, setFlyoutMultilevelActiveIdentifier] = useState<string>(\'item-1\');\n  const onOpen = useCallback(() => {\n    setIsFlyoutMultilevelOpen(true);\n  }, []);\n  const onDismiss = useCallback(() => {\n    setIsFlyoutMultilevelOpen(false);\n  }, []);\n  const onUpdate = useCallback(\n    (e: CustomEvent<FlyoutMultilevelUpdateEventDetail>) =>\n      setFlyoutMultilevelActiveIdentifier(e.detail.activeIdentifier),\n    []\n  );\n\n  return (\n    <>\n      <PButton type="button" aria={{ \'aria-haspopup\': \'dialog\' }} onClick={onOpen}>\n        Open Flyout Multilevel\n      </PButton>\n      <PFlyoutMultilevel\n        open={isFlyoutMultilevelOpen}\n        activeIdentifier={flyoutMultilevelActiveIdentifier}\n        onDismiss={onDismiss}\n        onUpdate={onUpdate}\n      >\n        <PFlyoutMultilevelItem identifier="item-1" label="Some Label">\n          <PLinkTile\n            href="#"\n            label="Some label"\n            description="Some Description"\n            weight="semi-bold"\n            compact={true}\n            aspectRatio={{ base: \'4:3\', xs: \'16:9\', s: \'1:1\' }}\n          >\n            <img\n              srcSet="https://porsche-design-system.github.io/porsche-design-system/assets/porsche-963@2x.webp 2x"\n              src="https://porsche-design-system.github.io/porsche-design-system/assets/porsche-963.webp"\n              width="636"\n              height="847"\n              alt="Porsche 963"\n            />\n          </PLinkTile>\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor" aria-current="page">\n            Some anchor\n          </a>\n          <a href="#some-anchor">Some anchor</a>\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-2" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-3" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-4" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PFlyoutMultilevelItem identifier="item-5" label="Some Label">\n          <h3>Some heading</h3>\n          <a href="#some-anchor">Some anchor</a>\n          <a href="#some-anchor">Some anchor</a>\n        </PFlyoutMultilevelItem>\n        <PLinkPure\n          size="medium"\n          href="#"\n          icon="external"\n          style={{ margin: `0 calc(${spacingFluidSmall} * -1)`, padding: spacingFluidSmall }}\n        >\n          Some external anchor\n        </PLinkPure>\n      </PFlyoutMultilevel>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import {\n    PFlyoutMultilevel,\n    PFlyoutMultilevelItem,\n    PLinkTile,\n    PLinkPure,\n    PButton,\n    type FlyoutMultilevelUpdateEventDetail,\n  } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const isFlyoutMultilevelOpen = ref(false);\n  const flyoutMultilevelActiveIdentifier = ref(\'item-1\');\n  const onOpen = (): void => {\n    isFlyoutMultilevelOpen.value = true;\n  };\n  const onDismiss = (): void => {\n    isFlyoutMultilevelOpen.value = false;\n  };\n  const onUpdate = (e: FlyoutMultilevelUpdateEventDetail): void => {\n    flyoutMultilevelActiveIdentifier.value = e.activeIdentifier;\n  };\n<\/script>\n\n<template>\n  <PButton type="button" :aria="{ \'aria-haspopup\': \'dialog\' }" @click="onOpen">Open Flyout Multilevel</PButton>\n  <PFlyoutMultilevel\n    :open="isFlyoutMultilevelOpen"\n    :active-identifier="flyoutMultilevelActiveIdentifier"\n    @dismiss="onDismiss"\n    @update="onUpdate"\n  >\n    <PFlyoutMultilevelItem identifier="item-1" label="Some Label">\n      <PLinkTile\n        href="#"\n        label="Some label"\n        description="Some Description"\n        weight="semi-bold"\n        :compact="true"\n        :aspectRatio="{ base: \'4:3\', xs: \'16:9\', s: \'1:1\' }"\n      >\n        <img\n          srcset="https://porsche-design-system.github.io/porsche-design-system/assets/porsche-963@2x.webp 2x"\n          src="https://porsche-design-system.github.io/porsche-design-system/assets/porsche-963.webp"\n          width="636"\n          height="847"\n          alt="Porsche 963"\n        />\n      </PLinkTile>\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor" aria-current="page">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-2" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-3" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-4" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PFlyoutMultilevelItem identifier="item-5" label="Some Label">\n      <h3>Some heading</h3>\n      <a href="#some-anchor">Some anchor</a>\n      <a href="#some-anchor">Some anchor</a>\n    </PFlyoutMultilevelItem>\n    <PLinkPure size="medium" href="#" icon="external">Some external anchor</PLinkPure>\n  </PFlyoutMultilevel>\n</template>\n\n<style lang="scss" scoped>\n  @use \'@porsche-design-system/components-vue/styles\' as *;\n\n  p-link-pure {\n    margin: 0 calc(#{$pds-spacing-fluid-small} * -1);\n    padding: $pds-spacing-fluid-small;\n  }\n</style>'}};return e[n]},p=n=>{const e={"example-events":{"vanilla-js":"<button type=\"button\">Show Inline Notification</button>\n<div hidden>\n  <p-inline-notification\n    heading=\"Some heading\"\n    heading-tag=\"h4\"\n    description=\"Some description.\"\n  ></p-inline-notification>\n</div>\n\n<script>\n  const button = document.querySelector('p-button');\n  const inlineNotification = document.querySelector('p-inline-notification');\n  const { parentElement } = inlineNotification;\n\n  button.addEventListener('click', () => (parentElement.hidden = false));\n  inlineNotification.addEventListener('dismiss', () => (parentElement.hidden = true));\n<\/script>",angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-inline-notification-example-events\',\n  template: `\n    <button type="button" (click)="onShow()">Show Inline Notification</button>\n    <p-inline-notification\n      *ngIf="isActive"\n      [heading]="\'Some heading\'"\n      [heading-tag]="\'h4\'"\n      [description]="\'Some description.\'"\n      (dismiss)="onDismiss()"\n    ></p-inline-notification>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InlineNotificationExampleEventsComponent {\n  isActive = false;\n\n  onShow() {\n    this.isActive = true;\n  }\n  onDismiss() {\n    this.isActive = false;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport { PInlineNotification } from \'@porsche-design-system/components-react\';\n\nexport const InlineNotificationExampleEventsPage = (): JSX.Element => {\n  const [isActive, setIsActive] = useState<boolean>(false);\n  const onShow = useCallback(() => setIsActive(true), []);\n  const onDismiss = useCallback(() => setIsActive(false), []);\n\n  return (\n    <>\n      <button type="button" onClick={onShow}>\n        Show Inline Notification\n      </button>\n      {isActive && (\n        <PInlineNotification\n          heading="Some heading"\n          headingTag="h4"\n          description="Some description."\n          onDismiss={onDismiss}\n        />\n      )}\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import { PInlineNotification } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const isActive = ref(false);\n  const onShow = (): void => {\n    isActive.value = true;\n  };\n  const onDismiss = (): void => {\n    isActive.value = false;\n  };\n<\/script>\n\n<template>\n  <button type="button" @click="onShow">Show Inline Notification</button>\n  <PInlineNotification\n    v-if="isActive"\n    :heading="\'Some heading\'"\n    :headingTag="\'h4\'"\n    :description="\'Some description.\'"\n    @dismiss="onDismiss"\n  ></PInlineNotification>\n</template>'},"example-action-button":{"vanilla-js":'<p-inline-notification\n  heading="Some heading"\n  heading-tag="h4"\n  description="Some description."\n  action-label="Retry"\n  action-icon="reset"\n></p-inline-notification>\n<button type="button">Reset `actionLoading`</button>\n\n<script>\n  const button = document.querySelector(\'p-button\');\n  const inlineNotification = document.querySelector(\'p-inline-notification\');\n\n  button.addEventListener(\'click\', () => (inlineNotification.actionLoading = false));\n  inlineNotification.addEventListener(\'action\', () => (inlineNotification.actionLoading = true));\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-inline-notification-example-action-button\',\n  template: `\n    <p-inline-notification\n      [heading]="\'Some heading\'"\n      [heading-tag]="\'h4\'"\n      [description]="\'Some description.\'"\n      [actionLabel]="\'Retry\'"\n      [actionIcon]="\'reset\'"\n      [actionLoading]="isLoading"\n      (action)="onAction()"\n    ></p-inline-notification>\n    <button type="button" (click)="onAction()">Reset \\`actionLoading\\`</button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InlineNotificationExampleActionButtonComponent {\n  isLoading = false;\n\n  onAction() {\n    this.isLoading = !this.isLoading;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport { PInlineNotification } from \'@porsche-design-system/components-react\';\n\nexport const InlineNotificationExampleActionButtonPage = (): JSX.Element => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const onAction = useCallback(() => setIsLoading((prevValue) => !prevValue), []);\n\n  return (\n    <>\n      <PInlineNotification\n        heading="Some heading"\n        headingTag="h4"\n        description="Some description."\n        actionLabel="Retry"\n        actionIcon="reset"\n        actionLoading={isLoading}\n        onAction={onAction}\n      />\n      <button type="button" onClick={onAction}>\n        Reset `actionLoading`\n      </button>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import { PInlineNotification } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const isLoading = ref(false);\n  const onAction = (): void => {\n    isLoading.value = !isLoading.value;\n  };\n<\/script>\n\n<template>\n  <PInlineNotification\n    :heading="\'Some heading\'"\n    :headingTag="\'h4\'"\n    :description="\'Some description.\'"\n    :actionLabel="\'Retry\'"\n    :actionIcon="\'reset\'"\n    :actionLoading="isLoading"\n    @action="onAction"\n  ></PInlineNotification>\n  <button type="button" @click="onAction">Reset `actionLoading`</button>\n</template>'}};return e[n]},m=()=>{const n={"vanilla-js":'<p-button type="button" aria="{ \'aria-haspopup\': \'dialog\' }">Open Modal</p-button>\n\n<p-modal open="false" aria="{ \'aria-label\': \'Some Heading\' }">\n  <p-heading slot="header" size="large" tag="h2">Some Heading</p-heading>\n  <p-text>Some Content</p-text>\n  <p-button-group slot="footer">\n    <p-button type="button">Accept</p-button>\n    <p-button type="button" variant="secondary">Deny</p-button>\n  </p-button-group>\n</p-modal>\n\n<script>\n  const modal = document.querySelector(\'p-modal\');\n  modal.addEventListener(\'dismiss\', () => (modal.open = false));\n  document.querySelector(\'p-button\').addEventListener(\'click\', () => (modal.open = true));\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-modal-example\',\n  template: `\n    <p-button type="button" [aria]="{ \'aria-haspopup\': \'dialog\' }" (click)="onOpen()">Open Modal</p-button>\n    <p-modal [open]="isModalOpen" (dismiss)="onDismiss()" [aria]="{ \'aria-label\': \'Some Heading\' }">\n      <p-heading slot="header" size="large" tag="h2">Some Heading</p-heading>\n      <p-text>Some Content</p-text>\n      <p-button-group slot="footer">\n        <p-button type="button">Accept</p-button>\n        <p-button type="button" [variant]="\'secondary\'">Deny</p-button>\n      </p-button-group>\n    </p-modal>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModalExampleComponent {\n  isModalOpen = false;\n\n  onOpen() {\n    this.isModalOpen = true;\n  }\n  onDismiss() {\n    this.isModalOpen = false;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport { PModal, PButton, PText, PButtonGroup, PHeading } from \'@porsche-design-system/components-react\';\n\nexport const ModalExampleAccessibilityPage = (): JSX.Element => {\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const onOpen = useCallback(() => {\n    setIsModalOpen(true);\n  }, []);\n  const onDismiss = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n\n  return (\n    <>\n      <PButton type="button" aria={{ \'aria-haspopup\': \'dialog\' }} onClick={onOpen}>\n        Open Modal\n      </PButton>\n      <PModal open={isModalOpen} onDismiss={onDismiss} aria={{ \'aria-label\': \'Some Heading\' }}>\n        <PHeading slot="header" size="large" tag="h2">\n          Some Heading\n        </PHeading>\n        <PText>Some Content</PText>\n        <PButtonGroup slot="footer">\n          <PButton type="button">Accept</PButton>\n          <PButton type="button" variant="secondary">\n            Deny\n          </PButton>\n        </PButtonGroup>\n      </PModal>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import { PButton, PButtonGroup, PModal, PText, PHeading } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const isModalOpen = ref(false);\n  const onOpen = (): void => {\n    isModalOpen.value = true;\n  };\n  const onDismiss = (): void => {\n    isModalOpen.value = false;\n  };\n<\/script>\n\n<template>\n  <PButton type="button" :aria="{ \'aria-haspopup\': \'dialog\' }" @click="onOpen">Open Modal</PButton>\n  <PModal :open="isModalOpen" @dismiss="onDismiss" :aria="{ \'aria-label\': \'Some Heading\' }">\n    <PHeading slot="header" size="large" tag="h2">Some Heading</PHeading>\n    <PText>Some Content</PText>\n    <PButtonGroup slot="footer">\n      <PButton type="button">Accept</PButton>\n      <PButton type="button" :variant="\'secondary\'">Deny</PButton>\n    </PButtonGroup>\n  </PModal>\n</template>'};return n},u=n=>{const e={default:{"vanilla-js":"<form>\n  <p-pin-code label=\"Some Label\" name=\"pin-code\"></p-pin-code>\n  <p-button type=\"submit\">Submit</p-button>\n</form>\n\n<p-text>Last submitted data: none</p-text>\n\n<script>\n  const debugElement = document.querySelector('p-text');\n  const form = document.querySelector('form');\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    debugElement.innerText = `Last submitted data: ${Array.from(formData.values()).join() || 'none'}`;\n  });\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'page-pin-code-example',\n  template: `\n    <form (submit)=\"onSubmit($event)\">\n      <p-pin-code [label]=\"'Some Label'\" [name]=\"'pin-code'\"></p-pin-code>\n      <p-button type=\"submit\">Submit</p-button>\n    </form>\n    <p-text>Last submitted data: {{ lastSubmittedValue }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PinCodeExampleComponent {\n  lastSubmittedValue = 'none';\n\n  onSubmit(e: Event) {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    this.lastSubmittedValue = Array.from(formData.values()).join() || 'none';\n  }\n}",react:"import { useCallback, useState } from 'react';\nimport { PButton, PPinCode, PText } from '@porsche-design-system/components-react';\n\nexport const PinCodeExamplePage = (): JSX.Element => {\n  const [lastSubmittedValue, setLastSubmittedValue] = useState('none');\n\n  const onSubmit = useCallback((e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    setLastSubmittedValue(Array.from(formData.values()).join() || 'none');\n  }, []);\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <PPinCode label=\"Some Label\" name=\"pin-code\"></PPinCode>\n        <PButton type=\"submit\">Submit</PButton>\n      </form>\n      <PText>Last submitted data: {lastSubmittedValue}</PText>\n    </>\n  );\n};",vue:"<script setup lang=\"ts\">\n  import { PButton, PPinCode, PText } from '@porsche-design-system/components-vue';\n  import { ref } from 'vue';\n\n  const lastSubmittedValue = ref('none');\n\n  const onSubmit = (e: Event): void => {\n    const formData = new FormData(e.target as HTMLFormElement);\n    lastSubmittedValue.value = Array.from(formData.values()).join() || 'none';\n  };\n<\/script>\n\n<template>\n  <form @submit.prevent=\"onSubmit\">\n    <PPinCode :label=\"'Some Label'\" name=\"pin-code\"></PPinCode>\n    <PButton type=\"submit\">Submit</PButton>\n  </form>\n  <PText>Last submitted data: {{ lastSubmittedValue }}</PText>\n</template>"},"example-controlled":{"vanilla-js":"<p-pin-code label=\"Some Label\" value=\"\"></p-pin-code>\n\n<p-text class=\"value\">Current value:</p-text>\n<p-text class=\"complete\">Completely filled: false</p-text>\n\n<script>\n  const pinCode = document.querySelector('p-pin-code');\n  const debugElement1 = document.querySelector('.value');\n  const debugElement2 = document.querySelector('.complete');\n\n  pinCode.addEventListener('update', (e) => {\n    const { value, isComplete } = e.detail;\n    e.target.value = value;\n    setDebugElementsText(value, isComplete);\n  });\n\n  function setDebugElementsText(value, isComplete) {\n    debugElement1.innerText = `Current value: ${value}`;\n    debugElement2.innerText = `Completely filled: ${isComplete}`;\n  }\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type { PinCodeUpdateEventDetail } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-pin-code-example-controlled',\n  template: `\n    <p-pin-code [label]=\"'Some Label'\" [value]=\"value\" (update)=\"onUpdate($event)\"></p-pin-code>\n    <p-text>Current value: {{ value }}</p-text>\n    <p-text>Completely filled: {{ isComplete }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PinCodeExampleControlledComponent {\n  value = '';\n  isComplete = false;\n\n  onUpdate(e: CustomEvent<PinCodeUpdateEventDetail>) {\n    this.value = e.detail.value;\n    this.isComplete = e.detail.isComplete;\n  }\n}",react:"import { useCallback, useState } from 'react';\nimport { type PinCodeUpdateEventDetail, PPinCode, PText } from '@porsche-design-system/components-react';\n\nexport const PinCodeExampleControlledPage = (): JSX.Element => {\n  const [value, setValue] = useState('');\n  const [isComplete, setIsComplete] = useState(false);\n\n  const onUpdate = useCallback((e: CustomEvent<PinCodeUpdateEventDetail>) => {\n    setValue(e.detail.value);\n    setIsComplete(e.detail.isComplete);\n  }, []);\n\n  return (\n    <>\n      <PPinCode label=\"Some Label\" value={value} onUpdate={onUpdate}></PPinCode>\n      <PText>Current value: {value}</PText>\n      <PText>Completely filled: {isComplete.toString()}</PText>\n    </>\n  );\n};",vue:"<script setup lang=\"ts\">\n  import { type PinCodeUpdateEventDetail, PPinCode, PText } from '@porsche-design-system/components-vue';\n  import { ref } from 'vue';\n\n  const value = ref('');\n  const isComplete = ref(false);\n\n  const onUpdate = (e: PinCodeUpdateEventDetail): void => {\n    value.value = e.value;\n    isComplete.value = e.isComplete;\n  };\n<\/script>\n\n<template>\n  <PPinCode :label=\"'Some Label'\" :value=\"value\" @update=\"onUpdate\"></PPinCode>\n  <PText>Current value: {{ value }}</PText>\n  <PText>Completely filled: {{ isComplete }}</PText>\n</template>"}};return e[n]},g=()=>{const n={"vanilla-js":'<button type="button" id="start">Scroll to start</button>\n<button type="button" id="middle">Scroll to middle</button>\n<button type="button" id="end">Scroll to end</button>\n\n<div style="max-width: 400px; white-space: nowrap">\n  <p-scroller scroll-to-position="{scrollPosition: 220}">\n    <p-tag-dismissible>START - some tag content</p-tag-dismissible>\n    <p-tag-dismissible>MIDDLE - some tag content</p-tag-dismissible>\n    <p-tag-dismissible>END - some tag content</p-tag-dismissible>\n  </p-scroller>\n</div>\n\n<script>\n  const scroller = document.querySelector(\'p-scroller\');\n\n  const scrollToStart = document.querySelector(\'#start\');\n  scrollToStart.addEventListener(\'click\', () => {\n    scroller.scrollToPosition = { scrollPosition: 0, isSmooth: true };\n  });\n\n  const scrollToMiddle = document.querySelector(\'#middle\');\n  scrollToMiddle.addEventListener(\'click\', () => {\n    scroller.scrollToPosition = { scrollPosition: 220, isSmooth: true };\n  });\n\n  const scrollToEnd = document.querySelector(\'#end\');\n  scrollToEnd.addEventListener(\'click\', () => {\n    scroller.scrollToPosition = { scrollPosition: 720, isSmooth: true };\n  });\n<\/script>\n\n<style>\n  p-scroller > *:not(:last-child) {\n    margin-right: 1rem;\n  }\n\n  button {\n    margin: 0 1rem 1rem 0;\n  }\n</style>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-scroller-example\',\n  styles: [\n    `\n      p-scroller > *:not(:last-child) {\n        margin-right: 1rem;\n      }\n\n      button {\n        margin: 0 1rem 1rem 0;\n      }\n    `,\n  ],\n  template: `\n    <button type="button" (click)="onClick(0)">Scroll to start</button>\n    <button type="button" (click)="onClick(220)">Scroll to middle</button>\n    <button type="button" (click)="onClick(720)">Scroll to end</button>\n    <div style="max-width: 400px; white-space: nowrap">\n      <p-scroller [scrollToPosition]="{scrollPosition, isSmooth}">\n        <p-tag-dismissible>START - some tag content</p-tag-dismissible>\n        <p-tag-dismissible>MIDDLE - some tag content</p-tag-dismissible>\n        <p-tag-dismissible>END - some tag content</p-tag-dismissible>\n      </p-scroller>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScrollerExampleComponent {\n  scrollPosition: number = 220;\n  isSmooth: boolean = false;\n\n  onClick = (scrollPosition: number) => {\n    this.scrollPosition = scrollPosition;\n    this.isSmooth = true;\n  };\n}',react:"import { type ScrollerScrollToPosition, PScroller, PTagDismissible } from '@porsche-design-system/components-react';\nimport { useCallback, useState } from 'react';\n\nexport const ScrollerExamplePage = (): JSX.Element => {\n  const style = `\n      p-scroller > *:not(:last-child) {\n        margin-right: 1rem;\n      }\n\n      button {\n        margin: 0 1rem 1rem 0;\n      }\n  `;\n\n  const [scrollToPosition, setScrollToPosition] = useState<ScrollerScrollToPosition>({\n    scrollPosition: 220,\n    isSmooth: false,\n  });\n\n  const onClick = useCallback(\n    (scrollPosition: number) => () => {\n      setScrollToPosition({ scrollPosition: scrollPosition, isSmooth: true });\n    },\n    []\n  );\n\n  return (\n    <>\n      <style dangerouslySetInnerHTML={{ __html: style }} />\n\n      <button type=\"button\" onClick={onClick(0)}>\n        Scroll to start\n      </button>\n      <button type=\"button\" onClick={onClick(220)}>\n        Scroll to middle\n      </button>\n      <button type=\"button\" onClick={onClick(720)}>\n        Scroll to end\n      </button>\n\n      <div style={{ maxWidth: '400px', whiteSpace: 'nowrap' }}>\n        <PScroller scrollToPosition={scrollToPosition}>\n          <PTagDismissible>START - some tag content</PTagDismissible>\n          <PTagDismissible>MIDDLE - some tag content</PTagDismissible>\n          <PTagDismissible>END - some tag content</PTagDismissible>\n        </PScroller>\n      </div>\n    </>\n  );\n};",vue:'<script setup lang="ts">\n  import { type ScrollerScrollToPosition, PScroller, PTagDismissible } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const scrollToPosition = ref<ScrollerScrollToPosition>({\n    scrollPosition: 220,\n    isSmooth: false,\n  });\n  const onClick = (scrollPosition: number): void => {\n    scrollToPosition.value = { scrollPosition: scrollPosition, isSmooth: true };\n  };\n<\/script>\n\n<template v-html="style">\n  <button type="button" @click="onClick(0)">Scroll to start</button>\n  <button type="button" @click="onClick(220)">Scroll to middle</button>\n  <button type="button" @click="onClick(720)">Scroll to end</button>\n\n  <div :style="{ maxWidth: \'400px\', whiteSpace: \'nowrap\' }">\n    <PScroller :scrollToPosition="scrollToPosition">\n      <PTagDismissible>START - some tag content</PTagDismissible>\n      <PTagDismissible>MIDDLE - some tag content</PTagDismissible>\n      <PTagDismissible>END - some tag content</PTagDismissible>\n    </PScroller>\n  </div>\n</template>\n\n<style scoped>\n  p-scroller > *:not(:last-child) {\n    margin-right: 1rem;\n  }\n\n  button {\n    margin: 0 1rem 1rem 0;\n  }\n</style>'};return n},h=()=>{const n={"vanilla-js":'<p-segmented-control value="1">\n  <p-segmented-control-item value="1">Option 1</p-segmented-control-item>\n  <p-segmented-control-item value="2">Option 2</p-segmented-control-item>\n  <p-segmented-control-item value="3">Option 3</p-segmented-control-item>\n  <p-segmented-control-item value="4">Option 4</p-segmented-control-item>\n  <p-segmented-control-item value="5">Option 5</p-segmented-control-item>\n</p-segmented-control>\n\n<p-text>Current value: 1</p-text>\n\n<script>\n  const segmentedControl = document.querySelector(\'p-segmented-control\');\n  const debugElement = document.querySelector(\'p-text\');\n\n  segmentedControl.addEventListener(\'update\', (e) => {\n    const { value } = e.detail;\n    segmentedControl.value = value;\n    debugElement.innerText = `Current value: ${value}`;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { SegmentedControlUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-segmented-control-example\',\n  template: `\n    <p-segmented-control [value]="currentValue" (update)="onUpdate($event)">\n      <p-segmented-control-item [value]="1">Option 1</p-segmented-control-item>\n      <p-segmented-control-item [value]="2">Option 2</p-segmented-control-item>\n      <p-segmented-control-item [value]="3">Option 3</p-segmented-control-item>\n      <p-segmented-control-item [value]="4">Option 4</p-segmented-control-item>\n      <p-segmented-control-item [value]="5">Option 5</p-segmented-control-item>\n    </p-segmented-control>\n\n    <p-text>Current value: {{ currentValue }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SegmentedControlExampleComponent {\n  currentValue = 1;\n\n  onUpdate(e: CustomEvent<SegmentedControlUpdateEventDetail>) {\n    this.currentValue = e.detail.value as number;\n  }\n}',react:"import { useCallback, useState } from 'react';\nimport {\n  type SegmentedControlUpdateEventDetail,\n  PSegmentedControl,\n  PSegmentedControlItem,\n  PText,\n} from '@porsche-design-system/components-react';\n\nexport const SegmentedControlExamplePage = (): JSX.Element => {\n  const [currentValue, setCurrentValue] = useState(1);\n\n  const onUpdate = useCallback((e: CustomEvent<SegmentedControlUpdateEventDetail>) => {\n    setCurrentValue(e.detail.value as number);\n  }, []);\n\n  return (\n    <>\n      <PSegmentedControl value={currentValue} onUpdate={onUpdate}>\n        <PSegmentedControlItem value={1}>Option 1</PSegmentedControlItem>\n        <PSegmentedControlItem value={2}>Option 2</PSegmentedControlItem>\n        <PSegmentedControlItem value={3}>Option 3</PSegmentedControlItem>\n        <PSegmentedControlItem value={4}>Option 4</PSegmentedControlItem>\n        <PSegmentedControlItem value={5}>Option 5</PSegmentedControlItem>\n      </PSegmentedControl>\n      <PText>Current value: {currentValue}</PText>\n    </>\n  );\n};",vue:'<script setup lang="ts">\n  import {\n    type SegmentedControlUpdateEventDetail,\n    PSegmentedControl,\n    PSegmentedControlItem,\n    PText,\n  } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const currentValue = ref(1);\n  const onUpdate = (e: SegmentedControlUpdateEventDetail): void => {\n    currentValue.value = e.value as number;\n  };\n<\/script>\n\n<template>\n  <PSegmentedControl :value="currentValue" @update="onUpdate">\n    <PSegmentedControlItem :value="1">Option 1</PSegmentedControlItem>\n    <PSegmentedControlItem :value="2">Option 2</PSegmentedControlItem>\n    <PSegmentedControlItem :value="3">Option 3</PSegmentedControlItem>\n    <PSegmentedControlItem :value="4">Option 4</PSegmentedControlItem>\n    <PSegmentedControlItem :value="5">Option 5</PSegmentedControlItem>\n  </PSegmentedControl>\n  <PText>Current value: {{ currentValue }}</PText>\n</template>'};return n},b=()=>{const n={"vanilla-js":"<p-stepper-horizontal>\n  <p-stepper-horizontal-item state=\"current\">Enter personal details</p-stepper-horizontal-item>\n  <p-stepper-horizontal-item>Confirm e-mail</p-stepper-horizontal-item>\n  <p-stepper-horizontal-item>Set password</p-stepper-horizontal-item>\n</p-stepper-horizontal>\n\n<div id=\"step-content-0\">\n  <p-text>A form with personal details could be displayed here.</p-text>\n</div>\n<div id=\"step-content-1\" hidden>\n  <p-text>A form with a verification code input field could be displayed here.</p-text>\n</div>\n<div id=\"step-content-2\" hidden>\n  <p-text>A form with a password input field could be displayed here.</p-text>\n</div>\n\n<p-button-group>\n  <p-button type=\"button\" id=\"prev-button\" icon=\"arrow-head-left\" variant=\"tertiary\" disabled=\"true\"\n    >Previous Step</p-button\n  >\n  <p-button type=\"button\" id=\"next-button\" variant=\"primary\">Next Step</p-button>\n</p-button-group>\n\n<script>\n  const stepper = document.querySelector('p-stepper-horizontal');\n  const stepElements = Array.from(document.querySelectorAll('p-stepper-horizontal-item'));\n  const prevButton = document.querySelector('#prev-button');\n  const nextButton = document.querySelector('#next-button');\n  const panels = document.querySelectorAll('[id^=\"step-content\"]');\n\n  function getActiveStepIndex(steps) {\n    return steps.findIndex((step) => step.state === 'current');\n  }\n\n  function manageContent(activeStepIndex) {\n    if (activeStepIndex === 0) {\n      prevButton.setAttribute('disabled', 'true');\n    } else {\n      prevButton.removeAttribute('disabled');\n    }\n\n    if (activeStepIndex === stepElements.length - 1) {\n      nextButton.setAttribute('disabled', 'true');\n    } else {\n      nextButton.removeAttribute('disabled');\n    }\n\n    panels.forEach((panel, i) => {\n      if (i === activeStepIndex) {\n        panel.removeAttribute('hidden');\n      } else {\n        panel.setAttribute('hidden', '');\n      }\n    });\n  }\n\n  function onNextPrevStep(direction) {\n    const activeStepIndex = getActiveStepIndex(stepElements);\n\n    if (direction === 'next') {\n      stepElements[activeStepIndex].state = 'complete';\n      stepElements[activeStepIndex + 1].state = 'current';\n      manageContent(activeStepIndex + 1);\n    } else {\n      stepElements[activeStepIndex].state = undefined;\n      stepElements[activeStepIndex - 1].state = 'current';\n      manageContent(activeStepIndex - 1);\n    }\n  }\n\n  prevButton.addEventListener('click', () => onNextPrevStep('prev'));\n  nextButton.addEventListener('click', () => onNextPrevStep('next'));\n\n  stepper.addEventListener('update', (e) => {\n    const { activeStepIndex } = e.detail;\n\n    for (let i = activeStepIndex + 1; i < stepElements.length; i++) {\n      // reset step state when going back via stepper horizontal item click\n      stepElements[i].state = undefined;\n    }\n    stepElements[activeStepIndex].state = 'current';\n\n    manageContent(activeStepIndex);\n  });\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type {\n  StepperHorizontalUpdateEventDetail,\n  StepperHorizontalItemState,\n} from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-stepper-horizontal-example',\n  template: `\n    <p-stepper-horizontal (update)=\"onUpdate($event)\">\n      <ng-container *ngFor=\"let step of steps\">\n        <p-stepper-horizontal-item [state]=\"step.state\">\n          {{ step.name }}\n        </p-stepper-horizontal-item>\n      </ng-container>\n    </p-stepper-horizontal>\n\n    <ng-container *ngFor=\"let content of stepContent; let i = index\">\n      <p-text *ngIf=\"getActiveStepIndex(steps) === i\">{{ content }}</p-text>\n    </ng-container>\n\n    <p-button-group>\n      <p-button\n        type=\"button\"\n        [icon]=\"'arrow-head-left'\"\n        [variant]=\"'tertiary'\"\n        [disabled]=\"getActiveStepIndex(steps) === 0\"\n        (click)=\"onNextPrevStep('prev')\"\n      >\n        Previous Step\n      </p-button>\n\n      <p-button\n        type=\"button\"\n        [variant]=\"'primary'\"\n        [disabled]=\"getActiveStepIndex(steps) === steps.length - 1\"\n        (click)=\"onNextPrevStep('next')\"\n      >\n        Next Step\n      </p-button>\n    </p-button-group>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StepperHorizontalExampleComponent {\n  steps: StepperHorizontalItemProps[] = [\n    {\n      state: 'current',\n      name: 'Enter personal details',\n    },\n    {\n      name: 'Confirm e-mail',\n    },\n    {\n      name: 'Set password',\n    },\n  ];\n\n  stepContent: string[] = [\n    'A form with personal details could be displayed here.',\n    'A form with a verification code input field could be displayed here.',\n    'A form with a password input field could be displayed here.',\n  ];\n\n  getActiveStepIndex(steps: StepperHorizontalItemProps[]): number {\n    return steps.findIndex((step) => step.state === 'current');\n  }\n\n  onNextPrevStep(direction: 'next' | 'prev'): void {\n    const newState = [...this.steps];\n    const activeStepIndex = this.getActiveStepIndex(newState);\n\n    if (direction === 'next') {\n      newState[activeStepIndex].state = 'complete';\n      newState[activeStepIndex + 1].state = 'current';\n    } else {\n      delete newState[activeStepIndex].state;\n      newState[activeStepIndex - 1].state = 'current';\n    }\n\n    this.steps = newState;\n  }\n\n  onUpdate(e: CustomEvent<StepperHorizontalUpdateEventDetail>): void {\n    const { activeStepIndex } = e.detail;\n\n    const newState = [...this.steps];\n    for (let i = activeStepIndex + 1; i < newState.length; i++) {\n      // reset step state when going back via stepper horizontal item click\n      delete newState[i].state;\n    }\n    newState[activeStepIndex].state = 'current';\n\n    this.steps = newState;\n  }\n}\n\ntype StepperHorizontalItemProps = {\n  state?: StepperHorizontalItemState;\n  name: string;\n};",react:"import {\n  type StepperHorizontalUpdateEventDetail,\n  type StepperHorizontalItemState,\n  PButton,\n  PButtonGroup,\n  PStepperHorizontal,\n  PStepperHorizontalItem,\n  PText,\n} from '@porsche-design-system/components-react';\nimport { useState } from 'react';\n\ntype StepperHorizontalItemProps = {\n  state?: StepperHorizontalItemState;\n  name: string;\n};\n\nexport const StepperHorizontalExample = (): JSX.Element => {\n  const [steps, setSteps] = useState<StepperHorizontalItemProps[]>([\n    {\n      state: 'current',\n      name: 'Enter personal details',\n    },\n    {\n      name: 'Confirm e-mail',\n    },\n    {\n      name: 'Set password',\n    },\n  ]);\n\n  const stepContent: string[] = [\n    'A form with personal details could be displayed here.',\n    'A form with a verification code input field could be displayed here.',\n    'A form with a password input field could be displayed here.',\n  ];\n\n  const getActiveStepIndex = (steps: StepperHorizontalItemProps[]): number =>\n    steps.findIndex((step) => step.state === 'current');\n\n  const onNextPrevStep = (direction: 'next' | 'prev'): void => {\n    const newState = [...steps];\n    const activeStepIndex = getActiveStepIndex(newState);\n\n    if (direction === 'next') {\n      newState[activeStepIndex].state = 'complete';\n      newState[activeStepIndex + 1].state = 'current';\n    } else {\n      delete newState[activeStepIndex].state;\n      newState[activeStepIndex - 1].state = 'current';\n    }\n\n    setSteps(newState);\n  };\n\n  const onUpdate = (e: CustomEvent<StepperHorizontalUpdateEventDetail>): void => {\n    const { activeStepIndex } = e.detail;\n\n    const newState = [...steps];\n    for (let i = activeStepIndex + 1; i < newState.length; i++) {\n      // reset step state when going back via stepper horizontal item click\n      delete newState[i].state;\n    }\n    newState[activeStepIndex].state = 'current';\n    setSteps(newState);\n  };\n\n  return (\n    <>\n      <PStepperHorizontal onUpdate={onUpdate}>\n        {steps.map(({ state, name }) => (\n          <PStepperHorizontalItem key={name} state={state}>\n            {name}\n          </PStepperHorizontalItem>\n        ))}\n      </PStepperHorizontal>\n\n      {stepContent.map((content, i) => getActiveStepIndex(steps) === i && <PText key={i}>{content}</PText>)}\n\n      <PButtonGroup>\n        <PButton\n          type=\"button\"\n          icon=\"arrow-head-left\"\n          variant=\"tertiary\"\n          onClick={() => onNextPrevStep('prev')}\n          disabled={getActiveStepIndex(steps) === 0}\n        >\n          Previous Step\n        </PButton>\n\n        <PButton\n          variant=\"primary\"\n          disabled={getActiveStepIndex(steps) === steps.length - 1}\n          onClick={() => onNextPrevStep('next')}\n        >\n          Next Step\n        </PButton>\n      </PButtonGroup>\n    </>\n  );\n};",vue:"<script setup lang=\"ts\">\n  import {\n    type StepperHorizontalItemState,\n    type StepperHorizontalUpdateEventDetail,\n    PButton,\n    PButtonGroup,\n    PStepperHorizontal,\n    PStepperHorizontalItem,\n    PText,\n  } from '@porsche-design-system/components-vue';\n  import { ref } from 'vue';\n\n  type StepperHorizontalItemProps = {\n    state?: StepperHorizontalItemState;\n    name: string;\n  };\n\n  const steps = ref<StepperHorizontalItemProps[]>([\n    {\n      state: 'current',\n      name: 'Enter personal details',\n    },\n    {\n      name: 'Confirm e-mail',\n    },\n    {\n      name: 'Set password',\n    },\n  ]);\n\n  const stepContent: string[] = [\n    'A form with personal details could be displayed here.',\n    'A form with a verification code input field could be displayed here.',\n    'A form with a password input field could be displayed here.',\n  ];\n\n  const getActiveStepIndex = (steps: StepperHorizontalItemProps[]): number =>\n    steps.findIndex((step) => step.state === 'current');\n\n  const onNextPrevStep = (direction: 'next' | 'prev'): void => {\n    const newState = [...steps.value];\n    const activeStepIndex = getActiveStepIndex(newState);\n\n    if (direction === 'next') {\n      newState[activeStepIndex].state = 'complete';\n      newState[activeStepIndex + 1].state = 'current';\n    } else {\n      delete newState[activeStepIndex].state;\n      newState[activeStepIndex - 1].state = 'current';\n    }\n\n    steps.value = newState;\n  };\n\n  const onUpdate = (e: StepperHorizontalUpdateEventDetail): void => {\n    const { activeStepIndex } = e;\n\n    const newState = [...steps.value];\n    for (let i = activeStepIndex + 1; i < newState.length; i++) {\n      // reset step state when going back via stepper horizontal item click\n      delete newState[i].state;\n    }\n    newState[activeStepIndex].state = 'current';\n    steps.value = newState;\n  };\n<\/script>\n\n<template>\n  <PStepperHorizontal @update=\"onUpdate\">\n    <PStepperHorizontalItem v-for=\"step in steps\" :key=\"step.name\" :state=\"step.state\">\n      {{ step.name }}\n    </PStepperHorizontalItem>\n  </PStepperHorizontal>\n\n  <PText :key=\"getActiveStepIndex(steps)\">{{ stepContent[getActiveStepIndex(steps)] }}</PText>\n\n  <PButtonGroup>\n    <PButton\n      type=\"button\"\n      :icon=\"'arrow-head-left'\"\n      :variant=\"'tertiary'\"\n      @click=\"onNextPrevStep('prev')\"\n      :disabled=\"getActiveStepIndex(steps) === 0\"\n    >\n      Previous Step\n    </PButton>\n\n    <PButton\n      type=\"button\"\n      :variant=\"'primary'\"\n      :disabled=\"getActiveStepIndex(steps) === steps.length - 1\"\n      @click=\"onNextPrevStep('next')\"\n    >\n      Next Step\n    </PButton>\n  </PButtonGroup>\n</template>"};return n},y=n=>{const e={"example-basic":{"vanilla-js":"<p-table caption=\"Some caption\"></p-table>\n\n<script>\n  (async () => {\n    const { headBasic, dataBasic } = await getHeadAndData();\n\n    const renderTableHeadRow = (items) =>\n      [\n        '<p-table-head-row>',\n        ...items.map((item) => `<p-table-head-cell>${item}</p-table-head-cell>`),\n        '</p-table-head-row>',\n      ].join('');\n\n    const renderTableBodyRows = (items) =>\n      items\n        .map(\n          (item) => `\n  <p-table-row>\n    <p-table-cell>${item.model}</p-table-cell>\n    <p-table-cell>${item.date}</p-table-cell>\n    <p-table-cell>${item.interest}</p-table-cell>\n    <p-table-cell>${item.status}</p-table-cell>\n    <p-table-cell>${item.leadId}</p-table-cell>\n  </p-table-row>`\n        )\n        .join('');\n\n    const markup = `\n  <p-table-head>${renderTableHeadRow(headBasic)}</p-table-head>\n  <p-table-body>${renderTableBodyRows(dataBasic)}</p-table-body>`;\n\n    document.querySelector('p-table').innerHTML = markup;\n  })();\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { dataBasic, headBasic } from '@porsche-design-system/shared';\n\n@Component({\n  selector: 'page-table-example-basic',\n  template: `\n    <p-table caption=\"Some caption\">\n      <p-table-head>\n        <p-table-head-row>\n          <p-table-head-cell *ngFor=\"let item of head\">{{ item }}</p-table-head-cell>\n        </p-table-head-row>\n      </p-table-head>\n      <p-table-body>\n        <p-table-row *ngFor=\"let item of data\">\n          <p-table-cell>{{ item.model }}</p-table-cell>\n          <p-table-cell>{{ item.date }}</p-table-cell>\n          <p-table-cell>{{ item.interest }}</p-table-cell>\n          <p-table-cell>{{ item.status }}</p-table-cell>\n          <p-table-cell>{{ item.leadId }}</p-table-cell>\n        </p-table-row>\n      </p-table-body>\n    </p-table>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableExampleBasicComponent {\n  public head = headBasic;\n  public data = dataBasic;\n}",react:"import {\n  PTable,\n  PTableBody,\n  PTableCell,\n  PTableHead,\n  PTableHeadCell,\n  PTableHeadRow,\n  PTableRow,\n} from '@porsche-design-system/components-react';\nimport { headBasic, dataBasic } from '@porsche-design-system/shared';\n\nexport const TableExampleBasicPage = (): JSX.Element => {\n  return (\n    <PTable caption=\"Some caption\">\n      <PTableHead>\n        <PTableHeadRow>\n          {headBasic.map((item, i) => (\n            <PTableHeadCell key={i}>{item}</PTableHeadCell>\n          ))}\n        </PTableHeadRow>\n      </PTableHead>\n      <PTableBody>\n        {dataBasic.map((item, i) => (\n          <PTableRow key={i}>\n            <PTableCell>{item.model}</PTableCell>\n            <PTableCell>{item.date}</PTableCell>\n            <PTableCell>{item.interest}</PTableCell>\n            <PTableCell>{item.status}</PTableCell>\n            <PTableCell>{item.leadId}</PTableCell>\n          </PTableRow>\n        ))}\n      </PTableBody>\n    </PTable>\n  );\n};",vue:'<script setup lang="ts">\n  import {\n    PTable,\n    PTableBody,\n    PTableCell,\n    PTableHead,\n    PTableHeadCell,\n    PTableHeadRow,\n    PTableRow,\n  } from \'@porsche-design-system/components-vue\';\n  import { dataBasic, headBasic } from \'@porsche-design-system/shared\';\n<\/script>\n\n<template>\n  <PTable :caption="\'Some caption\'">\n    <PTableHead>\n      <PTableHeadRow>\n        <PTableHeadCell v-for="(item, i) in headBasic" :key="i">{{ item }}</PTableHeadCell>\n      </PTableHeadRow>\n    </PTableHead>\n    <PTableBody>\n      <PTableRow v-for="(item, i) in dataBasic" :key="i">\n        <PTableCell>{{ item.model }}</PTableCell>\n        <PTableCell>{{ item.date }}</PTableCell>\n        <PTableCell>{{ item.interest }}</PTableCell>\n        <PTableCell>{{ item.status }}</PTableCell>\n        <PTableCell>{{ item.leadId }}</PTableCell>\n      </PTableRow>\n    </PTableBody>\n  </PTable>\n</template>',shared:"export const headBasic: string[] = ['Model', 'Date', 'Purchase Intention', 'Status', 'Lead ID'];\n\nexport type DataBasic = {\n  model: string;\n  date: string;\n  interest: string;\n  status: string;\n  leadId: string;\n};\n\nexport const dataBasic: DataBasic[] = [\n  {\n    model: '718 Cayman',\n    date: '23.06.2021',\n    interest: 'New Car',\n    status: 'Won',\n    leadId: '0000824402',\n  },\n  {\n    model: 'Panamera 4S',\n    date: '19.06.2021',\n    interest: 'New Car',\n    status: 'Lost',\n    leadId: '0000824409',\n  },\n  {\n    model: '911 Carrera S',\n    date: '19.05.2021',\n    interest: 'Used Car',\n    status: 'Won',\n    leadId: '0000824408',\n  },\n  {\n    model: 'Macan Turbo',\n    date: '10.05.2021',\n    interest: 'Used Car',\n    status: 'Lost',\n    leadId: '0000824407',\n  },\n  {\n    model: 'Taycan',\n    date: '03.05.2021',\n    interest: 'New Car',\n    status: 'Won',\n    leadId: '0000824406',\n  },\n];"},"example-sorting":{"vanilla-js":"<p-table caption=\"Some caption\"></p-table>\n\n<script>\n  (async () => {\n    const { headSorting, dataSorting } = await getHeadAndData();\n\n    const renderTableHeadRow = (items) =>\n      [\n        '<p-table-head-row>',\n        ...items.map((item) => `<p-table-head-cell>${item.name}</p-table-head-cell>`),\n        '</p-table-head-row>',\n      ].join('');\n\n    const renderTableBodyRows = (items) =>\n      items\n        .map(\n          (item) => `\n  <p-table-row>\n    <p-table-cell>${item.col1}</p-table-cell>\n    <p-table-cell>${item.col2}</p-table-cell>\n    <p-table-cell>${item.col3}</p-table-cell>\n  </p-table-row>`\n        )\n        .join('');\n\n    const markup = `\n  <p-table-head>${renderTableHeadRow(headSorting)}</p-table-head>\n  <p-table-body>${renderTableBodyRows(dataSorting)}</p-table-body>`;\n\n    const table = document.querySelector('p-table');\n    table.innerHTML = markup;\n    const tableHeadCells = table.querySelectorAll('p-table-head-cell');\n    const tableBody = table.querySelector('p-table-body');\n\n    // pass head items via property\n    const passHeadItemsToNodes = (items) =>\n      tableHeadCells.forEach((el, index) => {\n        el.sort = items[index];\n      });\n\n    passHeadItemsToNodes(headSorting); // initial state\n\n    table.addEventListener('update', (e) => {\n      const { id, direction } = e.detail;\n\n      const sortedHead = headSorting.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) }));\n      const sortedData = [...dataSorting].sort((a, b) =>\n        direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])\n      );\n\n      passHeadItemsToNodes(sortedHead);\n      tableBody.innerHTML = renderTableBodyRows(sortedData);\n    });\n  })();\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type { TableUpdateEventDetail } from '@porsche-design-system/components-angular';\nimport { dataSorting, type DataSorting, headSorting } from '@porsche-design-system/shared';\n\n@Component({\n  selector: 'page-table-example-sorting',\n  template: `\n    <p-table caption=\"Some caption\" (update)=\"onUpdate($event)\">\n      <p-table-head>\n        <p-table-head-row>\n          <p-table-head-cell *ngFor=\"let item of head\" [sort]=\"item\">\n            {{ item.name }}\n          </p-table-head-cell>\n        </p-table-head-row>\n      </p-table-head>\n      <p-table-body>\n        <p-table-row *ngFor=\"let item of data\">\n          <p-table-cell>{{ item.col1 }}</p-table-cell>\n          <p-table-cell>{{ item.col2 }}</p-table-cell>\n          <p-table-cell>{{ item.col3 }}</p-table-cell>\n        </p-table-row>\n      </p-table-body>\n    </p-table>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableExampleSortingComponent {\n  public head = headSorting;\n  public data = dataSorting;\n\n  onUpdate(e: CustomEvent<TableUpdateEventDetail>): void {\n    const { id, direction } = e.detail as TableUpdateEventDetail & { id: keyof DataSorting };\n    this.head = this.head.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) }));\n    this.data = [...this.data].sort((a, b) =>\n      direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])\n    );\n  }\n}",react:"import {\n  PTable,\n  PTableBody,\n  PTableCell,\n  PTableHead,\n  PTableHeadCell,\n  PTableHeadRow,\n  PTableRow,\n  type TableUpdateEventDetail,\n} from '@porsche-design-system/components-react';\nimport { useCallback, useState } from 'react';\nimport { dataSorting, type DataSorting, headSorting } from '@porsche-design-system/shared';\n\nexport const TableExampleSortingPage = (): JSX.Element => {\n  const [head, setHead] = useState(headSorting);\n  const [data, setData] = useState(dataSorting);\n\n  const onUpdate = useCallback((e: CustomEvent<TableUpdateEventDetail>) => {\n    const { id, direction } = e.detail as TableUpdateEventDetail & { id: keyof DataSorting };\n    setHead((prev) => prev.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) })));\n    setData((prev) =>\n      [...prev].sort((a, b) => {\n        return direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id]);\n      })\n    );\n  }, []);\n\n  return (\n    <PTable caption=\"Some caption\" onUpdate={onUpdate}>\n      <PTableHead>\n        <PTableHeadRow>\n          {head.map((item, i) => (\n            <PTableHeadCell key={i} sort={item}>\n              {item.name}\n            </PTableHeadCell>\n          ))}\n        </PTableHeadRow>\n      </PTableHead>\n      <PTableBody>\n        {data.map((item, i) => (\n          <PTableRow key={i}>\n            <PTableCell>{item.col1}</PTableCell>\n            <PTableCell>{item.col2}</PTableCell>\n            <PTableCell>{item.col3}</PTableCell>\n          </PTableRow>\n        ))}\n      </PTableBody>\n    </PTable>\n  );\n};",vue:'<script setup lang="ts">\n  import {\n    PTable,\n    PTableBody,\n    PTableCell,\n    PTableHead,\n    PTableHeadCell,\n    PTableHeadRow,\n    PTableRow,\n    type TableUpdateEventDetail,\n  } from \'@porsche-design-system/components-vue\';\n  import { type DataSorting, dataSorting, headSorting } from \'@porsche-design-system/shared\';\n  import { ref } from \'vue\';\n\n  const head = ref(headSorting);\n  const data = ref(dataSorting);\n\n  const onUpdate = (e: TableUpdateEventDetail): void => {\n    const { id, direction } = e as TableUpdateEventDetail & { id: keyof DataSorting };\n    head.value = head.value.map((item) => ({ ...item, active: false, ...(item.id === id && e) }));\n    data.value = [...data.value].sort((a, b) =>\n      direction === \'asc\' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])\n    );\n  };\n<\/script>\n\n<template>\n  <PTable :caption="\'Some caption\'" @update="onUpdate">\n    <PTableHead>\n      <PTableHeadRow>\n        <PTableHeadCell v-for="(item, i) in head" :key="i" :sort="item">{{ item.name }}</PTableHeadCell>\n      </PTableHeadRow>\n    </PTableHead>\n    <PTableBody>\n      <PTableRow v-for="(item, i) in data" :key="i">\n        <PTableCell>{{ item.col1 }}</PTableCell>\n        <PTableCell>{{ item.col2 }}</PTableCell>\n        <PTableCell>{{ item.col3 }}</PTableCell>\n      </PTableRow>\n    </PTableBody>\n  </PTable>\n</template>',shared:"export type HeadSorting = {\n  id: string;\n  name: string;\n  active?: boolean;\n  direction?: 'asc' | 'desc';\n};\n\nexport const headSorting: HeadSorting[] = [\n  { name: 'Column 1', id: 'col1' } as HeadSorting,\n  { name: 'Column 2', id: 'col2' } as HeadSorting,\n  { name: 'Column 3', id: 'col3' } as HeadSorting,\n].map((item, i) => ({\n  ...item,\n  active: i === 1,\n  direction: 'asc',\n}));\n\nexport type DataSorting = {\n  col1: string;\n  col2: string;\n  col3: string;\n};\n\nexport const dataSorting: DataSorting[] = [\n  {\n    col1: 'Name A',\n    col2: '9',\n    col3: '01.06.2021',\n  },\n  {\n    col1: 'Name Z',\n    col2: '1',\n    col3: '24.06.2021',\n  },\n];"},"example-advanced":{"vanilla-js":'<p-table>\n  <p-heading slot="caption" variant="large">Some visual caption</p-heading>\n  <p-table-head></p-table-head>\n  <p-table-body></p-table-body>\n</p-table>\n\n<script>\n  (async () => {\n    const { headAdvanced, dataAdvanced } = await getHeadAndData();\n\n    const renderTableHeadRow = (items) =>\n      [\n        \'<p-table-head-row>\',\n        ...items.map((item) => `<p-table-head-cell>${item.name || \'\'}</p-table-head-cell>`),\n        \'</p-table-head-row>\',\n      ].join(\'\');\n\n    const renderTableBodyRows = (items) =>\n      items\n        .map(\n          (item) => `\n<p-table-row>\n  <p-table-cell>\n    <div style="display: flex;">\n      <img src="${item.imageUrl}" width="80" height="45" style="margin-right: .5rem" alt="" />\n      <div>\n        <p-text weight=\'semi-bold\'>${item.model}</p-text>\n        <p-text size=\'x-small\'>${item.date}</p-text>\n      </div>\n    </div>\n  </p-table-cell>\n  <p-table-cell>${item.interest}</p-table-cell>\n  <p-table-cell><a href="https://porsche.com">${item.vin}</a></p-table-cell>\n  <p-table-cell>${item.purchaseIntention}</p-table-cell>\n  <p-table-cell>${item.status}</p-table-cell>\n  <p-table-cell multiline="true" style="min-width: 10rem;">${item.comment}</p-table-cell>\n  <p-table-cell>${item.leadId} <p-popover description="Some additional content."></p-popover></p-table-cell>\n  <p-table-cell>\n    <p-select-wrapper label="Select Something" style="min-width: 160px;">\n      <select name="some-name">\n        <option value="a">Option A</option>\n        <option value="b">Option B</option>\n        <option value="c">Option C</option>\n        <option value="d">Option D</option>\n        <option value="e">Option E</option>\n        <option value="f">Option F</option>\n        <option value="g">Option G</option>\n        <option value="h">Option H</option>\n        <option value="i">Option I</option>\n        <option value="j">Option J</option>\n        <option value="k">Option K</option>\n      </select>\n    </p-select-wrapper>\n  </p-table-cell>\n  <p-table-cell>\n    <p-select name="options" label="Select Something" style="min-width: 160px; display: block;">\n      <p-select-option value="a">Option A</p-select-option>\n      <p-select-option value="b">Option B</p-select-option>\n      <p-select-option value="c">Option C</p-select-option>\n      <p-select-option value="d">Option D</p-select-option>\n      <p-select-option value="e">Option E</p-select-option>\n      <p-select-option value="f">Option F</p-select-option>\n      <p-select-option value="g">Option G</p-select-option>\n      <p-select-option value="h">Option H</p-select-option>\n      <p-select-option value="i">Option I</p-select-option>\n      <p-select-option value="j">Option J</p-select-option>\n      <p-select-option value="k">Option K</p-select-option>\n    </p-select>\n  </p-table-cell>\n  <p-table-cell>\n    <p-multi-select name="name" label="Multi-Select Something" style="min-width: 160px;">\n      <p-multi-select-option value="a">Option A</p-multi-select-option>\n      <p-multi-select-option value="b">Option B</p-multi-select-option>\n      <p-multi-select-option value="c">Option C</p-multi-select-option>\n      <p-multi-select-option value="d">Option D</p-multi-select-option>\n      <p-multi-select-option value="e">Option E</p-multi-select-option>\n      <p-multi-select-option value="f">Option F</p-multi-select-option>\n      <p-multi-select-option value="g">Option G</p-multi-select-option>\n      <p-multi-select-option value="h">Option H</p-multi-select-option>\n      <p-multi-select-option value="i">Option I</p-multi-select-option>\n      <p-multi-select-option value="j">Option J</p-multi-select-option>\n      <p-multi-select-option value="k">Option K</p-multi-select-option>\n    </p-multi-select>\n  </p-table-cell>\n  <p-table-cell>\n    <p-button-pure icon="edit" style="padding: .5rem">Edit</p-button-pure>\n    <p-button-pure icon="delete" style="padding: .5rem">Delete</p-button-pure>\n  </p-table-cell>\n</p-table-row>`\n        )\n        .join(\'\');\n\n    const table = document.querySelector(\'p-table\');\n    const tableHead = table.querySelector(\'p-table-head\');\n    tableHead.innerHTML = renderTableHeadRow(headAdvanced);\n    const tableBody = table.querySelector(\'p-table-body\');\n    tableBody.innerHTML = renderTableBodyRows(dataAdvanced);\n\n    const tableHeadCells = table.querySelectorAll(\'p-table-head-cell\');\n\n    // pass head items via property\n    const passHeadItemsToNodes = (items) => {\n      tableHeadCells.forEach((el, index) => {\n        el.hideLabel = items[index].hideLabel;\n        el.sort = items[index];\n      });\n    };\n\n    passHeadItemsToNodes(headAdvanced); // initial state\n\n    table.addEventListener(\'update\', (e) => {\n      const { id, direction } = e.detail;\n\n      const sortedHead = headAdvanced.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) }));\n      const sortedData = [...dataAdvanced].sort((a, b) =>\n        direction === \'asc\' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])\n      );\n\n      passHeadItemsToNodes(sortedHead);\n      tableBody.innerHTML = renderTableBodyRows(sortedData);\n    });\n  })();\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { TableUpdateEventDetail } from \'@porsche-design-system/components-angular\';\nimport { dataAdvanced, type DataAdvanced, headAdvanced } from \'@porsche-design-system/shared\';\n\n@Component({\n  selector: \'page-table-example-advanced\',\n  template: `\n    <p-table (update)="onUpdate($event)">\n      <p-heading slot="caption" size="large">Some visual caption</p-heading>\n      <p-table-head>\n        <p-table-head-row>\n          <p-table-head-cell *ngFor="let item of head" [sort]="item" [hideLabel]="item.hideLabel">\n            {{ item.name }}\n          </p-table-head-cell>\n        </p-table-head-row>\n      </p-table-head>\n      <p-table-body>\n        <p-table-row *ngFor="let item of data">\n          <p-table-cell>\n            <div style="display: flex;">\n              <img src="{{ item.imageUrl }}" width="80" height="45" style="margin-right: .5rem" alt="" />\n              <div>\n                <p-text weight="semi-bold">{{ item.model }}</p-text>\n                <p-text size="x-small">{{ item.date }}</p-text>\n              </div>\n            </div>\n          </p-table-cell>\n          <p-table-cell>{{ item.interest }}</p-table-cell>\n          <p-table-cell>\n            <a href="https://porsche.com">{{ item.vin }}</a>\n          </p-table-cell>\n          <p-table-cell>{{ item.purchaseIntention }}</p-table-cell>\n          <p-table-cell>{{ item.status }}</p-table-cell>\n          <p-table-cell [multiline]="true" style="min-width: 10rem;">{{ item.comment }}</p-table-cell>\n          <p-table-cell>{{ item.leadId }}</p-table-cell>\n          <p-table-cell>\n            <p-button-pure icon="edit" style="padding: .5rem">Edit</p-button-pure>\n            <p-button-pure icon="delete" style="padding: .5rem">Delete</p-button-pure>\n          </p-table-cell>\n        </p-table-row>\n      </p-table-body>\n    </p-table>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableExampleAdvancedComponent {\n  public head = headAdvanced;\n  public data = dataAdvanced;\n\n  onUpdate(e: CustomEvent<TableUpdateEventDetail>): void {\n    const { id, direction } = e.detail as TableUpdateEventDetail & { id: keyof DataAdvanced };\n    this.head = this.head.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) }));\n    this.data = [...this.data].sort((a, b) =>\n      direction === \'asc\' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])\n    );\n  }\n}',react:"import {\n  PButtonPure,\n  PHeading,\n  PTable,\n  PTableBody,\n  PTableCell,\n  PTableHead,\n  PTableHeadCell,\n  PTableHeadRow,\n  PTableRow,\n  PText,\n  type TableUpdateEventDetail,\n} from '@porsche-design-system/components-react';\nimport { useCallback, useState } from 'react';\nimport { dataAdvanced, type DataAdvanced, headAdvanced } from '@porsche-design-system/shared';\n\nexport const TableExampleAdvancedPage = (): JSX.Element => {\n  const [head, setHead] = useState(headAdvanced);\n  const [data, setData] = useState(dataAdvanced);\n\n  const onUpdate = useCallback((e: CustomEvent<TableUpdateEventDetail>) => {\n    const { id, direction } = e.detail as TableUpdateEventDetail & { id: keyof DataAdvanced };\n    setHead((prev) => prev.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) })));\n    setData((prev) =>\n      [...prev].sort((a, b) => {\n        return direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id]);\n      })\n    );\n  }, []);\n\n  return (\n    <PTable onUpdate={onUpdate}>\n      <PHeading slot=\"caption\" size=\"large\">\n        Some visual caption\n      </PHeading>\n      <PTableHead>\n        <PTableHeadRow>\n          {head.map((item, i) => (\n            <PTableHeadCell key={i} sort={item} hideLabel={item.hideLabel}>\n              {item.name}\n            </PTableHeadCell>\n          ))}\n        </PTableHeadRow>\n      </PTableHead>\n      <PTableBody>\n        {data.map((item, i) => (\n          <PTableRow key={i}>\n            <PTableCell>\n              <div style={{ display: 'flex' }}>\n                <img src={item.imageUrl} width={80} height={45} style={{ marginRight: '.5rem' }} alt=\"\" />\n                <div>\n                  <PText weight=\"semi-bold\">{item.model}</PText>\n                  <PText size=\"x-small\">{item.date}</PText>\n                </div>\n              </div>\n            </PTableCell>\n            <PTableCell>{item.interest}</PTableCell>\n            <PTableCell>\n              <a href=\"https://porsche.com\">{item.vin}</a>\n            </PTableCell>\n            <PTableCell>{item.purchaseIntention}</PTableCell>\n            <PTableCell>{item.status}</PTableCell>\n            <PTableCell multiline={true} style={{ minWidth: '10rem' }}>\n              {item.comment}\n            </PTableCell>\n            <PTableCell>{item.leadId}</PTableCell>\n            <PTableCell>\n              <PButtonPure icon=\"edit\" style={{ padding: '.5rem' }}>\n                Edit\n              </PButtonPure>\n              <PButtonPure icon=\"delete\" style={{ padding: '.5rem' }}>\n                Delete\n              </PButtonPure>\n            </PTableCell>\n          </PTableRow>\n        ))}\n      </PTableBody>\n    </PTable>\n  );\n};",vue:'<script setup lang="ts">\n  import { type DataAdvanced, dataAdvanced, headAdvanced } from \'@porsche-design-system/shared\';\n  import {\n    PButtonPure,\n    PHeading,\n    PTable,\n    PTableBody,\n    PTableCell,\n    PTableHead,\n    PTableHeadCell,\n    PTableHeadRow,\n    PTableRow,\n    PText,\n    type TableUpdateEventDetail,\n  } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const head = ref(headAdvanced);\n  const data = ref(dataAdvanced);\n\n  const onUpdate = (e: TableUpdateEventDetail): void => {\n    const { id, direction } = e as TableUpdateEventDetail & { id: keyof DataAdvanced };\n    head.value = head.value.map((item) => ({ ...item, active: false, ...(item.id === id && e) }));\n    data.value = [...data.value].sort((a, b) =>\n      direction === \'asc\' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])\n    );\n  };\n<\/script>\n\n<template>\n  <PTable @update="onUpdate">\n    \x3c!-- eslint-disable vue/no-deprecated-slot-attribute --\x3e\n    <PHeading :slot="\'caption\'" :size="\'large\'">Some visual caption</PHeading>\n    \x3c!-- eslint-enable --\x3e\n    <PTableHead>\n      <PTableHeadRow>\n        <PTableHeadCell v-for="(item, i) in head" :key="i" :sort="item" :hideLabel="item.hideLabel">\n          {{ item.name }}\n        </PTableHeadCell>\n      </PTableHeadRow>\n    </PTableHead>\n    <PTableBody>\n      <PTableRow v-for="(item, i) in data" :key="i">\n        <PTableCell>\n          <div :style="{ display: \'flex\' }">\n            <img :src="item.imageUrl" :width="80" :height="45" :style="{ marginRight: \'.5rem\' }" alt="" />\n            <div>\n              <PText :weight="\'semi-bold\'">{{ item.model }}</PText>\n              <PText :size="\'x-small\'">{{ item.date }}</PText>\n            </div>\n          </div>\n        </PTableCell>\n        <PTableCell>{{ item.interest }}</PTableCell>\n        <PTableCell>\n          <a :href="\'https://porsche.com\'">{{ item.vin }}</a>\n        </PTableCell>\n        <PTableCell>{{ item.purchaseIntention }}</PTableCell>\n        <PTableCell>{{ item.status }}</PTableCell>\n        <PTableCell :multiline="true" :style="{ minWidth: \'10rem\' }">\n          {{ item.comment }}\n        </PTableCell>\n        <PTableCell>{{ item.leadId }}</PTableCell>\n        <PTableCell>\n          <PButtonPure :icon="\'edit\'" :style="{ padding: \'.5rem\' }">Edit</PButtonPure>\n          <PButtonPure :icon="\'delete\'" :style="{ padding: \'.5rem\' }">Delete</PButtonPure>\n        </PTableCell>\n      </PTableRow>\n    </PTableBody>\n  </PTable>\n</template>',shared:"export type HeadAdvanced = {\n  id: string;\n  name: string;\n  hideLabel: boolean;\n  active?: boolean;\n  direction?: 'asc' | 'desc';\n};\n\nexport const headAdvanced: HeadAdvanced[] = [\n  { name: 'Model', id: 'model' } as HeadAdvanced,\n  { name: 'Interest', id: 'interest' } as HeadAdvanced,\n  { name: 'VIN', id: 'vin' } as HeadAdvanced,\n  { name: 'Purchase Intention', id: 'purchaseIntention' } as HeadAdvanced,\n  { name: 'Status', id: 'status' } as HeadAdvanced,\n  { name: 'Comment', id: 'comment' } as HeadAdvanced,\n  { name: 'Lead ID', id: 'leadId' } as HeadAdvanced,\n  { name: 'Select Wrapper', id: 'selectWrapper' } as HeadAdvanced,\n  { name: 'Select', id: 'select' } as HeadAdvanced,\n  { name: 'Multi-Select', id: 'multiSelect' } as HeadAdvanced,\n  { name: 'Action', id: 'action', hideLabel: true } as HeadAdvanced,\n].map((item, i) => ({\n  ...item,\n  ...(i > 0 &&\n    i < 7 &&\n    i !== 5 && {\n      active: i === 1,\n      direction: 'asc',\n    }),\n}));\n\nexport type DataAdvanced = {\n  imageUrl: string;\n  model: string;\n  date: string;\n  interest: string;\n  vin: string;\n  purchaseIntention: string;\n  status: string;\n  comment: string;\n  leadId: string;\n};\n\nexport const dataAdvanced: DataAdvanced[] = [\n  {\n    imageUrl: 'https://porsche-design-system.github.io/porsche-design-system/assets/718.png',\n    model: '718',\n    date: '23.06.2021',\n    interest: 'New Car',\n    vin: '1FM5K7F84FGB16304',\n    purchaseIntention: '08/2021',\n    status: 'Won',\n    comment: '-',\n    leadId: '0000824402',\n  },\n  {\n    imageUrl: 'https://porsche-design-system.github.io/porsche-design-system/assets/panamera.png',\n    model: 'Panamera',\n    date: '19.06.2021',\n    interest: 'New Car',\n    vin: '2GCEC13T141374801',\n    purchaseIntention: '11/2021',\n    status: 'Lost',\n    comment: 'Some multiline text and a column with a min width.',\n    leadId: '0000824409',\n  },\n  {\n    imageUrl: 'https://porsche-design-system.github.io/porsche-design-system/assets/911.png',\n    model: '911',\n    date: '19.05.2021',\n    interest: 'Used Car',\n    vin: '5GAKVCKD8EJ335750',\n    purchaseIntention: '09/2021',\n    status: 'Won',\n    comment: '-',\n    leadId: '0000824408',\n  },\n  {\n    imageUrl: 'https://porsche-design-system.github.io/porsche-design-system/assets/macan.png',\n    model: 'Macan',\n    date: '10.05.2021',\n    interest: 'Used Car',\n    vin: '1FMPU17L83LC09302',\n    purchaseIntention: '07/2021',\n    status: 'Lost',\n    comment: '-',\n    leadId: '0000824407',\n  },\n  {\n    imageUrl: 'https://porsche-design-system.github.io/porsche-design-system/assets/taycan.png',\n    model: 'Taycan',\n    date: '03.05.2021',\n    interest: 'New Car',\n    vin: 'JN1BY1AR3BM375187',\n    purchaseIntention: '05/2021',\n    status: 'Won',\n    comment: '-',\n    leadId: '0000824406',\n  },\n];"}};return e[n]},S=n=>{const e={"example-basic":{"vanilla-js":'<p-tabs-bar active-tab-index="0">\n  <button type="button">Tab One</button>\n  <button type="button">Tab Two</button>\n  <button type="button">Tab Three</button>\n</p-tabs-bar>\n\n<script>\n  const tabsBar = document.querySelector(\'p-tabs-bar\');\n  tabsBar.addEventListener(\'update\', (e) => {\n    e.target.activeTabIndex = e.detail.activeTabIndex;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { TabsBarUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-tabs-bar-example-basic\',\n  template: `\n    <p-tabs-bar [activeTabIndex]="tabIndex" (update)="onUpdate($event)">\n      <button type="button">Tab One</button>\n      <button type="button">Tab Two</button>\n      <button type="button">Tab Three</button>\n    </p-tabs-bar>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabsBarExampleBasicComponent {\n  tabIndex: number = 0;\n\n  onUpdate(e: CustomEvent<TabsBarUpdateEventDetail>) {\n    this.tabIndex = e.detail.activeTabIndex;\n  }\n}',react:'import { PTabsBar, type TabsBarUpdateEventDetail } from \'@porsche-design-system/components-react\';\nimport { useCallback, useState } from \'react\';\n\nexport const TabsBarExampleBasicPage = (): JSX.Element => {\n  const [tabIndex, setTabIndex] = useState<number>(0);\n  const onUpdate = useCallback((e: CustomEvent<TabsBarUpdateEventDetail>) => {\n    setTabIndex(e.detail.activeTabIndex);\n  }, []);\n\n  return (\n    <PTabsBar activeTabIndex={tabIndex} onUpdate={onUpdate}>\n      <button type="button">Tab One</button>\n      <button type="button">Tab Two</button>\n      <button type="button">Tab Three</button>\n    </PTabsBar>\n  );\n};',vue:'<script setup lang="ts">\n  import { PTabsBar, type TabsBarUpdateEventDetail } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const tabIndex = ref<number>(0);\n  const onUpdate = (e: TabsBarUpdateEventDetail): void => {\n    tabIndex.value = e.activeTabIndex;\n  };\n<\/script>\n\n<template>\n  <PTabsBar :activeTabIndex="tabIndex" @update="onUpdate">\n    <button type="button">Tab One</button>\n    <button type="button">Tab Two</button>\n    <button type="button">Tab Three</button>\n  </PTabsBar>\n</template>'},"example-accessibility":{"vanilla-js":'<p-tabs-bar active-tab-index="0">\n  <button type="button" id="tab-item-0" aria-controls="tab-panel-0">Tab One</button>\n  <button type="button" id="tab-item-1" aria-controls="tab-panel-1">Tab Two</button>\n  <button type="button" id="tab-item-2" aria-controls="tab-panel-2">Tab Three</button>\n</p-tabs-bar>\n\n<div id="tab-panel-0" role="tabpanel" tabindex="0" aria-labelledby="tab-item-0">\n  <p-text>Your content of Tab 1</p-text>\n</div>\n<div id="tab-panel-1" role="tabpanel" hidden tabindex="-1" aria-labelledby="tab-item-1">\n  <p-text>Your content of Tab 2</p-text>\n</div>\n<div id="tab-panel-2" role="tabpanel" hidden tabindex="-1" aria-labelledby="tab-item-2">\n  <p-text>Your content of Tab 3</p-text>\n</div>\n\n<script>\n  const panels = Array.from(document.querySelectorAll(\'[role="tabpanel"]\'));\n\n  document.querySelector(\'p-tabs-bar\').addEventListener(\'update\', (e) => {\n    e.target.activeTabIndex = e.detail.activeTabIndex;\n\n    panels.forEach((panel, i) => {\n      if (i === e.detail.activeTabIndex) {\n        panel.removeAttribute(\'hidden\');\n        panel.setAttribute(\'tabindex\', \'0\');\n      } else {\n        panel.setAttribute(\'hidden\', \'\');\n        panel.setAttribute(\'tabindex\', \'-1\');\n      }\n    });\n  });\n<\/script>\n\n<style>\n  div[role=\'tabpanel\'] {\n    margin-top: 8px;\n  }\n</style>',angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type { TabsBarUpdateEventDetail } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-tabs-bar-example-accessibility',\n  styles: [\n    `\n      div[role='tabpanel'] {\n        outline: 1px solid transparent;\n        outline-offset: 2px;\n        margin-top: 8px;\n      }\n      div[role='tabpanel']:focus {\n        outline-color: #000;\n      }\n      div[role='tabpanel']:focus:not(:focus-visible) {\n        outline-color: transparent;\n      }\n    `,\n  ],\n  template: `\n    <p-tabs-bar [activeTabIndex]=\"tabIndex\" (update)=\"onUpdate($event)\">\n      <ng-container *ngFor=\"let tabPanel of tabPanels; let i = index\">\n        <button type=\"button\" [attr.id]=\"'tab-item-' + i\" [attr.aria-controls]=\"'tab-panel-' + i\">\n          Tab {{ tabPanel }}\n        </button>\n      </ng-container>\n    </p-tabs-bar>\n\n    <ng-container *ngFor=\"let content of tabPanels; let i = index\">\n      <div\n        [attr.id]=\"'tab-panel-' + i\"\n        [hidden]=\"tabIndex !== i\"\n        [tabindex]=\"tabIndex === i ? 0 : -1\"\n        role=\"tabpanel\"\n        [attr.aria-labelledby]=\"'tab-item-' + i\"\n      >\n        <p-text>Your content of Tab {{ i + 1 }}</p-text>\n      </div>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabsBarExampleAccessibilityComponent {\n  tabIndex: number = 0;\n  tabPanels: string[] = ['One', 'Two', 'Three'];\n\n  onUpdate(e: CustomEvent<TabsBarUpdateEventDetail>) {\n    this.tabIndex = e.detail.activeTabIndex;\n  }\n}",react:"import { PTabsBar, PText, type TabsBarUpdateEventDetail } from '@porsche-design-system/components-react';\nimport { useCallback, useState } from 'react';\n\nexport const TabsBarExampleAccessibilityPage = (): JSX.Element => {\n  const [tabIndex, setTabIndex] = useState<number>(0);\n  const onUpdate = useCallback((e: CustomEvent<TabsBarUpdateEventDetail>) => {\n    setTabIndex(e.detail.activeTabIndex);\n  }, []);\n\n  const tabPanels: string[] = ['One', 'Two', 'Three'];\n\n  return (\n    <>\n      <style>{`\n        div[role=tabpanel] {\n          outline: 1px solid transparent;\n          outline-offset: 2px;\n          margin-top: 8px;\n        }\n        div[role=tabpanel]:focus {\n          outline-color: #000;\n        }\n        div[role=tabpanel]:focus:not(:focus-visible) {\n          outline-color: transparent;\n        }\n      `}</style>\n      <PTabsBar activeTabIndex={tabIndex} onUpdate={onUpdate}>\n        {tabPanels.map((tabPanel, i) => (\n          <button key={i} type=\"button\" id={`tab-item-${i}`} aria-controls={`tab-panel-${i}`}>\n            Tab {tabPanel}\n          </button>\n        ))}\n      </PTabsBar>\n\n      {tabPanels.map((_, i) => (\n        <div\n          key={i}\n          role=\"tabpanel\"\n          id={`tab-panel-${i}`}\n          hidden={tabIndex !== i}\n          tabIndex={tabIndex === i ? 0 : -1}\n          aria-labelledby={`tab-item-${i}`}\n        >\n          <PText>Your content of Tab {i + 1}</PText>\n        </div>\n      ))}\n    </>\n  );\n};",vue:'<script setup lang="ts">\n  import { PTabsBar, PText, type TabsBarUpdateEventDetail } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const tabIndex = ref(0);\n  const tabPanels: string[] = [\'One\', \'Two\', \'Three\'];\n\n  const onUpdate = (e: TabsBarUpdateEventDetail): void => {\n    tabIndex.value = e.activeTabIndex;\n  };\n<\/script>\n\n<template>\n  <PTabsBar :activeTabIndex="tabIndex" @update="onUpdate">\n    <button\n      v-for="(tabPanel, i) in tabPanels"\n      :key="i"\n      type="button"\n      :id="`tab-item-${i}`"\n      :aria-controls="`tab-panel-${i}`"\n    >\n      Tab {{ tabPanel }}\n    </button>\n  </PTabsBar>\n  <div\n    v-for="(content, i) in tabPanels"\n    :key="i"\n    :role="\'tabpanel\'"\n    :id="`tab-panel-${i}`"\n    :hidden="tabIndex !== i"\n    :tabIndex="tabIndex === i ? 0 : -1"\n    :aria-labelledby="`tab-item-${i}`"\n  >\n    <PText>Your content of Tab {{ i + 1 }}</PText>\n  </div>\n</template>\n\n<style scoped>\n  div[role=\'tabpanel\'] {\n    outline: 1px solid transparent;\n    outline-offset: 2px;\n    margin-top: 8px;\n  }\n  div[role=\'tabpanel\']:focus {\n    outline-color: #000;\n  }\n  div[role=\'tabpanel\']:focus:not(:focus-visible) {\n    outline-color: transparent;\n  }\n</style>'}};return e[n]},f=n=>{const e={"example-imask":{"vanilla-js":"<p-text-field-wrapper label=\"Some label\">\n  <input type=\"text\" />\n</p-text-field-wrapper>\n\n<script>\n  const isDeLocale = Intl.NumberFormat().resolvedOptions().locale.startsWith('de');\n  const dateFormat = isDeLocale ? 'dd.mm.yyyy' : 'mm/dd/yyyy';\n  const dateRange = isDeLocale ? '01.01.1900, 01.01.2100' : '01/01/1900, 01/01/2100';\n  const textFieldWrapper = document.querySelector('p-text-field-wrapper');\n  textFieldWrapper.description = `'${dateFormat}' in range [${dateRange}]`;\n\n  IMask(textFieldWrapper.querySelector('input'), {\n    lazy: false,\n    mask: dateFormat,\n    blocks: {\n      dd: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 31,\n        placeholderChar: 'd',\n      },\n      mm: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 12,\n        placeholderChar: 'm',\n      },\n      yyyy: {\n        mask: IMask.MaskedRange,\n        from: 1900,\n        to: 2100,\n        placeholderChar: 'y',\n      },\n    },\n  });\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { MaskedRange } from 'imask';\n\n@Component({\n  selector: 'page-text-field-wrapper-example-imask',\n  template: `\n    <p-text-field-wrapper [label]=\"'Some label'\" [description]=\"description\">\n      <input [type]=\"'text'\" [imask]=\"mask\" />\n    </p-text-field-wrapper>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextFieldWrapperExampleImaskComponent {\n  public isDeLocale = Intl.NumberFormat().resolvedOptions().locale.startsWith('de');\n  public dateFormat = this.isDeLocale ? 'dd.mm.yyyy' : 'mm/dd/yyyy';\n  public dateRange = this.isDeLocale ? '01.01.1900, 01.01.2100' : '01/01/1900, 01/01/2100';\n  public description = `'${this.dateFormat}' in range [${this.dateRange}]`;\n  public mask = {\n    lazy: false,\n    mask: this.dateFormat,\n    blocks: {\n      dd: {\n        mask: MaskedRange,\n        from: 1,\n        to: 31,\n        placeholderChar: 'd',\n      },\n      mm: {\n        mask: MaskedRange,\n        from: 1,\n        to: 12,\n        placeholderChar: 'm',\n      },\n      yyyy: {\n        mask: MaskedRange,\n        from: 1900,\n        to: 2100,\n        placeholderChar: 'y',\n      },\n    },\n  };\n}",react:"import type { LegacyRef } from 'react';\nimport { PTextFieldWrapper } from '@porsche-design-system/components-react';\nimport { useIMask, IMask } from 'react-imask';\n\nexport const TextFieldWrapperExampleIMaskPage = (): JSX.Element => {\n  const isDeLocale = Intl.NumberFormat().resolvedOptions().locale.startsWith('de');\n  const dateFormat = isDeLocale ? 'dd.mm.yyyy' : 'mm/dd/yyyy';\n  const dateRange = isDeLocale ? '01.01.1900, 01.01.2100' : '01/01/1900, 01/01/2100';\n  const description = `'${dateFormat}' in range [${dateRange}]`;\n  const opts = {\n    lazy: false,\n    mask: dateFormat,\n    blocks: {\n      dd: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 31,\n        placeholderChar: 'd',\n      },\n      mm: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 12,\n        placeholderChar: 'm',\n      },\n      yyyy: {\n        mask: IMask.MaskedRange,\n        from: 1900,\n        to: 2100,\n        placeholderChar: 'y',\n      },\n    },\n  };\n  const { ref } = useIMask(opts);\n\n  return (\n    <PTextFieldWrapper label=\"Some label\" description={description}>\n      <input ref={ref as LegacyRef<HTMLInputElement>} type=\"text\" />\n    </PTextFieldWrapper>\n  );\n};",vue:"<script setup lang=\"ts\">\n  import { PTextFieldWrapper } from '@porsche-design-system/components-vue';\n  import { IMask, useIMask } from 'vue-imask';\n\n  const isDeLocale = Intl.NumberFormat().resolvedOptions().locale.startsWith('de');\n  const dateFormat = isDeLocale ? 'dd.mm.yyyy' : 'mm/dd/yyyy';\n  const dateRange = isDeLocale ? '01.01.1900, 01.01.2100' : '01/01/1900, 01/01/2100';\n  const description = `'${dateFormat}' in range [${dateRange}]`;\n  const opts = {\n    lazy: false,\n    mask: dateFormat,\n    blocks: {\n      dd: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 31,\n        placeholderChar: 'd',\n      },\n      mm: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 12,\n        placeholderChar: 'm',\n      },\n      yyyy: {\n        mask: IMask.MaskedRange,\n        from: 1900,\n        to: 2100,\n        placeholderChar: 'y',\n      },\n    },\n  };\n\n  const { el } = useIMask(opts);\n<\/script>\n\n<template>\n  <PTextFieldWrapper :label=\"'Some label'\" :description=\"description\">\n    <input ref=\"el\" type=\"text\" />\n  </PTextFieldWrapper>\n</template>"},"example-search":{"vanilla-js":"<p-text-field-wrapper label=\"Search location\" hide-label=\"true\" action-icon=\"locate\">\n  <input type=\"search\" />\n</p-text-field-wrapper>\n<p-text>Value: </p-text>\n\n<script>\n  const textFieldWrapper = document.querySelector('p-text-field-wrapper');\n  const input = document.querySelector('input');\n  const text = document.querySelector('p-text');\n\n  const setInputPlaceholder = (active) => (input.placeholder = active ? 'Locating...' : '');\n\n  textFieldWrapper.addEventListener('action', (e) => {\n    e.target.actionLoading = true;\n    setInputPlaceholder(true);\n\n    // simulate async request\n    setTimeout(() => {\n      input.value = 'Stuttgart, Baden-Württemberg';\n      text.innerText = 'Value: ' + input.value;\n      e.target.actionLoading = false;\n      setInputPlaceholder(false);\n    }, 3000);\n  });\n\n  input.addEventListener('input', (e) => {\n    text.innerText = 'Value: ' + e.target.value;\n    if (textFieldWrapper.actionLoading) {\n      textFieldWrapper.actionLoading = false;\n      setInputPlaceholder(false);\n    }\n  });\n<\/script>",angular:'import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'text-field-wrapper-example-search\',\n  template: `\n    <p-text-field-wrapper\n      label="Search location"\n      [hideLabel]="true"\n      actionIcon="locate"\n      [actionLoading]="isLoading"\n      (action)="onAction()"\n    >\n      <input type="search" [value]="value" [placeholder]="isLoading ? \'Locating...\' : \'\'" (input)="onInput($event)" />\n    </p-text-field-wrapper>\n    <p-text>Value: {{ value }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextFieldWrapperExampleSearchComponent {\n  public value = \'\';\n  public isLoading = false;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  public onAction() {\n    this.isLoading = true;\n\n    // simulate async request\n    setTimeout(() => {\n      this.value = \'Stuttgart, Baden-Württemberg\';\n      this.isLoading = false;\n      this.cdr.markForCheck();\n    }, 3000);\n  }\n\n  public onInput(e: Event) {\n    this.value = (e.target as HTMLInputElement).value;\n    if (this.isLoading) {\n      this.isLoading = false;\n    }\n  }\n}',react:"import { type ChangeEvent, useCallback, useState } from 'react';\nimport { PText, PTextFieldWrapper } from '@porsche-design-system/components-react';\n\nexport const TextFieldWrapperExampleSearchPage = (): JSX.Element => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [value, setValue] = useState('');\n\n  const onAction = useCallback(() => {\n    setIsLoading(true);\n\n    // simulate async request\n    setTimeout(() => {\n      setValue('Stuttgart, Baden-Württemberg');\n      setIsLoading(false);\n    }, 3000);\n  }, []);\n\n  const onInput = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      setValue(e.target.value);\n      if (isLoading) {\n        setIsLoading(false);\n      }\n    },\n    [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  return (\n    <>\n      <PTextFieldWrapper\n        label=\"Search location\"\n        hideLabel\n        actionIcon=\"locate\"\n        actionLoading={isLoading}\n        onAction={onAction}\n      >\n        <input type=\"search\" value={value} placeholder={isLoading ? 'Locating...' : ''} onInput={onInput} />\n      </PTextFieldWrapper>\n      <PText children={'Value: ' + value} />\n    </>\n  );\n};",vue:'<script setup lang="ts">\n  import { PText, PTextFieldWrapper } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const isLoading = ref(false);\n  const value = ref(\'\');\n\n  const onAction = (): void => {\n    isLoading.value = true;\n\n    // simulate async request\n    setTimeout(() => {\n      value.value = \'Stuttgart, Baden-Württemberg\';\n      isLoading.value = false;\n    }, 3000);\n  };\n\n  const onInput = (e: Event) => {\n    value.value = (e.target as HTMLInputElement).value;\n    if (isLoading.value) {\n      isLoading.value = false;\n    }\n  };\n<\/script>\n\n<template>\n  <PTextFieldWrapper\n    :label="\'Search location\'"\n    :hideLabel="true"\n    :actionIcon="\'locate\'"\n    :actionLoading="isLoading"\n    @action="onAction"\n  >\n    <input type="search" :value="value" :placeholder="isLoading ? \'Locating...\' : \'\'" @input="onInput" />\n  </PTextFieldWrapper>\n  <PText>Value: {{ value }}</PText>\n</template>'}};return e[n]},v=()=>{const n={"vanilla-js":"<button type=\"button\">Queue Toast</button>\n<p-toast></p-toast>\n\n<script>\n  const toast = document.querySelector('p-toast');\n  let counter = 1;\n\n  customElements.whenDefined('p-toast').then(() => {\n    document.querySelector('button').addEventListener('click', () => {\n      toast.addMessage({ text: `Some message ${counter}`, state: 'success' });\n      counter++;\n    });\n  });\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ToastManager } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-toast-example',\n  template: `\n    <button type=\"button\" (click)=\"onButtonClick()\">Queue Toast</button>\n    <p-toast></p-toast>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastExampleComponent {\n  private counter = 1;\n\n  constructor(private toastManager: ToastManager) {}\n\n  onButtonClick() {\n    this.toastManager.addMessage({ text: `Some message ${this.counter}`, state: 'success' });\n    this.counter++;\n  }\n}",react:"import { useState } from 'react';\nimport { useToastManager, PToast } from '@porsche-design-system/components-react';\n\nexport const ToastExamplePage = (): JSX.Element => {\n  const { addMessage } = useToastManager();\n  const [counter, setCounter] = useState(1);\n\n  const onButtonClick = () => {\n    addMessage({ text: `Some message ${counter}`, state: 'success' });\n    setCounter((prev) => prev + 1);\n  };\n\n  return (\n    <>\n      <button type=\"button\" onClick={onButtonClick}>\n        Queue Toast\n      </button>\n      <PToast />\n    </>\n  );\n};",vue:"<script setup lang=\"ts\">\n  import { useToastManager, PToast } from '@porsche-design-system/components-vue';\n  import { ref } from 'vue';\n\n  const { addMessage } = useToastManager();\n  const counter = ref(1);\n\n  const onButtonClick = (): void => {\n    addMessage({ text: `Some message ${counter.value}`, state: 'success' });\n    counter.value = counter.value + 1;\n  };\n<\/script>\n\n<template>\n  <button type=\"button\" @click=\"onButtonClick\">Queue Toast</button>\n  <PToast />\n</template>"};return n},x=()=>{const n={angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-styles-border-example\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n      }\n\n      // Typography\n      .heading {\n        @include pds-heading-medium;\n        color: $pds-theme-light-primary;\n        text-align: center;\n        width: 100%;\n        margin: 0;\n      }\n\n      // Tile\n      .tile {\n        @include pds-text-small;\n        color: $pds-theme-dark-primary;\n        background: $pds-theme-dark-background-base;\n        padding: $pds-spacing-fluid-medium;\n      }\n\n      // Border Radius\n      .border-radius-small {\n        border-radius: $pds-border-radius-small;\n      }\n\n      .border-radius-medium {\n        border-radius: $pds-border-radius-medium;\n      }\n\n      .border-radius-large {\n        border-radius: $pds-border-radius-large;\n      }\n\n      // Border Width\n      .border-width-base {\n        width: 100%;\n        border-bottom: $pds-border-width-base solid $pds-theme-light-primary;\n        &::before {\n          @include pds-text-x-small;\n          content: \'Base\';\n          color: $pds-theme-light-primary;\n        }\n      }\n\n      .border-width-thin {\n        width: 100%;\n        border-bottom: $pds-border-width-thin solid $pds-theme-light-primary;\n        &::before {\n          @include pds-text-x-small;\n          content: \'Thin\';\n          color: $pds-theme-light-primary;\n        }\n      }\n    `,\n  ],\n  template: `\n    <div class="wrapper">\n      <h3 class="heading">Border Radius</h3>\n      <div class="border-radius-small tile">Small</div>\n      <div class="border-radius-medium tile">Medium</div>\n      <div class="border-radius-large tile">Large</div>\n    </div>\n    <div class="wrapper">\n      <h3 class="heading">Border Width</h3>\n      <div class="border-width-base"></div>\n      <div class="border-width-thin"></div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesBorderExampleComponent {}',react:"import styled from 'styled-components';\nimport {\n  borderRadiusLarge,\n  borderRadiusMedium,\n  borderRadiusSmall,\n  borderWidthBase,\n  borderWidthThin,\n  gridGap,\n  headingMediumStyle,\n  spacingFluidMedium,\n  textSmallStyle,\n  textXSmallStyle,\n  themeDarkBackgroundBase,\n  themeDarkPrimary,\n  themeLightPrimary,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n});\n\n// Typography\nconst Heading = styled.h3({\n  ...headingMediumStyle,\n  color: themeLightPrimary,\n  textAlign: 'center',\n  width: '100%',\n  margin: 0,\n});\n\n// Tile\nconst tileBaseStyle = {\n  ...textSmallStyle,\n  color: themeDarkPrimary,\n  background: themeDarkBackgroundBase,\n  padding: spacingFluidMedium,\n};\n\n// Border Radius\nconst BorderRadiusSmall = styled.div({\n  ...tileBaseStyle,\n  borderRadius: borderRadiusSmall,\n});\n\nconst BorderRadiusMedium = styled.div({\n  ...tileBaseStyle,\n  borderRadius: borderRadiusMedium,\n});\n\nconst BorderRadiusLarge = styled.div({\n  ...tileBaseStyle,\n  borderRadius: borderRadiusLarge,\n});\n\n// Border Width\nconst BorderWidthBase = styled.div({\n  width: '100%',\n  borderBottom: `${borderWidthBase} solid ${themeLightPrimary}`,\n  '&::before': {\n    ...textXSmallStyle,\n    content: '\"Base\"',\n    color: themeLightPrimary,\n  },\n});\n\nconst BorderWidthThin = styled.div({\n  width: '100%',\n  borderBottom: `${borderWidthThin} solid ${themeLightPrimary}`,\n  '&::before': {\n    ...textXSmallStyle,\n    content: '\"Thin\"',\n    color: themeLightPrimary,\n  },\n});\n\nexport const StylesBorderExample = (): JSX.Element => {\n  return (\n    <>\n      <Wrapper>\n        <Heading>Border Radius</Heading>\n        <BorderRadiusSmall>Small</BorderRadiusSmall>\n        <BorderRadiusMedium>Medium</BorderRadiusMedium>\n        <BorderRadiusLarge>Large</BorderRadiusLarge>\n      </Wrapper>\n      <Wrapper>\n        <Heading>Border Width</Heading>\n        <BorderWidthBase />\n        <BorderWidthThin />\n      </Wrapper>\n    </>\n  );\n};"};return n},T=()=>{const n={angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-styles-drop-shadow-example\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n      }\n\n      // Typography\n      .heading {\n        @include pds-heading-medium;\n        color: $pds-theme-light-primary;\n        text-align: center;\n        width: 100%;\n        margin: 0;\n      }\n\n      // Tile\n      .tile {\n        @include pds-text-small;\n        color: $pds-theme-light-primary;\n        background: $pds-theme-light-background-surface;\n        padding: $pds-spacing-fluid-medium;\n        border-radius: $pds-border-radius-large;\n      }\n\n      // Drop Shadow\n      .drop-shadow-low {\n        @include pds-drop-shadow-low;\n      }\n\n      .drop-shadow-medium {\n        @include pds-drop-shadow-medium;\n      }\n\n      .drop-shadow-high {\n        @include pds-drop-shadow-high;\n      }\n    `,\n  ],\n  template: `\n    <div class="wrapper">\n      <h3 class="heading">Drop Shadow</h3>\n      <div class="drop-shadow-low tile">Low</div>\n      <div class="drop-shadow-medium tile">Medium</div>\n      <div class="drop-shadow-high tile">High</div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesDropShadowExampleComponent {}',react:"import styled from 'styled-components';\nimport {\n  borderRadiusLarge,\n  dropShadowHighStyle,\n  dropShadowLowStyle,\n  dropShadowMediumStyle,\n  gridGap,\n  headingMediumStyle,\n  spacingFluidMedium,\n  textSmallStyle,\n  themeLightBackgroundSurface,\n  themeLightPrimary,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n});\n\n// Typography\nconst Heading = styled.h3({\n  ...headingMediumStyle,\n  color: themeLightPrimary,\n  textAlign: 'center',\n  width: '100%',\n  margin: 0,\n});\n\n// Tile\nconst tileBaseStyle = {\n  ...textSmallStyle,\n  color: themeLightPrimary,\n  background: themeLightBackgroundSurface,\n  padding: spacingFluidMedium,\n  borderRadius: borderRadiusLarge,\n};\n\n// Drop Shadow\nconst DropShadowLow = styled.div({\n  ...tileBaseStyle,\n  ...dropShadowLowStyle,\n});\n\nconst DropShadowMedium = styled.div({\n  ...tileBaseStyle,\n  ...dropShadowMediumStyle,\n});\n\nconst DropShadowHigh = styled.div({\n  ...tileBaseStyle,\n  ...dropShadowHighStyle,\n});\n\nexport const StylesDropShadowExample = (): JSX.Element => {\n  return (\n    <Wrapper>\n      <Heading>Drop Shadow</Heading>\n      <DropShadowLow>Low</DropShadowLow>\n      <DropShadowMedium>Medium</DropShadowMedium>\n      <DropShadowHigh>High</DropShadowHigh>\n    </Wrapper>\n  );\n};"};return n},k=()=>{const n={angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-styles-focus-example\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        align-items: flex-start;\n        gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n\n        &--light {\n          background: $pds-theme-light-background-base;\n          color: $pds-theme-light-primary;\n        }\n\n        &--dark {\n          background: $pds-theme-dark-background-base;\n          color: $pds-theme-dark-primary;\n        }\n      }\n\n      // Typography\n      .heading {\n        @include pds-heading-medium;\n        text-align: center;\n        width: 100%;\n        margin: 0;\n      }\n\n      // Paragraph\n      .paragraph {\n        @include pds-text-small;\n        margin: 0;\n        max-width: 15rem;\n      }\n\n      // Native Button\n      .native-button {\n        @include pds-text-small;\n        @include pds-focus;\n      }\n\n      // Native Anchor\n      .native-anchor {\n        @include pds-text-small;\n        @include pds-focus;\n        color: inherit;\n      }\n    `,\n  ],\n  template: `\n    <div class="wrapper wrapper--light">\n      <h3 class="heading">Focus Light (only visible by keyboard navigation)</h3>\n      <button class="native-button">Some Button</button>\n      <a href="#" class="native-anchor">Some Anchor</a>\n      <p class="paragraph">\n        Lorem Ipsum\n        <a href="#" class="native-anchor">is simply dummy text of the printing</a> and typesetting industry.\n      </p>\n    </div>\n    <div class="wrapper wrapper--dark">\n      <h3 class="heading">Focus Dark (only visible by keyboard navigation)</h3>\n      <button class="native-button">Some Button</button>\n      <a href="#" class="native-anchor">Some Anchor</a>\n      <p class="paragraph">\n        Lorem Ipsum <a href="#" class="native-anchor">is simply dummy text of the printing</a> and typesetting industry.\n      </p>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesFocusExampleComponent {}',react:"import styled from 'styled-components';\nimport {\n  getFocusStyle,\n  gridGap,\n  headingMediumStyle,\n  spacingFluidMedium,\n  textSmallStyle,\n  themeDarkBackgroundBase,\n  themeDarkPrimary,\n  themeLightBackgroundBase,\n  themeLightPrimary,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  alignItems: 'flex-start',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n});\n\nconst WrapperLight = styled(Wrapper)({\n  background: themeLightBackgroundBase,\n  color: themeLightPrimary,\n});\n\nconst WrapperDark = styled(Wrapper)({\n  background: themeDarkBackgroundBase,\n  color: themeDarkPrimary,\n});\n\n// Typography\nconst Heading = styled.h3({\n  ...headingMediumStyle,\n  textAlign: 'center',\n  width: '100%',\n  margin: 0,\n});\n\nconst Paragraph = styled.p({\n  ...textSmallStyle,\n  margin: 0,\n  maxWidth: '15rem',\n});\n\n// Button\nconst NativeButton = styled.button({\n  ...textSmallStyle,\n  ...getFocusStyle(),\n});\n\n// Anchor\nconst NativeAnchor = styled.a({\n  ...textSmallStyle,\n  ...getFocusStyle(),\n  color: 'inherit',\n});\n\nexport const StylesFocusExample = (): JSX.Element => {\n  return (\n    <>\n      <WrapperLight>\n        <Heading>Focus Light (only visible by keyboard navigation)</Heading>\n        <NativeButton>Some Button</NativeButton>\n        <NativeAnchor href=\"#\">Some Anchor</NativeAnchor>\n        <Paragraph>\n          Lorem Ipsum <NativeAnchor href=\"#\">is simply dummy text of the printing</NativeAnchor> and typesetting\n          industry.\n        </Paragraph>\n      </WrapperLight>\n      <WrapperDark>\n        <Heading>Focus Dark (only visible by keyboard navigation)</Heading>\n        <NativeButton>Some Button</NativeButton>\n        <NativeAnchor href=\"#\">Some Anchor</NativeAnchor>\n        <Paragraph>\n          Lorem Ipsum <NativeAnchor href=\"#\">is simply dummy text of the printing</NativeAnchor> and typesetting\n          industry.\n        </Paragraph>\n      </WrapperDark>\n    </>\n  );\n};"};return n},C=()=>{const n={angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'page-styles-frosted-glass-example',\n  styles: [\n    `\n      @use '@porsche-design-system/components-angular/styles' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        justify-content: center;\n        padding: $pds-spacing-fluid-medium;\n        background: radial-gradient(circle, rgba(238, 174, 202, 1) 0%, rgba(148, 187, 233, 1) 100%);\n      }\n\n      // Frosted Glass\n      .frosted-glass {\n        @include pds-text-small;\n        @include pds-frosted-glass;\n        color: $pds-theme-dark-primary;\n        background: $pds-theme-light-state-hover;\n        border-radius: $pds-border-radius-large;\n        padding: $pds-spacing-fluid-medium;\n      }\n    `,\n  ],\n  template: `\n    <div class=\"wrapper\">\n      <div class=\"frosted-glass\">Frosted Glass</div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesFrostedGlassExampleComponent {}",react:"import styled from 'styled-components';\nimport {\n  borderRadiusLarge,\n  frostedGlassStyle,\n  spacingFluidMedium,\n  textSmallStyle,\n  themeDarkPrimary,\n  themeLightStateHover,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  justifyContent: 'center',\n  padding: spacingFluidMedium,\n  background: 'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%)',\n});\n\n// Frosted Glass\nconst FrostedGlass = styled.div({\n  ...textSmallStyle,\n  ...frostedGlassStyle,\n  color: themeDarkPrimary,\n  background: themeLightStateHover,\n  borderRadius: borderRadiusLarge,\n  padding: spacingFluidMedium,\n});\n\nexport const StylesFrostedGlassExample = (): JSX.Element => {\n  return (\n    <Wrapper>\n      <FrostedGlass>Frosted Glass</FrostedGlass>\n    </Wrapper>\n  );\n};"};return n},P=()=>{const n={angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-styles-gradient-example\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        grid-gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n        background: radial-gradient(circle, rgba(238, 174, 202, 1) 0%, rgba(148, 187, 233, 1) 100%);\n      }\n\n      // Tile\n      .tile {\n        @include pds-text-small;\n        color: $pds-theme-dark-primary;\n        border-radius: $pds-border-radius-large;\n        padding: $pds-spacing-fluid-medium;\n      }\n\n      // Gradient\n      .gradient-to-top {\n        @include pds-gradient-to-top;\n      }\n\n      .gradient-to-bottom {\n        @include pds-gradient-to-bottom;\n      }\n\n      .gradient-to-left {\n        @include pds-gradient-to-left;\n      }\n\n      .gradient-to-right {\n        @include pds-gradient-to-right;\n      }\n    `,\n  ],\n  template: `\n    <div class="wrapper">\n      <div class="gradient-to-top tile">Gradient To Top</div>\n      <div class="gradient-to-bottom tile">Gradient To Bottom</div>\n      <div class="gradient-to-left tile">Gradient To Left</div>\n      <div class="gradient-to-right tile">Gradient To Right</div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesGradientExampleComponent {}',react:"import styled from 'styled-components';\nimport {\n  borderRadiusLarge,\n  gradientToBottomStyle,\n  gradientToLeftStyle,\n  gradientToRightStyle,\n  gradientToTopStyle,\n  gridGap,\n  spacingFluidMedium,\n  textSmallStyle,\n  themeDarkPrimary,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n  background: 'radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%)',\n});\n\n// Tile\nconst tileBaseStyle = {\n  ...textSmallStyle,\n  color: themeDarkPrimary,\n  borderRadius: borderRadiusLarge,\n  padding: spacingFluidMedium,\n};\n\n// Gradient\nconst GradientToTop = styled.div({\n  ...tileBaseStyle,\n  ...gradientToTopStyle,\n});\n\nconst GradientToBottom = styled.div({\n  ...tileBaseStyle,\n  ...gradientToBottomStyle,\n});\n\nconst GradientToLeft = styled.div({\n  ...tileBaseStyle,\n  ...gradientToLeftStyle,\n});\n\nconst GradientToRight = styled.div({\n  ...tileBaseStyle,\n  ...gradientToRightStyle,\n});\n\nexport const StylesGradientExample = (): JSX.Element => {\n  return (\n    <Wrapper>\n      <GradientToTop>Gradient To Top</GradientToTop>\n      <GradientToBottom>Gradient To Bottom</GradientToBottom>\n      <GradientToLeft>Gradient To Left</GradientToLeft>\n      <GradientToRight>Gradient To Right</GradientToRight>\n    </Wrapper>\n  );\n};"};return n},L=()=>{const n={angular:'import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\nimport type { AccordionUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'grid-layout\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Visualize Grid\n      .visualize-grid {\n        @include pds-grid;\n        position: fixed;\n        inset: 0;\n        pointer-events: none;\n\n        > span {\n          background: rgba(0, 0, 255, 0.1);\n          &:first-child,\n          &:last-child {\n            background: rgba(125, 0, 255, 0.1);\n          }\n\n          @include pds-media-query-max(\'s\') {\n            &:nth-child(8) {\n              background: rgba(125, 0, 255, 0.1);\n            }\n            &:nth-child(n + 9) {\n              display: none;\n            }\n          }\n        }\n      }\n\n      // Tile\n      @mixin tile($color, $padding: \'medium\', $border-radius: true) {\n        $color-map: (\n          \'blue\': rgba(0, 0, 255, 0.25),\n          \'green\': rgba(0, 255, 0, 0.25),\n          \'purple\': rgba(255, 0, 255, 0.25),\n          \'yellow\': rgba(255, 255, 0, 0.25),\n          \'orange\': rgba(255, 125, 0, 0.25),\n        );\n        @if $padding == \'medium\' {\n          padding: $pds-spacing-fluid-medium;\n        } @else if $padding == \'small\' {\n          padding: $pds-spacing-fluid-small;\n        } @else {\n          padding: 0;\n        }\n        @if $border-radius == true {\n          border-radius: $pds-border-radius-large;\n        }\n        background: map-get($color-map, $color);\n      }\n\n      // Typography\n      .info {\n        @include pds-text-x-small;\n        display: inline-block;\n        vertical-align: top;\n        color: $pds-theme-light-primary;\n        border-radius: $pds-border-radius-small;\n        margin-bottom: $pds-spacing-fluid-small;\n        padding: $pds-spacing-static-x-small $pds-spacing-static-small;\n        background: $pds-theme-light-state-hover;\n\n        .hero-media &,\n        .teaser-media &,\n        .narrow-content & {\n          margin-left: $pds-spacing-static-small;\n          margin-top: $pds-spacing-static-small;\n        }\n      }\n\n      .display {\n        @include pds-display-large;\n        color: $pds-theme-light-primary;\n        margin: 0;\n      }\n\n      .heading {\n        @include pds-heading-large;\n        color: $pds-theme-light-primary;\n        margin: 0;\n      }\n\n      .heading-x-large {\n        @include pds-heading-x-large;\n        color: $pds-theme-light-primary;\n        margin: 0;\n      }\n\n      .text {\n        @include pds-text-small;\n        color: $pds-theme-light-primary;\n        margin: $pds-spacing-fluid-x-small 0 0;\n      }\n\n      .text-large {\n        @include pds-text-large;\n        color: $pds-theme-light-primary;\n        margin: $pds-spacing-fluid-x-small 0 0;\n      }\n\n      p-button {\n        margin-top: $pds-spacing-fluid-medium;\n      }\n\n      // Hero\n      .hero-grid {\n        @include pds-grid;\n        align-items: end;\n      }\n\n      .hero-media {\n        @include tile(\'blue\', false, false);\n        grid-column: $pds-grid-full-column-start / $pds-grid-full-column-end;\n        grid-row: 1;\n        height: clamp(300px, 50vh, 500px);\n      }\n\n      .hero-header {\n        @include tile(\'green\', false, false);\n        grid-column: $pds-grid-wide-column-start / $pds-grid-wide-column-end;\n        grid-row: 1;\n        padding-bottom: $pds-spacing-fluid-medium;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n      }\n\n      // Wide Content\n      .wide-grid {\n        @include pds-grid;\n        margin-top: $pds-spacing-fluid-large;\n      }\n\n      .wide-sidebar {\n        @include tile(\'orange\');\n        grid-column: $pds-grid-wide-column-start / $pds-grid-wide-column-end;\n\n        @include pds-media-query-min(\'s\') {\n          grid-column: $pds-grid-wide-column-start / span 5;\n        }\n      }\n\n      .wide-content {\n        @include tile(\'orange\');\n        grid-column: $pds-grid-wide-column-start / $pds-grid-wide-column-end;\n\n        @include pds-media-query-min(\'s\') {\n          grid-column: span 11 / $pds-grid-wide-column-end;\n        }\n      }\n\n      // Extended Content\n      .extended-content-grid {\n        @include pds-grid;\n        margin-top: $pds-spacing-fluid-large;\n      }\n\n      .extended-content-half-left {\n        @include tile(\'green\');\n        grid-column: $pds-grid-extended-column-start / $pds-grid-extended-span-one-half;\n      }\n\n      .extended-content-half-right {\n        @include tile(\'green\');\n        grid-column: $pds-grid-extended-span-one-half / $pds-grid-extended-column-end;\n      }\n\n      // Masonry\n      .masonry-grid {\n        @include pds-grid;\n        margin-top: $pds-grid-gap;\n      }\n\n      .masonry-custom-1 {\n        @include tile(\'green\');\n        grid-column: $pds-grid-extended-column-start / $pds-grid-extended-column-end;\n        @include pds-media-query-min(\'s\') {\n          grid-column: $pds-grid-extended-column-start / span 8;\n          grid-row: span 2;\n        }\n      }\n\n      .masonry-custom-2 {\n        @include tile(\'green\');\n        grid-column: $pds-grid-extended-column-start / $pds-grid-extended-span-one-half;\n        @include pds-media-query-min(\'s\') {\n          grid-column: span 6 / $pds-grid-extended-span-one-half;\n        }\n      }\n\n      .masonry-custom-3 {\n        @include tile(\'green\');\n        grid-column: $pds-grid-extended-span-one-half / $pds-grid-extended-column-end;\n        @include pds-media-query-min(\'s\') {\n          grid-column: span 5 / $pds-grid-extended-span-one-half;\n        }\n      }\n\n      // Teaser\n      .teaser-grid {\n        @include pds-grid;\n        margin-top: $pds-spacing-fluid-large;\n      }\n\n      .teaser-media {\n        @include tile(\'blue\', false, false);\n        grid-column: $pds-grid-full-column-start / $pds-grid-full-column-end;\n        grid-row: 1;\n      }\n\n      .teaser-content {\n        @include tile(\'purple\', false, false);\n        grid-column: $pds-grid-basic-column-start / $pds-grid-basic-column-end;\n        grid-row: 1;\n        margin: $pds-spacing-fluid-large 0;\n      }\n\n      // Basic Content\n      .basic-content-grid {\n        @include pds-grid;\n        margin-top: $pds-spacing-fluid-large;\n      }\n\n      .basic-content {\n        @include tile(\'purple\');\n        grid-column: $pds-grid-basic-column-start / $pds-grid-basic-column-end;\n      }\n\n      .basic-content-half-left {\n        @include tile(\'purple\');\n        grid-column: $pds-grid-basic-column-start / $pds-grid-basic-span-one-half;\n      }\n\n      .basic-content-half-right {\n        @include tile(\'purple\');\n        grid-column: $pds-grid-basic-span-one-half / $pds-grid-basic-column-end;\n      }\n\n      .basic-content-one-third-left {\n        @include tile(\'purple\');\n        grid-column: $pds-grid-basic-column-start / $pds-grid-basic-column-end;\n        @include pds-media-query-min(\'s\') {\n          grid-column: $pds-grid-basic-column-start / $pds-grid-basic-span-one-third;\n        }\n      }\n\n      .basic-content-one-third-follow {\n        @include tile(\'purple\');\n        grid-column: $pds-grid-basic-column-start / $pds-grid-basic-column-end;\n        @include pds-media-query-min(\'s\') {\n          grid-column: $pds-grid-basic-span-one-third;\n        }\n      }\n\n      .basic-content-one-third-right {\n        @include tile(\'purple\');\n        grid-column: $pds-grid-basic-column-start / $pds-grid-basic-column-end;\n        @include pds-media-query-min(\'s\') {\n          grid-column: $pds-grid-basic-span-one-third / $pds-grid-basic-column-end;\n        }\n      }\n\n      .basic-content-two-thirds-left {\n        @include tile(\'purple\');\n        grid-column: $pds-grid-basic-column-start / $pds-grid-basic-column-end;\n        @include pds-media-query-min(\'s\') {\n          grid-column: $pds-grid-basic-column-start / $pds-grid-basic-span-two-thirds;\n        }\n      }\n\n      .basic-content-custom-left {\n        @include tile(\'purple\');\n        grid-column: $pds-grid-basic-column-start / $pds-grid-basic-column-end;\n        @include pds-media-query-min(\'s\') {\n          grid-column: $pds-grid-basic-column-start / span 5;\n        }\n      }\n\n      .basic-content-custom-right {\n        @include tile(\'purple\');\n        grid-column: span 6 / $pds-grid-basic-column-end;\n      }\n\n      // Narrow Content\n      .narrow-content-grid {\n        @include pds-grid;\n        margin-top: $pds-spacing-fluid-large;\n      }\n\n      .narrow-content {\n        @include tile(\'yellow\', false);\n        grid-column: $pds-grid-narrow-column-start / $pds-grid-narrow-column-end;\n      }\n\n      .narrow-content-half-left {\n        @include tile(\'yellow\', \'small\');\n        grid-column: $pds-grid-narrow-column-start / $pds-grid-narrow-span-one-half;\n      }\n\n      .narrow-content-half-right {\n        @include tile(\'yellow\', \'small\');\n        grid-column: $pds-grid-narrow-span-one-half / $pds-grid-narrow-column-end;\n      }\n    `,\n  ],\n  template: `\n    <div class="visualize-grid" *ngIf="visualizeGrid">\n      <span *ngFor="let n of counter(18)" class="visualize-grid-columns"></span>\n    </div>\n    <div class="hero-grid">\n      <div class="hero-media">\n        <span class="info"><b>Full</b> for Background and Media</span>\n      </div>\n      <div class="hero-header">\n        <h1 class="display">Hero Heading</h1>\n        <p class="text-large">Subline for the Hero Header in Wide Grid</p>\n      </div>\n    </div>\n    <div class="wide-grid">\n      <div class="wide-sidebar">\n        <span class="info"><b>Wide Sidebar</b></span>\n        <p-accordion heading="Some Heading" tag="h3"></p-accordion>\n        <p-accordion heading="Some Heading" tag="h3"></p-accordion>\n        <p-accordion heading="Some Heading" tag="h3"></p-accordion>\n      </div>\n      <div class="wide-content">\n        <span class="info"><b>Wide Content</b></span>\n      </div>\n    </div>\n    <div class="extended-content-grid">\n      <div class="extended-content-half-left">\n        <span class="info"><b>Extended Half</b> for Large Teaser Backgrounds, Media, Image Grids</span>\n      </div>\n      <div class="extended-content-half-right">\n        <span class="info"><b>Extended Half</b> for Large Teaser Backgrounds, Media, Image Grids</span>\n      </div>\n    </div>\n    <div class="masonry-grid">\n      <div class="masonry-custom-1">\n        <span class="info"><b>Custom (column desktop: 2-9)</b> for Image Grids</span>\n      </div>\n      <div class="masonry-custom-2">\n        <span class="info"><b>Custom (column desktop: 10-15)</b> for Image Grids</span>\n      </div>\n      <div class="masonry-custom-3">\n        <span class="info"><b>Custom (column desktop: 10-14)</b> for Image Grids</span>\n      </div>\n    </div>\n    <div class="teaser-grid">\n      <div class="teaser-media">\n        <span class="info"><b>Full</b> for Teaser Backgrounds and Media (Former Basic)</span>\n      </div>\n      <div class="teaser-content">\n        <span class="info"><b>Basic</b> for Content in Teaser</span>\n        <h2 class="heading-x-large">Heading in Teaser</h2>\n        <p class="text">Subline or Copy Text in Large Teaser</p>\n        <p-button variant="secondary">Some label</p-button>\n      </div>\n    </div>\n    <div class="basic-content-grid">\n      <div class="basic-content">\n        <span class="info"><b>Basic</b> for Content Tiles</span>\n        <h3 class="heading">Heading in Tile</h3>\n        <p-button variant="secondary">Some label</p-button>\n      </div>\n      <div class="basic-content-half-left">\n        <span class="info"><b>Basic Half</b> for Content Tiles</span>\n        <h3 class="heading">Heading in Tile</h3>\n        <p-button variant="secondary">Some label</p-button>\n      </div>\n      <div class="basic-content-half-right">\n        <span class="info"><b>Basic Half</b> for Content Tiles</span>\n        <h3 class="heading">Heading in Tile</h3>\n        <p-button variant="secondary">Some label</p-button>\n      </div>\n      <div class="basic-content-one-third-left">\n        <span class="info"><b>Basic Third</b> for Content Tiles</span>\n        <h3 class="heading">Heading in Tile</h3>\n        <p-button variant="secondary">Some label</p-button>\n      </div>\n      <div class="basic-content-one-third-follow">\n        <span class="info"><b>Basic Third</b> for Content Tiles</span>\n        <h3 class="heading">Heading in Tile</h3>\n        <p-button variant="secondary">Some label</p-button>\n      </div>\n      <div class="basic-content-one-third-follow">\n        <span class="info"><b>Basic Third</b> for Content Tiles</span>\n        <h3 class="heading">Heading in Tile</h3>\n        <p-button variant="secondary">Some label</p-button>\n      </div>\n      <div class="basic-content-two-thirds-left">\n        <span class="info kbBcQV"><b>Basic Two Thirds</b> for Content Tiles</span>\n      </div>\n      <div class="basic-content-one-third-right">\n        <span class="info"><b>Basic One Third</b> for Content Tiles</span>\n      </div>\n      <div class="basic-content-custom-left">\n        <span class="info"><b>Custom (desktop: column 3-7)</b> for Content</span>\n      </div>\n      <div class="basic-content-custom-right">\n        <span class="info"><b>Custom (desktop: column 9-14)</b> for Content</span>\n      </div>\n    </div>\n    <div class="narrow-content-grid">\n      <div class="narrow-content">\n        <span class="info"><b>Narrow</b> for small Components and Content</span>\n        <p-accordion heading="Some Heading" tag="h3" [open]="isAccordion1Open" (update)="onAccordion1Update($event)"\n          ><p class="text">\n            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Donec quam\n            felis, ultricies nec, pellentesque eu. Aenean massa.\n          </p></p-accordion\n        >\n        <p-accordion heading="Some Heading" tag="h3" [open]="isAccordion2Open" (update)="onAccordion2Update($event)"\n          ><p class="text">\n            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Donec quam\n            felis, ultricies nec, pellentesque eu. Aenean massa.\n          </p></p-accordion\n        >\n      </div>\n      <div class="narrow-content-half-left">\n        <span class="info"><b>Narrow</b> Half for small Content Tiles</span>\n        <h3 class="heading">Experience</h3>\n        <p class="text">\n          Goosebumps, adrenaline: experience the fascination of sports cars - with all different facets and according to\n          your wishes.\n        </p>\n      </div>\n      <div class="narrow-content-half-right">\n        <span class="info"><b>Narrow</b> Half for small Content Tiles</span>\n        <h3 class="heading">Experience</h3>\n        <p class="text">\n          Goosebumps, adrenaline: experience the fascination of sports cars - with all different facets and according to\n          your wishes.\n        </p>\n      </div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GridLayoutComponent {\n  counter(i: number) {\n    return new Array(i);\n  }\n  @Input() visualizeGrid = true;\n  isAccordion1Open = false;\n  isAccordion2Open = false;\n\n  onAccordion1Update(e: CustomEvent<AccordionUpdateEventDetail>) {\n    this.isAccordion1Open = e.detail.open;\n  }\n  onAccordion2Update(e: CustomEvent<AccordionUpdateEventDetail>) {\n    this.isAccordion2Open = e.detail.open;\n  }\n}',react:"import { type AccordionUpdateEventDetail, PAccordion, PButton } from '@porsche-design-system/components-react';\nimport styled from 'styled-components';\nimport {\n  borderRadiusLarge,\n  borderRadiusSmall,\n  displayLargeStyle,\n  getMediaQueryMax,\n  getMediaQueryMin,\n  gridBasicColumnEnd,\n  gridBasicColumnStart,\n  gridBasicSpanOneHalf,\n  gridBasicSpanOneThird,\n  gridBasicSpanTwoThirds,\n  gridExtendedColumnEnd,\n  gridExtendedColumnStart,\n  gridExtendedSpanOneHalf,\n  gridFullColumnEnd,\n  gridFullColumnStart,\n  gridGap,\n  gridNarrowColumnEnd,\n  gridNarrowColumnStart,\n  gridNarrowSpanOneHalf,\n  gridStyle,\n  gridWideColumnEnd,\n  gridWideColumnStart,\n  headingLargeStyle,\n  headingXLargeStyle,\n  spacingFluidLarge,\n  spacingFluidMedium,\n  spacingFluidSmall,\n  spacingFluidXSmall,\n  spacingStaticSmall,\n  spacingStaticXSmall,\n  textLargeStyle,\n  textSmallStyle,\n  textXSmallStyle,\n  themeLightPrimary,\n  themeLightStateHover,\n} from '@porsche-design-system/components-react/styles';\nimport { useCallback, useState } from 'react';\n\n// VisualizeGrid\nconst VisualizeGrid = styled.div({\n  ...gridStyle,\n  position: 'fixed',\n  inset: 0,\n  pointerEvents: 'none',\n});\n\nconst VisualizeGridColumns = styled.span({\n  background: 'rgba(0, 0, 255, 0.1)',\n  '&:first-child,&:last-child': {\n    background: 'rgba(125, 0, 255, 0.1)',\n  },\n  [getMediaQueryMax('s')]: {\n    '&:nth-child(8)': {\n      background: 'rgba(125, 0, 255, 0.1)',\n    },\n    '&:nth-child(n+9)': {\n      display: 'none',\n    },\n  },\n});\n\n// Tile\ntype Color = 'blue' | 'green' | 'purple' | 'yellow' | 'orange';\nconst getTileStyle = (color: Color, padding: 'medium' | 'small' | false = 'medium', borderRadius: boolean = true) => {\n  const opacity = 0.25;\n  const colorMap: { [key in Color]: string } = {\n    blue: `rgba(0, 0, 255, ${opacity})`,\n    green: `rgba(0, 255, 0, ${opacity})`,\n    purple: `rgba(255, 0, 255, ${opacity})`,\n    yellow: `rgba(255, 255, 0, ${opacity})`,\n    orange: `rgba(255, 125, 0, ${opacity})`,\n  };\n  return {\n    padding: padding === 'medium' ? spacingFluidMedium : padding === 'small' ? spacingFluidSmall : 0,\n    borderRadius: borderRadius ? borderRadiusLarge : 0,\n    background: colorMap[color],\n  } as const;\n};\n\n// Typography\nconst Info = styled.span({\n  ...textXSmallStyle,\n  display: 'inline-block',\n  verticalAlign: 'top',\n  color: themeLightPrimary,\n  borderRadius: borderRadiusSmall,\n  marginBottom: spacingFluidSmall,\n  padding: `${spacingStaticXSmall} ${spacingStaticSmall}`,\n  background: themeLightStateHover,\n});\n\nconst Display = styled.h1({\n  ...displayLargeStyle,\n  color: themeLightPrimary,\n  margin: 0,\n});\n\nconst Heading = styled.h3({\n  ...headingLargeStyle,\n  color: themeLightPrimary,\n  margin: 0,\n});\n\nconst HeadingXLarge = styled.h2({\n  ...headingXLargeStyle,\n  color: themeLightPrimary,\n  margin: 0,\n});\n\nconst Text = styled.p({\n  ...textSmallStyle,\n  color: themeLightPrimary,\n  margin: `${spacingFluidXSmall} 0 0`,\n});\n\nconst TextLarge = styled.p({\n  ...textLargeStyle,\n  color: themeLightPrimary,\n  margin: `${spacingFluidXSmall} 0 0`,\n});\n\n// Hero\nconst HeroGrid = styled.div({\n  ...gridStyle,\n  alignItems: 'end',\n});\n\nconst HeroMedia = styled.div({\n  ...getTileStyle('blue', false, false),\n  gridColumn: `${gridFullColumnStart} / ${gridFullColumnEnd}`,\n  gridRow: 1,\n  height: 'clamp(300px, 50vh, 500px)',\n});\n\nconst HeroHeader = styled.div({\n  ...getTileStyle('green', false, false),\n  gridColumn: `${gridWideColumnStart} / ${gridWideColumnEnd}`,\n  gridRow: 1,\n  paddingBottom: spacingFluidMedium,\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'flex-end',\n});\n\n// Wide Content\nconst WideGrid = styled.div({\n  ...gridStyle,\n  marginTop: spacingFluidLarge,\n});\n\nconst WideSidebar = styled.div({\n  ...getTileStyle('orange'),\n  gridColumn: `${gridWideColumnStart} / ${gridWideColumnEnd}`,\n  [getMediaQueryMin('s')]: {\n    gridColumn: `${gridWideColumnStart} / span 5`,\n  },\n});\n\nconst WideContent = styled.div({\n  ...getTileStyle('orange'),\n  gridColumn: `${gridWideColumnStart} / ${gridWideColumnEnd}`,\n  [getMediaQueryMin('s')]: {\n    gridColumn: `span 11 / ${gridWideColumnEnd}`,\n  },\n});\n\n// Extended Content\nconst ExtendedContentGrid = styled.div({\n  ...gridStyle,\n  marginTop: spacingFluidLarge,\n});\n\nconst ExtendedContentHalfLeft = styled.div({\n  ...getTileStyle('green'),\n  gridColumn: `${gridExtendedColumnStart} / ${gridExtendedSpanOneHalf}`,\n});\n\nconst ExtendedContentHalfRight = styled.div({\n  ...getTileStyle('green'),\n  gridColumn: `${gridExtendedSpanOneHalf} / ${gridExtendedColumnEnd}`,\n});\n\n// Masonry\nconst MasonryGrid = styled.div({\n  ...gridStyle,\n  marginTop: gridGap,\n});\n\nconst MasonryCustom1 = styled.div({\n  ...getTileStyle('green'),\n  gridColumn: `${gridExtendedColumnStart} / ${gridExtendedColumnEnd}`,\n  [getMediaQueryMin('s')]: {\n    gridColumn: `${gridExtendedColumnStart} / span 8`,\n    gridRow: 'span 2',\n  },\n});\n\nconst MasonryCustom2 = styled.div({\n  ...getTileStyle('green'),\n  gridColumn: `${gridExtendedColumnStart} / ${gridExtendedSpanOneHalf}`,\n  [getMediaQueryMin('s')]: {\n    gridColumn: `span 6 / ${gridExtendedColumnEnd}`,\n  },\n});\n\nconst MasonryCustom3 = styled.div({\n  ...getTileStyle('green'),\n  gridColumn: `${gridExtendedSpanOneHalf} / ${gridExtendedColumnEnd}`,\n  [getMediaQueryMin('s')]: {\n    gridColumn: `span 5 / ${gridBasicColumnEnd}`,\n  },\n});\n\n// Teaser\nconst TeaserGrid = styled.div({\n  ...gridStyle,\n  marginTop: spacingFluidLarge,\n});\n\nconst TeaserMedia = styled.div({\n  ...getTileStyle('blue', false, false),\n  gridColumn: `${gridFullColumnStart} / ${gridFullColumnEnd}`,\n  gridRow: 1,\n});\n\nconst TeaserContent = styled.div({\n  ...getTileStyle('purple', false, false),\n  gridColumn: `${gridBasicColumnStart} / ${gridBasicColumnEnd}`,\n  gridRow: 1,\n  margin: `${spacingFluidLarge} 0`,\n});\n\n// Basic Content\nconst BasicContentGrid = styled.div({\n  ...gridStyle,\n  marginTop: spacingFluidLarge,\n});\n\nconst BasicContent = styled.div({\n  ...getTileStyle('purple'),\n  gridColumn: `${gridBasicColumnStart} / ${gridBasicColumnEnd}`,\n});\n\nconst BasicContentHalfLeft = styled.div({\n  ...getTileStyle('purple'),\n  gridColumn: `${gridBasicColumnStart} / ${gridBasicSpanOneHalf}`,\n});\n\nconst BasicContentHalfRight = styled.div({\n  ...getTileStyle('purple'),\n  gridColumn: `${gridBasicSpanOneHalf} / ${gridBasicColumnEnd}`,\n});\n\nconst BasicContentOneThirdLeft = styled.div({\n  ...getTileStyle('purple'),\n  gridColumn: `${gridBasicColumnStart} / ${gridBasicColumnEnd}`,\n  [getMediaQueryMin('s')]: {\n    gridColumn: `${gridBasicColumnStart} / ${gridBasicSpanOneThird}`,\n  },\n});\n\nconst BasicContentOneThirdFollow = styled.div({\n  ...getTileStyle('purple'),\n  gridColumn: `${gridBasicColumnStart} / ${gridBasicColumnEnd}`,\n  [getMediaQueryMin('s')]: {\n    gridColumn: `${gridBasicSpanOneThird}`,\n  },\n});\n\nconst BasicContentOneThirdRight = styled.div({\n  ...getTileStyle('purple'),\n  gridColumn: `${gridBasicColumnStart} / ${gridBasicColumnEnd}`,\n  [getMediaQueryMin('s')]: {\n    gridColumn: `${gridBasicSpanOneThird} / ${gridBasicColumnEnd}`,\n  },\n});\n\nconst BasicContentTwoThirdsLeft = styled.div({\n  ...getTileStyle('purple'),\n  gridColumn: `${gridBasicColumnStart} / ${gridBasicColumnEnd}`,\n  [getMediaQueryMin('s')]: {\n    gridColumn: `${gridBasicColumnStart} / ${gridBasicSpanTwoThirds}`,\n  },\n});\n\nconst BasicContentCustomLeft = styled.div({\n  ...getTileStyle('purple'),\n  gridColumn: `${gridBasicColumnStart} / ${gridBasicColumnEnd}`,\n  [getMediaQueryMin('s')]: {\n    gridColumn: `${gridBasicColumnStart} / span 5`,\n  },\n});\n\nconst BasicContentCustomRight = styled.div({\n  ...getTileStyle('purple'),\n  gridColumn: `span 6 / ${gridBasicColumnEnd}`,\n});\n\n// Narrow Content\nconst NarrowContentGrid = styled.div({\n  ...gridStyle,\n  marginTop: spacingFluidLarge,\n});\n\nconst NarrowContent = styled.div({\n  ...getTileStyle('yellow', false),\n  gridColumn: `${gridNarrowColumnStart} / ${gridNarrowColumnEnd}`,\n});\n\nconst NarrowContentHalfLeft = styled.div({\n  ...getTileStyle('yellow', 'small'),\n  gridColumn: `${gridNarrowColumnStart} / ${gridNarrowSpanOneHalf}`,\n});\n\nconst NarrowContentHalfRight = styled.div({\n  ...getTileStyle('yellow', 'small'),\n  gridColumn: `${gridNarrowSpanOneHalf} / ${gridNarrowColumnEnd}`,\n});\n\ntype Props = {\n  visualizeGrid: boolean;\n};\nexport const GridLayout = ({ visualizeGrid = true }: Props): JSX.Element => {\n  const [isAccordion1Open, setIsAccordion1Open] = useState<boolean>(false);\n  const [isAccordion2Open, setIsAccordion2Open] = useState<boolean>(false);\n\n  const onAccordion1Update = useCallback((e: CustomEvent<AccordionUpdateEventDetail>) => {\n    setIsAccordion1Open(e.detail.open);\n  }, []);\n  const onAccordion2Update = useCallback((e: CustomEvent<AccordionUpdateEventDetail>) => {\n    setIsAccordion2Open(e.detail.open);\n  }, []);\n\n  return (\n    <>\n      {visualizeGrid && (\n        <VisualizeGrid>\n          {[...Array(18)].map((_, i) => (\n            <VisualizeGridColumns key={i} />\n          ))}\n        </VisualizeGrid>\n      )}\n      <HeroGrid>\n        <HeroMedia>\n          <Info style={{ marginLeft: spacingStaticSmall, marginTop: spacingStaticSmall }}>\n            <b>Full</b> for Background and Media\n          </Info>\n        </HeroMedia>\n        <HeroHeader>\n          <Display>Hero Heading</Display>\n          <TextLarge>Subline for the Hero Header in Wide Grid</TextLarge>\n        </HeroHeader>\n      </HeroGrid>\n      <WideGrid>\n        <WideSidebar>\n          <Info>\n            <b>Wide Sidebar</b>\n          </Info>\n          <PAccordion heading=\"Some Heading\" tag=\"h3\" />\n          <PAccordion heading=\"Some Heading\" tag=\"h3\" />\n          <PAccordion heading=\"Some Heading\" tag=\"h3\" />\n        </WideSidebar>\n        <WideContent>\n          <Info>\n            <b>Wide Content</b>\n          </Info>\n        </WideContent>\n      </WideGrid>\n      <ExtendedContentGrid>\n        <ExtendedContentHalfLeft>\n          <Info>\n            <b>Extended Half</b> for Large Teaser Backgrounds, Media, Image Grids\n          </Info>\n        </ExtendedContentHalfLeft>\n        <ExtendedContentHalfRight>\n          <Info>\n            <b>Extended Half</b> for Large Teaser Backgrounds, Media, Image Grids\n          </Info>\n        </ExtendedContentHalfRight>\n      </ExtendedContentGrid>\n      <MasonryGrid>\n        <MasonryCustom1>\n          <Info>\n            <b>Custom (column desktop: 2-9)</b> for Image Grids\n          </Info>\n        </MasonryCustom1>\n        <MasonryCustom2>\n          <Info>\n            <b>Custom (column desktop: 10-15)</b> for Image Grids\n          </Info>\n        </MasonryCustom2>\n        <MasonryCustom3>\n          <Info>\n            <b>Custom (column desktop: 10-14)</b> for Image Grids\n          </Info>\n        </MasonryCustom3>\n      </MasonryGrid>\n      <TeaserGrid>\n        <TeaserMedia>\n          <Info style={{ marginLeft: spacingStaticSmall, marginTop: spacingStaticSmall }}>\n            <b>Full</b> for Teaser Backgrounds and Media (Former Basic)\n          </Info>\n        </TeaserMedia>\n        <TeaserContent>\n          <Info>\n            <b>Basic</b> for Content in Teaser\n          </Info>\n          <HeadingXLarge>Heading in Teaser</HeadingXLarge>\n          <Text>Subline or Copy Text in Large Teaser</Text>\n          <PButton style={{ marginTop: spacingFluidMedium }} variant=\"secondary\">\n            Some label\n          </PButton>\n        </TeaserContent>\n      </TeaserGrid>\n      <BasicContentGrid>\n        <BasicContent>\n          <Info>\n            <b>Basic</b> for Content Tiles\n          </Info>\n          <Heading>Heading in Tile</Heading>\n          <PButton style={{ marginTop: spacingFluidMedium }} variant=\"secondary\">\n            Some label\n          </PButton>\n        </BasicContent>\n        <BasicContentHalfLeft>\n          <Info>\n            <b>Basic Half</b> for Content Tiles\n          </Info>\n          <Heading>Heading in Tile</Heading>\n          <PButton style={{ marginTop: spacingFluidMedium }} variant=\"secondary\">\n            Some label\n          </PButton>\n        </BasicContentHalfLeft>\n        <BasicContentHalfRight>\n          <Info>\n            <b>Basic Half</b> for Content Tiles\n          </Info>\n          <Heading>Heading in Tile</Heading>\n          <PButton style={{ marginTop: spacingFluidMedium }} variant=\"secondary\">\n            Some label\n          </PButton>\n        </BasicContentHalfRight>\n        <BasicContentOneThirdLeft>\n          <Info>\n            <b>Basic Third</b> for Content Tiles\n          </Info>\n          <Heading>Heading in Tile</Heading>\n          <PButton style={{ marginTop: spacingFluidMedium }} variant=\"secondary\">\n            Some label\n          </PButton>\n        </BasicContentOneThirdLeft>\n        <BasicContentOneThirdFollow>\n          <Info>\n            <b>Basic Third</b> for Content Tiles\n          </Info>\n          <Heading>Heading in Tile</Heading>\n          <PButton style={{ marginTop: spacingFluidMedium }} variant=\"secondary\">\n            Some label\n          </PButton>\n        </BasicContentOneThirdFollow>\n        <BasicContentOneThirdFollow>\n          <Info>\n            <b>Basic Third</b> for Content Tiles\n          </Info>\n          <Heading>Heading in Tile</Heading>\n          <PButton style={{ marginTop: spacingFluidMedium }} variant=\"secondary\">\n            Some label\n          </PButton>\n        </BasicContentOneThirdFollow>\n        <BasicContentTwoThirdsLeft>\n          <Info>\n            <b>Basic Two Thirds</b> for Content Tiles\n          </Info>\n        </BasicContentTwoThirdsLeft>\n        <BasicContentOneThirdRight>\n          <Info>\n            <b>Basic One Third</b> for Content Tiles\n          </Info>\n        </BasicContentOneThirdRight>\n        <BasicContentCustomLeft>\n          <Info>\n            <b>Custom (desktop: column 3-7)</b> for Content\n          </Info>\n        </BasicContentCustomLeft>\n        <BasicContentCustomRight>\n          <Info>\n            <b>Custom (desktop: column 9-14)</b> for Content\n          </Info>\n        </BasicContentCustomRight>\n      </BasicContentGrid>\n      <NarrowContentGrid>\n        <NarrowContent>\n          <Info style={{ marginLeft: spacingStaticSmall, marginTop: spacingStaticSmall }}>\n            <b>Narrow</b> for small Components and Content\n          </Info>\n          <PAccordion heading=\"Some Heading\" tag=\"h3\" open={isAccordion1Open} onUpdate={onAccordion1Update}>\n            <Text>\n              Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Donec quam\n              felis, ultricies nec, pellentesque eu. Aenean massa.\n            </Text>\n          </PAccordion>\n          <PAccordion heading=\"Some Heading\" tag=\"h3\" open={isAccordion2Open} onUpdate={onAccordion2Update}>\n            <Text>\n              Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Donec quam\n              felis, ultricies nec, pellentesque eu. Aenean massa.\n            </Text>\n          </PAccordion>\n        </NarrowContent>\n        <NarrowContentHalfLeft>\n          <Info>\n            <b>Narrow</b> Half for small Content Tiles\n          </Info>\n          <Heading>Experience</Heading>\n          <Text>\n            Goosebumps, adrenaline: experience the fascination of sports cars - with all different facets and according\n            to your wishes.\n          </Text>\n        </NarrowContentHalfLeft>\n        <NarrowContentHalfRight>\n          <Info>\n            <b>Narrow</b> Half for small Content Tiles\n          </Info>\n          <Heading>Experience</Heading>\n          <Text>\n            Goosebumps, adrenaline: experience the fascination of sports cars - with all different facets and according\n            to your wishes.\n          </Text>\n        </NarrowContentHalfRight>\n      </NarrowContentGrid>\n    </>\n  );\n};"};return n},B=()=>{const n={angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-styles-hover-example\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        align-items: flex-start;\n        gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n\n        &--light {\n          background: $pds-theme-light-background-base;\n          color: $pds-theme-light-primary;\n        }\n\n        &--dark {\n          background: $pds-theme-dark-background-base;\n          color: $pds-theme-dark-primary;\n        }\n      }\n\n      // Typography\n      .heading {\n        @include pds-heading-medium;\n        text-align: center;\n        width: 100%;\n        margin: 0;\n      }\n\n      // Paragraph\n      .paragraph {\n        @include pds-text-small;\n        margin: 0;\n        max-width: 15rem;\n      }\n\n      // Native Anchor\n      .native-anchor {\n        @include pds-text-small;\n        @include pds-hover;\n        @include pds-focus(\'none\');\n        color: inherit;\n      }\n    `,\n  ],\n  template: `\n    <div class="wrapper wrapper--light">\n      <h3 class="heading">Hover Light</h3>\n      <a href="#" class="native-anchor">Some Anchor</a>\n      <p class="paragraph">\n        Lorem Ipsum\n        <a href="#" class="native-anchor">is simply dummy text of the printing</a> and typesetting industry.\n      </p>\n    </div>\n    <div class="wrapper wrapper--dark">\n      <h3 class="heading">Hover Dark</h3>\n      <a href="#" class="native-anchor">Some Anchor</a>\n      <p class="paragraph">\n        Lorem Ipsum <a href="#" class="native-anchor">is simply dummy text of the printing</a> and typesetting industry.\n      </p>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesHoverExampleComponent {}',react:"import styled from 'styled-components';\nimport {\n  getFocusStyle,\n  getHoverStyle,\n  gridGap,\n  headingMediumStyle,\n  spacingFluidMedium,\n  textSmallStyle,\n  themeDarkBackgroundBase,\n  themeDarkPrimary,\n  themeLightBackgroundBase,\n  themeLightPrimary,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  alignItems: 'flex-start',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n});\n\nconst WrapperLight = styled(Wrapper)({\n  background: themeLightBackgroundBase,\n  color: themeLightPrimary,\n});\n\nconst WrapperDark = styled(Wrapper)({\n  background: themeDarkBackgroundBase,\n  color: themeDarkPrimary,\n});\n\n// Typography\nconst Heading = styled.h3({\n  ...headingMediumStyle,\n  textAlign: 'center',\n  width: '100%',\n  margin: 0,\n});\n\nconst Paragraph = styled.p({\n  ...textSmallStyle,\n  margin: 0,\n  maxWidth: '15rem',\n});\n\n// Anchor\nconst NativeAnchor = styled.a({\n  ...textSmallStyle,\n  ...getHoverStyle(),\n  ...getFocusStyle({ offset: 'none' }),\n  color: 'inherit',\n});\n\nexport const StylesHoverExample = (): JSX.Element => {\n  return (\n    <>\n      <WrapperLight>\n        <Heading>Hover Light</Heading>\n        <NativeAnchor href=\"#\">Some Anchor</NativeAnchor>\n        <Paragraph>\n          Lorem Ipsum <NativeAnchor href=\"#\">is simply dummy text of the printing</NativeAnchor> and typesetting\n          industry.\n        </Paragraph>\n      </WrapperLight>\n      <WrapperDark>\n        <Heading>Hover Dark</Heading>\n        <NativeAnchor href=\"#\">Some Anchor</NativeAnchor>\n        <Paragraph>\n          Lorem Ipsum <NativeAnchor href=\"#\">is simply dummy text of the printing</NativeAnchor> and typesetting\n          industry.\n        </Paragraph>\n      </WrapperDark>\n    </>\n  );\n};"};return n},w=()=>{const n={angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'page-styles-media-query-example',\n  styles: [\n    `\n      @use '@porsche-design-system/components-angular/styles' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        flex-direction: column;\n        gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n      }\n\n      // Typography\n      .heading {\n        @include pds-heading-medium;\n        color: $pds-theme-light-primary;\n        margin: 0;\n      }\n\n      .text {\n        @include pds-text-small;\n        color: $pds-theme-light-primary;\n        margin: 0;\n      }\n\n      // MediaQueryMin\n      .media-query-min {\n        @include pds-media-query-min('base') {\n          &::after {\n            content: ' Base';\n          }\n        }\n        @include pds-media-query-min('xs') {\n          &::after {\n            content: ' XS';\n          }\n        }\n        @include pds-media-query-min('s') {\n          &::after {\n            content: ' S';\n          }\n        }\n        @include pds-media-query-min('m') {\n          &::after {\n            content: ' M';\n          }\n        }\n        @include pds-media-query-min('l') {\n          &::after {\n            content: ' L';\n          }\n        }\n        @include pds-media-query-min('xl') {\n          &::after {\n            content: ' XL';\n          }\n        }\n        @include pds-media-query-min('xxl') {\n          &::after {\n            content: ' XXL';\n          }\n        }\n      }\n\n      .media-query-max {\n        @include pds-media-query-max('xxl') {\n          &::after {\n            content: ' XXL';\n          }\n        }\n        @include pds-media-query-max('xl') {\n          &::after {\n            content: ' XL';\n          }\n        }\n        @include pds-media-query-max('l') {\n          &::after {\n            content: ' L';\n          }\n        }\n        @include pds-media-query-max('m') {\n          &::after {\n            content: ' M';\n          }\n        }\n        @include pds-media-query-max('s') {\n          &::after {\n            content: ' S';\n          }\n        }\n        @include pds-media-query-max('xs') {\n          &::after {\n            content: ' XS';\n          }\n        }\n      }\n\n      .media-query-min-max {\n        @include pds-media-query-min-max('base', 'xs') {\n          &::after {\n            content: ' Base - XS';\n          }\n        }\n        @include pds-media-query-min-max('xs', 's') {\n          &::after {\n            content: ' XS - S';\n          }\n        }\n        @include pds-media-query-min-max('s', 'm') {\n          &::after {\n            content: ' S - M';\n          }\n        }\n        @include pds-media-query-min-max('m', 'l') {\n          &::after {\n            content: ' M - L';\n          }\n        }\n        @include pds-media-query-min-max('l', 'xl') {\n          &::after {\n            content: ' L - XL';\n          }\n        }\n        @include pds-media-query-min-max('xl', 'xxl') {\n          &::after {\n            content: ' XL - XXL';\n          }\n        }\n      }\n\n      // Breakpoint\n      .breakpoint-base {\n        &::after {\n          content: ' #{$pds-breakpoint-base}px';\n        }\n      }\n      .breakpoint-xs {\n        &::after {\n          content: ' #{$pds-breakpoint-xs}px';\n        }\n      }\n      .breakpoint-s {\n        &::after {\n          content: ' #{$pds-breakpoint-s}px';\n        }\n      }\n      .breakpoint-m {\n        &::after {\n          content: ' #{$pds-breakpoint-m}px';\n        }\n      }\n      .breakpoint-l {\n        &::after {\n          content: ' #{$pds-breakpoint-l}px';\n        }\n      }\n      .breakpoint-xl {\n        &::after {\n          content: ' #{$pds-breakpoint-xl}px';\n        }\n      }\n      .breakpoint-xxl {\n        &::after {\n          content: ' #{$pds-breakpoint-xxl}px';\n        }\n      }\n    `,\n  ],\n  template: `\n    <div class=\"wrapper\">\n      <h3 class=\"heading\">Media Query (change viewport to see effect)</h3>\n      <p class=\"media-query-min text\">Media Query Min:</p>\n      <p class=\"media-query-max text\">Media Query Max:</p>\n      <p class=\"media-query-min-max text\">Media Query Min Max:</p>\n    </div>\n    <div class=\"wrapper\">\n      <h3 class=\"heading\">Breakpoint</h3>\n      <p class=\"breakpoint-base text\">Breakpoint Base:</p>\n      <p class=\"breakpoint-xs text\">Breakpoint XS:</p>\n      <p class=\"breakpoint-s text\">Breakpoint S:</p>\n      <p class=\"breakpoint-m text\">Breakpoint M:</p>\n      <p class=\"breakpoint-l text\">Breakpoint L:</p>\n      <p class=\"breakpoint-xl text\">Breakpoint XL:</p>\n      <p class=\"breakpoint-xxl text\">Breakpoint XXL:</p>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesMediaQueryExampleComponent {}",react:"import styled from 'styled-components';\nimport {\n  getMediaQueryMax,\n  getMediaQueryMin,\n  getMediaQueryMinMax,\n  gridGap,\n  textSmallStyle,\n  themeLightPrimary,\n  breakpointBase,\n  breakpointXS,\n  breakpointS,\n  breakpointM,\n  breakpointL,\n  breakpointXL,\n  breakpointXXL,\n  headingMediumStyle,\n  spacingFluidMedium,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n});\n\n// Typography\nconst getTypographyStyle = {\n  ...textSmallStyle,\n  color: themeLightPrimary,\n  margin: 0,\n};\n\nconst Heading = styled.h3({\n  ...headingMediumStyle,\n  color: themeLightPrimary,\n  margin: 0,\n});\n\n// MediaQueryMin\nconst MediaQueryMin = styled.p({\n  ...getTypographyStyle,\n  [getMediaQueryMin('base')]: {\n    '&::after': {\n      content: '\" Base\"',\n    },\n  },\n  [getMediaQueryMin('xs')]: {\n    '&::after': {\n      content: '\" XS\"',\n    },\n  },\n  [getMediaQueryMin('s')]: {\n    '&::after': {\n      content: '\" S\"',\n    },\n  },\n  [getMediaQueryMin('m')]: {\n    '&::after': {\n      content: '\" M\"',\n    },\n  },\n  [getMediaQueryMin('l')]: {\n    '&::after': {\n      content: '\" L\"',\n    },\n  },\n  [getMediaQueryMin('xl')]: {\n    '&::after': {\n      content: '\" XL\"',\n    },\n  },\n  [getMediaQueryMin('xxl')]: {\n    '&::after': {\n      content: '\" XXL\"',\n    },\n  },\n});\n\n// MediaQueryMax\nconst MediaQueryMax = styled.p({\n  ...getTypographyStyle,\n  [getMediaQueryMax('xxl')]: {\n    '&::after': {\n      content: '\" XXL\"',\n    },\n  },\n  [getMediaQueryMax('xl')]: {\n    '&::after': {\n      content: '\" XL\"',\n    },\n  },\n  [getMediaQueryMax('l')]: {\n    '&::after': {\n      content: '\" L\"',\n    },\n  },\n  [getMediaQueryMax('m')]: {\n    '&::after': {\n      content: '\" M\"',\n    },\n  },\n  [getMediaQueryMax('s')]: {\n    '&::after': {\n      content: '\" S\"',\n    },\n  },\n  [getMediaQueryMax('xs')]: {\n    '&::after': {\n      content: '\" XS\"',\n    },\n  },\n});\n\n// MediaQueryMinMax\nconst MediaQueryMinMax = styled.p({\n  ...getTypographyStyle,\n  [getMediaQueryMinMax('base', 'xs')]: {\n    '&::after': {\n      content: '\" Base - XS\"',\n    },\n  },\n  [getMediaQueryMinMax('xs', 's')]: {\n    '&::after': {\n      content: '\" XS - S\"',\n    },\n  },\n  [getMediaQueryMinMax('s', 'm')]: {\n    '&::after': {\n      content: '\" S - M\"',\n    },\n  },\n  [getMediaQueryMinMax('m', 'l')]: {\n    '&::after': {\n      content: '\" M - L\"',\n    },\n  },\n  [getMediaQueryMinMax('l', 'xl')]: {\n    '&::after': {\n      content: '\" L - XL\"',\n    },\n  },\n  [getMediaQueryMinMax('xl', 'xxl')]: {\n    '&::after': {\n      content: '\" XL - XXL\"',\n    },\n  },\n});\n\n// Breakpoint\nconst BreakpointBase = styled.p({\n  ...getTypographyStyle,\n  '&::after': {\n    content: `\" ${breakpointBase}px\"`,\n  },\n});\n\nconst BreakpointXS = styled.p({\n  ...getTypographyStyle,\n  '&::after': {\n    content: `\" ${breakpointXS}px\"`,\n  },\n});\n\nconst BreakpointS = styled.p({\n  ...getTypographyStyle,\n  '&::after': {\n    content: `\" ${breakpointS}px\"`,\n  },\n});\n\nconst BreakpointM = styled.p({\n  ...getTypographyStyle,\n  '&::after': {\n    content: `\" ${breakpointM}px\"`,\n  },\n});\n\nconst BreakpointL = styled.p({\n  ...getTypographyStyle,\n  '&::after': {\n    content: `\" ${breakpointL}px\"`,\n  },\n});\n\nconst BreakpointXL = styled.p({\n  ...getTypographyStyle,\n  '&::after': {\n    content: `\" ${breakpointXL}px\"`,\n  },\n});\n\nconst BreakpointXXL = styled.p({\n  ...getTypographyStyle,\n  '&::after': {\n    content: `\" ${breakpointXXL}px\"`,\n  },\n});\n\nexport const StylesMediaQueryExample = (): JSX.Element => {\n  return (\n    <>\n      <Wrapper>\n        <Heading>Media Query (change viewport to see effect)</Heading>\n        <MediaQueryMin>Media Query Min:</MediaQueryMin>\n        <MediaQueryMax>Media Query Max:</MediaQueryMax>\n        <MediaQueryMinMax>Media Query Min Max:</MediaQueryMinMax>\n      </Wrapper>\n      <Wrapper>\n        <Heading>Breakpoint</Heading>\n        <BreakpointBase>Breakpoint Base:</BreakpointBase>\n        <BreakpointXS>Breakpoint XS:</BreakpointXS>\n        <BreakpointS>Breakpoint S:</BreakpointS>\n        <BreakpointM>Breakpoint M:</BreakpointM>\n        <BreakpointL>Breakpoint L:</BreakpointL>\n        <BreakpointXL>Breakpoint XL:</BreakpointXL>\n        <BreakpointXXL>Breakpoint XXL:</BreakpointXXL>\n      </Wrapper>\n    </>\n  );\n};"};return n},M=()=>{const n={angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-styles-motion-example\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n        flex-wrap: wrap;\n        justify-content: center;\n      }\n\n      // Typography\n      .heading {\n        @include pds-heading-medium;\n        color: $pds-theme-light-primary;\n        text-align: center;\n        width: 100%;\n      }\n\n      // Tile\n      .tile {\n        @include pds-text-small;\n        width: 200px;\n        height: 100px;\n        line-height: 100px;\n        text-align: center;\n        color: $pds-theme-light-primary;\n        background: $pds-theme-light-background-surface;\n        border-radius: $pds-border-radius-large;\n        cursor: pointer;\n\n        &--moving {\n          transform: translateX(-200px);\n          transition: transform $pds-motion-duration-short $pds-motion-easing-base;\n\n          &--active {\n            transform: translateX(200px);\n          }\n        }\n\n        &--enter-exit {\n          transform: translateY(0px);\n          transition: opacity $pds-motion-duration-moderate $pds-motion-easing-in,\n            transform $pds-motion-duration-moderate $pds-motion-easing-in;\n\n          &--active {\n            opacity: 0;\n            transform: translateY(40%);\n            transition: opacity $pds-motion-duration-short $pds-motion-easing-out,\n              transform $pds-motion-duration-short $pds-motion-easing-out;\n          }\n        }\n\n        &--show-hide {\n          transition: opacity $pds-motion-duration-long $pds-motion-easing-base;\n\n          &--active {\n            opacity: 0;\n          }\n        }\n\n        &--expand {\n          transition: height $pds-motion-duration-short $pds-motion-easing-in;\n\n          &--active {\n            height: 200px;\n            transition: height $pds-motion-duration-moderate $pds-motion-easing-base;\n          }\n        }\n      }\n    `,\n  ],\n  template: `\n    <div class="wrapper">\n      <h3 class="heading">Moving</h3>\n      <div\n        [ngClass]="{ \'tile tile--moving\': true, \'tile--moving--active\': isMovingActive }"\n        (click)="isMovingActive = !isMovingActive"\n      >\n        play\n      </div>\n      <h3 class="heading">Enter / Exit</h3>\n      <div\n        [ngClass]="{ \'tile tile--enter-exit\': true, \' tile--enter-exit--active\': isEnterExitActive }"\n        (click)="isEnterExitActive = !isEnterExitActive"\n      >\n        play\n      </div>\n      <h3 class="heading">Show / Hide</h3>\n      <div\n        [ngClass]="{ \'tile tile--show-hide\': true, \' tile--show-hide--active\': isShowHideActive }"\n        (click)="isShowHideActive = !isShowHideActive"\n      >\n        play\n      </div>\n      <h3 class="heading">Expand</h3>\n      <div\n        [ngClass]="{ \'tile tile--expand\': true, \' tile--expand--active\': isExpandActive }"\n        (click)="isExpandActive = !isExpandActive"\n      >\n        play\n      </div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesMotionExampleComponent {\n  isMovingActive = false;\n  isEnterExitActive = false;\n  isShowHideActive = false;\n  isExpandActive = false;\n}',react:"import styled from 'styled-components';\nimport {\n  borderRadiusLarge,\n  gridGap,\n  headingMediumStyle,\n  motionDurationLong,\n  motionDurationModerate,\n  motionDurationShort,\n  motionEasingBase,\n  motionEasingIn,\n  motionEasingOut,\n  spacingFluidMedium,\n  themeLightBackgroundSurface,\n  themeLightPrimary,\n} from '@porsche-design-system/components-react/styles';\nimport { useState } from 'react';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n});\n\n// Typography\nconst Heading = styled.h3({\n  ...headingMediumStyle,\n  color: themeLightPrimary,\n  textAlign: 'center',\n  width: '100%',\n});\n\n// Tile\nconst TileBase = styled.div({\n  width: '200px',\n  height: '100px',\n  lineHeight: '100px',\n  textAlign: 'center',\n  color: themeLightPrimary,\n  background: themeLightBackgroundSurface,\n  borderRadius: borderRadiusLarge,\n  cursor: 'pointer',\n});\n\nconst MotionMoving = styled(TileBase)((props: { active: boolean }) => ({\n  transform: props.active ? 'translateX(200px)' : 'translateX(-200px)',\n  transition: `transform ${motionDurationShort} ${motionEasingBase}`,\n}));\n\nconst MotionEnterExit = styled(TileBase)((props: { active: boolean }) => ({\n  transform: props.active ? 'translateY(40%)' : 'translateY(0px)',\n  transition: props.active\n    ? `opacity ${motionDurationShort} ${motionEasingOut}, transform ${motionDurationShort} ${motionEasingOut}`\n    : `opacity ${motionDurationModerate} ${motionEasingIn}, transform ${motionDurationModerate} ${motionEasingIn}`,\n  ...(props.active && {\n    opacity: '0',\n  }),\n}));\n\nconst MotionShowHide = styled(TileBase)((props: { active: boolean }) => ({\n  transition: `opacity ${motionDurationLong} ${motionEasingBase}`,\n  ...(props.active && {\n    opacity: '0',\n  }),\n}));\n\nconst MotionExpand = styled(TileBase)((props: { active: boolean }) => ({\n  transition: props.active\n    ? `height ${motionDurationModerate} ${motionEasingBase}`\n    : `height ${motionDurationShort} ${motionEasingIn}`,\n  ...(props.active && {\n    height: '200px',\n  }),\n}));\n\nexport const StylesMotionExample = (): JSX.Element => {\n  const [isMovingActive, setIsMovingActive] = useState(false);\n  const [isEnterExitActive, setIsEnterExitActive] = useState(false);\n  const [isShowHideActive, setIsShowHideActive] = useState(false);\n  const [isExpandActive, setIsExpandActive] = useState(false);\n\n  return (\n    <>\n      <Wrapper>\n        <Heading>Moving</Heading>\n        <MotionMoving active={isMovingActive} onClick={() => setIsMovingActive((prev) => !prev)}>\n          play\n        </MotionMoving>\n        <Heading>Enter / Exit</Heading>\n        <MotionEnterExit active={isEnterExitActive} onClick={() => setIsEnterExitActive((prev) => !prev)}>\n          play\n        </MotionEnterExit>\n        <Heading>Show / Hide</Heading>\n        <MotionShowHide active={isShowHideActive} onClick={() => setIsShowHideActive((prev) => !prev)}>\n          play\n        </MotionShowHide>\n        <Heading>Expand</Heading>\n        <MotionExpand active={isExpandActive} onClick={() => setIsExpandActive((prev) => !prev)}>\n          play\n        </MotionExpand>\n      </Wrapper>\n    </>\n  );\n};"};return n},D=()=>{const n={angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-styles-skeleton-example\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        align-items: flex-start;\n        gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n\n        &--light {\n          background: $pds-theme-light-background-base;\n          color: $pds-theme-light-primary;\n        }\n\n        &--dark {\n          background: $pds-theme-dark-background-base;\n          color: $pds-theme-dark-primary;\n        }\n      }\n\n      // Typography\n      .heading {\n        @include pds-heading-medium;\n        text-align: center;\n        width: 100%;\n        margin: 0;\n      }\n\n      // Skeletons\n      .skeleton {\n        &--light {\n          @include pds-skeleton(\'light\');\n        }\n        &--dark {\n          @include pds-skeleton(\'dark\');\n        }\n\n        &--box {\n          height: 200px;\n          width: 500px;\n        }\n\n        &--text {\n          height: $pds-font-line-height;\n          width: 100px;\n\n          &--small {\n            font-size: $pds-font-size-text-small;\n          }\n          &--medium {\n            font-size: $pds-font-size-text-medium;\n          }\n          &--large {\n            font-size: $pds-font-size-text-large;\n          }\n        }\n      }\n    `,\n  ],\n  template: `\n    <div class="wrapper wrapper--light">\n      <h3 class="heading">Skeleton Light</h3>\n      <div class="skeleton skeleton--light skeleton--box"></div>\n    </div>\n    <div class="wrapper wrapper--light">\n      <div class="skeleton skeleton--light skeleton--text skeleton--text--small"></div>\n      <div class="skeleton skeleton--light skeleton--text skeleton--text--medium"></div>\n      <div class="skeleton skeleton--light skeleton--text skeleton--text--large"></div>\n    </div>\n\n    <div class="wrapper wrapper--dark">\n      <h3 class="heading">Skeleton Dark</h3>\n      <div class="skeleton skeleton--dark skeleton--box"></div>\n    </div>\n    <div class="wrapper wrapper--dark">\n      <div class="skeleton skeleton--dark skeleton--text skeleton--text--small"></div>\n      <div class="skeleton skeleton--dark skeleton--text skeleton--text--medium"></div>\n      <div class="skeleton skeleton--dark skeleton--text skeleton--text--large"></div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesSkeletonExampleComponent {}',react:"import styled from 'styled-components';\nimport {\n  fontLineHeight,\n  fontSizeTextLarge,\n  fontSizeTextMedium,\n  fontSizeTextSmall,\n  getSkeletonStyle,\n  gridGap,\n  headingMediumStyle,\n  spacingFluidMedium,\n  themeDarkBackgroundBase,\n  themeDarkPrimary,\n  themeLightBackgroundBase,\n  themeLightPrimary,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  alignItems: 'flex-start',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n});\n\nconst WrapperLight = styled(Wrapper)({\n  background: themeLightBackgroundBase,\n  color: themeLightPrimary,\n});\n\nconst WrapperDark = styled(Wrapper)({\n  background: themeDarkBackgroundBase,\n  color: themeDarkPrimary,\n});\n\n// Typography\nconst Heading = styled.h3({\n  ...headingMediumStyle,\n  textAlign: 'center',\n  width: '100%',\n  margin: 0,\n});\n\n// Skeletons shared\nconst SkeletonLight = styled.div(getSkeletonStyle({ theme: 'light' }));\nconst SkeletonDark = styled.div(getSkeletonStyle({ theme: 'dark' }));\n\n// Skeletons box\nconst boxStyles = {\n  height: '200px',\n  width: '500px',\n};\nconst SkeletonBoxLight = styled(SkeletonLight)(boxStyles);\nconst SkeletonBoxDark = styled(SkeletonDark)(boxStyles);\n\n// Skeletons text\nconst textStyles = {\n  height: fontLineHeight,\n  width: '100px',\n};\nconst SkeletonTextLight = styled(SkeletonLight)(textStyles);\nconst SkeletonTextSmallLight = styled(SkeletonTextLight)({ fontSize: fontSizeTextSmall });\nconst SkeletonTextMediumLight = styled(SkeletonTextLight)({ fontSize: fontSizeTextMedium });\nconst SkeletonTextLargeLight = styled(SkeletonTextLight)({ fontSize: fontSizeTextLarge });\n\nconst SkeletonTextDark = styled(SkeletonDark)(textStyles);\nconst SkeletonTextSmallDark = styled(SkeletonTextDark)({ fontSize: fontSizeTextSmall });\nconst SkeletonTextMediumDark = styled(SkeletonTextDark)({ fontSize: fontSizeTextMedium });\nconst SkeletonTextLargeDark = styled(SkeletonTextDark)({ fontSize: fontSizeTextLarge });\n\nexport const StylesSkeletonExample = (): JSX.Element => {\n  return (\n    <>\n      <WrapperLight>\n        <Heading>Skeleton Light</Heading>\n        <SkeletonBoxLight />\n      </WrapperLight>\n      <WrapperLight>\n        <SkeletonTextSmallLight />\n        <SkeletonTextMediumLight />\n        <SkeletonTextLargeLight />\n      </WrapperLight>\n\n      <WrapperDark>\n        <Heading>Skeleton Dark</Heading>\n        <SkeletonBoxDark />\n      </WrapperDark>\n      <WrapperDark>\n        <SkeletonTextSmallDark />\n        <SkeletonTextMediumDark />\n        <SkeletonTextLargeDark />\n      </WrapperDark>\n    </>\n  );\n};"};return n},E=()=>{const n={angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-styles-spacing-example\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        flex-wrap: wrap;\n        align-items: flex-start;\n        justify-content: center;\n        gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n      }\n\n      // Typography\n      .heading {\n        @include pds-heading-medium;\n        color: $pds-theme-light-primary;\n        text-align: center;\n        width: 100%;\n        margin: 0;\n      }\n\n      // Tile\n      .tile {\n        @include pds-text-small;\n        background: $pds-theme-light-contrast-low;\n      }\n\n      // Spacing Fluid\n      .spacing-fluid-x-small {\n        width: $pds-spacing-fluid-x-small;\n        height: $pds-spacing-fluid-x-small;\n      }\n\n      .spacing-fluid-small {\n        width: $pds-spacing-fluid-small;\n        height: $pds-spacing-fluid-small;\n      }\n\n      .spacing-fluid-medium {\n        width: $pds-spacing-fluid-medium;\n        height: $pds-spacing-fluid-medium;\n      }\n\n      .spacing-fluid-large {\n        width: $pds-spacing-fluid-large;\n        height: $pds-spacing-fluid-large;\n      }\n\n      .spacing-fluid-x-large {\n        width: $pds-spacing-fluid-x-large;\n        height: $pds-spacing-fluid-x-large;\n      }\n\n      .spacing-fluid-xx-large {\n        width: $pds-spacing-fluid-xx-large;\n        height: $pds-spacing-fluid-xx-large;\n      }\n\n      // Spacing Static\n      .spacing-static-x-small {\n        width: $pds-spacing-static-x-small;\n        height: $pds-spacing-static-x-small;\n      }\n\n      .spacing-static-small {\n        width: $pds-spacing-static-small;\n        height: $pds-spacing-static-small;\n      }\n\n      .spacing-static-medium {\n        width: $pds-spacing-static-medium;\n        height: $pds-spacing-static-medium;\n      }\n\n      .spacing-static-large {\n        width: $pds-spacing-static-large;\n        height: $pds-spacing-static-large;\n      }\n\n      .spacing-static-x-large {\n        width: $pds-spacing-static-x-large;\n        height: $pds-spacing-static-x-large;\n      }\n\n      .spacing-static-xx-large {\n        width: $pds-spacing-static-xx-large;\n        height: $pds-spacing-static-xx-large;\n      }\n    `,\n  ],\n  template: `\n    <div class="wrapper">\n      <h3 class="heading">Spacing Fluid (XS - XXL)</h3>\n      <div class="spacing-fluid-x-small tile"></div>\n      <div class="spacing-fluid-small tile"></div>\n      <div class="spacing-fluid-medium tile"></div>\n      <div class="spacing-fluid-large tile"></div>\n      <div class="spacing-fluid-x-large tile"></div>\n      <div class="spacing-fluid-xx-large tile"></div>\n    </div>\n    <div class="wrapper">\n      <h3 class="heading">Spacing Static (XS - XXL)</h3>\n      <div class="spacing-static-x-small tile"></div>\n      <div class="spacing-static-small tile"></div>\n      <div class="spacing-static-medium tile"></div>\n      <div class="spacing-static-large tile"></div>\n      <div class="spacing-static-x-large tile"></div>\n      <div class="spacing-static-xx-large tile"></div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesSpacingExampleComponent {}',react:"import styled from 'styled-components';\nimport {\n  gridGap,\n  headingMediumStyle,\n  spacingFluidLarge,\n  spacingFluidMedium,\n  spacingFluidSmall,\n  spacingFluidXXLarge,\n  spacingFluidXLarge,\n  spacingFluidXSmall,\n  spacingStaticLarge,\n  spacingStaticMedium,\n  spacingStaticSmall,\n  spacingStaticXLarge,\n  spacingStaticXSmall,\n  spacingStaticXXLarge,\n  textXSmallStyle,\n  themeLightContrastLow,\n  themeLightPrimary,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  flexWrap: 'wrap',\n  alignItems: 'flex-start',\n  justifyContent: 'center',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n});\n\n// Typography\nconst Heading = styled.h3({\n  ...headingMediumStyle,\n  color: themeLightPrimary,\n  textAlign: 'center',\n  width: '100%',\n  margin: 0,\n});\n\n// Tile\nconst getTileStyle = {\n  ...textXSmallStyle,\n  background: themeLightContrastLow,\n} as const;\n\n// Spacing Fluid\nconst SpacingFluidXSmall = styled.div({\n  ...getTileStyle,\n  width: spacingFluidXSmall,\n  height: spacingFluidXSmall,\n});\n\nconst SpacingFluidSmall = styled.div({\n  ...getTileStyle,\n  width: spacingFluidSmall,\n  height: spacingFluidSmall,\n});\n\nconst SpacingFluidMedium = styled.div({\n  ...getTileStyle,\n  width: spacingFluidMedium,\n  height: spacingFluidMedium,\n});\n\nconst SpacingFluidLarge = styled.div({\n  ...getTileStyle,\n  width: spacingFluidLarge,\n  height: spacingFluidLarge,\n});\n\nconst SpacingFluidXLarge = styled.div({\n  ...getTileStyle,\n  width: spacingFluidXLarge,\n  height: spacingFluidXLarge,\n});\n\nconst SpacingFluidXXLarge = styled.div({\n  ...getTileStyle,\n  width: spacingFluidXXLarge,\n  height: spacingFluidXXLarge,\n});\n\n// Spacing Static\nconst SpacingStaticXSmall = styled.div({\n  ...getTileStyle,\n  width: spacingStaticXSmall,\n  height: spacingStaticXSmall,\n});\n\nconst SpacingStaticSmall = styled.div({\n  ...getTileStyle,\n  width: spacingStaticSmall,\n  height: spacingStaticSmall,\n});\n\nconst SpacingStaticMedium = styled.div({\n  ...getTileStyle,\n  width: spacingStaticMedium,\n  height: spacingStaticMedium,\n});\n\nconst SpacingStaticLarge = styled.div({\n  ...getTileStyle,\n  width: spacingStaticLarge,\n  height: spacingStaticLarge,\n});\n\nconst SpacingStaticXLarge = styled.div({\n  ...getTileStyle,\n  width: spacingStaticXLarge,\n  height: spacingStaticXLarge,\n});\n\nconst SpacingStaticXXLarge = styled.div({\n  ...getTileStyle,\n  width: spacingStaticXXLarge,\n  height: spacingStaticXXLarge,\n});\n\nexport const StylesSpacingExample = (): JSX.Element => {\n  return (\n    <>\n      <Wrapper>\n        <Heading>Spacing Fluid (XS - XXL)</Heading>\n        <SpacingFluidXSmall></SpacingFluidXSmall>\n        <SpacingFluidSmall></SpacingFluidSmall>\n        <SpacingFluidMedium></SpacingFluidMedium>\n        <SpacingFluidLarge></SpacingFluidLarge>\n        <SpacingFluidXLarge></SpacingFluidXLarge>\n        <SpacingFluidXXLarge></SpacingFluidXXLarge>\n      </Wrapper>\n      <Wrapper>\n        <Heading>Spacing Static (XS - XXL)</Heading>\n        <SpacingStaticXSmall></SpacingStaticXSmall>\n        <SpacingStaticSmall></SpacingStaticSmall>\n        <SpacingStaticMedium></SpacingStaticMedium>\n        <SpacingStaticLarge></SpacingStaticLarge>\n        <SpacingStaticXLarge></SpacingStaticXLarge>\n        <SpacingStaticXXLarge></SpacingStaticXXLarge>\n      </Wrapper>\n    </>\n  );\n};"};return n},I=()=>{const n={angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-styles-theme-example\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        flex-wrap: wrap;\n        align-items: flex-start;\n        justify-content: center;\n        gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n\n        &--light {\n          background: $pds-theme-light-background-base;\n        }\n\n        &--dark {\n          background: $pds-theme-dark-background-base;\n        }\n      }\n\n      // Typography\n      .heading {\n        @include pds-heading-medium;\n        text-align: center;\n        width: 100%;\n        margin: 0;\n\n        &--light {\n          color: $pds-theme-light-primary;\n        }\n\n        &--dark {\n          color: $pds-theme-dark-primary;\n        }\n      }\n\n      // Tile\n      .tile {\n        border-radius: $pds-border-radius-small;\n        padding: $pds-spacing-fluid-medium;\n        border: 1px solid grey;\n      }\n\n      // Theme Light\n      .theme-light-primary {\n        background: $pds-theme-light-primary;\n      }\n      .theme-light-background-base {\n        background: $pds-theme-light-background-base;\n      }\n      .theme-light-background-surface {\n        background: $pds-theme-light-background-surface;\n      }\n      .theme-light-background-shading {\n        background: $pds-theme-light-background-shading;\n      }\n      .theme-light-background-frosted {\n        background: $pds-theme-light-background-frosted;\n      }\n      .theme-light-contrast-low {\n        background: $pds-theme-light-contrast-low;\n      }\n      .theme-light-contrast-medium {\n        background: $pds-theme-light-contrast-medium;\n      }\n      .theme-light-contrast-high {\n        background: $pds-theme-light-contrast-high;\n      }\n      .theme-light-notification-success {\n        background: $pds-theme-light-notification-success;\n      }\n      .theme-light-notification-success-soft {\n        background: $pds-theme-light-notification-success-soft;\n      }\n      .theme-light-notification-warning {\n        background: $pds-theme-light-notification-warning;\n      }\n      .theme-light-notification-warning-soft {\n        background: $pds-theme-light-notification-warning-soft;\n      }\n      .theme-light-notification-error {\n        background: $pds-theme-light-notification-error;\n      }\n      .theme-light-notification-error-soft {\n        background: $pds-theme-light-notification-error-soft;\n      }\n      .theme-light-notification-info {\n        background: $pds-theme-light-notification-info;\n      }\n      .theme-light-notification-info-soft {\n        background: $pds-theme-light-notification-info-soft;\n      }\n      .theme-light-state-hover {\n        background: $pds-theme-light-state-hover;\n      }\n      .theme-light-state-active {\n        background: $pds-theme-light-state-active;\n      }\n      .theme-light-state-focus {\n        background: $pds-theme-light-state-focus;\n      }\n      .theme-light-state-disabled {\n        background: $pds-theme-light-state-disabled;\n      }\n\n      // Theme Dark\n      .theme-dark-primary {\n        background: $pds-theme-dark-primary;\n      }\n      .theme-dark-background-base {\n        background: $pds-theme-dark-background-base;\n      }\n      .theme-dark-background-surface {\n        background: $pds-theme-dark-background-surface;\n      }\n      .theme-dark-background-shading {\n        background: $pds-theme-dark-background-shading;\n      }\n      .theme-dark-background-frosted {\n        background: $pds-theme-dark-background-frosted;\n      }\n      .theme-dark-contrast-low {\n        background: $pds-theme-dark-contrast-low;\n      }\n      .theme-dark-contrast-medium {\n        background: $pds-theme-dark-contrast-medium;\n      }\n      .theme-dark-contrast-high {\n        background: $pds-theme-dark-contrast-high;\n      }\n      .theme-dark-notification-success {\n        background: $pds-theme-dark-notification-success;\n      }\n      .theme-dark-notification-success-soft {\n        background: $pds-theme-dark-notification-success-soft;\n      }\n      .theme-dark-notification-warning {\n        background: $pds-theme-dark-notification-warning;\n      }\n      .theme-dark-notification-warning-soft {\n        background: $pds-theme-dark-notification-warning-soft;\n      }\n      .theme-dark-notification-error {\n        background: $pds-theme-dark-notification-error;\n      }\n      .theme-dark-notification-error-soft {\n        background: $pds-theme-dark-notification-error-soft;\n      }\n      .theme-dark-notification-info {\n        background: $pds-theme-dark-notification-info;\n      }\n      .theme-dark-notification-info-soft {\n        background: $pds-theme-dark-notification-info-soft;\n      }\n      .theme-dark-state-hover {\n        background: $pds-theme-dark-state-hover;\n      }\n      .theme-dark-state-active {\n        background: $pds-theme-dark-state-active;\n      }\n      .theme-dark-state-focus {\n        background: $pds-theme-dark-state-focus;\n      }\n      .theme-dark-state-disabled {\n        background: $pds-theme-dark-state-disabled;\n      }\n    `,\n  ],\n  template: `\n    <div class="wrapper wrapper--light">\n      <h3 class="heading heading--light">Theme Light</h3>\n      <div class="theme-light-primary tile"></div>\n      <div class="theme-light-background-base tile"></div>\n      <div class="theme-light-background-surface tile"></div>\n      <div class="theme-light-background-shading tile"></div>\n      <div class="theme-light-background-frosted tile"></div>\n      <div class="theme-light-contrast-low tile"></div>\n      <div class="theme-light-contrast-medium tile"></div>\n      <div class="theme-light-contrast-high tile"></div>\n      <div class="theme-light-notification-success tile"></div>\n      <div class="theme-light-notification-success-soft tile"></div>\n      <div class="theme-light-notification-warning tile"></div>\n      <div class="theme-light-notification-warning-soft tile"></div>\n      <div class="theme-light-notification-error tile"></div>\n      <div class="theme-light-notification-error-soft tile"></div>\n      <div class="theme-light-notification-info tile"></div>\n      <div class="theme-light-notification-info-soft tile"></div>\n      <div class="theme-light-state-hover tile"></div>\n      <div class="theme-light-state-active tile"></div>\n      <div class="theme-light-state-focus tile"></div>\n      <div class="theme-light-state-disabled tile"></div>\n    </div>\n    <div class="wrapper wrapper--dark">\n      <h3 class="heading heading--dark">Theme Dark</h3>\n      <div class="theme-dark-primary tile"></div>\n      <div class="theme-dark-background-base tile"></div>\n      <div class="theme-dark-background-surface tile"></div>\n      <div class="theme-dark-background-shading tile"></div>\n      <div class="theme-dark-background-frosted tile"></div>\n      <div class="theme-dark-contrast-low tile"></div>\n      <div class="theme-dark-contrast-medium tile"></div>\n      <div class="theme-dark-contrast-high tile"></div>\n      <div class="theme-dark-notification-success tile"></div>\n      <div class="theme-dark-notification-success-soft tile"></div>\n      <div class="theme-dark-notification-warning tile"></div>\n      <div class="theme-dark-notification-warning-soft tile"></div>\n      <div class="theme-dark-notification-error tile"></div>\n      <div class="theme-dark-notification-error-soft tile"></div>\n      <div class="theme-dark-notification-info tile"></div>\n      <div class="theme-dark-notification-info-soft tile"></div>\n      <div class="theme-dark-state-hover tile"></div>\n      <div class="theme-dark-state-active tile"></div>\n      <div class="theme-dark-state-focus tile"></div>\n      <div class="theme-dark-state-disabled tile"></div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesThemeExampleComponent {}',react:"import styled from 'styled-components';\nimport {\n  borderRadiusSmall,\n  gridGap,\n  headingMediumStyle,\n  spacingFluidMedium,\n  themeDarkBackgroundBase,\n  themeDarkBackgroundSurface,\n  themeDarkBackgroundShading,\n  themeDarkBackgroundFrosted,\n  themeDarkContrastHigh,\n  themeDarkContrastLow,\n  themeDarkContrastMedium,\n  themeDarkNotificationError,\n  themeDarkNotificationErrorSoft,\n  themeDarkNotificationInfo,\n  themeDarkNotificationInfoSoft,\n  themeDarkNotificationSuccess,\n  themeDarkNotificationSuccessSoft,\n  themeDarkNotificationWarning,\n  themeDarkNotificationWarningSoft,\n  themeDarkPrimary,\n  themeDarkStateActive,\n  themeDarkStateDisabled,\n  themeDarkStateFocus,\n  themeDarkStateHover,\n  themeLightBackgroundBase,\n  themeLightBackgroundSurface,\n  themeLightBackgroundShading,\n  themeLightBackgroundFrosted,\n  themeLightContrastHigh,\n  themeLightContrastLow,\n  themeLightContrastMedium,\n  themeLightNotificationError,\n  themeLightNotificationErrorSoft,\n  themeLightNotificationInfo,\n  themeLightNotificationInfoSoft,\n  themeLightNotificationSuccess,\n  themeLightNotificationSuccessSoft,\n  themeLightNotificationWarning,\n  themeLightNotificationWarningSoft,\n  themeLightPrimary,\n  themeLightStateActive,\n  themeLightStateDisabled,\n  themeLightStateFocus,\n  themeLightStateHover,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst wrapperStyle = {\n  display: 'flex',\n  flexWrap: 'wrap',\n  alignItems: 'flex-start',\n  justifyContent: 'center',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n} as const;\n\nconst WrapperLight = styled.div({\n  ...wrapperStyle,\n  background: themeLightBackgroundBase,\n});\n\nconst WrapperDark = styled.div({\n  ...wrapperStyle,\n  background: themeDarkBackgroundBase,\n});\n\n// Typography\nconst headingStyle = {\n  ...headingMediumStyle,\n  textAlign: 'center',\n  width: '100%',\n  margin: 0,\n} as const;\n\nconst HeadingLight = styled.h3({\n  ...headingStyle,\n  color: themeLightPrimary,\n});\n\nconst HeadingDark = styled.h3({\n  ...headingStyle,\n  color: themeDarkPrimary,\n});\n\n// Tile\nconst getTileStyle = {\n  borderRadius: borderRadiusSmall,\n  padding: spacingFluidMedium,\n  border: '1px solid grey',\n} as const;\n\n// Theme Light\nconst ThemeLightPrimary = styled.div({\n  ...getTileStyle,\n  background: themeLightPrimary,\n});\n\nconst ThemeLightBackgroundBase = styled.div({\n  ...getTileStyle,\n  background: themeLightBackgroundBase,\n});\n\nconst ThemeLightBackgroundSurface = styled.div({\n  ...getTileStyle,\n  background: themeLightBackgroundSurface,\n});\n\nconst ThemeLightBackgroundShading = styled.div({\n  ...getTileStyle,\n  background: themeLightBackgroundShading,\n});\n\nconst ThemeLightBackgroundFrosted = styled.div({\n  ...getTileStyle,\n  background: themeLightBackgroundFrosted,\n});\n\nconst ThemeLightContrastLow = styled.div({\n  ...getTileStyle,\n  background: themeLightContrastLow,\n});\n\nconst ThemeLightContrastMedium = styled.div({\n  ...getTileStyle,\n  background: themeLightContrastMedium,\n});\n\nconst ThemeLightContrastHigh = styled.div({\n  ...getTileStyle,\n  background: themeLightContrastHigh,\n});\n\nconst ThemeLightNotificationSuccess = styled.div({\n  ...getTileStyle,\n  background: themeLightNotificationSuccess,\n});\n\nconst ThemeLightNotificationSuccessSoft = styled.div({\n  ...getTileStyle,\n  background: themeLightNotificationSuccessSoft,\n});\n\nconst ThemeLightNotificationWarning = styled.div({\n  ...getTileStyle,\n  background: themeLightNotificationWarning,\n});\n\nconst ThemeLightNotificationWarningSoft = styled.div({\n  ...getTileStyle,\n  background: themeLightNotificationWarningSoft,\n});\n\nconst ThemeLightNotificationError = styled.div({\n  ...getTileStyle,\n  background: themeLightNotificationError,\n});\n\nconst ThemeLightNotificationErrorSoft = styled.div({\n  ...getTileStyle,\n  background: themeLightNotificationErrorSoft,\n});\n\nconst ThemeLightNotificationInfo = styled.div({\n  ...getTileStyle,\n  background: themeLightNotificationInfo,\n});\n\nconst ThemeLightNotificationInfoSoft = styled.div({\n  ...getTileStyle,\n  background: themeLightNotificationInfoSoft,\n});\n\nconst ThemeLightStateHover = styled.div({\n  ...getTileStyle,\n  background: themeLightStateHover,\n});\n\nconst ThemeLightStateActive = styled.div({\n  ...getTileStyle,\n  background: themeLightStateActive,\n});\n\nconst ThemeLightStateFocus = styled.div({\n  ...getTileStyle,\n  background: themeLightStateFocus,\n});\n\nconst ThemeLightStateDisabled = styled.div({\n  ...getTileStyle,\n  background: themeLightStateDisabled,\n});\n\n// Theme Dark\nconst ThemeDarkPrimary = styled.div({\n  ...getTileStyle,\n  background: themeDarkPrimary,\n});\n\nconst ThemeDarkBackgroundBase = styled.div({\n  ...getTileStyle,\n  background: themeDarkBackgroundBase,\n});\n\nconst ThemeDarkBackgroundSurface = styled.div({\n  ...getTileStyle,\n  background: themeDarkBackgroundSurface,\n});\n\nconst ThemeDarkBackgroundShading = styled.div({\n  ...getTileStyle,\n  background: themeDarkBackgroundShading,\n});\n\nconst ThemeDarkBackgroundFrosted = styled.div({\n  ...getTileStyle,\n  background: themeDarkBackgroundFrosted,\n});\n\nconst ThemeDarkContrastLow = styled.div({\n  ...getTileStyle,\n  background: themeDarkContrastLow,\n});\n\nconst ThemeDarkContrastMedium = styled.div({\n  ...getTileStyle,\n  background: themeDarkContrastMedium,\n});\n\nconst ThemeDarkContrastHigh = styled.div({\n  ...getTileStyle,\n  background: themeDarkContrastHigh,\n});\n\nconst ThemeDarkNotificationSuccess = styled.div({\n  ...getTileStyle,\n  background: themeDarkNotificationSuccess,\n});\n\nconst ThemeDarkNotificationSuccessSoft = styled.div({\n  ...getTileStyle,\n  background: themeDarkNotificationSuccessSoft,\n});\n\nconst ThemeDarkNotificationWarning = styled.div({\n  ...getTileStyle,\n  background: themeDarkNotificationWarning,\n});\n\nconst ThemeDarkNotificationWarningSoft = styled.div({\n  ...getTileStyle,\n  background: themeDarkNotificationWarningSoft,\n});\n\nconst ThemeDarkNotificationError = styled.div({\n  ...getTileStyle,\n  background: themeDarkNotificationError,\n});\n\nconst ThemeDarkNotificationErrorSoft = styled.div({\n  ...getTileStyle,\n  background: themeDarkNotificationErrorSoft,\n});\n\nconst ThemeDarkNotificationInfo = styled.div({\n  ...getTileStyle,\n  background: themeDarkNotificationInfo,\n});\n\nconst ThemeDarkNotificationInfoSoft = styled.div({\n  ...getTileStyle,\n  background: themeDarkNotificationInfoSoft,\n});\n\nconst ThemeDarkStateHover = styled.div({\n  ...getTileStyle,\n  background: themeDarkStateHover,\n});\n\nconst ThemeDarkStateActive = styled.div({\n  ...getTileStyle,\n  background: themeDarkStateActive,\n});\n\nconst ThemeDarkStateFocus = styled.div({\n  ...getTileStyle,\n  background: themeDarkStateFocus,\n});\n\nconst ThemeDarkStateDisabled = styled.div({\n  ...getTileStyle,\n  background: themeDarkStateDisabled,\n});\n\nexport const StylesThemeExample = (): JSX.Element => {\n  return (\n    <>\n      <WrapperLight>\n        <HeadingLight>Theme Light</HeadingLight>\n        <ThemeLightPrimary />\n        <ThemeLightBackgroundBase />\n        <ThemeLightBackgroundSurface />\n        <ThemeLightBackgroundShading />\n        <ThemeLightBackgroundFrosted />\n        <ThemeLightContrastLow />\n        <ThemeLightContrastMedium />\n        <ThemeLightContrastHigh />\n        <ThemeLightNotificationSuccess />\n        <ThemeLightNotificationSuccessSoft />\n        <ThemeLightNotificationWarning />\n        <ThemeLightNotificationWarningSoft />\n        <ThemeLightNotificationError />\n        <ThemeLightNotificationErrorSoft />\n        <ThemeLightNotificationInfo />\n        <ThemeLightNotificationInfoSoft />\n        <ThemeLightStateHover />\n        <ThemeLightStateActive />\n        <ThemeLightStateFocus />\n        <ThemeLightStateDisabled />\n      </WrapperLight>\n      <WrapperDark>\n        <HeadingDark>Theme Dark</HeadingDark>\n        <ThemeDarkPrimary />\n        <ThemeDarkBackgroundBase />\n        <ThemeDarkBackgroundSurface />\n        <ThemeDarkBackgroundShading />\n        <ThemeDarkBackgroundFrosted />\n        <ThemeDarkContrastLow />\n        <ThemeDarkContrastMedium />\n        <ThemeDarkContrastHigh />\n        <ThemeDarkNotificationSuccess />\n        <ThemeDarkNotificationSuccessSoft />\n        <ThemeDarkNotificationWarning />\n        <ThemeDarkNotificationWarningSoft />\n        <ThemeDarkNotificationError />\n        <ThemeDarkNotificationErrorSoft />\n        <ThemeDarkNotificationInfo />\n        <ThemeDarkNotificationInfoSoft />\n        <ThemeDarkStateHover />\n        <ThemeDarkStateActive />\n        <ThemeDarkStateFocus />\n        <ThemeDarkStateDisabled />\n      </WrapperDark>\n    </>\n  );\n};"};return n},H=()=>{const n={angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-styles-typography-example\',\n  styles: [\n    `\n      @use \'@porsche-design-system/components-angular/styles\' as *;\n\n      // Wrapper\n      .wrapper {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        gap: $pds-grid-gap;\n        padding: $pds-spacing-fluid-medium;\n      }\n\n      // Typography\n      .typography {\n        color: $pds-theme-light-primary;\n        margin: 0;\n      }\n\n      .heading {\n        @include pds-heading-medium;\n        color: $pds-theme-light-primary;\n        margin: 0;\n      }\n\n      // Display\n      .display-large {\n        @include pds-display-large;\n      }\n\n      .display-medium {\n        @include pds-display-medium;\n      }\n\n      .display-small {\n        @include pds-display-small;\n      }\n\n      // Heading\n      .heading-xx-large {\n        @include pds-heading-xx-large;\n      }\n\n      .heading-x-large {\n        @include pds-heading-x-large;\n      }\n\n      .heading-large {\n        @include pds-heading-large;\n      }\n\n      .heading-medium {\n        @include pds-heading-medium;\n      }\n\n      .heading-small {\n        @include pds-heading-small;\n      }\n\n      // Text\n      .text-x-large {\n        @include pds-text-x-large;\n      }\n\n      .text-large {\n        @include pds-text-large;\n      }\n\n      .text-medium {\n        @include pds-text-medium;\n      }\n\n      .text-small {\n        @include pds-text-small;\n      }\n\n      .text-x-small {\n        @include pds-text-x-small;\n      }\n\n      .text-xx-small {\n        @include pds-text-xx-small;\n      }\n    `,\n  ],\n  template: `\n    <div class="wrapper">\n      <h3 class="heading">Display</h3>\n      <h3 class="display-large typography">The quick brown fox jumps over the lazy dog</h3>\n      <h3 class="display-medium typography">The quick brown fox jumps over the lazy dog</h3>\n      <h3 class="display-small typography">The quick brown fox jumps over the lazy dog</h3>\n    </div>\n    <div class="wrapper">\n      <h3 class="heading">Heading</h3>\n      <h6 class="heading-xx-large typography">The quick brown fox jumps over the lazy dog</h6>\n      <h6 class="heading-x-large typography">The quick brown fox jumps over the lazy dog</h6>\n      <h6 class="heading-large typography">The quick brown fox jumps over the lazy dog</h6>\n      <h6 class="heading-medium typography">The quick brown fox jumps over the lazy dog</h6>\n      <h6 class="heading-small typography">The quick brown fox jumps over the lazy dog</h6>\n    </div>\n    <div class="wrapper">\n      <h3 class="heading">Text</h3>\n      <p class="text-x-large typography">The quick brown fox jumps over the lazy dog</p>\n      <p class="text-large typography">The quick brown fox jumps over the lazy dog</p>\n      <p class="text-medium typography">The quick brown fox jumps over the lazy dog</p>\n      <p class="text-small typography">The quick brown fox jumps over the lazy dog</p>\n      <p class="text-x-small typography">The quick brown fox jumps over the lazy dog</p>\n      <p class="text-xx-small typography">The quick brown fox jumps over the lazy dog</p>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StylesTypographyExampleComponent {}',react:"import styled from 'styled-components';\nimport {\n  displaySmallStyle,\n  displayLargeStyle,\n  displayMediumStyle,\n  gridGap,\n  headingLargeStyle,\n  headingMediumStyle,\n  headingSmallStyle,\n  headingXLargeStyle,\n  headingXXLargeStyle,\n  spacingFluidMedium,\n  textLargeStyle,\n  textMediumStyle,\n  textSmallStyle,\n  textXLargeStyle,\n  textXSmallStyle,\n  textXXSmallStyle,\n  themeLightPrimary,\n} from '@porsche-design-system/components-react/styles';\n\n// Wrapper\nconst Wrapper = styled.div({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'flex-start',\n  gap: gridGap,\n  padding: spacingFluidMedium,\n});\n\n// Typography\nconst typographyBaseStyle = {\n  color: themeLightPrimary,\n  margin: 0,\n} as const;\n\nconst Heading = styled.h3({\n  ...typographyBaseStyle,\n  ...headingMediumStyle,\n});\n\n// Display\nconst DisplayLargeStyle = styled.h1({\n  ...typographyBaseStyle,\n  ...displayLargeStyle,\n});\n\nconst DisplayMediumStyle = styled.h2({\n  ...typographyBaseStyle,\n  ...displayMediumStyle,\n});\n\nconst DisplaySmallStyle = styled.h2({\n  ...typographyBaseStyle,\n  ...displaySmallStyle,\n});\n\n// Heading\nconst HeadingXXLargeStyle = styled.h2({\n  ...typographyBaseStyle,\n  ...headingXXLargeStyle,\n});\n\nconst HeadingXLargeStyle = styled.h3({\n  ...typographyBaseStyle,\n  ...headingXLargeStyle,\n});\n\nconst HeadingLargeStyle = styled.h4({\n  ...typographyBaseStyle,\n  ...headingLargeStyle,\n});\n\nconst HeadingMediumStyle = styled.h5({\n  ...typographyBaseStyle,\n  ...headingMediumStyle,\n});\n\nconst HeadingSmallStyle = styled.h6({\n  ...typographyBaseStyle,\n  ...headingSmallStyle,\n});\n\n// Text\nconst TextXLargeStyle = styled.p({\n  ...typographyBaseStyle,\n  ...textXLargeStyle,\n});\n\nconst TextLargeStyle = styled.p({\n  ...typographyBaseStyle,\n  ...textLargeStyle,\n});\n\nconst TextMediumStyle = styled.p({\n  ...typographyBaseStyle,\n  ...textMediumStyle,\n});\n\nconst TextSmallStyle = styled.p({\n  ...typographyBaseStyle,\n  ...textSmallStyle,\n});\n\nconst TextXSmallStyle = styled.p({\n  ...typographyBaseStyle,\n  ...textXSmallStyle,\n});\n\nconst TextXXSmallStyle = styled.p({\n  ...typographyBaseStyle,\n  ...textXXSmallStyle,\n});\n\nexport const StylesTypographyExample = (): JSX.Element => {\n  const content = 'The quick brown fox jumps over the lazy dog';\n  return (\n    <>\n      <Wrapper>\n        <Heading>Display</Heading>\n        <DisplayLargeStyle>{content}</DisplayLargeStyle>\n        <DisplayMediumStyle>{content}</DisplayMediumStyle>\n        <DisplaySmallStyle>{content}</DisplaySmallStyle>\n      </Wrapper>\n      <Wrapper>\n        <Heading>Heading</Heading>\n        <HeadingXXLargeStyle>{content}</HeadingXXLargeStyle>\n        <HeadingXLargeStyle>{content}</HeadingXLargeStyle>\n        <HeadingLargeStyle>{content}</HeadingLargeStyle>\n        <HeadingMediumStyle>{content}</HeadingMediumStyle>\n        <HeadingSmallStyle>{content}</HeadingSmallStyle>\n      </Wrapper>\n      <Wrapper>\n        <Heading>Text</Heading>\n        <TextXLargeStyle>{content}</TextXLargeStyle>\n        <TextLargeStyle>{content}</TextLargeStyle>\n        <TextMediumStyle>{content}</TextMediumStyle>\n        <TextSmallStyle>{content}</TextSmallStyle>\n        <TextXSmallStyle>{content}</TextXSmallStyle>\n        <TextXXSmallStyle>{content}</TextXXSmallStyle>\n      </Wrapper>\n    </>\n  );\n};"};return n}}}]);
//# sourceMappingURL=chunk-2d0c7b41.1d754862.js.map