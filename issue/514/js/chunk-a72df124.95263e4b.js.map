{"version":3,"sources":["webpack:///../components-js/dist/esm-es5/shadow-css-4c80f1c6.js","webpack:////github/workspace/node_modules/core-js/modules/es.string.trim-end.js"],"names":["__spreadArrays","s","i","il","arguments","r","Array","k","a","j","jl","safeSelector","placeholders","index","selector","_","keep","replaceBy","content","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","_ruleRe","_curlyRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","m","_i","suffix","contentPrefix","cssRule","rule","ruleCallback","inputParts","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","strEscapedBlocks","escapedString","blocks","insertPolyfillHostInCssText","convertColonRule","cssText","parts","p","partReplacer","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","convertColonSlotted","slotClass","slotScopeId","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","result","pattern","makeScopeMatcher","lre","rre","scopeSelector","selectorNeedsScoping","re","applySimpleSelectorScope","replaceBy_1","before","colon","after","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","matches","safeContent","scopedSelector","startIndex","sep","hasHost","shouldScope","res","separator","part_1","scopedPart","shallowPart","slotSelector","scopeSelectorText","scopeSelectors","scopeCssText","slotted","scopeId","hostScopeId","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector_1","placeholder","comment","scoped","_a","$","$trimEnd","end","forcedStringTrimMethod","FORCED","trimEnd","this","target","proto","forced","trimRight"],"mappings":"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","file":"js/chunk-a72df124.95263e4b.js","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n/*\n Stencil Client Platform v1.14.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function (selector) {\n    var placeholders = [];\n    var index = 0;\n    var content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    var ss = {\n        content: content,\n        placeholders: placeholders,\n    };\n    return ss;\n};\nvar restoreSafeSelector = function (placeholders, content) {\n    return content.replace(/__ph-(\\d+)__/g, function (_, index) { return placeholders[+index]; });\n};\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar _polyfillHostContext = '-shadowcsscontext';\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = function (input) {\n    return input.replace(_commentRe, '');\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = function (input) {\n    return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar processRules = function (input, ruleCallback) {\n    var inputWithEscapedBlocks = escapeBlocks(input);\n    var nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var selector = m[2];\n        var content = '';\n        var suffix = m[4];\n        var contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        var cssRule = {\n            selector: selector,\n            content: content,\n        };\n        var rule = ruleCallback(cssRule);\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    });\n};\nvar escapeBlocks = function (input) {\n    var inputParts = input.split(_curlyRe);\n    var resultParts = [];\n    var escapedBlocks = [];\n    var bracketCount = 0;\n    var currentBlockParts = [];\n    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        var part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    var strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = function (selector) {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nvar convertColonRule = function (cssText, regExp, partReplacer) {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var parts = m[2].split(',');\n            var r = [];\n            for (var i = 0; i < parts.length; i++) {\n                var p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nvar colonHostPartReplacer = function (host, part, suffix) {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nvar convertColonHost = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = function (host, part, suffix) {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nvar convertColonSlotted = function (cssText, slotScopeId) {\n    var slotClass = '.' + slotScopeId + ' > ';\n    var selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var compound = m[2].trim();\n            var suffix = m[3];\n            var slottedSelector = slotClass + compound + suffix;\n            var prefixSelector = '';\n            for (var i = m[4] - 1; i >= 0; i--) {\n                var char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            var orgSelector = prefixSelector + slottedSelector;\n            var addedSelector = \"\" + prefixSelector.trimRight() + slottedSelector.trim();\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                var updatedSelector = addedSelector + \", \" + orgSelector;\n                selectors.push({\n                    orgSelector: orgSelector,\n                    updatedSelector: updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors: selectors,\n        cssText: cssText,\n    };\n};\nvar convertColonHostContext = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = function (cssText) {\n    return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n};\nvar makeScopeMatcher = function (scopeSelector) {\n    var lre = /\\[/g;\n    var rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nvar selectorNeedsScoping = function (selector, scopeSelector) {\n    var re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nvar applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        var replaceBy_1 = \".\" + hostSelector;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n            return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                return before + replaceBy_1 + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy_1 + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nvar applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n    var isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, function (_) {\n        var parts = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parts[_i - 1] = arguments[_i];\n        }\n        return parts[0];\n    });\n    var className = '.' + scopeSelector;\n    var _scopeSelectorPart = function (p) {\n        var scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            var t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                var matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    var safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    var scopedSelector = '';\n    var startIndex = 0;\n    var res;\n    var sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    var shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        var separator = res[1];\n        var part_1 = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n        var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n        scopedSelector += scopedPart + \" \" + separator + \" \";\n        startIndex = sep.lastIndex;\n    }\n    var part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = function (selector, scopeSelectorText, hostSelector, slotSelector) {\n    return selector\n        .split(',')\n        .map(function (shallowPart) {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nvar scopeSelectors = function (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n    return processRules(cssText, function (rule) {\n        var selector = rule.selector;\n        var content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        var cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content: content,\n        };\n        return cssRule;\n    });\n};\nvar scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    var slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nvar scopeCss = function (cssText, scopeId, commentOriginalSelector) {\n    var hostScopeId = scopeId + '-h';\n    var slotScopeId = scopeId + '-s';\n    var commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    var orgSelectors = [];\n    if (commentOriginalSelector) {\n        var processCommentedSelector_1 = function (rule) {\n            var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n            var comment = \"/*!@\" + rule.selector + \"*/\";\n            orgSelectors.push({ placeholder: placeholder, comment: comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, function (rule) {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector_1(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector_1);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    var scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = __spreadArrays([scoped.cssText], commentsWithHash).join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(function (_a) {\n            var placeholder = _a.placeholder, comment = _a.comment;\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach(function (slottedSelector) {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\nexport { scopeCss };\n","'use strict';\nvar $ = require('../internals/export');\nvar $trimEnd = require('../internals/string-trim').end;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\nvar FORCED = forcedStringTrimMethod('trimEnd');\n\nvar trimEnd = FORCED ? function trimEnd() {\n  return $trimEnd(this);\n} : ''.trimEnd;\n\n// `String.prototype.{ trimEnd, trimRight }` methods\n// https://github.com/tc39/ecmascript-string-left-right-trim\n$({ target: 'String', proto: true, forced: FORCED }, {\n  trimEnd: trimEnd,\n  trimRight: trimEnd\n});\n"],"sourceRoot":""}