(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-6a2365d1"],{"2ab1":function(e,t,n){"use strict";function o(e){var t,n=e.Symbol;return"function"===typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return o}))},8309:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return l})),n.d(t,"c",(function(){return i})),n.d(t,"d",(function(){return a}));[{name:"Model",id:"model"},{name:"Interest",id:"interest"},{name:"VIN",id:"vin"},{name:"Purchase Intention",id:"purchaseIntention"},{name:"Status",id:"status"},{name:"Comment",id:"comment"},{name:"Lead ID",id:"leadId"},{name:"Select Wrapper",id:"selectWrapper"},{name:"Select",id:"select"},{name:"Multi-Select",id:"multiSelect"},{name:"Action",id:"action",hideLabel:!0}].map((e,t)=>({...e,...t>0&&t<7&&5!==t&&{active:1===t,direction:"asc"}})),[{name:"Column 1",id:"col1"},{name:"Column 2",id:"col2"},{name:"Column 3",id:"col3"}].map((e,t)=>({...e,active:1===t,direction:"asc"})),Array.from(Array(4)).map(()=>({imageUrl:"https://nav.porsche.com/00BC524/series-assets/1366/911@2x.jpg",imageWidth:80,imageHeight:48,html:"<a href='#'>link</a>&nbsp;<b>bold</b>&nbsp;<i>italic</i>&nbsp;<strong>strong</strong>&nbsp;<em>emphasized</em>",longText:"Lorem ipsum dolor sit amet, consetetur sadipscing elitr",shortText:"Some text"}));const o=()=>{const e={"vanilla-js":'<p-link-tile-product\n  heading="Some product"\n  price="1.911,00 €"\n  description="Some description"\n  href="https://porsche.com"\n>\n  <p-tag slot="header" color="background-base">New</p-tag>\n  <img\n    src="https://porsche-design-system.github.io/porsche-design-system/assets/placeholder_800x900.svg"\n    width="800"\n    height="900"\n    alt="Some alt text"\n  />\n</p-link-tile-product>\n\n<script>\n  const productTile = document.querySelector(\'p-link-tile-product\');\n  productTile.addEventListener(\'like\', (e) => {\n    productTile.liked = !e.detail.liked;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { LinkTileProductLikeEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-link-tile-product-example\',\n  template: `\n    <p-link-tile-product\n      [heading]="\'Some product name\'"\n      [price]="\'1.911,00 €\'"\n      [description]="\'Some description\'"\n      [href]="\'https://porsche.com\'"\n      [liked]="liked"\n      (like)="handleLike($event)"\n    >\n      <p-tag slot="header" [color]="\'background-base\'">New</p-tag>\n      <img\n        src="https://porsche-design-system.github.io/porsche-design-system/assets/placeholder_800x900.svg"\n        width="800"\n        height="900"\n        alt="Some alt text"\n      />\n    </p-link-tile-product>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkTileProductExampleComponent {\n  liked = false;\n  handleLike(e: CustomEvent<LinkTileProductLikeEventDetail>) {\n    this.liked = !e.detail.liked;\n  }\n}',react:'import { useState } from \'react\';\nimport { type LinkTileProductLikeEventDetail, PLinkTileProduct, PTag } from \'@porsche-design-system/components-react\';\n\nexport const LinkTileProductExample = (): JSX.Element => {\n  const [liked, setLiked] = useState(false);\n\n  const handleLike = (e: CustomEvent<LinkTileProductLikeEventDetail>) => {\n    setLiked(!e.detail.liked);\n  };\n\n  return (\n    <PLinkTileProduct\n      heading="Some product"\n      price="1.911,00 €"\n      description="Some description"\n      href="https://porsche.com"\n      liked={liked}\n      onLike={handleLike}\n    >\n      <PTag slot="tags" color="background-base">\n        New\n      </PTag>\n      <img\n        src="https://porsche-design-system.github.io/porsche-design-system/assets/placeholder_800x900.svg"\n        width="800"\n        height="900"\n        alt="Some alt text"\n      />\n    </PLinkTileProduct>\n  );\n};',vue:'<script setup lang="ts">\n  import { type LinkTileProductLikeEventDetail, PLinkTileProduct, PTag } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const liked = ref(false);\n\n  const handleLike = (e: LinkTileProductLikeEventDetail): void => {\n    liked.value = !e.liked;\n  };\n<\/script>\n\n<template>\n  <PLinkTileProduct\n    :heading="\'Some product name\'"\n    :price="\'1.911,00 €\'"\n    :description="\'Some description\'"\n    :href="\'https://porsche.com\'"\n    :liked="liked"\n    @like="handleLike"\n  >\n    <slot name="header">\n      <PTag :color="\'background-base\'">New</PTag>\n    </slot>\n    <img\n      src="https://porsche-design-system.github.io/porsche-design-system/assets/placeholder_800x900.svg"\n      width="800"\n      height="900"\n      alt="Some alt text"\n    />\n  </PLinkTileProduct>\n</template>'};return e},l=e=>{const t={default:{"vanilla-js":'<form>\n  <p-multi-select name="options" label="Some Label">\n    <p-multi-select-option value="a">Option A</p-multi-select-option>\n    <p-multi-select-option value="b">Option B</p-multi-select-option>\n    <p-multi-select-option value="c">Option C</p-multi-select-option>\n    <p-multi-select-option value="d">Option D</p-multi-select-option>\n    <p-multi-select-option value="e">Option E</p-multi-select-option>\n    <p-multi-select-option value="f">Option F</p-multi-select-option>\n  </p-multi-select>\n  <button type="submit">Submit</button>\n</form>\n\n<p-text>Last submitted data: none</p-text>\n\n<script>\n  const debugElement = document.querySelector(\'p-text\');\n  const form = document.querySelector(\'form\');\n  form.addEventListener(\'submit\', (e) => {\n    e.preventDefault();\n    const formData = new FormData(form);\n    debugElement.innerText = `Last submitted data: ${Array.from(formData.values()).join(\', \') || \'none\'}`;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-multi-select-example\',\n  template: `\n    <form (submit)="onSubmit($event)">\n      <p-multi-select name="options" label="Some Label">\n        <p-multi-select-option value="a">Option A</p-multi-select-option>\n        <p-multi-select-option value="b">Option B</p-multi-select-option>\n        <p-multi-select-option value="c">Option C</p-multi-select-option>\n        <p-multi-select-option value="d">Option D</p-multi-select-option>\n        <p-multi-select-option value="e">Option E</p-multi-select-option>\n        <p-multi-select-option value="f">Option F</p-multi-select-option>\n      </p-multi-select>\n      <button type="submit">Submit</button>\n    </form>\n\n    <p-text>Last submitted data: {{ lastSubmittedData }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MultiSelectExampleComponent {\n  lastSubmittedData: string = \'none\';\n\n  onSubmit(e: Event): void {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    this.lastSubmittedData = Array.from(formData.values()).join(\', \') || \'none\';\n  }\n}',react:'import { type FormEvent, useState } from \'react\';\nimport { PMultiSelect, PMultiSelectOption, PText } from \'@porsche-design-system/components-react\';\n\nexport const MultiSelectExamplePage = (): JSX.Element => {\n  const [lastSubmittedData, setLastSubmittedData] = useState(\'none\');\n\n  const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    setLastSubmittedData(Array.from(formData.values()).join(\', \') || \'none\');\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <PMultiSelect name="options" label="Some Label">\n          <PMultiSelectOption value="a">Option A</PMultiSelectOption>\n          <PMultiSelectOption value="b">Option B</PMultiSelectOption>\n          <PMultiSelectOption value="c">Option C</PMultiSelectOption>\n          <PMultiSelectOption value="d">Option D</PMultiSelectOption>\n          <PMultiSelectOption value="e">Option E</PMultiSelectOption>\n          <PMultiSelectOption value="f">Option F</PMultiSelectOption>\n        </PMultiSelect>\n        <button type="submit">Submit</button>\n      </form>\n\n      <PText>Last submitted data: {lastSubmittedData}</PText>\n    </>\n  );\n};',vue:"<script setup lang=\"ts\">\n  import { PMultiSelect, PMultiSelectOption, PText } from '@porsche-design-system/components-vue';\n  import { ref } from 'vue';\n\n  const lastSubmittedData = ref('none');\n  const onSubmit = (e: Event) => {\n    const formData = new FormData(e.target as HTMLFormElement);\n    lastSubmittedData.value = Array.from(formData.values()).join(', ') || 'none';\n  };\n<\/script>\n\n<template>\n  <form @submit.prevent=\"onSubmit\">\n    <PMultiSelect :name=\"'options'\" :label=\"'Some Label'\">\n      <PMultiSelectOption :value=\"'a'\">Option A</PMultiSelectOption>\n      <PMultiSelectOption :value=\"'b'\">Option B</PMultiSelectOption>\n      <PMultiSelectOption :value=\"'c'\">Option C</PMultiSelectOption>\n      <PMultiSelectOption :value=\"'d'\">Option D</PMultiSelectOption>\n      <PMultiSelectOption :value=\"'e'\">Option E</PMultiSelectOption>\n      <PMultiSelectOption :value=\"'f'\">Option F</PMultiSelectOption>\n    </PMultiSelect>\n    <button type=\"submit\">Submit</button>\n  </form>\n\n  <PText>Last submitted data: {{ lastSubmittedData }}</PText>\n</template>"},"example-controlled":{"vanilla-js":'<p-multi-select name="options" label="Some Label">\n  <p-multi-select-option value="a">Option A</p-multi-select-option>\n  <p-multi-select-option value="b">Option B</p-multi-select-option>\n  <p-multi-select-option value="c">Option C</p-multi-select-option>\n  <p-multi-select-option value="d">Option D</p-multi-select-option>\n  <p-multi-select-option value="e">Option E</p-multi-select-option>\n  <p-multi-select-option value="f">Option F</p-multi-select-option>\n</p-multi-select>\n\n<p-text>Selected values: none</p-text>\n\n<script>\n  const debugElement = document.querySelector(\'p-text\');\n  const multiSelect = document.querySelector(\'p-multi-select\');\n\n  multiSelect.addEventListener(\'update\', (e) => {\n    e.target.value = e.detail.value;\n    setDebugText(e.detail.value);\n  });\n\n  function setDebugText(value) {\n    debugElement.innerText = `Selected values: ${value.join(\', \') || \'none\'}`;\n  }\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { MultiSelectUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-multi-select-example-controlled\',\n  template: `\n    <p-multi-select name="options" label="Some Label" [value]="selectedValues" (update)="onUpdate($event)">\n      <p-multi-select-option value="a">Option A</p-multi-select-option>\n      <p-multi-select-option value="b">Option B</p-multi-select-option>\n      <p-multi-select-option value="c">Option C</p-multi-select-option>\n      <p-multi-select-option value="d">Option D</p-multi-select-option>\n      <p-multi-select-option value="e">Option E</p-multi-select-option>\n      <p-multi-select-option value="f">Option F</p-multi-select-option>\n    </p-multi-select>\n\n    <p-text>{{ debugText }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MultiSelectExampleControlledComponent {\n  selectedValues: string[] = [];\n  get debugText(): string {\n    return `Selected values: ${this.selectedValues.join(\', \') || \'none\'}`;\n  }\n\n  onUpdate(e: CustomEvent<MultiSelectUpdateEventDetail>) {\n    this.selectedValues = e.detail.value;\n  }\n}',react:'import { useState } from \'react\';\nimport {\n  type MultiSelectUpdateEventDetail,\n  PMultiSelect,\n  PMultiSelectOption,\n  type PMultiSelectProps,\n  PText,\n} from \'@porsche-design-system/components-react\';\n\nexport const MultiSelectControlledExamplePage = (): JSX.Element => {\n  const [selectedValues, setSelectedValues] = useState<PMultiSelectProps[\'value\']>([]);\n\n  const onUpdate = (e: CustomEvent<MultiSelectUpdateEventDetail>) => {\n    setSelectedValues(e.detail.value);\n  };\n\n  const debugText = `Selected values: ${selectedValues!.join(\', \') || \'none\'}`;\n\n  return (\n    <>\n      <PMultiSelect name="options" label="Some Label" value={selectedValues} onUpdate={onUpdate}>\n        <PMultiSelectOption value="a">Option A</PMultiSelectOption>\n        <PMultiSelectOption value="b">Option B</PMultiSelectOption>\n        <PMultiSelectOption value="c">Option C</PMultiSelectOption>\n        <PMultiSelectOption value="d">Option D</PMultiSelectOption>\n        <PMultiSelectOption value="e">Option E</PMultiSelectOption>\n        <PMultiSelectOption value="f">Option F</PMultiSelectOption>\n      </PMultiSelect>\n\n      <PText>{debugText}</PText>\n    </>\n  );\n};',vue:"<script setup lang=\"ts\">\n  import {\n    type MultiSelectUpdateEventDetail,\n    PMultiSelect,\n    PMultiSelectOption,\n    PText,\n  } from '@porsche-design-system/components-vue';\n  import { computed, ref } from 'vue';\n\n  const selectedValues = ref<string[]>([]);\n\n  const onUpdate = (e: MultiSelectUpdateEventDetail) => {\n    selectedValues.value = e.value;\n  };\n\n  const debugText = computed(() => {\n    return `Selected values: ${selectedValues.value.join(', ') || 'none'}`;\n  });\n<\/script>\n\n<template>\n  <PMultiSelect :name=\"'options'\" :label=\"'Some Label'\" :value=\"selectedValues\" @update=\"onUpdate\">\n    <PMultiSelectOption :value=\"'a'\">Option A</PMultiSelectOption>\n    <PMultiSelectOption :value=\"'b'\">Option B</PMultiSelectOption>\n    <PMultiSelectOption :value=\"'c'\">Option C</PMultiSelectOption>\n    <PMultiSelectOption :value=\"'d'\">Option D</PMultiSelectOption>\n    <PMultiSelectOption :value=\"'e'\">Option E</PMultiSelectOption>\n    <PMultiSelectOption :value=\"'f'\">Option F</PMultiSelectOption>\n  </PMultiSelect>\n\n  <PText>{{ debugText }}</PText>\n</template>"},"example-dynamic":{"vanilla-js":'<label>Value: <input name="input-value" type="text" placeholder="e.g. 1,2" /></label>\n<button id="btn-input-value" type="button">Set Value</button>\n<button id="btn-reset" type="button">Reset value</button>\n\n<p-multi-select name="options" label="Some Label">\n  <p-multi-select-option value="1">Option 1</p-multi-select-option>\n  <p-multi-select-option value="2">Option 2</p-multi-select-option>\n  <p-multi-select-option value="3">Option 3</p-multi-select-option>\n</p-multi-select>\n\n<button id="btn-add" type="button">Add option</button>\n<button id="btn-remove" type="button">Remove last option</button>\n\n<script>\n  const input = document.querySelector(\'input\');\n  const multiSelect = document.querySelector(\'p-multi-select\');\n\n  multiSelect.addEventListener(\'update\', () => {\n    input.value = multiSelect.value.join(\',\');\n  });\n\n  document.querySelector(\'#btn-input-value\').addEventListener(\'click\', () => {\n    multiSelect.value = input.value.split(\',\');\n  });\n\n  document.querySelector(\'#btn-reset\').addEventListener(\'click\', () => {\n    multiSelect.value = [];\n  });\n\n  document.querySelector(\'#btn-add\').addEventListener(\'click\', () => {\n    addOption();\n  });\n\n  document.querySelector(\'#btn-remove\').addEventListener(\'click\', () => {\n    if (multiSelect.children.length > 0) {\n      multiSelect.lastChild.remove();\n    }\n  });\n\n  function addOption() {\n    const child = document.createElement(\'p-multi-select-option\');\n    child.innerText = `Option ${multiSelect.children.length + 1}`;\n    child.setAttribute(\'value\', `${multiSelect.children.length + 1}`);\n    multiSelect.append(child);\n  }\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { MultiSelectUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-multi-select-example-dynamic\',\n  template: `\n    <label>\n      Value:\n      <input\n        name="input-value"\n        type="text"\n        [value]="inputValue"\n        (input)="onChangeInput($event)"\n        placeholder="e.g. 1,2"\n      />\n    </label>\n    <button type="button" (click)="onSetValue()">Set Value</button>\n    <button type="button" (click)="onResetValue()">Reset value</button>\n\n    <p-multi-select name="options" label="Some Label" [value]="selectedValues" (update)="onUpdate($event)">\n      <p-multi-select-option *ngFor="let idx of optionIndices" [value]="(idx + 1).toString()"\n        >Option {{ idx + 1 }}</p-multi-select-option\n      >\n    </p-multi-select>\n\n    <button type="button" (click)="onAddOption()">Add option</button>\n    <button type="button" (click)="onRemoveOption()">Remove last option</button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MultiSelectExampleDynamicComponent {\n  selectedValues: string[] = [];\n  inputValue: string = \'\';\n  optionCount: number = 3;\n\n  get optionIndices(): number[] {\n    return [...Array(this.optionCount).keys()];\n  }\n\n  onChangeInput(e: Event) {\n    this.inputValue = (e.target as HTMLInputElement).value;\n  }\n\n  onSetValue() {\n    this.selectedValues = this.inputValue.split(\',\');\n  }\n\n  onResetValue() {\n    this.selectedValues = [];\n    this.inputValue = \'\';\n  }\n\n  onUpdate(e: CustomEvent<MultiSelectUpdateEventDetail>) {\n    this.selectedValues = e.detail.value;\n    this.inputValue = e.detail.value.join(\',\');\n  }\n\n  onAddOption() {\n    this.optionCount += 1;\n  }\n\n  onRemoveOption() {\n    if (this.optionCount > 0) {\n      this.optionCount -= 1;\n    }\n  }\n}',react:'import { type ChangeEvent, useState } from \'react\';\nimport {\n  type MultiSelectUpdateEventDetail,\n  PMultiSelect,\n  PMultiSelectOption,\n  type PMultiSelectProps,\n} from \'@porsche-design-system/components-react\';\n\nexport const MultiSelectDynamicExamplePage = (): JSX.Element => {\n  const [selectedValues, setSelectedValues] = useState<PMultiSelectProps[\'value\']>([]);\n  const [inputValue, setInputValue] = useState(\'\');\n  const [optionCount, setOptionCount] = useState(3);\n\n  const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const onSetValue = () => {\n    setSelectedValues(inputValue.split(\',\'));\n  };\n\n  const onResetValue = () => {\n    setSelectedValues([]);\n    setInputValue(\'\');\n  };\n\n  const onUpdate = (e: CustomEvent<MultiSelectUpdateEventDetail>) => {\n    setSelectedValues(e.detail.value);\n    setInputValue(e.detail.value.join(\',\'));\n  };\n\n  const onAddOption = () => {\n    setOptionCount((prev) => prev + 1);\n  };\n\n  const onRemoveOption = () => {\n    if (optionCount > 0) {\n      setOptionCount((prev) => prev - 1);\n    }\n  };\n\n  return (\n    <>\n      <label>\n        Value:{\' \'}\n        <input name="input-value" type="text" value={inputValue} onChange={onChangeInput} placeholder="e.g. 1,2" />\n      </label>\n      <button type="button" onClick={onSetValue}>\n        Set Value\n      </button>\n      <button type="button" onClick={onResetValue}>\n        Reset value\n      </button>\n\n      <PMultiSelect name="options" label="Some Label" value={selectedValues} onUpdate={onUpdate}>\n        {[...Array(optionCount).keys()].map((idx) => (\n          <PMultiSelectOption key={idx} value={`${idx + 1}`}>\n            Option {idx + 1}\n          </PMultiSelectOption>\n        ))}\n      </PMultiSelect>\n\n      <button type="button" onClick={onAddOption}>\n        Add option\n      </button>\n      <button type="button" onClick={onRemoveOption}>\n        Remove last option\n      </button>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import {\n    type MultiSelectUpdateEventDetail,\n    PMultiSelect,\n    PMultiSelectOption,\n  } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const selectedValues = ref<string[]>([]);\n  const inputValue = ref(\'\');\n  const optionCount = ref(3);\n\n  const onSetValue = () => {\n    selectedValues.value = inputValue.value.split(\',\');\n  };\n\n  const onResetValue = () => {\n    selectedValues.value = [];\n    inputValue.value = \'\';\n  };\n\n  const onUpdate = (e: MultiSelectUpdateEventDetail) => {\n    selectedValues.value = e.value;\n    inputValue.value = e.value.join(\',\');\n  };\n\n  const onAddOption = () => {\n    optionCount.value++;\n  };\n\n  const onRemoveOption = () => {\n    if (optionCount.value > 0) {\n      optionCount.value--;\n    }\n  };\n<\/script>\n\n<template>\n  <div>\n    <label>\n      Value:\n      <input name="input-value" type="text" v-model="inputValue" placeholder="e.g. 1,2" />\n    </label>\n    <button type="button" @click="onSetValue">Set Value</button>\n    <button type="button" @click="onResetValue">Reset value</button>\n\n    <PMultiSelect :name="\'options\'" :label="\'Some Label\'" :value="selectedValues" @update="onUpdate">\n      <PMultiSelectOption v-for="idx in optionCount" :key="idx" :value="`${idx}`">\n        Option {{ idx }}\n      </PMultiSelectOption>\n    </PMultiSelect>\n\n    <button type="button" @click="onAddOption">Add option</button>\n    <button type="button" @click="onRemoveOption">Remove last option</button>\n  </div>\n</template>'}};return t[e]},i=e=>{const t={default:{"vanilla-js":'<form>\n  <p-select name="options" label="Some Label" value="a">\n    <p-select-option value="a">Option A</p-select-option>\n    <p-select-option value="b">Option B</p-select-option>\n    <p-select-option value="c">Option C</p-select-option>\n    <p-select-option value="d">Option D</p-select-option>\n    <p-select-option value="e">Option E</p-select-option>\n    <p-select-option value="f">Option F</p-select-option>\n  </p-select>\n  <button type="submit">Submit</button>\n</form>\n\n<p-text>Last submitted data: none</p-text>\n\n<script>\n  const debugElement = document.querySelector(\'p-text\');\n  const form = document.querySelector(\'form\');\n  form.addEventListener(\'submit\', (e) => {\n    e.preventDefault();\n    const formData = new FormData(form);\n    debugElement.innerText = `Last submitted data: ${formData.get(\'options\') || \'none\'}`;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-select-example\',\n  template: `\n    <form (submit)="onSubmit($event)">\n      <p-select name="options" label="Some Label">\n        <p-select-option value="a">Option A</p-select-option>\n        <p-select-option value="b">Option B</p-select-option>\n        <p-select-option value="c">Option C</p-select-option>\n        <p-select-option value="d">Option D</p-select-option>\n        <p-select-option value="e">Option E</p-select-option>\n        <p-select-option value="f">Option F</p-select-option>\n      </p-select>\n      <button type="submit">Submit</button>\n    </form>\n\n    <p-text>Last submitted data: {{ lastSubmittedData }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectExampleComponent {\n  lastSubmittedData: string = \'none\';\n\n  onSubmit(e: Event): void {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    this.lastSubmittedData = formData.get(\'options\')?.toString() || \'none\';\n  }\n}',react:'import { type FormEvent, useState } from \'react\';\nimport { PSelect, PSelectOption, PText } from \'@porsche-design-system/components-react\';\n\nexport const SelectExamplePage = (): JSX.Element => {\n  const [lastSubmittedData, setLastSubmittedData] = useState(\'none\');\n\n  const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    setLastSubmittedData(formData.get(\'options\')?.toString() || \'none\');\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <PSelect name="options" label="Some Label" value="a">\n          <PSelectOption value="a">Option A</PSelectOption>\n          <PSelectOption value="b">Option B</PSelectOption>\n          <PSelectOption value="c">Option C</PSelectOption>\n          <PSelectOption value="d">Option D</PSelectOption>\n          <PSelectOption value="e">Option E</PSelectOption>\n          <PSelectOption value="f">Option F</PSelectOption>\n        </PSelect>\n        <button type="submit">Submit</button>\n      </form>\n\n      <PText>Last submitted data: {lastSubmittedData}</PText>\n    </>\n  );\n};',vue:"<script setup lang=\"ts\">\n  import { PSelect, PSelectOption, PText } from '@porsche-design-system/components-vue';\n  import { ref } from 'vue';\n\n  const lastSubmittedData = ref<string>('none');\n  const onSubmit = (e: Event) => {\n    const formData = new FormData(e.target as HTMLFormElement);\n    lastSubmittedData.value = formData.get('options')?.toString() || 'none';\n  };\n<\/script>\n\n<template>\n  <form @submit.prevent=\"onSubmit\">\n    <PSelect :name=\"'options'\" :label=\"'Some Label'\" value=\"'a'\">\n      <PSelectOption :value=\"'a'\">Option A</PSelectOption>\n      <PSelectOption :value=\"'b'\">Option B</PSelectOption>\n      <PSelectOption :value=\"'c'\">Option C</PSelectOption>\n      <PSelectOption :value=\"'d'\">Option D</PSelectOption>\n      <PSelectOption :value=\"'e'\">Option E</PSelectOption>\n      <PSelectOption :value=\"'f'\">Option F</PSelectOption>\n    </PSelect>\n    <button type=\"submit\">Submit</button>\n  </form>\n\n  <PText>Last submitted data: {{ lastSubmittedData }}</PText>\n</template>"},"example-controlled":{"vanilla-js":'<p-select name="options" label="Some Label" value="a">\n  <p-select-option value="a">Option A</p-select-option>\n  <p-select-option value="b">Option B</p-select-option>\n  <p-select-option value="c">Option C</p-select-option>\n  <p-select-option value="d">Option D</p-select-option>\n  <p-select-option value="e">Option E</p-select-option>\n  <p-select-option value="f">Option F</p-select-option>\n</p-select>\n\n<p-text>Selected value: a</p-text>\n\n<script>\n  const debugElement = document.querySelector(\'p-text\');\n  const select = document.querySelector(\'p-select\');\n\n  select.addEventListener(\'update\', (e) => {\n    e.target.value = e.detail.value;\n    setDebugText(e.detail.value);\n  });\n\n  function setDebugText(value) {\n    debugElement.innerText = `Selected value: ${value}`;\n  }\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { SelectUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-select-example-controlled\',\n  template: `\n    <p-select name="options" label="Some Label" [value]="selectedValue" (update)="onUpdate($event)">\n      <p-select-option value="a">Option A</p-select-option>\n      <p-select-option value="b">Option B</p-select-option>\n      <p-select-option value="c">Option C</p-select-option>\n      <p-select-option value="d">Option D</p-select-option>\n      <p-select-option value="e">Option E</p-select-option>\n      <p-select-option value="f">Option F</p-select-option>\n    </p-select>\n\n    <p-text>{{ debugText }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectExampleControlledComponent {\n  selectedValue: string = \'a\';\n  get debugText(): string {\n    return `Selected value: ${this.selectedValue}`;\n  }\n\n  onUpdate(e: CustomEvent<SelectUpdateEventDetail>) {\n    this.selectedValue = e.detail.value;\n  }\n}',react:'import { useState } from \'react\';\nimport {\n  type SelectUpdateEventDetail,\n  PSelect,\n  PSelectOption,\n  type PSelectProps,\n  PText,\n} from \'@porsche-design-system/components-react\';\n\nexport const SelectControlledExamplePage = (): JSX.Element => {\n  const [selectedValue, setSelectedValue] = useState<PSelectProps[\'value\']>(\'a\');\n\n  const onUpdate = (e: CustomEvent<SelectUpdateEventDetail>) => {\n    setSelectedValue(e.detail.value);\n  };\n\n  const debugText = `Selected values: ${selectedValue}`;\n\n  return (\n    <>\n      <PSelect name="options" label="Some Label" value={selectedValue} onUpdate={onUpdate}>\n        <PSelectOption value="a">Option A</PSelectOption>\n        <PSelectOption value="b">Option B</PSelectOption>\n        <PSelectOption value="c">Option C</PSelectOption>\n        <PSelectOption value="d">Option D</PSelectOption>\n        <PSelectOption value="e">Option E</PSelectOption>\n        <PSelectOption value="f">Option F</PSelectOption>\n      </PSelect>\n\n      <PText>{debugText}</PText>\n    </>\n  );\n};',vue:"<script setup lang=\"ts\">\n  import { type SelectUpdateEventDetail, PSelect, PSelectOption, PText } from '@porsche-design-system/components-vue';\n  import { computed, ref } from 'vue';\n\n  const selectedValue = ref<string>('a');\n\n  const onUpdate = (e: SelectUpdateEventDetail) => {\n    selectedValue.value = e.value;\n  };\n\n  const debugText = computed(() => {\n    return `Selected values: ${selectedValue.value}`;\n  });\n<\/script>\n\n<template>\n  <PSelect :name=\"'options'\" :label=\"'Some Label'\" :value=\"selectedValue\" @update=\"onUpdate\">\n    <PSelectOption :value=\"'a'\">Option A</PSelectOption>\n    <PSelectOption :value=\"'b'\">Option B</PSelectOption>\n    <PSelectOption :value=\"'c'\">Option C</PSelectOption>\n    <PSelectOption :value=\"'d'\">Option D</PSelectOption>\n    <PSelectOption :value=\"'e'\">Option E</PSelectOption>\n    <PSelectOption :value=\"'f'\">Option F</PSelectOption>\n  </PSelect>\n\n  <PText>{{ debugText }}</PText>\n</template>"},"example-dynamic":{"vanilla-js":'<label>Value: <input name="input-value" type="text" placeholder="e.g. 1" /></label>\n<button id="btn-input-value" type="button">Set Value</button>\n<button id="btn-reset" type="button">Reset value</button>\n\n<p-select name="options" label="Some Label" value="1">\n  <p-select-option value="1">Option 1</p-select-option>\n  <p-select-option value="2">Option 2</p-select-option>\n  <p-select-option value="3">Option 3</p-select-option>\n</p-select>\n\n<button id="btn-add" type="button">Add option</button>\n<button id="btn-remove" type="button">Remove last option</button>\n\n<script>\n  const input = document.querySelector(\'input\');\n  const select = document.querySelector(\'p-select\');\n\n  select.addEventListener(\'update\', () => {\n    input.value = select.value;\n  });\n\n  document.querySelector(\'#btn-input-value\').addEventListener(\'click\', () => {\n    select.value = input.value;\n  });\n\n  document.querySelector(\'#btn-reset\').addEventListener(\'click\', () => {\n    input.value = \'\';\n    select.value = \'1\';\n  });\n\n  document.querySelector(\'#btn-add\').addEventListener(\'click\', () => {\n    addOption();\n  });\n\n  document.querySelector(\'#btn-remove\').addEventListener(\'click\', () => {\n    if (select.children.length > 0) {\n      select.lastChild.remove();\n    }\n  });\n\n  function addOption() {\n    const child = document.createElement(\'p-select-option\');\n    child.innerText = `Option ${select.children.length + 1}`;\n    child.setAttribute(\'value\', `${select.children.length + 1}`);\n    select.append(child);\n  }\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { SelectUpdateEventDetail } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-select-example-dynamic\',\n  template: `\n    <label>\n      Value:\n      <input name="input-value" type="text" [value]="inputValue" (input)="onChangeInput($event)" placeholder="e.g. 1" />\n    </label>\n    <button type="button" (click)="onSetValue()">Set Value</button>\n    <button type="button" (click)="onResetValue()">Reset value</button>\n\n    <p-select name="options" label="Some Label" [value]="selectedValue" (update)="onUpdate($event)">\n      <p-select-option *ngFor="let idx of optionIndices" [value]="(idx + 1).toString()"\n        >Option {{ idx + 1 }}</p-select-option\n      >\n    </p-select>\n\n    <button type="button" (click)="onAddOption()">Add option</button>\n    <button type="button" (click)="onRemoveOption()">Remove last option</button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectExampleDynamicComponent {\n  selectedValue: string = \'1\';\n  inputValue: string = \'\';\n  optionCount: number = 3;\n\n  get optionIndices(): number[] {\n    return [...Array(this.optionCount).keys()];\n  }\n\n  onChangeInput(e: Event) {\n    this.inputValue = (e.target as HTMLInputElement).value;\n  }\n\n  onSetValue() {\n    this.selectedValue = this.inputValue;\n  }\n\n  onResetValue() {\n    this.selectedValue = \'1\';\n    this.inputValue = \'\';\n  }\n\n  onUpdate(e: CustomEvent<SelectUpdateEventDetail>) {\n    this.selectedValue = e.detail.value;\n    this.inputValue = e.detail.value;\n  }\n\n  onAddOption() {\n    this.optionCount += 1;\n  }\n\n  onRemoveOption() {\n    if (this.optionCount > 0) {\n      this.optionCount -= 1;\n    }\n  }\n}',react:'import { type ChangeEvent, useState } from \'react\';\nimport {\n  type SelectUpdateEventDetail,\n  PSelect,\n  PSelectOption,\n  type PSelectProps,\n} from \'@porsche-design-system/components-react\';\n\nexport const SelectDynamicExamplePage = (): JSX.Element => {\n  const [selectedValue, setSelectedValue] = useState<PSelectProps[\'value\']>(\'1\');\n  const [inputValue, setInputValue] = useState(\'\');\n  const [optionCount, setOptionCount] = useState(3);\n\n  const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const onSetValue = () => {\n    setSelectedValue(inputValue);\n  };\n\n  const onResetValue = () => {\n    setSelectedValue(\'1\');\n    setInputValue(\'\');\n  };\n\n  const onUpdate = (e: CustomEvent<SelectUpdateEventDetail>) => {\n    setSelectedValue(e.detail.value);\n    setInputValue(e.detail.value);\n  };\n\n  const onAddOption = () => {\n    setOptionCount((prev) => prev + 1);\n  };\n\n  const onRemoveOption = () => {\n    if (optionCount > 0) {\n      setOptionCount((prev) => prev - 1);\n    }\n  };\n\n  return (\n    <>\n      <label>\n        Value:{\' \'}\n        <input name="input-value" type="text" value={inputValue} onChange={onChangeInput} placeholder="e.g. 1,2" />\n      </label>\n      <button type="button" onClick={onSetValue}>\n        Set Value\n      </button>\n      <button type="button" onClick={onResetValue}>\n        Reset value\n      </button>\n\n      <PSelect name="options" label="Some Label" value={selectedValue} onUpdate={onUpdate}>\n        {[...Array(optionCount).keys()].map((idx) => (\n          <PSelectOption key={idx} value={`${idx + 1}`}>\n            Option {idx + 1}\n          </PSelectOption>\n        ))}\n      </PSelect>\n\n      <button type="button" onClick={onAddOption}>\n        Add option\n      </button>\n      <button type="button" onClick={onRemoveOption}>\n        Remove last option\n      </button>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import { type SelectUpdateEventDetail, PSelect, PSelectOption } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const selectedValue = ref<string>(\'1\');\n  const inputValue = ref<string>(\'\');\n  const optionCount = ref<number>(3);\n\n  const onSetValue = () => {\n    selectedValue.value = inputValue.value;\n  };\n\n  const onResetValue = () => {\n    selectedValue.value = \'1\';\n    inputValue.value = \'\';\n  };\n\n  const onUpdate = (e: SelectUpdateEventDetail) => {\n    selectedValue.value = e.value;\n    inputValue.value = e.value;\n  };\n\n  const onAddOption = () => {\n    optionCount.value++;\n  };\n\n  const onRemoveOption = () => {\n    if (optionCount.value > 0) {\n      optionCount.value--;\n    }\n  };\n<\/script>\n\n<template>\n  <div>\n    <label>\n      Value:\n      <input name="input-value" type="text" v-model="inputValue" placeholder="e.g. 1" />\n    </label>\n    <button type="button" @click="onSetValue">Set Value</button>\n    <button type="button" @click="onResetValue">Reset value</button>\n\n    <PSelect :name="\'options\'" :label="\'Some Label\'" :value="selectedValue" @update="onUpdate">\n      <PSelectOption v-for="idx in optionCount" :key="idx" :value="`${idx}`"> Option {{ idx }} </PSelectOption>\n    </PSelect>\n\n    <button type="button" @click="onAddOption">Add option</button>\n    <button type="button" @click="onRemoveOption">Remove last option</button>\n  </div>\n</template>'},"example-required":{"vanilla-js":'<input type="checkbox" id="required" name="required" checked="checked" />\n<label for="required">Required</label>\n\n<input type="checkbox" id="deselection" name="deselection" />\n<label for="deselection">Allow deselection</label>\n\n<form>\n  <p-select name="options" label="Some Label" required>\n    <p-select-option value="1">Option 1</p-select-option>\n    <p-select-option value="2">Option 2</p-select-option>\n    <p-select-option value="3">Option 3</p-select-option>\n  </p-select>\n  <button type="submit">Submit</button>\n</form>\n\n<p-text>Last submitted data: none</p-text>\n\n<script>\n  const select = document.querySelector(\'p-select\');\n  const required = document.querySelector(\'#required\');\n  const deselection = document.querySelector(\'#deselection\');\n\n  required.addEventListener(\'change\', (e) => {\n    select.toggleAttribute(\'required\', e.target.checked);\n  });\n\n  deselection.addEventListener(\'change\', (e) => {\n    if (e.target.checked) {\n      select.prepend(document.createElement(\'p-select-option\'));\n    } else {\n      document.querySelector(\'p-select-option:not([value])\').remove();\n    }\n  });\n\n  const debugElement = document.querySelector(\'p-text\');\n  const form = document.querySelector(\'form\');\n\n  form.addEventListener(\'submit\', (e) => {\n    e.preventDefault();\n    const formData = new FormData(form);\n    debugElement.innerText = `Last submitted data: ${formData.get(\'options\')}`;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-select-example-required\',\n  template: `\n    <label>\n      <input type="checkbox" name="required" [checked]="isRequired" (change)="onChangeRequired()" />\n      Required\n    </label>\n    <label>\n      <input type="checkbox" name="deselection" [checked]="hasDeselection" (change)="onChangeDeselection()" />\n      Allow deselection\n    </label>\n\n    <form (submit)="onSubmit($event)">\n      <p-select name="options" label="Some Label" [required]="isRequired">\n        <p-select-option *ngIf="hasDeselection"></p-select-option>\n        <p-select-option value="1">Option 1</p-select-option>\n        <p-select-option value="2">Option 2</p-select-option>\n        <p-select-option value="3">Option 3</p-select-option>\n      </p-select>\n      <button type="submit">Submit</button>\n    </form>\n\n    <p-text>Last submitted data: {{ lastSubmittedData }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectExampleRequiredComponent {\n  isRequired: boolean = true;\n  hasDeselection: boolean = false;\n  lastSubmittedData: string = \'none\';\n\n  onChangeRequired() {\n    this.isRequired = !this.isRequired;\n  }\n\n  onChangeDeselection() {\n    this.hasDeselection = !this.hasDeselection;\n  }\n\n  onSubmit(e: Event): void {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    this.lastSubmittedData = formData.get(\'options\')?.toString() || \'none\';\n  }\n}',react:'import { type FormEvent, useState } from \'react\';\nimport { PSelect, PSelectOption, PText } from \'@porsche-design-system/components-react\';\n\nexport const SelectRequiredExamplePage = (): JSX.Element => {\n  const [lastSubmittedData, setLastSubmittedData] = useState(\'none\');\n  const [isRequired, setIsRequired] = useState(true);\n  const [hasDeselection, setHasDeselection] = useState(false);\n\n  const onChangeRequired = () => {\n    setIsRequired((prev) => !prev);\n  };\n\n  const onChangeDeselection = () => {\n    setHasDeselection((prev) => !prev);\n  };\n\n  const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    setLastSubmittedData(formData.get(\'options\')?.toString() || \'none\');\n  };\n\n  return (\n    <>\n      <label>\n        <input type="checkbox" name="required" checked={isRequired} onChange={() => onChangeRequired} />\n        Required\n      </label>\n      <label>\n        <input type="checkbox" name="deselection" checked={hasDeselection} onChange={() => onChangeDeselection} />\n        Allow deselection\n      </label>\n\n      <form onSubmit={onSubmit}>\n        <PSelect name="options" label="Some Label" required={isRequired}>\n          {hasDeselection && <PSelectOption></PSelectOption>}\n          <PSelectOption value="1">Option 1</PSelectOption>\n          <PSelectOption value="2">Option 2</PSelectOption>\n          <PSelectOption value="3">Option 3</PSelectOption>\n        </PSelect>\n        <button type="submit">Submit</button>\n      </form>\n\n      <PText>Last submitted data: {lastSubmittedData}</PText>\n    </>\n  );\n};',vue:'<script setup lang="ts">\n  import { PSelect, PSelectOption, PText } from \'@porsche-design-system/components-vue\';\n  import { ref } from \'vue\';\n\n  const lastSubmittedData = ref<string>(\'none\');\n  const isRequired = ref<boolean>(true);\n  const hasDeselection = ref<boolean>(false);\n\n  const onChangeRequired = () => {\n    isRequired.value = !isRequired.value;\n  };\n\n  const onChangeDeselection = () => {\n    hasDeselection.value = !hasDeselection.value;\n  };\n\n  const onSubmit = (e: Event) => {\n    const formData = new FormData(e.target as HTMLFormElement);\n    lastSubmittedData.value = formData.get(\'options\')?.toString() || \'none\';\n  };\n<\/script>\n\n<template>\n  <label>\n    <input type="checkbox" name="required" :checked="isRequired" @change="onChangeRequired" />\n    Required\n  </label>\n  <label>\n    <input type="checkbox" name="deselection" :checked="hasDeselection" @change="onChangeDeselection" />\n    Allow deselection\n  </label>\n\n  <form @submit.prevent="onSubmit">\n    <p-select name="options" label="Some Label" :required="isRequired">\n      <p-select-option v-if="hasDeselection"></p-select-option>\n      <p-select-option value="1">Option 1</p-select-option>\n      <p-select-option value="2">Option 2</p-select-option>\n      <p-select-option value="3">Option 3</p-select-option>\n    </p-select>\n    <button type="submit">Submit</button>\n  </form>\n\n  <PText>Last submitted data: {{ lastSubmittedData }}</PText>\n</template>'}};return t[e]},a=e=>{const t={default:{"vanilla-js":"<form>\n  <p-textarea name=\"some-name\" label=\"Some Label\"></p-textarea>\n  <button type=\"submit\">Submit</button>\n</form>\n\n<p-text>Last submitted data: ''</p-text>\n\n<script>\n  const debugElement = document.querySelector('p-text');\n  const form = document.querySelector('form');\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n    const formData = new FormData(form);\n    debugElement.innerText = `Last submitted data: ${formData.get('some-name')}`;\n  });\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'page-textarea-example',\n  template: `\n    <form (submit)=\"onSubmit($event)\">\n      <p-textarea name=\"some-name\" label=\"Some Label\"></p-textarea>\n      <button type=\"submit\">Submit</button>\n    </form>\n\n    <p-text>Last submitted data: {{ lastSubmittedData }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextareaExampleComponent {\n  lastSubmittedData: string = '';\n\n  onSubmit(e: Event): void {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    this.lastSubmittedData = formData.get('some-name') as string;\n  }\n}",react:"import { type FormEvent, useState } from 'react';\nimport { PTextarea, PText } from '@porsche-design-system/components-react';\n\nexport const TextareaExamplePage = (): JSX.Element => {\n  const [lastSubmittedData, setLastSubmittedData] = useState('');\n\n  const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    setLastSubmittedData(formData.get('some-name') as string);\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <PTextarea name=\"some-name\" label=\"Some Label\"></PTextarea>\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      <PText>Last submitted data: {lastSubmittedData}</PText>\n    </>\n  );\n};",vue:"<script setup lang=\"ts\">\n  import { PTextarea, PText } from '@porsche-design-system/components-vue';\n  import { ref } from 'vue';\n\n  const lastSubmittedData = ref('');\n  const onSubmit = (e: Event) => {\n    const formData = new FormData(e.target as HTMLFormElement);\n    lastSubmittedData.value = formData.get('some-name') as string;\n  };\n<\/script>\n\n<template>\n  <form @submit.prevent=\"onSubmit\">\n    <PTextarea :name=\"'some-name'\" :label=\"'Some Label'\" />\n    <button type=\"submit\">Submit</button>\n  </form>\n\n  <PText>Last submitted data: {{ lastSubmittedData }}</PText>\n</template>"},"example-controlled":{"vanilla-js":"<p-textarea name=\"some-name\" label=\"Some Label\"></p-textarea>\n\n<p-text>Value: ''</p-text>\n\n<script>\n  const debugElement = document.querySelector('p-text');\n  const textarea = document.querySelector('p-textarea');\n\n  textarea.addEventListener('input', (e) => {\n    e.target.value = e.detail.value;\n    setDebugText(e.detail.value);\n  });\n\n  function setDebugText(value) {\n    debugElement.innerText = `Value: ${value}`;\n  }\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { TextareaInputEventDetail } from '@porsche-design-system/components';\n\n@Component({\n  selector: 'page-textarea-example-controlled',\n  template: `\n    <p-textarea name=\"some-name\" label=\"Some Label\" [value]=\"value\" (input)=\"onInput($event)\" />\n    <p-text>{{ debugText }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextareaExampleControlledComponent {\n  value: string = '';\n  get debugText(): string {\n    return `Value: ${this.value}`;\n  }\n\n  onInput(e: CustomEvent<TextareaInputEventDetail>) {\n    this.value = (e.target as HTMLTextAreaElement).value;\n  }\n}",react:"import { useState } from 'react';\nimport { PText, type PTextareaProps } from '@porsche-design-system/components-react';\nimport { PTextarea } from '@porsche-design-system/components-react';\nimport { TextareaInputEventDetail } from '@porsche-design-system/components';\n\nexport const TextareaControlledExamplePage = (): JSX.Element => {\n  const [value, setValue] = useState<PTextareaProps['value']>('');\n\n  const onInput = (e: CustomEvent<TextareaInputEventDetail>) => {\n    setValue((e.target as HTMLTextAreaElement).value);\n  };\n\n  const debugText = `Value: ${value}`;\n\n  return (\n    <>\n      <PTextarea name=\"some-name\" value={value} onInput={(e) => onInput(e as CustomEvent<TextareaInputEventDetail>)} />\n      <PText>{debugText}</PText>\n    </>\n  );\n};",vue:"<script setup lang=\"ts\">\n  import { PTextarea, PText } from '@porsche-design-system/components-vue';\n  import { computed, ref } from 'vue';\n  import type { TextareaInputEventDetail } from '@porsche-design-system/components';\n\n  const value = ref<string>('');\n\n  const onInput = (e: TextareaInputEventDetail) => {\n    value.value = (e.target as HTMLTextAreaElement).value;\n  };\n\n  const debugText = computed(() => {\n    return `Value: ${value.value}`;\n  });\n<\/script>\n\n<template>\n  <PTextarea :name=\"'some-name'\" :label=\"'Some Label'\" :value=\"value\" @input=\"onInput\" />\n  <PText>{{ debugText }}</PText>\n</template>"}};return t[e]};var r=n("0796"),u=Date.now(),s="fnValues"+u,p="fnStyle"+ ++u,c=function(){return{onCreateRule:function(e,t,n){if("function"!==typeof t)return null;var o=Object(r["createRule"])(e,{},n);return o[p]=t,o},onProcessStyle:function(e,t){if(s in t||p in t)return e;var n={};for(var o in e){var l=e[o];"function"===typeof l&&(delete e[o],n[o]=l)}return t[s]=n,e},onUpdate:function(e,t,n,o){var l=t,i=l[p];i&&(l.style=i(e)||{});var a=l[s];if(a)for(var r in a)l.prop(r,a[r](e),o)}}},m=c,d=n("844f"),b=function(e){return e&&e[d["a"]]&&e===e[d["a"]]()},v=function(e){return{onCreateRule:function(t,n,o){if(!b(n))return null;var l=n,i=Object(r["createRule"])(t,{},o);return l.subscribe((function(t){for(var n in t)i.prop(n,t[n],e)})),i},onProcessRule:function(t){if(!t||"style"===t.type){var n=t,o=n.style,l=function(t){var l=o[t];if(!b(l))return"continue";delete o[t],l.subscribe({next:function(o){n.prop(t,o,e)}})};for(var i in o)l(i)}}}},f=v,g=/;\n/,S=function(e){for(var t={},n=e.split(g),o=0;o<n.length;o++){var l=(n[o]||"").trim();if(l){var i=l.indexOf(":");if(-1!==i){var a=l.substr(0,i).trim(),r=l.substr(i+1).trim();t[a]=r}}}return t},h=function(e){"string"===typeof e.style&&(e.style=S(e.style))};function y(){return{onProcessRule:h}}var x=y,P=n("fc89"),O=n("7316"),D=function(e){return e&&"object"===typeof e&&!Array.isArray(e)},k="extendCurrValue"+Date.now();function C(e,t,n,o){var l=typeof e.extend;if("string"!==l)if(Array.isArray(e.extend))for(var i=0;i<e.extend.length;i++){var a=e.extend[i],r="string"===typeof a?Object(O["a"])({},e,{extend:a}):e.extend[i];T(r,t,n,o)}else for(var u in e.extend)"extend"!==u?D(e.extend[u])?(u in o||(o[u]={}),T(e.extend[u],t,n,o[u])):o[u]=e.extend[u]:T(e.extend.extend,t,n,o);else{if(!n)return;var s=n.getRule(e.extend);if(!s)return;if(s===t)return;var p=s.options.parent;if(p){var c=p.rules.raw[e.extend];T(c,t,n,o)}}}function E(e,t,n,o){for(var l in e)"extend"!==l&&(D(o[l])&&D(e[l])?T(e[l],t,n,o[l]):D(e[l])?o[l]=T(e[l],t,n):o[l]=e[l])}function T(e,t,n,o){return void 0===o&&(o={}),C(e,t,n,o),E(e,t,n,o),o}function w(){function e(e,t,n){return"extend"in e?T(e,t,n):e}function t(e,t,n){if("extend"!==t)return e;if(null==e||!1===e){for(var o in n[k])n.prop(o,null);return n[k]=null,null}if("object"===typeof e){for(var l in e)n.prop(l,e[l]);n[k]=e}return null}return{onProcessStyle:e,onChangeValue:t}}var V=w,L=n("041c");function M(e,t){if(!t)return!0;if(Array.isArray(t)){for(var n=0;n<t.length;n++){var o=M(e,t[n]);if(!o)return!1}return!0}if(t.indexOf(" ")>-1)return M(e,t.split(" "));var l=e.options.parent;if("$"===t[0]){var i=l.getRule(t.substr(1));return!!i&&(i!==e&&(l.classes[e.key]+=" "+l.classes[i.key],!0))}return l.classes[e.key]+=" "+t,!0}function A(){function e(e,t){return"composes"in e?(M(t,e.composes),delete e.composes,e):e}return{onProcessStyle:e}}var R=A,q=n("60e8"),j=r["hasCSSTOMSupport"]&&CSS?CSS.px:"px",U=r["hasCSSTOMSupport"]&&CSS?CSS.ms:"ms",F=r["hasCSSTOMSupport"]&&CSS?CSS.percent:"%",I={"animation-delay":U,"animation-duration":U,"background-position":j,"background-position-x":j,"background-position-y":j,"background-size":j,border:j,"border-bottom":j,"border-bottom-left-radius":j,"border-bottom-right-radius":j,"border-bottom-width":j,"border-left":j,"border-left-width":j,"border-radius":j,"border-right":j,"border-right-width":j,"border-top":j,"border-top-left-radius":j,"border-top-right-radius":j,"border-top-width":j,"border-width":j,"border-block":j,"border-block-end":j,"border-block-end-width":j,"border-block-start":j,"border-block-start-width":j,"border-block-width":j,"border-inline":j,"border-inline-end":j,"border-inline-end-width":j,"border-inline-start":j,"border-inline-start-width":j,"border-inline-width":j,"border-start-start-radius":j,"border-start-end-radius":j,"border-end-start-radius":j,"border-end-end-radius":j,margin:j,"margin-bottom":j,"margin-left":j,"margin-right":j,"margin-top":j,"margin-block":j,"margin-block-end":j,"margin-block-start":j,"margin-inline":j,"margin-inline-end":j,"margin-inline-start":j,padding:j,"padding-bottom":j,"padding-left":j,"padding-right":j,"padding-top":j,"padding-block":j,"padding-block-end":j,"padding-block-start":j,"padding-inline":j,"padding-inline-end":j,"padding-inline-start":j,"mask-position-x":j,"mask-position-y":j,"mask-size":j,height:j,width:j,"min-height":j,"max-height":j,"min-width":j,"max-width":j,bottom:j,left:j,top:j,right:j,inset:j,"inset-block":j,"inset-block-end":j,"inset-block-start":j,"inset-inline":j,"inset-inline-end":j,"inset-inline-start":j,"box-shadow":j,"text-shadow":j,"column-gap":j,"column-rule":j,"column-rule-width":j,"column-width":j,"font-size":j,"font-size-delta":j,"letter-spacing":j,"text-decoration-thickness":j,"text-indent":j,"text-stroke":j,"text-stroke-width":j,"word-spacing":j,motion:j,"motion-offset":j,outline:j,"outline-offset":j,"outline-width":j,perspective:j,"perspective-origin-x":F,"perspective-origin-y":F,"transform-origin":F,"transform-origin-x":F,"transform-origin-y":F,"transform-origin-z":F,"transition-delay":U,"transition-duration":U,"vertical-align":j,"flex-basis":j,"shape-margin":j,size:j,gap:j,grid:j,"grid-gap":j,"row-gap":j,"grid-row-gap":j,"grid-column-gap":j,"grid-template-rows":j,"grid-template-columns":j,"grid-auto-rows":j,"grid-auto-columns":j,"box-shadow-x":j,"box-shadow-y":j,"box-shadow-blur":j,"box-shadow-spread":j,"font-line-height":j,"text-shadow-x":j,"text-shadow-y":j,"text-shadow-blur":j};function $(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},o={};for(var l in e)o[l]=e[l],o[l.replace(t,n)]=e[l];return o}var H=$(I);function z(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var o=0;o<t.length;o++)t[o]=z(e,t[o],n);else if("object"===typeof t)if("fallbacks"===e)for(var l in t)t[l]=z(l,t[l],n);else for(var i in t)t[i]=z(e+"-"+i,t[i],n);else if("number"===typeof t&&!1===isNaN(t)){var a=n[e]||H[e];return!a||0===t&&a===j?t.toString():"function"===typeof a?a(t).toString():""+t+a}return t}function B(e){void 0===e&&(e={});var t=$(e);function n(e,n){if("style"!==n.type)return e;for(var o in e)e[o]=z(o,e[o],t);return e}function o(e,n){return z(n,e,t)}return{onProcessStyle:n,onChangeValue:o}}var W=B,J={"background-size":!0,"background-position":!0,border:!0,"border-bottom":!0,"border-left":!0,"border-top":!0,"border-right":!0,"border-radius":!0,"border-image":!0,"border-width":!0,"border-style":!0,"border-color":!0,"box-shadow":!0,flex:!0,margin:!0,padding:!0,outline:!0,"transform-origin":!0,transform:!0,transition:!0},N={position:!0,size:!0},X={padding:{top:0,right:0,bottom:0,left:0},margin:{top:0,right:0,bottom:0,left:0},background:{attachment:null,color:null,image:null,position:null,repeat:null},border:{width:null,style:null,color:null},"border-top":{width:null,style:null,color:null},"border-right":{width:null,style:null,color:null},"border-bottom":{width:null,style:null,color:null},"border-left":{width:null,style:null,color:null},outline:{width:null,style:null,color:null},"list-style":{type:null,position:null,image:null},transition:{property:null,duration:null,"timing-function":null,timingFunction:null,delay:null},animation:{name:null,duration:null,"timing-function":null,timingFunction:null,delay:null,"iteration-count":null,iterationCount:null,direction:null,"fill-mode":null,fillMode:null,"play-state":null,playState:null},"box-shadow":{x:0,y:0,blur:0,spread:0,color:null,inset:null},"text-shadow":{x:0,y:0,blur:null,color:null}},_={border:{radius:"border-radius",image:"border-image",width:"border-width",style:"border-style",color:"border-color"},"border-bottom":{width:"border-bottom-width",style:"border-bottom-style",color:"border-bottom-color"},"border-top":{width:"border-top-width",style:"border-top-style",color:"border-top-color"},"border-left":{width:"border-left-width",style:"border-left-style",color:"border-left-color"},"border-right":{width:"border-right-width",style:"border-right-style",color:"border-right-color"},background:{size:"background-size",image:"background-image"},font:{style:"font-style",variant:"font-variant",weight:"font-weight",stretch:"font-stretch",size:"font-size",family:"font-family",lineHeight:"line-height","line-height":"line-height"},flex:{grow:"flex-grow",basis:"flex-basis",direction:"flex-direction",wrap:"flex-wrap",flow:"flex-flow",shrink:"flex-shrink"},align:{self:"align-self",items:"align-items",content:"align-content"},grid:{"template-columns":"grid-template-columns",templateColumns:"grid-template-columns","template-rows":"grid-template-rows",templateRows:"grid-template-rows","template-areas":"grid-template-areas",templateAreas:"grid-template-areas",template:"grid-template","auto-columns":"grid-auto-columns",autoColumns:"grid-auto-columns","auto-rows":"grid-auto-rows",autoRows:"grid-auto-rows","auto-flow":"grid-auto-flow",autoFlow:"grid-auto-flow",row:"grid-row",column:"grid-column","row-start":"grid-row-start",rowStart:"grid-row-start","row-end":"grid-row-end",rowEnd:"grid-row-end","column-start":"grid-column-start",columnStart:"grid-column-start","column-end":"grid-column-end",columnEnd:"grid-column-end",area:"grid-area",gap:"grid-gap","row-gap":"grid-row-gap",rowGap:"grid-row-gap","column-gap":"grid-column-gap",columnGap:"grid-column-gap"}};function G(e,t,n){return e.map((function(e){return K(e,t,n,!1,!0)}))}function Q(e,t,n,o){return null==n[t]?e:0===e.length?[]:Array.isArray(e[0])?Q(e[0],t,n,o):"object"===typeof e[0]?G(e,t,o):[e]}function K(e,t,n,o,l){if(!X[t]&&!_[t])return[];var i=[];if(_[t]&&(e=Y(e,n,_[t],o)),Object.keys(e).length)for(var a in X[t])e[a]?Array.isArray(e[a])?i.push(null===N[a]?e[a]:e[a].join(" ")):i.push(e[a]):null!=X[t][a]&&i.push(X[t][a]);return!i.length||l?i:[i]}function Y(e,t,n,o){for(var l in n){var i=n[l];if("undefined"!==typeof e[l]&&(o||!t.prop(i))){var a,r=Z((a={},a[i]=e[l],a),t)[i];o?t.style.fallbacks[i]=r:t.style[i]=r}delete e[l]}return e}function Z(e,t,n){for(var o in e){var l=e[o];if(Array.isArray(l)){if(!Array.isArray(l[0])){if("fallbacks"===o){for(var i=0;i<e.fallbacks.length;i++)e.fallbacks[i]=Z(e.fallbacks[i],t,!0);continue}e[o]=Q(l,o,J,t),e[o].length||delete e[o]}}else if("object"===typeof l){if("fallbacks"===o){e.fallbacks=Z(e.fallbacks,t,!0);continue}e[o]=K(l,o,t,n),e[o].length||delete e[o]}else""===e[o]&&delete e[o]}return e}function ee(){function e(e,t){if(!e||"style"!==t.type)return e;if(Array.isArray(e)){for(var n=0;n<e.length;n++)e[n]=Z(e[n],t);return e}return Z(e,t)}return{onProcessStyle:e}}var te=ee,ne=n("dda1");function oe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function le(e){if(Array.isArray(e))return oe(e)}function ie(e){if("undefined"!==typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function ae(e,t){if(e){if("string"===typeof e)return oe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?oe(e,t):void 0}}n("f38f");function re(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function ue(e){return le(e)||ie(e)||ae(e)||re()}var se="",pe="",ce="",me="",de=ne["a"]&&"ontouchstart"in document.documentElement;if(ne["a"]){var be={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},ve=document.createElement("p"),fe=ve.style,ge="Transform";for(var Se in be)if(Se+ge in fe){se=Se,pe=be[Se];break}"Webkit"===se&&"msHyphens"in fe&&(se="ms",pe=be.ms,me="edge"),"Webkit"===se&&"-apple-trailing-word"in fe&&(ce="apple")}var he={js:se,css:pe,vendor:ce,browser:me,isTouch:de};function ye(e){return"-"===e[1]||"ms"===he.js?e:"@"+he.css+"keyframes"+e.substr(10)}var xe={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===he.js?"-webkit-"+e:he.css+e)}},Pe={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===he.js?he.css+"print-"+e:e)}},Oe=/[-\s]+(.)?/g;function De(e,t){return t?t.toUpperCase():""}function ke(e){return e.replace(Oe,De)}function Ce(e){return ke("-"+e)}var Ee,Te={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===he.js){var n="mask-image";if(ke(n)in t)return e;if(he.js+Ce(n)in t)return he.css+e}return e}},we={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==he.vendor||he.isTouch?e:he.css+e)}},Ve={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:he.css+e)}},Le={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:he.css+e)}},Me={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===he.js||"ms"===he.js&&"edge"!==he.browser?he.css+e:e)}},Ae={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===he.js||"ms"===he.js||"apple"===he.vendor?he.css+e:e)}},Re={supportedProperty:function(e,t){if(!/^break-/.test(e))return!1;if("Webkit"===he.js){var n="WebkitColumn"+Ce(e);return n in t&&he.css+"column-"+e}if("Moz"===he.js){var o="page"+Ce(e);return o in t&&"page-"+e}return!1}},qe={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===he.js)return e;var n=e.replace("-inline","");return he.js+Ce(n)in t&&he.css+n}},je={supportedProperty:function(e,t){return ke(e)in t&&e}},Ue={supportedProperty:function(e,t){var n=Ce(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:he.js+n in t?he.css+e:"Webkit"!==he.js&&"Webkit"+n in t&&"-webkit-"+e}},Fe={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===he.js?""+he.css+e:e)}},Ie={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===he.js?he.css+"scroll-chaining":e)}},$e={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},He={supportedProperty:function(e,t){var n=$e[e];return!!n&&(he.js+Ce(n)in t&&he.css+n)}},ze={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Be=Object.keys(ze),We=function(e){return he.css+e},Je={supportedProperty:function(e,t,n){var o=n.multiple;if(Be.indexOf(e)>-1){var l=ze[e];if(!Array.isArray(l))return he.js+Ce(l)in t&&he.css+l;if(!o)return!1;for(var i=0;i<l.length;i++)if(!(he.js+Ce(l[0])in t))return!1;return l.map(We)}return!1}},Ne=[xe,Pe,Te,we,Ve,Le,Me,Ae,Re,qe,je,Ue,Fe,Ie,He,Je],Xe=Ne.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),_e=Ne.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,ue(t.noPrefill)),e}),[]),Ge={};if(ne["a"]){Ee=document.createElement("p");var Qe=window.getComputedStyle(document.documentElement,"");for(var Ke in Qe)isNaN(Ke)||(Ge[Qe[Ke]]=Qe[Ke]);_e.forEach((function(e){return delete Ge[e]}))}function Ye(e,t){if(void 0===t&&(t={}),!Ee)return e;if(null!=Ge[e])return Ge[e];"transition"!==e&&"transform"!==e||(t[e]=e in Ee.style);for(var n=0;n<Xe.length;n++)if(Ge[e]=Xe[n](e,Ee.style,t),Ge[e])break;try{Ee.style[e]=""}catch(o){return!1}return Ge[e]}var Ze,et={},tt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},nt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function ot(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var o=t?Ye(t):", "+Ye(n);return o||(t||n)}function lt(e,t){var n=t;if(!Ze||"content"===e)return t;if("string"!==typeof n||!isNaN(parseInt(n,10)))return n;var o=e+n;if(null!=et[o])return et[o];try{Ze.style[e]=n}catch(l){return et[o]=!1,!1}if(tt[e])n=n.replace(nt,ot);else if(""===Ze.style[e]&&(n=he.css+n,"-ms-flex"===n&&(Ze.style[e]="-ms-flexbox"),Ze.style[e]=n,""===Ze.style[e]))return et[o]=!1,!1;return Ze.style[e]="",et[o]=n,et[o]}function it(){function e(e){if("keyframes"===e.type){var t=e;t.at=ye(t.at)}}function t(e){for(var n in e){var o=e[n];if("fallbacks"===n&&Array.isArray(o))e[n]=o.map(t);else{var l=!1,i=Ye(n);i&&i!==n&&(l=!0);var a=!1,u=lt(i,Object(r["toCssValue"])(o));u&&u!==o&&(a=!0),(l||a)&&(l&&delete e[n],e[i||n]=u||o)}}return e}function n(e,n){return"style"!==n.type?e:t(e)}function o(e,t){return lt(t,Object(r["toCssValue"])(e))||e}return{onProcessRule:e,onProcessStyle:n,onChangeValue:o}}ne["a"]&&(Ze=document.createElement("p"));var at=it;function rt(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var o={},l=Object.keys(t).sort(e),i=0;i<l.length;i++)o[l[i]]=t[l[i]];return o}}}var ut=rt,st=function(e){return void 0===e&&(e={}),{plugins:[m(),f(e.observable),x(),Object(P["a"])(),V(),Object(L["a"])(),R(),Object(q["a"])(),W(e.defaultUnit),te(),at(),ut()]}},pt=st,ct=n("3f3b"),mt=n.n(ct);r["default"].setup({...pt(),createGenerateId:()=>e=>e.key,plugins:[...pt().plugins,mt()({combineMediaQueries:!0})]})},"844f":function(e,t,n){"use strict";(function(e,o){var l,i=n("2ab1");l="undefined"!==typeof self?self:"undefined"!==typeof window?window:"undefined"!==typeof e?e:o;var a=Object(i["a"])(l);t["a"]=a}).call(this,n("c8ba"),n("dd40")(e))},dd40:function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}}}]);
//# sourceMappingURL=chunk-6a2365d1.aa2f94be.js.map