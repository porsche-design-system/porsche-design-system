(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c9af9"],{"59cb":function(e,n,t){"use strict";t.r(n);var o=function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},i=[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"vmark"},[t("h1",[e._v("Js")]),t("h2",[e._v("Breakpoints")]),t("p",[e._v("We provide a "),t("code",[e._v("breakpoint")]),e._v(" object with predefined values: "),t("code",[e._v("xxs | xs | s | m | l | xl | xxl")])]),t("h4",[e._v("Example")]),t("pre",[t("code",{staticClass:"language-tsx"},[e._v("import { breakpoint } from '@porsche-design-system/utilities';\n\nif (window.matchMedia(`(min-width: ${breakpoint.m}px)`).matches) {\n  /* The viewport is greater than, or equal to the breakpointValue wide */\n} else {\n  /* The viewport is less than breakpointValue wide */\n}\n")])]),t("h2",[e._v("Media Query")]),t("p",[e._v("The function has two parameter "),t("code",[e._v("mediaQuery(minBreakpoint: breakpoint | number, maxBreakpoint?: breakpoints | number)")]),e._v(" where the "),t("code",[e._v("minBreakpoint")]),e._v(" parameter is mandatory. You can choose any number as pixel value or our predefined breakpoints as "),t("code",[e._v("minBreakpoint")]),e._v(" or "),t("code",[e._v("maxBreakpoint")]),e._v(".")]),t("p",[e._v("The type "),t("code",[e._v("breakpoint")]),e._v(" includes predefined breakpoints: "),t("code",[e._v("xxs | xs | s | m | l | xl | xxl")])]),t("p",[e._v("The "),t("code",[e._v("mediaQuery()")]),e._v(" function returns a "),t("code",[e._v("@media (min-width: minBreakpoints) || @media (min-width: minBreakpoint) and (max-width: maxBreakpoint)")])]),t("h4",[e._v("Example predefined breakpoint")]),t("pre",[t("code",{staticClass:"language-tsx"},[e._v("import { mediaQuery, breakpoint } from '@porsche-design-system/utilities';\n\nconst StyledDiv = css`{\n  color: 'royalblue',\n\n  // from predefined breakpoint xs to m apply color aqua\n  [mediaQuery(breakpoint.xs, breakpoint.m)]: { color: 'aqua' },\n\n  // from predefined breakpoint m apply color deeppink\n  [mediaQuery(breakpoint.m)]: { color: 'deeppink' }\n}`\n\nrender (\n  <StyledDiv>\n    Styled Text\n  </StyledDiv>\n)\n")])]),t("hr"),t("h4",[e._v("Example custom breakpoint")]),t("pre",[t("code",{staticClass:"language-tsx"},[e._v("import { mediaQuery } from '@porsche-design-system/utilities';\n\nconst StyledDiv = css`{\n  color: 'royalblue',\n\n  // from 480px to 760px viewport width apply color aqua\n  [mediaQuery(480, 760)]: { color: 'aqua' },\n\n  // from 760px viewport width apply color deeppink\n  [mediaQuery(760)]: { color: 'deeppink' }\n}`\n\nrender (\n  <StyledDiv>\n    Styled Text\n  </StyledDiv>\n)\n")])]),t("hr"),t("h2",[e._v("Typography")]),t("p",[t("strong",[e._v("Note:")]),e._v(" For font-styling it's recommended to use the "),t("a",{attrs:{href:"#/components/typography#headline"}},[t("code",[e._v("<p-headline>")])]),e._v("/"),t("a",{attrs:{href:"#/components/typography#text"}},[t("code",[e._v("<p-text>")])]),e._v(" components.")]),t("p",[e._v("The predefined variables for "),t("code",[e._v("text")]),e._v(" and "),t("code",[e._v("headline")]),e._v(" "),t("strong",[e._v("only")]),e._v(" work with JSS frameworks like styled-components due to the necessity of font sizes in relation to breakpoints. You can follow e.g. "),t("a",{attrs:{href:"https://medium.com/@ttennant/react-inline-styles-and-media-queries-using-a-custom-react-hook-e76fa9ec89f6"}},[e._v("React media queries Hooks")]),e._v(" and style your custom component according to "),t("a",{attrs:{href:"#/components/typography"}},[e._v("Typography Guidelines")]),e._v(".")]),t("h3",[e._v("Text")]),t("p",[e._v("Given values are:"),t("br"),t("code",[e._v("text.xSmall | text.small | text.medium | text.large | text.xLarge")])]),t("h4",[e._v("Example")]),t("pre",[t("code",{staticClass:"language-tsx"},[e._v("import { text } from '@porsche-design-system/utilities';\nimport styled from 'styled-components';\n\nconst PTextSmall = styled.p`\n  ${text.small}\n`;\n")])]),t("h4",[e._v("Result")]),t("pre",[t("code",{staticClass:"language-css"},[e._v('p {\n  font-family: "Porsche Next", "Arial Narrow", Arial, sans-serif;\n  font-weight: 400;\n  font-size: 1rem;\n  line-height: 1.5;\n}\n')])]),t("h3",[e._v("Headline")]),t("p",[e._v("Given variables are:"),t("br"),t("code",[e._v("title.large | headline['1'] | headline['2'] | headline['3'] | headline['4'] | headline['5']")])]),t("h4",[e._v("Example")]),t("pre",[t("code",{staticClass:"language-tsx"},[e._v("import { headline } from '@porsche-design-system/utilities';\nimport styled from 'styled-components';__\n\nconst PHeadline = styled.h1`\n  ${headline['1']}\n`;\n")])]),t("h4",[e._v("Result")]),t("pre",[t("code",{staticClass:"language-css"},[e._v('h1 {\n  font-family: "Porsche Next", "Arial Narrow", Arial, sans-serif;\n  font-weight: 600;\n  font-size: 1.75rem;\n  line-height: 1.4285714286;\n}\n\n@media (min-width: 760px) and (max-width: 999px) {\n  h1 {\n    font-size: 2.25rem;\n    line-height: 1.2222222222;\n  }\n}\n\n@media (min-width: 1000px) and (max-width: 1299px) {\n  h1 {\n    font-size: 2.75rem;\n    line-height: 1.1818181818;\n  }\n}\n\n@media (min-width: 1300px) and (max-width: 1759px) {\n  h1 {\n    font-size: 3.25rem;\n    line-height: 1.2307692308;\n  }\n}\n\n@media (min-width: 1760px) {\n  h1 {\n    font-size: 3.75rem;\n    line-height: 1.2;\n  }\n}\n')])]),t("hr"),t("h2",[e._v("State")]),t("h3",[e._v("Focus")]),t("p",[e._v("The "),t("code",[e._v(":focus")]),e._v(" state helps the user to navigate through all interactive elements via tab key and is required by accessibility guidelines and law. The provided SCSS mixin ensures focus is shown by keyboard navigation only.")]),t("p",[e._v("Given options object keys:")]),t("ul",[t("li",[t("code",[e._v("color")]),e._v(": Can be overwritten when default ("),t("code",[e._v("currentColor")]),e._v(") is not sufficient, e.g. a custom button with background-color and white text on a page with white surface.")]),t("li",[t("code",[e._v("offset")]),e._v(": Can be overwritten when default offset is not sufficient.")]),t("li",[t("code",[e._v("pseudo")]),e._v(": Needed whenever the invisible clickable and focusable area of an element shall be increased relative to a wrapping element.")])]),t("h4",[e._v("Example")]),t("pre",[t("code",{staticClass:"language-tsx"},[e._v("import { color, focus } from '@porsche-design-system/utilities';\nimport styled from 'styled-components';\n\nconst Anchor = styled.a`${focus()}`;\nconst Button = styled.div`\n  // to control the focusable area of the nested button a proper position needs to be defined\n  position: relative; \n  padding: 1rem;\n  \n  // use '::before' or '::after' if the focusable area needs to be enlarged relative to a wrapping element\n  button {\n    ${focus({color: color.state.focus, offset: '1px', pseudo: '::before'})}\n  }`;\n\nreturn (\n  <>\n    <Anchor>Some Label</Anchor>\n    <Button>Some Label</Button>\n  </>\n);\n")])]),t("h4",[e._v("Result")]),t("pre",[t("code",{staticClass:"language-css"},[e._v('a { \n  outline: transparent solid 1px;\n  outline-offset: 2px;\n}\na::-moz-focus-inner { border: 0; }\na:focus { outline-color: currentColor; }\na:focus:not(:focus-visible) { outline-color: transparent; }\n\ndiv {\n  position: relative;\n  padding: 1rem;\n}\ndiv button::-moz-focus-inner { border:0; }\ndiv button::before { \n  content: "";\n  outline: transparent solid 1px;\n  outline-offset: 1px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\ndiv button:focus::before { outline-color: currentColor; }\ndiv button:focus:not(:focus-visible)::before { outline-color: transparent; }\n')])])])}],a=t("2877"),r={},s=Object(a["a"])(r,o,i,!1,null,null,null);n["default"]=s.exports}}]);
//# sourceMappingURL=chunk-2d0c9af9.d39c533f.js.map