import * as React from "react"
import cx from "classnames"

import { MetaCategorizable, ComponentMeta } from "../../../types/MetaCategorizable"
import { META, getElementType, prefix } from "../../../lib"
import { ClassNameProp, ComponentProp } from "../../../lib/props"

export interface <Component>Props extends ClassNameProp, ComponentProp {
}

const defaultProps: Partial<<Component>Props> = {
}

const _meta: ComponentMeta = {
    name: "<Component>",
    type: META.TYPES.ATOM
}

const _<Component>: React.StatelessComponent<<Component>Props> & Partial<MetaCategorizable> = (props) => {
    const {
        as,
        className,
        children,
        ...rest
    } = props

    const ElementType = getElementType(as, "div")

    const classes = cx(
        className
    )

    // You need to return a react element so that react-docgen understands this as a component.
    // If you're unsure look at the compiled output and check for return React.createElement(â€¦)
    return (
        <ElementType
            className={classes}
            {...rest}
        >
            {children}
        </ElementType>
    )
}

_<Component>.defaultProps = defaultProps

_<Component>._meta = _meta

/**
* A <Component>.
*/
export const <Component> = _<Component> as React.StatelessComponent<<Component>Props>
