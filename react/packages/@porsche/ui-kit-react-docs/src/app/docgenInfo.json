{
  "Breakpoint": {
    "displayName": "Breakpoint",
    "props": [
      {
        "description": [
          "The maximum breakpoint that includes the children."
        ],
        "name": "maxWidth",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"xs\"",
          "\"s\"",
          "\"m\"",
          "\"l\"",
          "\"xl\""
        ]
      },
      {
        "description": [
          "The minimum breakpoint that includes the children."
        ],
        "name": "minWidth",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"xs\"",
          "\"s\"",
          "\"m\"",
          "\"l\"",
          "\"xl\""
        ]
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "Show and hide children based on minimum and maximum breakpoints.",
        "The currently defined breakpoints are:",
        "xs: 480,",
        "s: 760,",
        "m: 1000,",
        "l: 1300,",
        "xl: 1760"
      ]
    },
    "path": "src/components/atoms/Breakpoint/Breakpoint.tsx"
  },
  "Divider": {
    "displayName": "Divider",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "Adds predefined top and bottom spacing for more consistent layouting.",
          "If this doesn't fit your purpose you can always customize spacings using the Spacing component."
        ],
        "name": "spacing",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"none\"",
          "\"small\"",
          "\"large\""
        ]
      }
    ],
    "docBlock": {
      "tags": [
        {
          "title": "see",
          "description": "Spacing"
        }
      ],
      "description": [
        "A very basic divider."
      ]
    },
    "path": "src/components/atoms/Divider/Divider.tsx"
  },
  "Flex": {
    "displayName": "Flex",
    "props": [
      {
        "description": [
          "Defines how the flex items are aligned along the cross axis. Corresponds to the \"alignItems\" css property."
        ],
        "name": "alignCrossAxis",
        "required": false,
        "type": "FlexCrossAxis",
        "tags": []
      },
      {
        "description": [
          "This aligns a flex container's individual lines when there is extra space in the cross-axis, similar to how \"alignMainAxis\" aligns individual items along the main axis.",
          "Corresponds to the \"alignContent\" css property."
        ],
        "name": "alignLines",
        "required": false,
        "type": "FlexAlignLines",
        "tags": []
      },
      {
        "description": [
          "Defines how the flex items are aligned along the main axis. Corresponds to the \"justifyContent\" css property."
        ],
        "name": "alignMainAxis",
        "required": false,
        "type": "FlexMainAxis",
        "tags": []
      },
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "Defines the direction of the main and cross axis. The default \"row\" defines the main axis as horizontal left to right."
        ],
        "name": "direction",
        "required": false,
        "type": "FlexDirection",
        "tags": []
      },
      {
        "description": [
          "Defines the gap between contained children. The value \"grid\" sets responsive grid spacings that should be used together with Flex.Item."
        ],
        "name": "gap",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "0",
          "3",
          "6",
          "12",
          "18",
          "24",
          "30",
          "36",
          "42",
          "48",
          "54",
          "60",
          "\"a\"",
          "\"b\"",
          "\"c\"",
          "\"d\"",
          "\"e\"",
          "\"f\"",
          "\"grid\""
        ]
      },
      {
        "description": [
          "Defines the flex container display as inline rather than block."
        ],
        "name": "inline",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "defaultValue": "true",
        "description": [
          "If set, overflowing elements will wrap to a new line."
        ],
        "name": "wrap",
        "required": false,
        "type": "FlexWrap",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [
        {
          "title": "see",
          "description": "Spacing"
        }
      ],
      "description": [
        "A flex container component used to create flex box layouts."
      ]
    },
    "path": "src/components/atoms/Flex/Flex.tsx"
  },
  "FlexItem": {
    "displayName": "FlexItem",
    "props": [
      {
        "description": [
          "Defines how this flex item is aligned along the cross axis. This overwrites the cross axis alignment set by the container. Corresponds to the \"alignSelf\" css property."
        ],
        "name": "alignCrossAxis",
        "required": false,
        "type": "FlexCrossAxis",
        "tags": []
      },
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "The offset of the column. Can be between 0 and 11. You can also supply values for specific breakpoints, like {base: \"6\", l: \"3\"}. You always need to provide a base value when doing this."
        ],
        "name": "offset",
        "required": false,
        "type": "number | BreakpointValues<number>",
        "tags": []
      },
      {
        "description": [
          "The width of the column. Can be between 1 and 12, or \"auto\". You can also supply values for specific breakpoints, like {base: \"6\", l: \"3\"}. You always need to provide a base value when doing this."
        ],
        "name": "width",
        "required": false,
        "type": "string | number | BreakpointValues<ReactText>",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "A child of a flex container."
      ]
    },
    "path": "src/components/atoms/Flex/FlexItem.tsx"
  },
  "Icon": {
    "displayName": "Icon",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Puts a circle around the icon"
        ],
        "name": "circled",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "defaultValue": "black",
        "description": [
          "The style of the color."
        ],
        "name": "color",
        "required": false,
        "type": "ColorType",
        "tags": []
      },
      {
        "description": [
          "The icon that should be used."
        ],
        "name": "name",
        "required": true,
        "type": "IconName",
        "tags": []
      },
      {
        "defaultValue": "regular",
        "description": [
          "The size of the icon."
        ],
        "name": "size",
        "required": false,
        "type": "IconSize",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "Display an Icon from the Porsche icon font at various sizes."
      ]
    },
    "path": "src/components/atoms/Icon/Icon.tsx"
  },
  "Logo": {
    "displayName": "Logo",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [
        {
          "title": "see",
          "description": "Header"
        }
      ],
      "description": [
        "The famous and loved Porsche Logo, currently available in like one size."
      ]
    },
    "path": "src/components/atoms/Logo/Logo.tsx"
  },
  "Scroll": {
    "displayName": "Scroll",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "defaultValue": "vertical",
        "description": [
          "The scroll direction."
        ],
        "name": "direction",
        "required": false,
        "type": "\"vertical\"",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "Use this component any time you want to provide a scrolling section for long content."
      ]
    },
    "path": "src/components/atoms/Scroll/Scroll.tsx"
  },
  "Spacing": {
    "displayName": "Spacing",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "margin",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "0",
          "3",
          "6",
          "12",
          "18",
          "24",
          "30",
          "36",
          "42",
          "48",
          "54",
          "60",
          "\"a\"",
          "\"b\"",
          "\"c\"",
          "\"d\"",
          "\"e\"",
          "\"f\"",
          "\"auto\""
        ]
      },
      {
        "description": [
          ""
        ],
        "name": "marginBottom",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "0",
          "3",
          "6",
          "12",
          "18",
          "24",
          "30",
          "36",
          "42",
          "48",
          "54",
          "60",
          "\"a\"",
          "\"b\"",
          "\"c\"",
          "\"d\"",
          "\"e\"",
          "\"f\"",
          "\"auto\""
        ]
      },
      {
        "description": [
          ""
        ],
        "name": "marginLeft",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "0",
          "3",
          "6",
          "12",
          "18",
          "24",
          "30",
          "36",
          "42",
          "48",
          "54",
          "60",
          "\"a\"",
          "\"b\"",
          "\"c\"",
          "\"d\"",
          "\"e\"",
          "\"f\"",
          "\"auto\""
        ]
      },
      {
        "description": [
          ""
        ],
        "name": "marginRight",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "0",
          "3",
          "6",
          "12",
          "18",
          "24",
          "30",
          "36",
          "42",
          "48",
          "54",
          "60",
          "\"a\"",
          "\"b\"",
          "\"c\"",
          "\"d\"",
          "\"e\"",
          "\"f\"",
          "\"auto\""
        ]
      },
      {
        "description": [
          ""
        ],
        "name": "marginTop",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "0",
          "3",
          "6",
          "12",
          "18",
          "24",
          "30",
          "36",
          "42",
          "48",
          "54",
          "60",
          "\"a\"",
          "\"b\"",
          "\"c\"",
          "\"d\"",
          "\"e\"",
          "\"f\"",
          "\"auto\""
        ]
      },
      {
        "description": [
          ""
        ],
        "name": "padding",
        "required": false,
        "type": "SpacingValue",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "paddingBottom",
        "required": false,
        "type": "SpacingValue",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "paddingLeft",
        "required": false,
        "type": "SpacingValue",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "paddingRight",
        "required": false,
        "type": "SpacingValue",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "paddingTop",
        "required": false,
        "type": "SpacingValue",
        "tags": []
      },
      {
        "description": [
          "Set this to true if you always want to create a wrapper, even for single childs.",
          "This is useful if the child element does not support className."
        ],
        "name": "wrap",
        "required": false,
        "type": "boolean",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [
        {
          "title": "see",
          "description": "Flex"
        }
      ],
      "description": [
        "A component to add margins and paddings to components.",
        "If it has only one child, those classes are added directly to the child to avoid unnecessary wrapper divs."
      ]
    },
    "path": "src/components/atoms/Spacing/Spacing.tsx"
  },
  "Text": {
    "displayName": "Text",
    "props": [
      {
        "description": [
          "The text alignment of the component."
        ],
        "name": "align",
        "required": false,
        "type": "TextAlignType",
        "tags": []
      },
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "defaultValue": "inherit",
        "description": [
          "The color of the text. By default, the component inherits the color of the surrounding element."
        ],
        "name": "color",
        "required": false,
        "type": "ColorType",
        "tags": []
      },
      {
        "description": [
          "Adds an ellipsis to a single line of text if it overflows."
        ],
        "name": "ellipsis",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Sets the text as display: inline."
        ],
        "name": "inline",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "defaultValue": "copy",
        "description": [
          "The style of the text."
        ],
        "name": "type",
        "required": false,
        "type": "TextType",
        "tags": []
      },
      {
        "defaultValue": "true",
        "description": [
          "Wraps the text, even when it has to break a word."
        ],
        "name": "wrap",
        "required": false,
        "type": "boolean",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "Use this component any time you want to display plain text anywhere."
      ]
    },
    "path": "src/components/atoms/Text/Text.tsx"
  },
  "Button": {
    "displayName": "Button",
    "props": [
      {
        "description": [
          "Sets the button in its active / selected state."
        ],
        "name": "active",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "A button can have centered content (icon/text)."
        ],
        "name": "centered",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "Disables the button. No onClick will be triggered."
        ],
        "name": "disabled",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "A button can show an error."
        ],
        "name": "error",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "defaultValue": "arrow_right_hair",
        "description": [
          "The icon of the button."
        ],
        "name": "icon",
        "required": false,
        "type": "IconName",
        "tags": []
      },
      {
        "description": [
          "Disable the button and show a loading indicator. No onClick will be triggered."
        ],
        "name": "loading",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Called after a user's click."
        ],
        "name": "onClick",
        "required": false,
        "type": "func",
        "tags": [
          {
            "title": "param",
            "description": "React's original event.",
            "type": null,
            "name": "event"
          },
          {
            "title": "param",
            "description": "All props of the component.",
            "type": null,
            "name": "data"
          }
        ]
      },
      {
        "defaultValue": "button",
        "description": [
          "Specifies the HTML Type of the button. If undefined, nothing is set."
        ],
        "name": "role",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"reset\"",
          "\"button\"",
          "\"submit\""
        ]
      },
      {
        "description": [
          "Shows only the icon by default, and the button content starting from a specific breakpoint"
        ],
        "name": "showContent",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"xs\"",
          "\"s\"",
          "\"m\"",
          "\"l\"",
          "\"xl\""
        ]
      },
      {
        "description": [
          "A button can stretch to fill the full available width."
        ],
        "name": "stretch",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "defaultValue": "default",
        "description": [
          "The display type of the button."
        ],
        "name": "type",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"default\"",
          "\"black\"",
          "\"red\"",
          "\"blue\"",
          "\"acid-green\"",
          "\"ghost\"",
          "\"ghost-inverted\""
        ]
      }
    ],
    "docBlock": {
      "tags": [
        {
          "title": "see",
          "description": "Icon"
        }
      ],
      "description": [
        "The default Porsche button."
      ]
    },
    "path": "src/components/molecules/Button/Button.tsx"
  },
  "ButtonGroup": {
    "displayName": "ButtonGroup",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "A button group wrapper for the default button."
      ]
    },
    "path": "src/components/molecules/Button/ButtonGroup.tsx"
  },
  "Checkbox": {
    "displayName": "Checkbox",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Custom dom attributes for the checkbox element only."
        ],
        "name": "checkboxProps",
        "required": false,
        "type": "object",
        "tags": []
      },
      {
        "defaultValue": "checked",
        "description": [
          "Whether or not the checkbox is checked."
        ],
        "name": "checked",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "A checkbox can appear disabled and be unable to change states."
        ],
        "name": "disabled",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "A checkbox can display an error."
        ],
        "name": "error",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Called when the user attempts to change the checked state."
        ],
        "name": "onChange",
        "required": false,
        "type": "func",
        "tags": [
          {
            "title": "param",
            "description": "The proposed value after the change.",
            "type": null,
            "name": "value"
          },
          {
            "title": "param",
            "description": "React's original event.",
            "type": null,
            "name": "event"
          },
          {
            "title": "param",
            "description": "All props of the component.",
            "type": null,
            "name": "data"
          }
        ]
      },
      {
        "description": [
          "Called after a user's click."
        ],
        "name": "onClick",
        "required": false,
        "type": "func",
        "tags": [
          {
            "title": "param",
            "description": "React's original event.",
            "type": null,
            "name": "event"
          },
          {
            "title": "param",
            "description": "All props of the component.",
            "type": null,
            "name": "data"
          }
        ]
      },
      {
        "description": [
          "A checkbox can be read-only and unable to change states."
        ],
        "name": "readOnly",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Determines if the content is wrapped or truncated with an ellipsis"
        ],
        "name": "singleLine",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "defaultValue": "default",
        "description": [
          "The appearance of the checkbox."
        ],
        "name": "type",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"default\"",
          "\"red\"",
          "\"blue\"",
          "\"inverted\""
        ]
      }
    ],
    "docBlock": {
      "tags": [
        {
          "title": "see",
          "description": "Icon"
        },
        {
          "title": "see",
          "description": "Input"
        },
        {
          "title": "see",
          "description": "TextArea"
        },
        {
          "title": "see",
          "description": "Select"
        }
      ],
      "description": [
        "A checkbox allows a user to select a binary value."
      ]
    },
    "path": "src/components/molecules/Checkbox/Checkbox.tsx"
  },
  "Flyout": {
    "displayName": "Flyout",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "defaultValue": "left",
        "description": [
          "The position of the flyout"
        ],
        "name": "position",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"left\"",
          "\"right\""
        ]
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "A flyout that can contain arbitrary content.",
        "Example usage: Container for the desktop navigation menus."
      ]
    },
    "path": "src/components/molecules/Flyout/Flyout.tsx"
  },
  "Input": {
    "displayName": "Input",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "defaultValue": "false",
        "description": [
          "Basic determines if the placeholder disappears when a value is set or entered,",
          "or if it floats above the content.",
          "If no placeholder is set, this value has no effect."
        ],
        "name": "basic",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "An input can appear disabled and be unable to change states."
        ],
        "name": "disabled",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "An input can display an error."
        ],
        "name": "error",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Displays an icon on the right of the input."
        ],
        "name": "icon",
        "required": false,
        "type": "IconName",
        "tags": []
      },
      {
        "description": [
          "Sets the html5 name of the input field.",
          "The name attribute is used to reference elements in a JavaScript, or to reference form data after a form is submitted."
        ],
        "name": "name",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "Called when the user attempts to change the input value."
        ],
        "name": "onChange",
        "required": false,
        "type": "func",
        "tags": [
          {
            "title": "param",
            "description": "The proposed value after the change.",
            "type": null,
            "name": "value"
          },
          {
            "title": "param",
            "description": "React's original event.",
            "type": null,
            "name": "event"
          },
          {
            "title": "param",
            "description": "All props of the component.",
            "type": null,
            "name": "data"
          }
        ]
      },
      {
        "description": [
          "The placeholder of the input."
        ],
        "name": "placeholder",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "defaultValue": "text",
        "description": [
          "The html input type."
        ],
        "name": "type",
        "required": false,
        "type": "\"number\" | \"text\" | \"password\"",
        "tags": []
      },
      {
        "description": [
          "Displays a unit on the right of the input."
        ],
        "name": "unit",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "The value of the input."
        ],
        "name": "value",
        "required": false,
        "type": "string",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [
        {
          "title": "see",
          "description": "Icon"
        },
        {
          "title": "see",
          "description": "Checkbox"
        },
        {
          "title": "see",
          "description": "TextArea"
        },
        {
          "title": "see",
          "description": "Select"
        }
      ],
      "description": [
        "An Input is a field used to elicit a textual response from a user."
      ]
    },
    "path": "src/components/molecules/Input/Input.tsx"
  },
  "Navigation": {
    "displayName": "Navigation",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "The navigation sections to be displayed."
        ],
        "name": "sections",
        "required": true,
        "type": "NavigationSection[]",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        ""
      ]
    },
    "path": "src/components/molecules/Navigation/Navigation.tsx"
  },
  "NavigationDesktop": {
    "displayName": "NavigationDesktop",
    "props": [
      {
        "defaultValue": "nav",
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "The navigation sections to be displayed."
        ],
        "name": "sections",
        "required": true,
        "type": "NavigationSection[]",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "A navigation bar intended for larger screen sizes."
      ]
    },
    "path": "src/components/molecules/Navigation/NavigationDesktop.tsx"
  },
  "NavigationMenuList": {
    "displayName": "NavigationMenuList",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "mobile",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "submenu",
        "required": false,
        "type": "NavigationMenuListSubmenu[]",
        "tags": []
      },
      {
        "description": [
          "The display type of the list."
        ],
        "name": "type",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"default\"",
          "\"categorized\""
        ]
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        ""
      ]
    },
    "path": "src/components/molecules/Navigation/NavigationMenuList.tsx"
  },
  "NavigationMobile": {
    "displayName": "NavigationMobile",
    "props": [
      {
        "defaultValue": "nav",
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "The navigation sections to be displayed."
        ],
        "name": "sections",
        "required": true,
        "type": "NavigationSection[]",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "A navigation bar intended for smaller screen sizes."
      ]
    },
    "path": "src/components/molecules/Navigation/NavigationMobile.tsx"
  },
  "Select": {
    "displayName": "Select",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "defaultValue": "false",
        "description": [
          "Determines if the placeholder disappears when a value is set or entered,",
          "or if it floats above the content.",
          "If no placeholder is set, this value has no effect."
        ],
        "name": "basic",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "defaultValue": "true",
        "description": [
          "Determines if the select shows an icon to clear selected values."
        ],
        "name": "clearable",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Disable the select."
        ],
        "name": "disabled",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Color the select to show that something went wrong."
        ],
        "name": "error",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "You can customize the filter behaviour of the select component by providing a custom function."
        ],
        "name": "filterOptions",
        "required": false,
        "type": "(option: SelectOption[] | SelectOptionGroup[], filter: string) => SelectOption[] | SelectOptionGr...",
        "tags": []
      },
      {
        "description": [
          "Allow multiple selections."
        ],
        "name": "multi",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Display a text when the filter shows no results."
        ],
        "name": "noResultsLabel",
        "required": false,
        "type": "string | Element",
        "tags": []
      },
      {
        "description": [
          "Called when the user attempts to change the selection."
        ],
        "name": "onChange",
        "required": false,
        "type": "func",
        "tags": [
          {
            "title": "param",
            "description": "The proposed value after the change.",
            "type": null,
            "name": "value"
          },
          {
            "title": "param",
            "description": "All props of the component.",
            "type": null,
            "name": "data"
          }
        ]
      },
      {
        "description": [
          "Called when the user changed the search value.",
          "Note that the search value cannot be controlled directly, therefore the change is not a proposal.",
          "Mobile behaviour is disabled if this value is set, since mobile doesn't allow for keyboard input."
        ],
        "name": "onSearchChanged",
        "required": false,
        "type": "func",
        "tags": [
          {
            "title": "param",
            "description": "The value that has changed. If the search was cleared, the value will be null.",
            "type": null,
            "name": "value"
          }
        ]
      },
      {
        "description": [
          "The displayed options with option label and value."
        ],
        "name": "options",
        "required": false,
        "type": "SelectOption[] | SelectOptionGroup[]",
        "tags": []
      },
      {
        "description": [
          "The placeholder when no value is selected."
        ],
        "name": "placeholder",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "defaultValue": "true",
        "description": [
          "Enables filtering options for single selects. Multi selects are always searchable."
        ],
        "name": "searchable",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "The selected value."
        ],
        "name": "value",
        "required": false,
        "type": "SelectValue",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [
        {
          "title": "see",
          "description": "Checkbox"
        },
        {
          "title": "see",
          "description": "TextArea"
        },
        {
          "title": "see",
          "description": "Input"
        }
      ],
      "description": [
        "A select compononent to select single or multiple values.",
        "It switches between a custom, searchable dropdown on desktop browsers and a native selection on touch supported devices."
      ]
    },
    "path": "src/components/molecules/Select/Select.tsx"
  },
  "SelectArrowRenderer": {
    "displayName": "SelectArrowRenderer",
    "props": [],
    "docBlock": {
      "tags": [],
      "description": [
        ""
      ]
    },
    "path": "src/components/molecules/Select/SelectArrowRenderer.tsx"
  },
  "SelectClearRenderer": {
    "displayName": "SelectClearRenderer",
    "props": [],
    "docBlock": {
      "tags": [],
      "description": [
        ""
      ]
    },
    "path": "src/components/molecules/Select/SelectClearRenderer.tsx"
  },
  "Tab": {
    "displayName": "Tab",
    "props": [
      {
        "description": [
          "Aligns the tab items horizontally. By default the tabs are centered"
        ],
        "name": "alignment",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"left\"",
          "\"center\"",
          "\"right\""
        ]
      },
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "Controls if the component is displayed with a smaller dimension"
        ],
        "name": "mini",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "The different tab items"
        ],
        "name": "panes",
        "required": true,
        "type": "TabPane[]",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "The Tab component is a hidden section of content activated by a Menu."
      ]
    },
    "path": "src/components/molecules/Tab/Tab.tsx"
  },
  "TextArea": {
    "displayName": "TextArea",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "basic",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "disabled",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "error",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "icon",
        "required": false,
        "type": "IconName",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "maxLength",
        "required": false,
        "type": "number",
        "tags": []
      },
      {
        "description": [
          "Sets the html5 name of the input field.",
          "The name attribute is used to reference elements in a JavaScript, or to reference form data after a form is submitted."
        ],
        "name": "name",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "Called when the user attempts to change the input value."
        ],
        "name": "onChange",
        "required": false,
        "type": "func",
        "tags": [
          {
            "title": "param",
            "description": "The proposed value after the change.",
            "type": null,
            "name": "value"
          },
          {
            "title": "param",
            "description": "React's original event.",
            "type": null,
            "name": "event"
          },
          {
            "title": "param",
            "description": "All props of the component.",
            "type": null,
            "name": "data"
          }
        ]
      },
      {
        "description": [
          ""
        ],
        "name": "placeholder",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "The number of lines of the text area."
        ],
        "name": "rows",
        "required": false,
        "type": "number",
        "tags": []
      },
      {
        "description": [
          ""
        ],
        "name": "value",
        "required": false,
        "type": "string",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [
        {
          "title": "see",
          "description": "Checkbox"
        },
        {
          "title": "see",
          "description": "TextArea"
        },
        {
          "title": "see",
          "description": "Input"
        },
        {
          "title": "see",
          "description": "Icon"
        }
      ],
      "description": [
        "A TextArea."
      ]
    },
    "path": "src/components/molecules/TextArea/TextArea.tsx"
  },
  "Header": {
    "displayName": "Header",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "The element type of the logo."
        ],
        "name": "logoComponent",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Custom props of the logo."
        ],
        "name": "logoProps",
        "required": false,
        "type": "object",
        "tags": []
      },
      {
        "description": [
          "The navigation sections to be displayed."
        ],
        "name": "sections",
        "required": true,
        "type": "NavigationSection[]",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "The page header with logo and navigation bar"
      ]
    },
    "path": "src/components/organisms/Header/Header.tsx"
  },
  "Modal": {
    "displayName": "Modal",
    "props": [
      {
        "description": [
          "Use setAppElement to properly hide your application from assistive screenreaders and other assistive technologies while the modal is open.",
          "If you can't you can disable that functionality by setting ariaHideApp={false}, but this is not recommended."
        ],
        "name": "ariaHideApp",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "String indicating how the content container should be announced to screenreaders."
        ],
        "name": "contentLabel",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "Boolean describing if the modal should be shown or not. Defaults to false."
        ],
        "name": "isOpen",
        "required": true,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Function that will be run when the modal is requested to be closed, prior to actually closing."
        ],
        "name": "onRequestClose",
        "required": true,
        "type": "func",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        ""
      ]
    },
    "path": "src/components/organisms/Modal/Modal.tsx"
  },
  "Notification": {
    "displayName": "Notification",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "A notifcation can have an error state."
        ],
        "name": "error",
        "required": false,
        "type": "boolean",
        "tags": []
      },
      {
        "description": [
          "Close the notification"
        ],
        "name": "onClick",
        "required": false,
        "type": "func",
        "tags": []
      },
      {
        "description": [
          "The title of the notification"
        ],
        "name": "title",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "The display type of the notification."
        ],
        "name": "type",
        "required": false,
        "type": "enum",
        "tags": [],
        "value": [
          "\"common\"",
          "\"cookie\""
        ]
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "The default Porsche notification message."
      ]
    },
    "path": "src/components/organisms/Notification/Notification.tsx"
  },
  "ErrorScreen": {
    "displayName": "ErrorScreen",
    "props": [
      {
        "description": [
          "The text under the large title."
        ],
        "name": "text",
        "required": true,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "The title of the error screen, displayed very large."
        ],
        "name": "title",
        "required": true,
        "type": "string",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "A generic error screen with a title and a text."
      ]
    },
    "path": "src/components/screens/ErrorScreen/ErrorScreen.tsx"
  },
  "MaintenanceScreen": {
    "displayName": "MaintenanceScreen",
    "props": [
      {
        "description": [
          "The text under the large title."
        ],
        "name": "text",
        "required": true,
        "type": "string",
        "tags": []
      },
      {
        "description": [
          "The title of the maintenance screen, displayed very large."
        ],
        "name": "title",
        "required": true,
        "type": "string",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "A generic maintenance screen with a title and a text."
      ]
    },
    "path": "src/components/screens/MaintenanceScreen/MaintenanceScreen.tsx"
  },
  "ContentWrapper": {
    "displayName": "ContentWrapper",
    "props": [
      {
        "description": [
          "The html element type to render as."
        ],
        "name": "as",
        "required": false,
        "type": "string | ComponentClass<{}>",
        "tags": []
      },
      {
        "description": [
          "Additional CSS classes."
        ],
        "name": "className",
        "required": false,
        "type": "string",
        "tags": []
      },
      {
        "defaultValue": "false",
        "description": [
          "Render without max width and safe-area."
        ],
        "name": "raw",
        "required": false,
        "type": "boolean",
        "tags": []
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        "This component is a direct child of \"ThemeWrapper\" and defines content sections like section, article.",
        "It also adds safe area paddings to the left/right and a max-content-width.",
        "Direct children of this component may only exist of organisms and molecules."
      ]
    },
    "path": "src/components/structures/ContentWrapper/ContentWrapper.tsx"
  }
}