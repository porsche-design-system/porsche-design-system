{"version":3,"sources":["../../ui-kit-js/dist/esm/legacy/shadow-css-984bac74-29dcdffd.js"],"names":["scopeCss","cssText","scopeId","commentOriginalSelector","ShadowCss","shimCssText","__webpack_require__","r","__webpack_exports__","d","this","strictStyling","prototype","hostScopeId","slotScopeId","commentsWithHash","match","_commentWithHashRe","input","replace","_commentRe","stripComments","orgSelectors","processCommentedSelector_1","rule","placeholder","length","comment","selector","push","processRules","startsWith","content","scopedCssText","_scopeCssText","concat","join","forEach","_a","_insertPolyfillHostInCssText","_convertColonHost","_convertColonHostContext","_convertColonSlotted","_convertShadowDOMSelectors","_scopeSelectors","trim","_convertColonRule","_cssColonHostRe","_colonHostPartReplacer","slotAttr","regExp","_cssColonSlottedRe","m","_i","arguments","compound","suffix","_polyfillHostNoCombinator","_cssColonHostContextRe","_colonHostContextPartReplacer","partReplacer","parts","split","i","p","host","part","indexOf","_polyfillHost","_shadowDOMSelectorsRe","reduce","result","pattern","scopeSelector","hostSelector","slotSelector","_this","_scopeSelector","CssRule","strict","map","shallowPart","_selectorNeedsScoping","_applyStrictSelectorScope","_applySelectorScope","_makeScopeMatcher","test","RegExp","_selectorReSuffix","_applySimpleSelectorScope","_polyfillHostRe","lastIndex","replaceBy_1","_polyfillHostNoCombinatorRe","_","before","colon","after","res","className","_scopeSelectorPart","scopedP","t","matches","safeContent","SafeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","part_1","slice","index","substring","restore","_colonHostContextRe","_polyfillHostContext","_colonHostRe","_colonSlottedRe","_polyfillSlotted","placeholders","keep","replaceBy","_content","pseudo","exp","_parenSuffix","_ruleRe","_curlyRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","ruleCallback","inputWithEscapedBlocks","inputParts","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","StringWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","contentPrefix","blocks"],"mappings":"2FAWA,SAAAA,EAAAC,EAAAC,EAAAC,GAEA,OADA,IAAAC,GACAC,YAAAJ,EAAAC,IAAA,KAAAA,EAAA,KAAAC,GAbAG,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAJ,IAAAE,EAAAG,EAAAD,EAAA,6BAAAR,IAgBA,IAAAI,EAEA,WACA,SAAAA,IACAM,KAAAC,eAAA,EA6UA,OA1UAP,EAAAQ,UAAAP,YAAA,SAAAJ,EAAAC,EAAAW,EAAAC,EAAAX,QACA,IAAAU,IACAA,EAAA,SAGA,IAAAC,IACAA,EAAA,SAGA,IAAAX,IACAA,GAAA,GAGA,IAAAY,EAAAd,EA4YAe,MAAAC,IAAA,GA3YAhB,EAoYA,SAAAiB,GACA,OAAAA,EAAAC,QAAAC,EAAA,IArYAC,CAAApB,GACA,IAAAqB,EAAA,GAEA,GAAAnB,EAAA,CACA,IAAAoB,EAAA,SAAAC,GACA,IAAAC,EAAA,UAAAH,EAAAI,OAAA,QACAC,EAAA,OAAAH,EAAAI,SAAA,KAMA,OALAN,EAAAO,KAAA,CACAJ,cACAE,YAEAH,EAAAI,SAAAH,EAAAD,EAAAI,SACAJ,GAGAvB,EAAA6B,EAAA7B,EAAA,SAAAuB,GACA,YAAAA,EAAAI,SAAA,GACAL,EAAAC,GACSA,EAAAI,SAAAG,WAAA,WAAAP,EAAAI,SAAAG,WAAA,cAAAP,EAAAI,SAAAG,WAAA,UAAAP,EAAAI,SAAAG,WAAA,cACTP,EAAAQ,QAAAF,EAAAN,EAAAQ,QAAAT,GACAC,GAGAA,IAIA,IAAAS,EAAAvB,KAAAwB,cAAAjC,EAAAC,EAAAW,EAAAC,EAAAX,GAYA,OAVAF,EAAA,CAAAgC,GAAAE,OAAApB,GAAAqB,KAAA,MAEAjC,GACAmB,EAAAe,QAAA,SAAAC,GACA,IAAAb,EAAAa,EAAAb,YACAE,EAAAW,EAAAX,QACA1B,IAAAkB,QAAAM,EAAAE,KAIA1B,GAGAG,EAAAQ,UAAAsB,cAAA,SAAAjC,EAAAC,EAAAW,EAAAC,EAAAX,GAcA,OAZAF,EAAAS,KAAA6B,6BAAAtC,GACAA,EAAAS,KAAA8B,kBAAAvC,GACAA,EAAAS,KAAA+B,yBAAAxC,GACAA,EAAAS,KAAAgC,qBAAAzC,EAAAa,GACAb,EAAAS,KAAAiC,2BAAA1C,GAEAC,IACAD,EAAAS,KAAAkC,gBAAA3C,EAAAC,EAAAW,EAAAC,EAAAX,KAIAF,GADAA,IAAAkB,QAAA,oCAAAN,IACAM,QAAA,uBAA4C,SAC5C0B,QAWAzC,EAAAQ,UAAA4B,kBAAA,SAAAvC,GACA,OAAAS,KAAAoC,kBAAA7C,EAAA8C,EAAArC,KAAAsC,yBAOA5C,EAAAQ,UAAA8B,qBAAA,SAAAzC,EAAAgD,GACA,IAAAC,EAAAC,EACA,OAAAlD,EAAAkB,QAAA+B,EAAA,WAGA,IAFA,IAAAE,EAAA,GAEAC,EAAA,EAAsBA,EAAAC,UAAA5B,OAAuB2B,IAC7CD,EAAAC,GAAAC,UAAAD,GAGA,GAAAD,EAAA,IACA,IAAAG,EAAAH,EAAA,GAAAP,OACAW,EAAAJ,EAAA,GAEA,MADA,IAAAH,EAAA,MAAAM,EAAAC,EAGA,OAAAC,EAAAL,EAAA,MAqBAhD,EAAAQ,UAAA6B,yBAAA,SAAAxC,GACA,OAAAS,KAAAoC,kBAAA7C,EAAAyD,EAAAhD,KAAAiD,gCAGAvD,EAAAQ,UAAAkC,kBAAA,SAAA7C,EAAAiD,EAAAU,GAEA,OAAA3D,EAAAkB,QAAA+B,EAAA,WAGA,IAFA,IAAAE,EAAA,GAEAC,EAAA,EAAsBA,EAAAC,UAAA5B,OAAuB2B,IAC7CD,EAAAC,GAAAC,UAAAD,GAGA,GAAAD,EAAA,IAIA,IAHA,IAAAS,EAAAT,EAAA,GAAAU,MAAA,KACAvD,EAAA,GAEAwD,EAAA,EAAuBA,EAAAF,EAAAnC,OAAkBqC,IAAA,CACzC,IAAAC,EAAAH,EAAAE,GAAAlB,OACA,IAAAmB,EAAA,MACAzD,EAAAsB,KAAA+B,EAAAH,EAAAO,EAAAZ,EAAA,KAGA,OAAA7C,EAAA6B,KAAA,KAEA,OAAAqB,EAAAL,EAAA,MAKAhD,EAAAQ,UAAA+C,8BAAA,SAAAM,EAAAC,EAAAV,GACA,OAAAU,EAAAC,QAAAC,IAAA,EACA1D,KAAAsC,uBAAAiB,EAAAC,EAAAV,GAEAS,EAAAC,EAAAV,EAAA,KAAAU,EAAA,IAAAD,EAAAT,GAIApD,EAAAQ,UAAAoC,uBAAA,SAAAiB,EAAAC,EAAAV,GACA,OAAAS,EAAAC,EAAA/C,QAAAiD,EAAA,IAAAZ,GAQApD,EAAAQ,UAAA+B,2BAAA,SAAA1C,GACA,OAAAoE,EAAAC,OAAA,SAAAC,EAAAC,GACA,OAAAD,EAAApD,QAAAqD,EAAA,MACKvE,IAILG,EAAAQ,UAAAgC,gBAAA,SAAA3C,EAAAwE,EAAAC,EAAAC,EAAAxE,GACA,IAAAyE,EAAAlE,KAEA,OAAAoB,EAAA7B,EAAA,SAAAuB,GACA,IAAAI,EAAAJ,EAAAI,SACAI,EAAAR,EAAAQ,QASA,MAPA,MAAAR,EAAAI,SAAA,GACAA,EAAAgD,EAAAC,eAAArD,EAAAI,SAAA6C,EAAAC,EAAAC,EAAAC,EAAAjE,gBACOa,EAAAI,SAAAG,WAAA,WAAAP,EAAAI,SAAAG,WAAA,cAAAP,EAAAI,SAAAG,WAAA,UAAAP,EAAAI,SAAAG,WAAA,gBACPC,EAAA4C,EAAAhC,gBAAApB,EAAAQ,QAAAyC,EAAAC,EAAAC,EAAAxE,IAGAyB,IAAAT,QAAA,UAAyC,KAAA0B,OACzC,IAAAiC,EAAAlD,EAAAI,MAIA5B,EAAAQ,UAAAiE,eAAA,SAAAjD,EAAA6C,EAAAC,EAAAC,EAAAI,GACA,IAAAH,EAAAlE,KAEA,OAAAkB,EAAAkC,MAAA,KAAAkB,IAAA,SAAAC,GACA,OAAAN,GAAAM,EAAAd,QAAA,IAAAQ,IAAA,EACAM,EAAApC,OAGA+B,EAAAM,sBAAAD,EAAAR,GACAM,EAAAH,EAAAO,0BAAAF,EAAAR,EAAAC,GAAA7B,OAAA+B,EAAAQ,oBAAAH,EAAAR,EAAAC,GAAA7B,OAEAoC,EAAApC,SAEKT,KAAA,OAGLhC,EAAAQ,UAAAsE,sBAAA,SAAAtD,EAAA6C,GAGA,OAFA/D,KAAA2E,kBAAAZ,GAEAa,KAAA1D,IAGAxB,EAAAQ,UAAAyE,kBAAA,SAAAZ,GAIA,OADAA,IAAAtD,QAFA,MAEA,OAAAA,QADA,MACA,OACA,IAAAoE,OAAA,KAAAd,EAAA,IAAAe,EAAA,MAGApF,EAAAQ,UAAAwE,oBAAA,SAAAxD,EAAA6C,EAAAC,GAEA,OAAAhE,KAAA+E,0BAAA7D,EAAA6C,EAAAC,IAIAtE,EAAAQ,UAAA6E,0BAAA,SAAA7D,EAAA6C,EAAAC,GAIA,GAFAgB,EAAAC,UAAA,EAEAD,EAAAJ,KAAA1D,GAAA,CACA,IAAAgE,EAAAlF,KAAAC,cAAA,IAAA+D,EAAAD,EACA,OAAA7C,EAAAT,QAAA0E,EAAA,SAAAC,EAAAlE,GACA,OAAAA,EAAAT,QAAA,2BAAA2E,EAAAC,EAAAC,EAAAC,GACA,OAAAF,EAAAH,EAAAI,EAAAC,MAEO9E,QAAAuE,EAAAE,EAAA,KAGP,OAAAnB,EAAA,IAAA7C,GAGAxB,EAAAQ,UAAAuE,0BAAA,SAAAvD,EAAA6C,EAAAC,GA6DA,IA5DA,IA2CAwB,EA3CAtB,EAAAlE,KAYAyF,EAAA,KATA1B,IAAAtD,QADA,mBACA,SAAA2E,GAGA,IAFA,IAAAjC,EAAA,GAEAR,EAAA,EAAsBA,EAAAC,UAAA5B,OAAuB2B,IAC7CQ,EAAAR,EAAA,GAAAC,UAAAD,GAGA,OAAAQ,EAAA,MAIAuC,EAAA,SAAApC,GACA,IAAAqC,EAAArC,EAAAnB,OAEA,IAAAwD,EACA,SAGA,GAAArC,EAAAG,QAAAV,IAAA,EACA4C,EAAAzB,EAAAa,0BAAAzB,EAAAS,EAAAC,OACO,CAEP,IAAA4B,EAAAtC,EAAA7C,QAAAuE,EAAA,IAEA,GAAAY,EAAA5E,OAAA,GACA,IAAA6E,EAAAD,EAAAtF,MAAA,mBAEAuF,IACAF,EAAAE,EAAA,GAAAJ,EAAAI,EAAA,GAAAA,EAAA,KAKA,OAAAF,GAGAG,EAAA,IAAAC,EAAA7E,GAEA8E,EAAA,GACAC,EAAA,EAEAC,EAAA,sBAcAC,KAlBAjF,EAAA4E,EAAAxE,WAgBAmC,QAAAV,IAAA,GAIA,QAAAyC,EAAAU,EAAAE,KAAAlF,KAAA,CACA,IAAAmF,EAAAb,EAAA,GACAc,EAAApF,EAAAqF,MAAAN,EAAAT,EAAAgB,OAAArE,OAGA6D,KAFAG,KAAAG,EAAA7C,QAAAV,IAAA,GACA2C,EAAAY,MACA,IAAAD,EAAA,IACAJ,EAAAC,EAAAjB,UAGA,IAAAzB,EAAAtC,EAAAuF,UAAAR,GAIA,OAFAD,IADAG,KAAA3C,EAAAC,QAAAV,IAAA,GACA2C,EAAAlC,KAEAsC,EAAAY,QAAAV,IAGAtG,EAAAQ,UAAA2B,6BAAA,SAAAX,GAEA,OADAA,IAAAT,QAAAkG,EAAAC,GAAAnG,QAAAoG,EAAAnD,GAAAjD,QAAAqG,EAAAC,IAIArH,EA/UA,GAkVAqG,EAEA,WACA,SAAAA,EAAA7E,GACA,IAAAgD,EAAAlE,KAEAA,KAAAgH,aAAA,GACAhH,KAAAwG,MAAA,EAGAtF,IAAAT,QAAA,yBAAA2E,EAAA6B,GACA,IAAAC,EAAA,QAAAhD,EAAAsC,MAAA,KAKA,OAHAtC,EAAA8C,aAAA7F,KAAA8F,GAEA/C,EAAAsC,QACAU,IAIAlH,KAAAmH,SAAAjG,EAAAT,QAAA,qCAAA2E,EAAAgC,EAAAC,GACA,IAAAH,EAAA,QAAAhD,EAAAsC,MAAA,KAKA,OAHAtC,EAAA8C,aAAA7F,KAAAkG,GAEAnD,EAAAsC,QACAY,EAAAF,IAgBA,OAZAnB,EAAA7F,UAAAwG,QAAA,SAAApF,GACA,IAAA4C,EAAAlE,KAEA,OAAAsB,EAAAb,QAAA,yBAAA2E,EAAAoB,GACA,OAAAtC,EAAA8C,cAAAR,MAIAT,EAAA7F,UAAAoB,QAAA,WACA,OAAAtB,KAAAmH,UAGApB,EAxCA,GA2CArC,EAAA,iBACAqD,EAAA,oBAEAH,EAAA,oBAEAU,EAAA,kDAEAjF,EAAA,IAAAwC,OAAA,IAAAnB,EAAA4D,EAAA,OAEAtE,EAAA,IAAA6B,OAAA,IAAA+B,EAAAU,EAAA,OAEA7E,EAAA,IAAAoC,OAAA,IAAAkC,EAAAO,EAAA,OAEAvE,EAAAW,EAAA,iBAEAyB,EAAA,uCACAxB,EAAA,2BACAmB,EAAA,6BACAE,EAAA,oBACA6B,EAAA,WACAC,EAAA,eACAH,EAAA,mBACAjG,EAAA,uBAMA,IAAAH,EAAA,+CAMA,IAAAgH,EAAA,wDACAC,EAAA,UACAC,EAAA,IACAC,EAAA,IACAC,EAAA,UAEAvD,EAEA,WAMA,OALA,SAAAlD,EAAAI,GACAtB,KAAAkB,WACAlB,KAAAsB,WAHA,GASA,SAAAF,EAAAZ,EAAAoH,GACA,IAAAC,EAoCA,SAAArH,GAOA,IANA,IAAAsH,EAAAtH,EAAA4C,MAAAoE,GACAO,EAAA,GACAC,EAAA,GACAC,EAAA,EACAC,EAAA,GAEAC,EAAA,EAAyBA,EAAAL,EAAA9G,OAA+BmH,IAAA,CACxD,IAAA3E,EAAAsE,EAAAK,GAEA3E,IAAAkE,GACAO,IAGAA,EAAA,EACAC,EAAA/G,KAAAqC,IAEA0E,EAAAlH,OAAA,IACAgH,EAAA7G,KAAA+G,EAAAxG,KAAA,KACAqG,EAAA5G,KAAAwG,GACAO,EAAA,IAGAH,EAAA5G,KAAAqC,IAGAA,IAAAiE,GACAQ,IAIAC,EAAAlH,OAAA,IACAgH,EAAA7G,KAAA+G,EAAAxG,KAAA,KACAqG,EAAA5G,KAAAwG,IAGA,WAAAS,EAAAL,EAAArG,KAAA,IAAAsG,GAxEAK,CAAA7H,GACA8H,EAAA,EACA,OAAAT,EAAAU,cAAA9H,QAAA8G,EAAA,WAGA,IAFA,IAAA7E,EAAA,GAEAC,EAAA,EAAoBA,EAAAC,UAAA5B,OAAuB2B,IAC3CD,EAAAC,GAAAC,UAAAD,GAGA,IAAAzB,EAAAwB,EAAA,GACApB,EAAA,GACAwB,EAAAJ,EAAA,GACA8F,EAAA,GAEA1F,KAAAzB,WAAA,IAAsCsG,KACtCrG,EAAAuG,EAAAY,OAAAH,KACAxF,IAAA2D,UAAAkB,EAAA3G,OAAA,GACAwH,EAAA,KAGA,IAAA1H,EAAA8G,EAAA,IAAAxD,EAAAlD,EAAAI,IACA,SAAAoB,EAAA,GAAA5B,EAAAI,SAAAwB,EAAA,GAAA8F,EAAA1H,EAAAQ,QAAAwB,IAIA,IAAAsF,EAEA,WAMA,OALA,SAAAG,EAAAE,GACAzI,KAAAuI,gBACAvI,KAAAyI,UAHA","file":"static/js/40.5e997302.chunk.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nfunction scopeCss(cssText, scopeId, commentOriginalSelector) {\n  var sc = new ShadowCss();\n  return sc.shimCssText(cssText, scopeId, scopeId + '-h', scopeId + '-s', commentOriginalSelector);\n}\n\nvar ShadowCss =\n/** @class */\nfunction () {\n  function ShadowCss() {\n    this.strictStyling = true;\n  }\n\n  ShadowCss.prototype.shimCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n    if (hostScopeId === void 0) {\n      hostScopeId = '';\n    }\n\n    if (slotScopeId === void 0) {\n      slotScopeId = '';\n    }\n\n    if (commentOriginalSelector === void 0) {\n      commentOriginalSelector = false;\n    }\n\n    var commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    var orgSelectors = [];\n\n    if (commentOriginalSelector) {\n      var processCommentedSelector_1 = function processCommentedSelector_1(rule) {\n        var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n        var comment = \"/*!@\" + rule.selector + \"*/\";\n        orgSelectors.push({\n          placeholder: placeholder,\n          comment: comment\n        });\n        rule.selector = placeholder + rule.selector;\n        return rule;\n      };\n\n      cssText = processRules(cssText, function (rule) {\n        if (rule.selector[0] !== '@') {\n          return processCommentedSelector_1(rule);\n        } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n          rule.content = processRules(rule.content, processCommentedSelector_1);\n          return rule;\n        }\n\n        return rule;\n      });\n    }\n\n    var scopedCssText = this._scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n\n    cssText = [scopedCssText].concat(commentsWithHash).join('\\n');\n\n    if (commentOriginalSelector) {\n      orgSelectors.forEach(function (_a) {\n        var placeholder = _a.placeholder,\n            comment = _a.comment;\n        cssText = cssText.replace(placeholder, comment);\n      });\n    }\n\n    return cssText;\n  };\n\n  ShadowCss.prototype._scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n    // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n    cssText = this._insertPolyfillHostInCssText(cssText);\n    cssText = this._convertColonHost(cssText);\n    cssText = this._convertColonHostContext(cssText);\n    cssText = this._convertColonSlotted(cssText, slotScopeId);\n    cssText = this._convertShadowDOMSelectors(cssText);\n\n    if (scopeId) {\n      cssText = this._scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n    }\n\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return cssText.trim();\n  };\n  /*\n   * convert a rule like :host(.foo) > .bar { }\n   *\n   * to\n   *\n   * .foo<scopeName> > .bar\n  */\n\n\n  ShadowCss.prototype._convertColonHost = function (cssText) {\n    return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n  };\n  /*\n  * convert a rule like ::slotted(.foo) { }\n  */\n\n\n  ShadowCss.prototype._convertColonSlotted = function (cssText, slotAttr) {\n    var regExp = _cssColonSlottedRe;\n    return cssText.replace(regExp, function () {\n      var m = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        m[_i] = arguments[_i];\n      }\n\n      if (m[2]) {\n        var compound = m[2].trim();\n        var suffix = m[3];\n        var sel = '.' + slotAttr + ' > ' + compound + suffix;\n        return sel;\n      } else {\n        return _polyfillHostNoCombinator + m[3];\n      }\n    });\n  };\n  /*\n   * convert a rule like :host-context(.foo) > .bar { }\n   *\n   * to\n   *\n   * .foo<scopeName> > .bar, .foo scopeName > .bar { }\n   *\n   * and\n   *\n   * :host-context(.foo:host) .bar { ... }\n   *\n   * to\n   *\n   * .foo<scopeName> .bar { ... }\n  */\n\n\n  ShadowCss.prototype._convertColonHostContext = function (cssText) {\n    return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n  };\n\n  ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, function () {\n      var m = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        m[_i] = arguments[_i];\n      }\n\n      if (m[2]) {\n        var parts = m[2].split(',');\n        var r = [];\n\n        for (var i = 0; i < parts.length; i++) {\n          var p = parts[i].trim();\n          if (!p) break;\n          r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n        }\n\n        return r.join(',');\n      } else {\n        return _polyfillHostNoCombinator + m[3];\n      }\n    });\n  };\n\n  ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {\n    if (part.indexOf(_polyfillHost) > -1) {\n      return this._colonHostPartReplacer(host, part, suffix);\n    } else {\n      return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n  };\n\n  ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {\n    return host + part.replace(_polyfillHost, '') + suffix;\n  };\n  /*\n   * Convert combinators like ::shadow and pseudo-elements like ::content\n   * by replacing with space.\n  */\n\n\n  ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {\n    return _shadowDOMSelectorsRe.reduce(function (result, pattern) {\n      return result.replace(pattern, ' ');\n    }, cssText);\n  }; // change a selector like 'div' to 'name div'\n\n\n  ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector, slotSelector, commentOriginalSelector) {\n    var _this = this;\n\n    return processRules(cssText, function (rule) {\n      var selector = rule.selector;\n      var content = rule.content;\n\n      if (rule.selector[0] !== '@') {\n        selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, slotSelector, _this.strictStyling);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n        content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector, slotSelector, commentOriginalSelector);\n      }\n\n      selector = selector.replace(/\\s{2,}/g, ' ').trim();\n      return new CssRule(selector, content);\n    });\n  };\n\n  ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, slotSelector, strict) {\n    var _this = this;\n\n    return selector.split(',').map(function (shallowPart) {\n      if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n        return shallowPart.trim();\n      }\n\n      if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n        return strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector).trim() : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector).trim();\n      } else {\n        return shallowPart.trim();\n      }\n    }).join(', ');\n  };\n\n  ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {\n    var re = this._makeScopeMatcher(scopeSelector);\n\n    return !re.test(selector);\n  };\n\n  ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {\n    var lre = /\\[/g;\n    var rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n  };\n\n  ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {\n    // Difference from webcomponents.js: scopeSelector could not be an array\n    return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n  }; // scope via name and [is=name]\n\n\n  ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n\n    if (_polyfillHostRe.test(selector)) {\n      var replaceBy_1 = this.strictStyling ? \".\" + hostSelector : scopeSelector;\n      return selector.replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n        return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n          return before + replaceBy_1 + colon + after;\n        });\n      }).replace(_polyfillHostRe, replaceBy_1 + ' ');\n    }\n\n    return scopeSelector + ' ' + selector;\n  };\n\n  ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n    var _this = this;\n\n    var isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, function (_) {\n      var parts = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        parts[_i - 1] = arguments[_i];\n      }\n\n      return parts[0];\n    });\n    var className = '.' + scopeSelector;\n\n    var _scopeSelectorPart = function _scopeSelectorPart(p) {\n      var scopedP = p.trim();\n\n      if (!scopedP) {\n        return '';\n      }\n\n      if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n        scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n      } else {\n        // remove :host since it should be unnecessary\n        var t = p.replace(_polyfillHostRe, '');\n\n        if (t.length > 0) {\n          var matches = t.match(/([^:]*)(:*)(.*)/);\n\n          if (matches) {\n            scopedP = matches[1] + className + matches[2] + matches[3];\n          }\n        }\n      }\n\n      return scopedP;\n    };\n\n    var safeContent = new SafeSelector(selector);\n    selector = safeContent.content();\n    var scopedSelector = '';\n    var startIndex = 0;\n    var res;\n    var sep = /( |>|\\+|~(?!=))\\s*/g; // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n\n    var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1; // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n\n    var shouldScope = !hasHost;\n\n    while ((res = sep.exec(selector)) !== null) {\n      var separator = res[1];\n      var part_1 = selector.slice(startIndex, res.index).trim();\n      shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n      var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n      scopedSelector += scopedPart + \" \" + separator + \" \";\n      startIndex = sep.lastIndex;\n    }\n\n    var part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part; // replace the placeholders with their original values\n\n    return safeContent.restore(scopedSelector);\n  };\n\n  ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {\n    selector = selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost).replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n  };\n\n  return ShadowCss;\n}();\n\nvar SafeSelector =\n/** @class */\nfunction () {\n  function SafeSelector(selector) {\n    var _this = this;\n\n    this.placeholders = [];\n    this.index = 0; // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n      var replaceBy = \"__ph-\" + _this.index + \"__\";\n\n      _this.placeholders.push(keep);\n\n      _this.index++;\n      return replaceBy;\n    }); // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n\n    this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n      var replaceBy = \"__ph-\" + _this.index + \"__\";\n\n      _this.placeholders.push(exp);\n\n      _this.index++;\n      return pseudo + replaceBy;\n    });\n  }\n\n  SafeSelector.prototype.restore = function (content) {\n    var _this = this;\n\n    return content.replace(/__ph-(\\d+)__/g, function (_, index) {\n      return _this.placeholders[+index];\n    });\n  };\n\n  SafeSelector.prototype.content = function () {\n    return this._content;\n  };\n\n  return SafeSelector;\n}();\n\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted'; // note: :host-context pre-processed to -shadowcsshostcontext.\n\nvar _polyfillHostContext = '-shadowcsscontext';\n\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\n\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\n\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\n\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\n\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n\nfunction stripComments(input) {\n  return input.replace(_commentRe, '');\n}\n\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n\nfunction extractCommentsWithHash(input) {\n  return input.match(_commentWithHashRe) || [];\n}\n\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\n\nvar CssRule =\n/** @class */\nfunction () {\n  function CssRule(selector, content) {\n    this.selector = selector;\n    this.content = content;\n  }\n\n  return CssRule;\n}();\n\nfunction processRules(input, ruleCallback) {\n  var inputWithEscapedBlocks = escapeBlocks(input);\n  var nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n    var m = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      m[_i] = arguments[_i];\n    }\n\n    var selector = m[2];\n    var content = '';\n    var suffix = m[4];\n    var contentPrefix = '';\n\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n\n    var rule = ruleCallback(new CssRule(selector, content));\n    return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n  });\n}\n\nvar StringWithEscapedBlocks =\n/** @class */\nfunction () {\n  function StringWithEscapedBlocks(escapedString, blocks) {\n    this.escapedString = escapedString;\n    this.blocks = blocks;\n  }\n\n  return StringWithEscapedBlocks;\n}();\n\nfunction escapeBlocks(input) {\n  var inputParts = input.split(_curlyRe);\n  var resultParts = [];\n  var escapedBlocks = [];\n  var bracketCount = 0;\n  var currentBlockParts = [];\n\n  for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    var part = inputParts[partIndex];\n\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n\n      resultParts.push(part);\n    }\n\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(''));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n\n  return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n\nexport { ShadowCss, scopeCss };"],"sourceRoot":""}