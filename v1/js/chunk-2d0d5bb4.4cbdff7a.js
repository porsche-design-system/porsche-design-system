(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0d5bb4"],{7016:function(e,t,n){"use strict";n.r(t);var r=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"vmark"},[n("h1",[e._v("Flex")]),n("h2",[e._v("Properties")]),n("table",[n("thead",[n("tr",[n("th",[e._v("Property")]),n("th",[e._v("Attribute")]),n("th",[e._v("Description")]),n("th",[e._v("Type")]),n("th",[e._v("Default")])])]),n("tbody",[n("tr",[n("td",[n("code",[e._v("alignContent")])]),n("td",[n("code",[e._v("align-content")])]),n("td",[e._v('This aligns a flex container\'s individual lines when there is extra space in the cross-axis, similar to how "justifyContent" aligns individual items along the main axis. Corresponds to the "alignContent" css property.')]),n("td",[n("code",[e._v('"center" \\| "end" \\| "space-around" \\| "space-between" \\| "start" \\| "stretch" \\| BreakpointValues<"center" \\| "start" \\| "end" \\| "stretch" \\| "space-between" \\| "space-around"> & string')])]),n("td",[n("code",[e._v("'stretch'")])])]),n("tr",[n("td",[n("code",[e._v("alignItems")])]),n("td",[n("code",[e._v("align-items")])]),n("td",[e._v("Defines how the flex items are aligned along the cross axis.")]),n("td",[n("code",[e._v('"baseline" \\| "center" \\| "end" \\| "start" \\| "stretch" \\| BreakpointValues<"center" \\| "start" \\| "end" \\| "baseline" \\| "stretch"> & string')])]),n("td",[n("code",[e._v("'stretch'")])])]),n("tr",[n("td",[n("code",[e._v("direction")])]),n("td",[n("code",[e._v("direction")])]),n("td",[e._v('Defines the direction of the main and cross axis. The default "row" defines the main axis as horizontal left to right.')]),n("td",[n("code",[e._v('"column" \\| "column-reverse" \\| "row" \\| "row-reverse" \\| BreakpointValues<"row" \\| "row-reverse" \\| "column" \\| "column-reverse"> & string')])]),n("td",[n("code",[e._v("'row'")])])]),n("tr",[n("td",[n("code",[e._v("flow")])]),n("td",[n("code",[e._v("flow")])]),n("td",[e._v("Defines the flex containers content flow if 2 or more containers are siblings of each other.")]),n("td",[n("code",[e._v('"block" \\| "inline" \\| BreakpointValues<"block" \\| "inline"> & string')])]),n("td",[n("code",[e._v("'block'")])])]),n("tr",[n("td",[n("code",[e._v("gap")])]),n("td",[n("code",[e._v("gap")])]),n("td",[e._v("Defines the gap between contained children.")]),n("td",[n("code",[e._v('"0" \\| "16" \\| "24" \\| "32" \\| "4" \\| "40" \\| "48" \\| "56" \\| "64" \\| "72" \\| "8" \\| "80" \\| "a" \\| "b" \\| "c" \\| "d" \\| "e" \\| "f" \\| "g"')])]),n("td",[n("code",[e._v("'0'")])])]),n("tr",[n("td",[n("code",[e._v("justifyContent")])]),n("td",[n("code",[e._v("justify-content")])]),n("td",[e._v("Defines how the flex items are aligned along the main axis.")]),n("td",[n("code",[e._v('"center" \\| "end" \\| "space-around" \\| "space-between" \\| "space-evenly" \\| "start" \\| BreakpointValues<"center" \\| "start" \\| "end" \\| "space-between" \\| "space-around" \\| "space-evenly"> & string')])]),n("td",[n("code",[e._v("'start'")])])]),n("tr",[n("td",[n("code",[e._v("wrap")])]),n("td",[n("code",[e._v("wrap")])]),n("td",[e._v("If set, overflowing elements will wrap to a new line.")]),n("td",[n("code",[e._v('"nowrap" \\| "reverse" \\| "wrap" \\| BreakpointValues<"nowrap" \\| "wrap" \\| "reverse"> & string')])]),n("td",[n("code",[e._v("'nowrap'")])])])])])])}],a=n("2be6"),s={},d=Object(a["a"])(s,r,o,!1,null,null,null);t["default"]=d.exports}}]);
//# sourceMappingURL=chunk-2d0d5bb4.4cbdff7a.js.map