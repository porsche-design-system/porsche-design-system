(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c7b41"],{"526d":function(e,n,t){"use strict";t.d(n,"a",(function(){return o})),t.d(n,"b",(function(){return i})),t.d(n,"c",(function(){return a})),t.d(n,"d",(function(){return l})),t.d(n,"e",(function(){return r})),t.d(n,"f",(function(){return s})),t.d(n,"g",(function(){return c})),t.d(n,"h",(function(){return p})),t.d(n,"i",(function(){return d})),t.d(n,"j",(function(){return m})),t.d(n,"k",(function(){return u})),t.d(n,"l",(function(){return b}));const a=e=>{const n={default:{"vanilla-js":"import { componentsReady } from '@porsche-design-system/components-js';\nimport { getByRoleShadowed } from '@porsche-design-system/components-js/testing';\nimport userEvent from '@testing-library/user-event';\n\nconst getMarkup = (): string => {\n  return `<p-button>Button 1</p-button>`;\n};\n\nit('should return 0 when nothing is rendered', async () => {\n  document.body.innerHTML = '';\n  expect(await componentsReady()).toBe(0);\n});\n\nit('should return 1 after component is rendered initially', async () => {\n  document.body.innerHTML = getMarkup();\n  expect(document.body.innerHTML).toEqual('<p-button>Button 1</p-button>');\n\n  expect(await componentsReady()).toBe(1);\n  expect(document.body.innerHTML).toEqual('<p-button class=\"hydrated\">Button 1</p-button>');\n});\n\nit('should return 2 after button is clicked', async () => {\n  document.body.innerHTML = getMarkup();\n  expect(await componentsReady()).toBe(1);\n\n  const scriptEl = document.createElement('script');\n  scriptEl.textContent = `\ndocument.querySelector('p-button').addEventListener('click', () => {\n  const el = document.createElement('p-button');\n  el.innerText = 'Button 2';\n  document.body.append(el);\n});`;\n  document.body.append(scriptEl);\n\n  const button = getByRoleShadowed('button');\n  await userEvent.click(button);\n\n  expect(await componentsReady()).toBe(2);\n});",angular:"import { Component } from '@angular/core';\nimport { TestBed, waitForAsync } from '@angular/core/testing';\nimport { componentsReady, PorscheDesignSystemModule } from '@porsche-design-system/components-angular';\nimport { By } from '@angular/platform-browser';\n\n@Component({\n  selector: 'empty',\n  template: `<div></div>`,\n})\nclass EmptyComponent {}\n\n@Component({\n  selector: 'sample',\n  template: `\n    <p-button (click)=\"onClick()\">Button 1</p-button>\n    <p-button *ngIf=\"active\">Button 2</p-button>\n  `,\n})\nclass SampleComponent {\n  active = false;\n  onClick() {\n    this.active = true;\n  }\n}\n\nconst replaceHtmlComments = (input: string): string => input.replace(/\x3c!--[\\s\\S]+?--\x3e/g, '');\n\nbeforeEach(waitForAsync(() => {\n  TestBed.configureTestingModule({\n    imports: [PorscheDesignSystemModule],\n    declarations: [EmptyComponent, SampleComponent],\n  }).compileComponents();\n}));\n\nit('should return 0 when nothing is rendered', async () => {\n  // we need to create something to bootstrap the design system via PorscheDesignSystemModule, which is calling load()\n  TestBed.createComponent(EmptyComponent);\n\n  expect(await componentsReady()).toBe(0);\n});\n\nit('should return 1 after component is rendered initially', async () => {\n  const fixture = TestBed.createComponent(SampleComponent);\n  expect(replaceHtmlComments(fixture.nativeElement.innerHTML)).toEqual('<p-button>Button 1</p-button>');\n\n  expect(await componentsReady()).toBe(1);\n  expect(replaceHtmlComments(fixture.nativeElement.innerHTML)).toEqual(\n    '<p-button class=\"hydrated\">Button 1</p-button>'\n  );\n});\n\nit('should return 2 after button is clicked', async () => {\n  const fixture = TestBed.createComponent(SampleComponent);\n  await componentsReady();\n\n  const button = fixture.debugElement.query(By.css('p-button')).nativeElement.shadowRoot.querySelector('button');\n  button.click();\n  fixture.detectChanges();\n\n  expect(await componentsReady()).toBe(2);\n});",react:"import { useState } from 'react';\nimport { componentsReady, PButton } from '@porsche-design-system/components-react';\nimport { render } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { getByRoleShadowed } from '@porsche-design-system/components-react/testing';\nimport '@porsche-design-system/components-react/jsdom-polyfill';\n\nconst Sample = (): JSX.Element => {\n  const [active, setActive] = useState(false);\n\n  return (\n    <>\n      <PButton onClick={() => setActive(true)}>Button 1</PButton>\n      {active && <PButton>Button 2</PButton>}\n    </>\n  );\n};\n\nbeforeAll(() => {\n  (window as any).PDS_SKIP_FETCH = true;\n});\n\nit('should return 0 when nothing is rendered', async () => {\n  expect(await componentsReady()).toBe(0);\n});\n\nit('should return 1 after component is rendered initially', async () => {\n  const { container } = render(<Sample />);\n  expect(container.innerHTML).toEqual('<p-button>Button 1</p-button>');\n\n  expect(await componentsReady()).toBe(1);\n  expect(container.innerHTML).toEqual('<p-button class=\"hydrated\">Button 1</p-button>');\n});\n\nit('should return 2 after button is clicked', async () => {\n  render(<Sample />);\n  expect(await componentsReady()).toBe(1);\n\n  const button = getByRoleShadowed('button');\n  await userEvent.click(button);\n\n  expect(await componentsReady()).toBe(2);\n});"},testbed:{angular:"import { Component } from '@angular/core';\nimport { TestBed, waitForAsync } from '@angular/core/testing';\nimport { componentsReady } from '@porsche-design-system/components-angular';\nimport { By } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport '@porsche-design-system/components-angular/jsdom-polyfill';\n\n@Component({\n  selector: 'empty',\n  template: `<div></div>`,\n})\nclass EmptyComponent {}\n\n@Component({\n  selector: 'sample',\n  template: `\n    <p-button (click)=\"onClick()\">Button 1</p-button>\n    <p-button *ngIf=\"active\">Button 2</p-button>\n  `,\n})\nclass SampleComponent {\n  active = false;\n  onClick() {\n    this.active = true;\n  }\n}\n\nconst replaceHtmlComments = (input: string): string => input.replace(/\x3c!--[\\s\\S]+?--\x3e/g, '');\n\nbeforeAll(() => {\n  (window as any).PDS_SKIP_FETCH = true;\n});\n\nbeforeEach(waitForAsync(() => {\n  TestBed.configureTestingModule({\n    imports: [CommonModule],\n    declarations: [EmptyComponent, SampleComponent],\n  }).compileComponents();\n}));\n\nit('should return 0 when nothing is rendered', async () => {\n  TestBed.createComponent(EmptyComponent);\n\n  expect(await componentsReady()).toBe(0);\n});\n\nit('should return 1 after component is rendered initially', async () => {\n  const fixture = TestBed.createComponent(SampleComponent);\n  expect(replaceHtmlComments(fixture.nativeElement.innerHTML)).toEqual('<p-button>Button 1</p-button>');\n\n  expect(await componentsReady()).toBe(1);\n  expect(replaceHtmlComments(fixture.nativeElement.innerHTML)).toEqual(\n    '<p-button class=\"hydrated\">Button 1</p-button>'\n  );\n});\n\nit('should return 2 after button is clicked', async () => {\n  const fixture = TestBed.createComponent(SampleComponent);\n  await componentsReady();\n\n  const button = fixture.debugElement.query(By.css('p-button')).nativeElement.shadowRoot.querySelector('button');\n  button.click();\n  fixture.detectChanges();\n\n  expect(await componentsReady()).toBe(2);\n});"},"testing-library":{angular:"import { Component } from '@angular/core';\nimport { componentsReady } from '@porsche-design-system/components-angular';\nimport { getByRoleShadowed } from '@porsche-design-system/components-angular/testing';\nimport { render, fireEvent } from '@testing-library/angular';\nimport '@porsche-design-system/components-angular/jsdom-polyfill';\n\n@Component({\n  selector: 'empty',\n  template: `<div></div>`,\n})\nclass EmptyComponent {}\n\n@Component({\n  selector: 'sample',\n  template: `\n    <p-button (click)=\"onClick()\">Button 1</p-button>\n    <p-button *ngIf=\"active\">Button 2</p-button>\n  `,\n})\nclass SampleComponent {\n  active = false;\n  onClick() {\n    this.active = true;\n  }\n}\n\nconst replaceHtmlComments = (input: string): string => input.replace(/\x3c!--[\\s\\S]+?--\x3e/g, '');\n\nbeforeAll(() => {\n  (window as any).PDS_SKIP_FETCH = true;\n});\n\nit('should return 0 when nothing is rendered', async () => {\n  await render(EmptyComponent);\n\n  expect(await componentsReady()).toBe(0);\n});\n\nit('should return 1 after component is rendered initially', async () => {\n  const { container } = await render(SampleComponent);\n  expect(replaceHtmlComments(container.innerHTML)).toEqual('<p-button>Button 1</p-button>');\n\n  expect(await componentsReady()).toBe(1);\n  expect(replaceHtmlComments(container.innerHTML)).toEqual('<p-button class=\"hydrated\">Button 1</p-button>');\n});\n\nit('should return 2 after button is clicked', async () => {\n  await render(SampleComponent);\n  await componentsReady();\n\n  const button = getByRoleShadowed('button');\n  fireEvent.click(button);\n\n  expect(await componentsReady()).toBe(2);\n});"}};return n[e]},o=()=>{const e={"vanilla-js":'<p-accordion heading="Some Heading" tag="h3">\n  <p-text>\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore\n    magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n  </p-text>\n</p-accordion>\n<p-accordion heading="Some Heading" tag="h3">\n  <p-text>\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore\n    magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n  </p-text>\n</p-accordion>\n\n<script>\n  const accordions = document.querySelectorAll(\'p-accordion\');\n\n  accordions.forEach((accordion) =>\n    accordion.addEventListener(\'accordionChange\', (e) => {\n      e.target.open = e.detail.open;\n    })\n  );\n<\/script>',angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type { AccordionChangeEvent } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-accordion-example',\n  template: `\n    <p-accordion\n      [heading]=\"'Some Heading'\"\n      [tag]=\"'h3'\"\n      [open]=\"isAccordion1Open\"\n      (accordionChange)=\"onAccordion1Change($event)\"\n    >\n      <p-text>{{ content }}</p-text>\n    </p-accordion>\n    <p-accordion\n      [heading]=\"'Some Heading'\"\n      [tag]=\"'h3'\"\n      [open]=\"isAccordion2Open\"\n      (accordionChange)=\"onAccordion2Change($event)\"\n    >\n      <p-text>{{ content }}</p-text>\n    </p-accordion>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccordionExampleComponent {\n  isAccordion1Open = false;\n  isAccordion2Open = false;\n  content =\n    'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et ' +\n    'dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.';\n\n  onAccordion1Change(e: CustomEvent<AccordionChangeEvent>) {\n    this.isAccordion1Open = e.detail.open;\n  }\n  onAccordion2Change(e: CustomEvent<AccordionChangeEvent>) {\n    this.isAccordion2Open = e.detail.open;\n  }\n}",react:"import { useCallback, useState } from 'react';\nimport type { AccordionChangeEvent } from '@porsche-design-system/components-react';\nimport { PAccordion, PText } from '@porsche-design-system/components-react';\n\nexport const AccordionExamplePage = (): JSX.Element => {\n  const [isAccordion1Open, setIsAccordion1Open] = useState<boolean>(false);\n  const [isAccordion2Open, setIsAccordion2Open] = useState<boolean>(false);\n\n  const onAccordion1Change = useCallback((e: CustomEvent<AccordionChangeEvent>) => {\n    setIsAccordion1Open(e.detail.open);\n  }, []);\n  const onAccordion2Change = useCallback((e: CustomEvent<AccordionChangeEvent>) => {\n    setIsAccordion2Open(e.detail.open);\n  }, []);\n\n  const content =\n    'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et ' +\n    'dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.';\n\n  return (\n    <>\n      <PAccordion heading=\"Some Heading\" tag=\"h3\" open={isAccordion1Open} onAccordionChange={onAccordion1Change}>\n        <PText>{content}</PText>\n      </PAccordion>\n      <PAccordion heading=\"Some Heading\" tag=\"h3\" open={isAccordion2Open} onAccordionChange={onAccordion2Change}>\n        <PText>{content}</PText>\n      </PAccordion>\n    </>\n  );\n};"};return e},i=e=>{const n={"example-events":{"vanilla-js":"<p-carousel heading=\"Some Heading\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</p-carousel>\n\n<p-text>Last event detail: none</p-text>\n\n<script>\n  const carousel = document.querySelector('p-carousel');\n  const debugElement = document.querySelector('p-text');\n\n  carousel.addEventListener('carouselChange', (e) => {\n    debugElement.innerText = `Last event detail: ${JSON.stringify(e.detail)}`;\n  });\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type { CarouselChangeEvent } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-carousel-example-events',\n  template: `\n    <p-carousel [heading]=\"'Some Heading'\" (carouselChange)=\"onCarouselChange($event)\">\n      <div>Slide 1</div>\n      <div>Slide 2</div>\n      <div>Slide 3</div>\n    </p-carousel>\n\n    <p-text>Last event detail: {{ lastEventDetail }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselExampleEventsComponent {\n  lastEventDetail = 'none';\n\n  onCarouselChange(e: CustomEvent<CarouselChangeEvent>) {\n    this.lastEventDetail = JSON.stringify(e.detail);\n  }\n}",react:"import { useCallback, useState } from 'react';\nimport { PCarousel, PText } from '@porsche-design-system/components-react';\nimport type { CarouselChangeEvent } from '@porsche-design-system/components-react';\n\nexport const CarouselExampleEventsPage = (): JSX.Element => {\n  const [lastEventDetail, setLastEventDetail] = useState('none');\n  const onCarouselChange = useCallback(\n    (e: CustomEvent<CarouselChangeEvent>) => setLastEventDetail(JSON.stringify(e.detail)),\n    []\n  );\n\n  return (\n    <>\n      <PCarousel heading=\"Some Heading\" onCarouselChange={onCarouselChange}>\n        <div>Slide 1</div>\n        <div>Slide 2</div>\n        <div>Slide 3</div>\n      </PCarousel>\n      <PText children={`Last event detail: ${lastEventDetail}`} />\n    </>\n  );\n};"},"example-dynamic-slides":{"vanilla-js":"<p-carousel slides-per-page=\"2\" heading=\"Some Heading\">\n  <div>Slide 1</div>\n  <div>Slide 2</div>\n  <div>Slide 3</div>\n</p-carousel>\n\n<button id=\"btn-add\" type=\"button\">Add slide</button>\n<button id=\"btn-remove\" type=\"button\">Remove last slide</button>\n\n<script>\n  const carousel = document.querySelector('p-carousel');\n\n  document.querySelector('#btn-add').addEventListener('click', () => {\n    const child = document.createElement('div');\n    child.innerText = `Slide ${carousel.children.length + 1}`;\n    carousel.append(child);\n  });\n\n  document.querySelector('#btn-remove').addEventListener('click', () => {\n    carousel.lastChild.remove();\n  });\n<\/script>",angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-carousel-example-dynamic-slides\',\n  template: `\n    <p-carousel [slides-per-page]="2" [heading]="\'Some Heading\'">\n      <div *ngFor="let _ of [].constructor(amountOfSlides); let i = index">Slide {{ i + 1 }}</div>\n    </p-carousel>\n\n    <button type="button" (click)="amountOfSlides = amountOfSlides + 1">Add slide</button>\n    <button type="button" (click)="amountOfSlides = amountOfSlides === 0 ? 0 : amountOfSlides - 1">\n      Remove last slide\n    </button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselExampleDynamicSlidesComponent {\n  amountOfSlides = 3;\n}',react:'import { useCallback, useState } from \'react\';\nimport { PCarousel } from \'@porsche-design-system/components-react\';\n\nexport const CarouselExampleDynamicSlidesPage = (): JSX.Element => {\n  const [amountOfSlides, setAmountOfSlides] = useState(3);\n  const onAddClick = useCallback(() => setAmountOfSlides((prev) => prev + 1), []);\n  const onRemoveClick = useCallback(() => setAmountOfSlides((prev) => (prev === 0 ? 0 : prev - 1)), []);\n\n  return (\n    <>\n      <PCarousel slidesPerPage={2} heading="Some Heading">\n        {Array.from(Array(amountOfSlides)).map((_, i) => (\n          <div key={i} children={`Slide ${i + 1}`} />\n        ))}\n      </PCarousel>\n\n      <button type="button" onClick={onAddClick} children="Add slide" />\n      <button type="button" onClick={onRemoveClick} children="Remove last slide" />\n    </>\n  );\n};'}};return n[e]},l=e=>{const n={"example-events":{"vanilla-js":"<button type=\"button\">Show Inline Notification</button>\n<div hidden>\n  <p-inline-notification heading=\"Some heading\" description=\"Some description.\"></p-inline-notification>\n</div>\n\n<script>\n  const button = document.querySelector('p-button');\n  const inlineNotification = document.querySelector('p-inline-notification');\n  const { parentElement } = inlineNotification;\n\n  button.addEventListener('click', () => (parentElement.hidden = false));\n  inlineNotification.addEventListener('dismiss', () => (parentElement.hidden = true));\n<\/script>",angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-inline-notification-example-events\',\n  template: `\n    <button type="button" (click)="onShow()">Show Inline Notification</button>\n    <p-inline-notification\n      *ngIf="isActive"\n      [heading]="\'Some heading\'"\n      [description]="\'Some description.\'"\n      (dismiss)="onDismiss()"\n    ></p-inline-notification>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InlineNotificationExampleEventsComponent {\n  isActive = false;\n\n  onShow() {\n    this.isActive = true;\n  }\n  onDismiss() {\n    this.isActive = false;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport { PInlineNotification } from \'@porsche-design-system/components-react\';\n\nexport const InlineNotificationExampleEventsPage = (): JSX.Element => {\n  const [isActive, setIsActive] = useState<boolean>(false);\n  const onShow = useCallback(() => setIsActive(true), []);\n  const onDismiss = useCallback(() => setIsActive(false), []);\n\n  return (\n    <>\n      <button type="button" onClick={onShow}>\n        Show Inline Notification\n      </button>\n      {isActive && <PInlineNotification heading="Some heading" description="Some description." onDismiss={onDismiss} />}\n    </>\n  );\n};'},"example-action-button":{"vanilla-js":'<p-inline-notification\n  heading="Some heading"\n  description="Some description."\n  action-label="Retry"\n  action-icon="reset"\n></p-inline-notification>\n<button type="button">Reset `actionLoading`</button>\n\n<script>\n  const button = document.querySelector(\'p-button\');\n  const inlineNotification = document.querySelector(\'p-inline-notification\');\n\n  button.addEventListener(\'click\', () => (inlineNotification.actionLoading = false));\n  inlineNotification.addEventListener(\'action\', () => (inlineNotification.actionLoading = true));\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-inline-notification-example-action-button\',\n  template: `\n    <p-inline-notification\n      [heading]="\'Some heading\'"\n      [description]="\'Some description.\'"\n      [actionLabel]="\'Retry\'"\n      [actionIcon]="\'reset\'"\n      [actionLoading]="isLoading"\n      (action)="onAction()"\n    ></p-inline-notification>\n    <button type="button" (click)="onAction()">Reset \\`actionLoading\\`</button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InlineNotificationExampleActionButtonComponent {\n  isLoading = false;\n\n  onAction() {\n    this.isLoading = !this.isLoading;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport { PInlineNotification } from \'@porsche-design-system/components-react\';\n\nexport const InlineNotificationExampleActionButtonPage = (): JSX.Element => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const onAction = useCallback(() => setIsLoading((prevValue) => !prevValue), []);\n\n  return (\n    <>\n      <PInlineNotification\n        heading="Some heading"\n        description="Some description."\n        actionLabel="Retry"\n        actionIcon="reset"\n        actionLoading={isLoading}\n        onAction={onAction}\n      />\n      <button type="button" onClick={onAction}>\n        Reset `actionLoading`\n      </button>\n    </>\n  );\n};'}};return n[e]},r=()=>{const e={"vanilla-js":'<p-button type="button" aria="{ \'aria-haspopup\': \'dialog\' }">Open Modal</p-button>\n\n<p-modal heading="Some Heading" open="false">\n  <p-text>Some Content</p-text>\n  <p-button-group class="footer">\n    <p-button>Save</p-button>\n    <p-button type="button" variant="tertiary" icon="close">Close</p-button>\n  </p-button-group>\n</p-modal>\n\n<script>\n  const modal = document.querySelector(\'p-modal\');\n  modal.addEventListener(\'close\', () => {\n    modal.open = false;\n  });\n  document.querySelector(\'p-button\').addEventListener(\'click\', () => (modal.open = true));\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-modal-example-accessibility\',\n  template: `\n    <p-button type="button" [aria]="{ \'aria-haspopup\': \'dialog\' }" (click)="handleModalOpen()">Open Modal</p-button>\n    <p-modal [open]="isModalOpen" (close)="handleModalClose()">\n      <p-text>Some Content</p-text>\n      <p-button-group class="footer">\n        <p-button>Save</p-button>\n        <p-button type="button" [variant]="\'tertiary\'" [icon]="\'close\'">Close</p-button>\n      </p-button-group>\n    </p-modal>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModalExampleAccessibilityComponent {\n  isModalOpen = false;\n\n  handleModalOpen() {\n    this.isModalOpen = true;\n  }\n  handleModalClose() {\n    this.isModalOpen = false;\n  }\n}',react:'import { useCallback, useState } from \'react\';\nimport { PModal, PButton, PText, PButtonGroup } from \'@porsche-design-system/components-react\';\n\nexport const ModalExampleAccessibilityPage = (): JSX.Element => {\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const handleModalOpen = useCallback(() => {\n    setIsModalOpen(true);\n  }, []);\n  const handleModalClose = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n\n  return (\n    <>\n      <PButton type="button" aria={{ \'aria-haspopup\': \'dialog\' }} onClick={handleModalOpen}>\n        Open Modal\n      </PButton>\n      <PModal open={isModalOpen} onClose={handleModalClose}>\n        <PText>Some Content</PText>\n        <PButtonGroup className="footer">\n          <PButton>Save</PButton>\n          <PButton type="button" variant="tertiary" icon="close">\n            Close\n          </PButton>\n        </PButtonGroup>\n      </PModal>\n    </>\n  );\n};'};return e},s=()=>{const e={"vanilla-js":'<button type="button" id="start">Scroll to start</button>\n<button type="button" id="middle">Scroll to middle</button>\n<button type="button" id="end">Scroll to end</button>\n\n<div style="max-width: 400px; white-space: nowrap">\n  <p-scroller scroll-to-position="{scrollPosition: 220}">\n    <p-tag-dismissible>START - some tag content</p-tag-dismissible>\n    <p-tag-dismissible>MIDDLE - some tag content</p-tag-dismissible>\n    <p-tag-dismissible>END - some tag content</p-tag-dismissible>\n  </p-scroller>\n</div>\n\n<script>\n  const scroller = document.querySelector(\'p-scroller\');\n\n  const scrollToStart = document.querySelector(\'#start\');\n  scrollToStart.addEventListener(\'click\', () => {\n    scroller.scrollToPosition = { scrollPosition: 0, isSmooth: true };\n  });\n\n  const scrollToMiddle = document.querySelector(\'#middle\');\n  scrollToMiddle.addEventListener(\'click\', () => {\n    scroller.scrollToPosition = { scrollPosition: 220, isSmooth: true };\n  });\n\n  const scrollToEnd = document.querySelector(\'#end\');\n  scrollToEnd.addEventListener(\'click\', () => {\n    scroller.scrollToPosition = { scrollPosition: 720, isSmooth: true };\n  });\n<\/script>\n\n<style>\n  p-scroller > *:not(:last-child) {\n    margin-right: 1rem;\n  }\n\n  button {\n    margin: 0 1rem 1rem 0;\n  }\n</style>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'page-scroller-example\',\n  styles: [\n    `\n      p-scroller > *:not(:last-child) {\n        margin-right: 1rem;\n      }\n\n      button {\n        margin: 0 1rem 1rem 0;\n      }\n    `,\n  ],\n  template: `\n    <button type="button" (click)="onClick(0)">Scroll to start</button>\n    <button type="button" (click)="onClick(220)">Scroll to middle</button>\n    <button type="button" (click)="onClick(720)">Scroll to end</button>\n    <div style="max-width: 400px; white-space: nowrap">\n      <p-scroller [scrollToPosition]="{scrollPosition, isSmooth}">\n        <p-tag-dismissible>START - some tag content</p-tag-dismissible>\n        <p-tag-dismissible>MIDDLE - some tag content</p-tag-dismissible>\n        <p-tag-dismissible>END - some tag content</p-tag-dismissible>\n      </p-scroller>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScrollerExampleComponent {\n  scrollPosition: number = 220;\n  isSmooth: boolean = false;\n\n  onClick = (scrollPosition: number) => {\n    this.scrollPosition = scrollPosition;\n    this.isSmooth = true;\n  };\n}',react:"import { PScroller, PTagDismissible, ScrollToPosition } from '@porsche-design-system/components-react';\nimport { useCallback, useState } from 'react';\n\nexport const ScrollerExamplePage = (): JSX.Element => {\n  const style = `\n      p-scroller > *:not(:last-child) {\n        margin-right: 1rem;\n      }\n\n      button {\n        margin: 0 1rem 1rem 0;\n      }\n  `;\n\n  const [scrollToPosition, setScrollToPosition] = useState<ScrollToPosition>({ scrollPosition: 220, isSmooth: false });\n\n  const onClick = useCallback(\n    (scrollPosition: number) => () => {\n      setScrollToPosition({ scrollPosition: scrollPosition, isSmooth: true });\n    },\n    []\n  );\n\n  return (\n    <>\n      <style dangerouslySetInnerHTML={{ __html: style }} />\n\n      <button type=\"button\" onClick={onClick(0)}>\n        Scroll to start\n      </button>\n      <button type=\"button\" onClick={onClick(220)}>\n        Scroll to middle\n      </button>\n      <button type=\"button\" onClick={onClick(720)}>\n        Scroll to end\n      </button>\n\n      <div style={{ maxWidth: '400px', whiteSpace: 'nowrap' }}>\n        <PScroller scrollToPosition={scrollToPosition}>\n          <PTagDismissible>START - some tag content</PTagDismissible>\n          <PTagDismissible>MIDDLE - some tag content</PTagDismissible>\n          <PTagDismissible>END - some tag content</PTagDismissible>\n        </PScroller>\n      </div>\n    </>\n  );\n};"};return e},c=()=>{const e={"vanilla-js":'<p-segmented-control value="1">\n  <p-segmented-control-item value="1">Option 1</p-segmented-control-item>\n  <p-segmented-control-item value="2">Option 2</p-segmented-control-item>\n  <p-segmented-control-item value="3">Option 3</p-segmented-control-item>\n  <p-segmented-control-item value="4">Option 4</p-segmented-control-item>\n  <p-segmented-control-item value="5">Option 5</p-segmented-control-item>\n</p-segmented-control>\n\n<p-text>Current value: 1</p-text>\n\n<script>\n  const segmentedControl = document.querySelector(\'p-segmented-control\');\n  const debugElement = document.querySelector(\'p-text\');\n\n  segmentedControl.addEventListener(\'segmentedControlChange\', (e) => {\n    const { value } = e.detail;\n    segmentedControl.value = value;\n    debugElement.innerText = `Current value: ${value}`;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { SegmentedControlChangeEvent } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-segmented-control-example\',\n  template: `\n    <p-segmented-control [value]="currentValue" (segmentedControlChange)="onSegmentedControlChange($event)">\n      <p-segmented-control-item [value]="1">Option 1</p-segmented-control-item>\n      <p-segmented-control-item [value]="2">Option 2</p-segmented-control-item>\n      <p-segmented-control-item [value]="3">Option 3</p-segmented-control-item>\n      <p-segmented-control-item [value]="4">Option 4</p-segmented-control-item>\n      <p-segmented-control-item [value]="5">Option 5</p-segmented-control-item>\n    </p-segmented-control>\n\n    <p-text>Current value: {{ currentValue }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SegmentedControlExampleComponent {\n  currentValue = 1;\n\n  onSegmentedControlChange(e: CustomEvent<SegmentedControlChangeEvent>) {\n    this.currentValue = e.detail.value as number;\n  }\n}',react:"import { useCallback, useState } from 'react';\nimport type { SegmentedControlChangeEvent } from '@porsche-design-system/components-react';\nimport { PSegmentedControl, PSegmentedControlItem, PText } from '@porsche-design-system/components-react';\n\nexport const SegmentedControlExamplePage = (): JSX.Element => {\n  const [currentValue, setCurrentValue] = useState(1);\n\n  const onSegmentedControlChange = useCallback((e: CustomEvent<SegmentedControlChangeEvent>) => {\n    setCurrentValue(e.detail.value as number);\n  }, []);\n\n  return (\n    <>\n      <PSegmentedControl value={currentValue} onSegmentedControlChange={onSegmentedControlChange}>\n        <PSegmentedControlItem value={1}>Option 1</PSegmentedControlItem>\n        <PSegmentedControlItem value={2}>Option 2</PSegmentedControlItem>\n        <PSegmentedControlItem value={3}>Option 3</PSegmentedControlItem>\n        <PSegmentedControlItem value={4}>Option 4</PSegmentedControlItem>\n        <PSegmentedControlItem value={5}>Option 5</PSegmentedControlItem>\n      </PSegmentedControl>\n      <PText>Current value: {currentValue}</PText>\n    </>\n  );\n};"};return e},p=()=>{const e={"vanilla-js":"<p-stepper-horizontal>\n  <p-stepper-horizontal-item state=\"current\">Enter personal details</p-stepper-horizontal-item>\n  <p-stepper-horizontal-item>Confirm e-mail</p-stepper-horizontal-item>\n  <p-stepper-horizontal-item>Set password</p-stepper-horizontal-item>\n</p-stepper-horizontal>\n\n<div id=\"step-content-0\">\n  <p-text>A form with personal details could be displayed here.</p-text>\n</div>\n<div id=\"step-content-1\" hidden>\n  <p-text>A form with a verification code input field could be displayed here.</p-text>\n</div>\n<div id=\"step-content-2\" hidden>\n  <p-text>A form with a password input field could be displayed here.</p-text>\n</div>\n\n<p-button-group>\n  <p-button id=\"prev-button\" icon=\"arrow-head-left\" variant=\"tertiary\" disabled=\"true\">Previous Step</p-button>\n  <p-button id=\"next-button\" variant=\"primary\">Next Step</p-button>\n</p-button-group>\n\n<script>\n  const stepper = document.querySelector('p-stepper-horizontal');\n  const stepElements = Array.from(document.querySelectorAll('p-stepper-horizontal-item'));\n  const prevButton = document.querySelector('#prev-button');\n  const nextButton = document.querySelector('#next-button');\n  const panels = document.querySelectorAll('[id^=\"step-content\"]');\n\n  function getActiveStepIndex(steps) {\n    return steps.findIndex((step) => step.state === 'current');\n  }\n\n  function manageContent(activeStepIndex) {\n    if (activeStepIndex === 0) {\n      prevButton.setAttribute('disabled', 'true');\n    } else {\n      prevButton.removeAttribute('disabled');\n    }\n\n    if (activeStepIndex === stepElements.length - 1) {\n      nextButton.setAttribute('disabled', 'true');\n    } else {\n      nextButton.removeAttribute('disabled');\n    }\n\n    panels.forEach((panel, i) => {\n      if (i === activeStepIndex) {\n        panel.removeAttribute('hidden');\n      } else {\n        panel.setAttribute('hidden', '');\n      }\n    });\n  }\n\n  function onNextPrevStep(direction) {\n    const activeStepIndex = getActiveStepIndex(stepElements);\n\n    if (direction === 'next') {\n      stepElements[activeStepIndex].state = 'complete';\n      stepElements[activeStepIndex + 1].state = 'current';\n      manageContent(activeStepIndex + 1);\n    } else {\n      stepElements[activeStepIndex].state = undefined;\n      stepElements[activeStepIndex - 1].state = 'current';\n      manageContent(activeStepIndex - 1);\n    }\n  }\n\n  prevButton.addEventListener('click', () => onNextPrevStep('prev'));\n  nextButton.addEventListener('click', () => onNextPrevStep('next'));\n\n  stepper.addEventListener('stepChange', (e) => {\n    const { activeStepIndex } = e.detail;\n\n    for (let i = activeStepIndex + 1; i < stepElements.length; i++) {\n      // reset step state when going back via stepper horizontal item click\n      stepElements[i].state = undefined;\n    }\n    stepElements[activeStepIndex].state = 'current';\n\n    manageContent(activeStepIndex);\n  });\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type { StepChangeEvent, StepperState } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-stepper-horizontal-example',\n  template: `\n    <p-stepper-horizontal (stepChange)=\"onStepChange($event)\">\n      <ng-container *ngFor=\"let step of steps\">\n        <p-stepper-horizontal-item [state]=\"step.state\">\n          {{ step.name }}\n        </p-stepper-horizontal-item>\n      </ng-container>\n    </p-stepper-horizontal>\n\n    <ng-container *ngFor=\"let content of stepContent; let i = index\">\n      <p-text *ngIf=\"getActiveStepIndex(steps) === i\">{{ content }}</p-text>\n    </ng-container>\n\n    <p-button-group>\n      <p-button\n        [icon]=\"'arrow-head-left'\"\n        [variant]=\"'tertiary'\"\n        [disabled]=\"getActiveStepIndex(steps) === 0\"\n        (click)=\"onNextPrevStep('prev')\"\n      >\n        Previous Step\n      </p-button>\n\n      <p-button\n        [variant]=\"'primary'\"\n        [disabled]=\"getActiveStepIndex(steps) === steps.length - 1\"\n        (click)=\"onNextPrevStep('next')\"\n      >\n        Next Step\n      </p-button>\n    </p-button-group>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StepperHorizontalExampleComponent {\n  steps: StepperHorizontalItemProps[] = [\n    {\n      state: 'current',\n      name: 'Enter personal details',\n    },\n    {\n      name: 'Confirm e-mail',\n    },\n    {\n      name: 'Set password',\n    },\n  ];\n\n  stepContent: string[] = [\n    'A form with personal details could be displayed here.',\n    'A form with a verification code input field could be displayed here.',\n    'A form with a password input field could be displayed here.',\n  ];\n\n  getActiveStepIndex(steps: StepperHorizontalItemProps[]): number {\n    return steps.findIndex((step) => step.state === 'current');\n  }\n\n  onNextPrevStep(direction: 'next' | 'prev'): void {\n    const newState = [...this.steps];\n    const activeStepIndex = this.getActiveStepIndex(newState);\n\n    if (direction === 'next') {\n      newState[activeStepIndex].state = 'complete';\n      newState[activeStepIndex + 1].state = 'current';\n    } else {\n      delete newState[activeStepIndex].state;\n      newState[activeStepIndex - 1].state = 'current';\n    }\n\n    this.steps = newState;\n  }\n\n  onStepChange(e: CustomEvent<StepChangeEvent>): void {\n    const { activeStepIndex } = e.detail;\n\n    const newState = [...this.steps];\n    for (let i = activeStepIndex + 1; i < newState.length; i++) {\n      // reset step state when going back via stepper horizontal item click\n      delete newState[i].state;\n    }\n    newState[activeStepIndex].state = 'current';\n\n    this.steps = newState;\n  }\n}\n\ntype StepperHorizontalItemProps = {\n  state?: StepperState;\n  name: string;\n};",react:"import type { StepChangeEvent, StepperState } from '@porsche-design-system/components-react';\nimport {\n  PButton,\n  PButtonGroup,\n  PStepperHorizontal,\n  PStepperHorizontalItem,\n  PText,\n} from '@porsche-design-system/components-react';\nimport { useState } from 'react';\n\ntype StepperHorizontalItemProps = {\n  state?: StepperState;\n  name: string;\n};\nexport const StepperHorizontalExample = (): JSX.Element => {\n  const [steps, setSteps] = useState<StepperHorizontalItemProps[]>([\n    {\n      state: 'current',\n      name: 'Enter personal details',\n    },\n    {\n      name: 'Confirm e-mail',\n    },\n    {\n      name: 'Set password',\n    },\n  ]);\n\n  const stepContent: string[] = [\n    'A form with personal details could be displayed here.',\n    'A form with a verification code input field could be displayed here.',\n    'A form with a password input field could be displayed here.',\n  ];\n\n  const getActiveStepIndex = (steps: StepperHorizontalItemProps[]): number =>\n    steps.findIndex((step) => step.state === 'current');\n\n  const onNextPrevStep = (direction: 'next' | 'prev'): void => {\n    const newState = [...steps];\n    const activeStepIndex = getActiveStepIndex(newState);\n\n    if (direction === 'next') {\n      newState[activeStepIndex].state = 'complete';\n      newState[activeStepIndex + 1].state = 'current';\n    } else {\n      delete newState[activeStepIndex].state;\n      newState[activeStepIndex - 1].state = 'current';\n    }\n\n    setSteps(newState);\n  };\n\n  const handleStepChange = (e: CustomEvent<StepChangeEvent>): void => {\n    const { activeStepIndex } = e.detail;\n\n    const newState = [...steps];\n    for (let i = activeStepIndex + 1; i < newState.length; i++) {\n      // reset step state when going back via stepper horizontal item click\n      delete newState[i].state;\n    }\n    newState[activeStepIndex].state = 'current';\n    setSteps(newState);\n  };\n\n  return (\n    <>\n      <PStepperHorizontal onStepChange={handleStepChange}>\n        {steps.map(({ state, name }) => (\n          <PStepperHorizontalItem key={name} state={state}>\n            {name}\n          </PStepperHorizontalItem>\n        ))}\n      </PStepperHorizontal>\n\n      {stepContent.map((content, i) => getActiveStepIndex(steps) === i && <PText key={i}>{content}</PText>)}\n\n      <PButtonGroup>\n        <PButton\n          icon=\"arrow-head-left\"\n          variant=\"tertiary\"\n          onClick={() => onNextPrevStep('prev')}\n          disabled={getActiveStepIndex(steps) === 0}\n        >\n          Previous Step\n        </PButton>\n\n        <PButton\n          variant=\"primary\"\n          disabled={getActiveStepIndex(steps) === steps.length - 1}\n          onClick={() => onNextPrevStep('next')}\n        >\n          Next Step\n        </PButton>\n      </PButtonGroup>\n    </>\n  );\n};"};return e},d=e=>{const n={"example-basic":{"vanilla-js":"<p-table caption=\"Some caption\"></p-table>\n\n<script>\n  (async () => {\n    const { headBasic, dataBasic } = await getHeadAndData();\n\n    const renderTableHeadRow = (items) =>\n      [\n        '<p-table-head-row>',\n        ...items.map((item) => `<p-table-head-cell>${item}</p-table-head-cell>`),\n        '</p-table-head-row>',\n      ].join('');\n\n    const renderTableBodyRows = (items) =>\n      items\n        .map(\n          (item) => `\n  <p-table-row>\n    <p-table-cell>${item.model}</p-table-cell>\n    <p-table-cell>${item.date}</p-table-cell>\n    <p-table-cell>${item.interest}</p-table-cell>\n    <p-table-cell>${item.status}</p-table-cell>\n    <p-table-cell>${item.leadId}</p-table-cell>\n  </p-table-row>`\n        )\n        .join('');\n\n    const markup = `\n  <p-table-head>${renderTableHeadRow(headBasic)}</p-table-head>\n  <p-table-body>${renderTableBodyRows(dataBasic)}</p-table-body>`;\n\n    document.querySelector('p-table').innerHTML = markup;\n  })();\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { dataBasic, headBasic } from '@porsche-design-system/shared';\n\n@Component({\n  selector: 'page-table-example-basic',\n  template: `\n    <p-table caption=\"Some caption\">\n      <p-table-head>\n        <p-table-head-row>\n          <p-table-head-cell *ngFor=\"let item of head\">{{ item }}</p-table-head-cell>\n        </p-table-head-row>\n      </p-table-head>\n      <p-table-body>\n        <p-table-row *ngFor=\"let item of data\">\n          <p-table-cell>{{ item.model }}</p-table-cell>\n          <p-table-cell>{{ item.date }}</p-table-cell>\n          <p-table-cell>{{ item.interest }}</p-table-cell>\n          <p-table-cell>{{ item.status }}</p-table-cell>\n          <p-table-cell>{{ item.leadId }}</p-table-cell>\n        </p-table-row>\n      </p-table-body>\n    </p-table>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableExampleBasicComponent {\n  public head = headBasic;\n  public data = dataBasic;\n}",react:"import {\n  PTable,\n  PTableBody,\n  PTableCell,\n  PTableHead,\n  PTableHeadCell,\n  PTableHeadRow,\n  PTableRow,\n} from '@porsche-design-system/components-react';\nimport { headBasic, dataBasic } from '@porsche-design-system/shared';\n\nexport const TableExampleBasicPage = (): JSX.Element => {\n  return (\n    <PTable caption=\"Some caption\">\n      <PTableHead>\n        <PTableHeadRow>\n          {headBasic.map((item, i) => (\n            <PTableHeadCell key={i}>{item}</PTableHeadCell>\n          ))}\n        </PTableHeadRow>\n      </PTableHead>\n      <PTableBody>\n        {dataBasic.map((item, i) => (\n          <PTableRow key={i}>\n            <PTableCell>{item.model}</PTableCell>\n            <PTableCell>{item.date}</PTableCell>\n            <PTableCell>{item.interest}</PTableCell>\n            <PTableCell>{item.status}</PTableCell>\n            <PTableCell>{item.leadId}</PTableCell>\n          </PTableRow>\n        ))}\n      </PTableBody>\n    </PTable>\n  );\n};",shared:"export const headBasic: string[] = ['Model', 'Date', 'Purchase Intention', 'Status', 'Lead ID'];\n\nexport type DataBasic = {\n  model: string;\n  date: string;\n  interest: string;\n  status: string;\n  leadId: string;\n};\n\nexport const dataBasic: DataBasic[] = [\n  {\n    model: '718 Cayman',\n    date: '23.06.2021',\n    interest: 'New Car',\n    status: 'Won',\n    leadId: '0000824402',\n  },\n  {\n    model: 'Panamera 4S',\n    date: '19.06.2021',\n    interest: 'New Car',\n    status: 'Lost',\n    leadId: '0000824409',\n  },\n  {\n    model: '911 Carrera S',\n    date: '19.05.2021',\n    interest: 'Used Car',\n    status: 'Won',\n    leadId: '0000824408',\n  },\n  {\n    model: 'Macan Turbo',\n    date: '10.05.2021',\n    interest: 'Used Car',\n    status: 'Lost',\n    leadId: '0000824407',\n  },\n  {\n    model: 'Taycan',\n    date: '03.05.2021',\n    interest: 'New Car',\n    status: 'Won',\n    leadId: '0000824406',\n  },\n];"},"example-sorting":{"vanilla-js":"<p-table caption=\"Some caption\"></p-table>\n\n<script>\n  (async () => {\n    const { headSorting, dataSorting } = await getHeadAndData();\n\n    const renderTableHeadRow = (items) =>\n      [\n        '<p-table-head-row>',\n        ...items.map((item) => `<p-table-head-cell>${item.name}</p-table-head-cell>`),\n        '</p-table-head-row>',\n      ].join('');\n\n    const renderTableBodyRows = (items) =>\n      items\n        .map(\n          (item) => `\n  <p-table-row>\n    <p-table-cell>${item.col1}</p-table-cell>\n    <p-table-cell>${item.col2}</p-table-cell>\n    <p-table-cell>${item.col3}</p-table-cell>\n  </p-table-row>`\n        )\n        .join('');\n\n    const markup = `\n  <p-table-head>${renderTableHeadRow(headSorting)}</p-table-head>\n  <p-table-body>${renderTableBodyRows(dataSorting)}</p-table-body>`;\n\n    const table = document.querySelector('p-table');\n    table.innerHTML = markup;\n    const tableHeadCells = table.querySelectorAll('p-table-head-cell');\n    const tableBody = table.querySelector('p-table-body');\n\n    // pass head items via property\n    const passHeadItemsToNodes = (items) =>\n      tableHeadCells.forEach((el, index) => {\n        el.sort = items[index];\n      });\n\n    passHeadItemsToNodes(headSorting); // initial state\n\n    table.addEventListener('sortingChange', (e) => {\n      const { id, direction } = e.detail;\n\n      const sortedHead = headSorting.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) }));\n      const sortedData = [...dataSorting].sort((a, b) =>\n        direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])\n      );\n\n      passHeadItemsToNodes(sortedHead);\n      tableBody.innerHTML = renderTableBodyRows(sortedData);\n    });\n  })();\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type { SortingChangeEvent } from '@porsche-design-system/components-angular';\nimport { dataSorting, DataSorting, headSorting } from '@porsche-design-system/shared';\n\n@Component({\n  selector: 'page-table-example-sorting',\n  template: `\n    <p-table caption=\"Some caption\" (sortingChange)=\"onSortingChange($event)\">\n      <p-table-head>\n        <p-table-head-row>\n          <p-table-head-cell *ngFor=\"let item of head\" [sort]=\"item\">\n            {{ item.name }}\n          </p-table-head-cell>\n        </p-table-head-row>\n      </p-table-head>\n      <p-table-body>\n        <p-table-row *ngFor=\"let item of data\">\n          <p-table-cell>{{ item.col1 }}</p-table-cell>\n          <p-table-cell>{{ item.col2 }}</p-table-cell>\n          <p-table-cell>{{ item.col3 }}</p-table-cell>\n        </p-table-row>\n      </p-table-body>\n    </p-table>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableExampleSortingComponent {\n  public head = headSorting;\n  public data = dataSorting;\n\n  onSortingChange(e: CustomEvent<SortingChangeEvent>): void {\n    const { id, direction } = e.detail as SortingChangeEvent & { id: keyof DataSorting };\n    this.head = this.head.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) }));\n    this.data = [...this.data].sort((a, b) =>\n      direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])\n    );\n  }\n}",react:"import {\n  PTable,\n  PTableBody,\n  PTableCell,\n  PTableHead,\n  PTableHeadCell,\n  PTableHeadRow,\n  PTableRow,\n} from '@porsche-design-system/components-react';\nimport type { SortingChangeEvent } from '@porsche-design-system/components-react';\nimport { useCallback, useState } from 'react';\nimport { dataSorting, DataSorting, headSorting } from '@porsche-design-system/shared';\n\nexport const TableExampleSortingPage = (): JSX.Element => {\n  const [head, setHead] = useState(headSorting);\n  const [data, setData] = useState(dataSorting);\n\n  const onSortingChange = useCallback((e: CustomEvent<SortingChangeEvent>) => {\n    const { id, direction } = e.detail as SortingChangeEvent & { id: keyof DataSorting };\n    setHead((prev) => prev.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) })));\n    setData((prev) =>\n      [...prev].sort((a, b) => {\n        return direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id]);\n      })\n    );\n  }, []);\n\n  return (\n    <PTable caption=\"Some caption\" onSortingChange={onSortingChange}>\n      <PTableHead>\n        <PTableHeadRow>\n          {head.map((item, i) => (\n            <PTableHeadCell key={i} sort={item}>\n              {item.name}\n            </PTableHeadCell>\n          ))}\n        </PTableHeadRow>\n      </PTableHead>\n      <PTableBody>\n        {data.map((item, i) => (\n          <PTableRow key={i}>\n            <PTableCell>{item.col1}</PTableCell>\n            <PTableCell>{item.col2}</PTableCell>\n            <PTableCell>{item.col3}</PTableCell>\n          </PTableRow>\n        ))}\n      </PTableBody>\n    </PTable>\n  );\n};",shared:"export type HeadSorting = {\n  id: string;\n  name: string;\n  active?: boolean;\n  direction?: 'asc' | 'desc';\n};\n\nexport const headSorting: HeadSorting[] = [\n  { name: 'Column 1', id: 'col1' } as HeadSorting,\n  { name: 'Column 2', id: 'col2' } as HeadSorting,\n  { name: 'Column 3', id: 'col3' } as HeadSorting,\n].map((item, i) => ({\n  ...item,\n  active: i === 1,\n  direction: 'asc',\n}));\n\nexport type DataSorting = {\n  col1: string;\n  col2: string;\n  col3: string;\n};\n\nexport const dataSorting: DataSorting[] = [\n  {\n    col1: 'Name A',\n    col2: '9',\n    col3: '01.06.2021',\n  },\n  {\n    col1: 'Name Z',\n    col2: '1',\n    col3: '24.06.2021',\n  },\n];"},"example-advanced":{"vanilla-js":'<p-table>\n  <p-headline slot="caption" variant="headline-3">Some visual caption</p-headline>\n  <p-table-head></p-table-head>\n  <p-table-body></p-table-body>\n</p-table>\n\n<script>\n  (async () => {\n    const { headAdvanced, dataAdvanced } = await getHeadAndData();\n\n    const renderTableHeadRow = (items) =>\n      [\n        \'<p-table-head-row>\',\n        ...items.map((item) => `<p-table-head-cell>${item.name || \'\'}</p-table-head-cell>`),\n        \'</p-table-head-row>\',\n      ].join(\'\');\n\n    const renderTableBodyRows = (items) =>\n      items\n        .map(\n          (item) => `\n<p-table-row>\n  <p-table-cell>\n    <p-flex>\n      <p-flex-item>\n        <img src="${item.imageUrl}" width="80" height="45" style="margin-right: .5rem" alt="" />\n      </p-flex-item>\n      <p-flex-item>\n        <p-text weight=\'semibold\'>${item.model}</p-text>\n        <p-text size=\'x-small\'>${item.date}</p-text>\n      </p-flex-item>\n    </p-flex>\n  </p-table-cell>\n  <p-table-cell>${item.interest}</p-table-cell>\n  <p-table-cell><a href="https://porsche.com">${item.vin}</a></p-table-cell>\n  <p-table-cell>${item.purchaseIntention}</p-table-cell>\n  <p-table-cell>${item.status}</p-table-cell>\n  <p-table-cell multiline="true" style="min-width: 10rem;">${item.comment}</p-table-cell>\n  <p-table-cell>${item.leadId}</p-table-cell>\n  <p-table-cell>\n    <p-button-pure icon="edit" style="padding: .5rem">Edit</p-button-pure>\n    <p-button-pure icon="delete" style="padding: .5rem">Delete</p-button-pure>\n  </p-table-cell>\n</p-table-row>`\n        )\n        .join(\'\');\n\n    const table = document.querySelector(\'p-table\');\n    const tableHead = table.querySelector(\'p-table-head\');\n    tableHead.innerHTML = renderTableHeadRow(headAdvanced);\n    const tableBody = table.querySelector(\'p-table-body\');\n    tableBody.innerHTML = renderTableBodyRows(dataAdvanced);\n\n    const tableHeadCells = table.querySelectorAll(\'p-table-head-cell\');\n\n    // pass head items via property\n    const passHeadItemsToNodes = (items) => {\n      tableHeadCells.forEach((el, index) => {\n        el.hideLabel = items[index].hideLabel;\n        el.sort = items[index];\n      });\n    };\n\n    passHeadItemsToNodes(headAdvanced); // initial state\n\n    table.addEventListener(\'sortingChange\', (e) => {\n      const { id, direction } = e.detail;\n\n      const sortedHead = headAdvanced.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) }));\n      const sortedData = [...dataAdvanced].sort((a, b) =>\n        direction === \'asc\' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])\n      );\n\n      passHeadItemsToNodes(sortedHead);\n      tableBody.innerHTML = renderTableBodyRows(sortedData);\n    });\n  })();\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { SortingChangeEvent } from \'@porsche-design-system/components-angular\';\nimport { dataAdvanced, DataAdvanced, headAdvanced } from \'@porsche-design-system/shared\';\n\n@Component({\n  selector: \'page-table-example-advanced\',\n  template: `\n    <p-table (sortingChange)="onSortingChange($event)">\n      <p-headline slot="caption" variant="headline-3">Some visual caption</p-headline>\n      <p-table-head>\n        <p-table-head-row>\n          <p-table-head-cell *ngFor="let item of head" [sort]="item" [hideLabel]="item.hideLabel">\n            {{ item.name }}\n          </p-table-head-cell>\n        </p-table-head-row>\n      </p-table-head>\n      <p-table-body>\n        <p-table-row *ngFor="let item of data">\n          <p-table-cell>\n            <p-flex>\n              <p-flex-item>\n                <img src="{{ item.imageUrl }}" width="80" height="45" style="margin-right: .5rem" alt="" />\n              </p-flex-item>\n              <p-flex-item>\n                <p-text weight="semibold">{{ item.model }}</p-text>\n                <p-text size="x-small">{{ item.date }}</p-text>\n              </p-flex-item>\n            </p-flex>\n          </p-table-cell>\n          <p-table-cell>{{ item.interest }}</p-table-cell>\n          <p-table-cell>\n            <a href="https://porsche.com">{{ item.vin }}</a>\n          </p-table-cell>\n          <p-table-cell>{{ item.purchaseIntention }}</p-table-cell>\n          <p-table-cell>{{ item.status }}</p-table-cell>\n          <p-table-cell [multiline]="true" style="min-width: 10rem;">{{ item.comment }}</p-table-cell>\n          <p-table-cell>{{ item.leadId }}</p-table-cell>\n          <p-table-cell>\n            <p-button-pure icon="edit" style="padding: .5rem">Edit</p-button-pure>\n            <p-button-pure icon="delete" style="padding: .5rem">Delete</p-button-pure>\n          </p-table-cell>\n        </p-table-row>\n      </p-table-body>\n    </p-table>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableExampleAdvancedComponent {\n  public head = headAdvanced;\n  public data = dataAdvanced;\n\n  onSortingChange(e: CustomEvent<SortingChangeEvent>): void {\n    const { id, direction } = e.detail as SortingChangeEvent & { id: keyof DataAdvanced };\n    this.head = this.head.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) }));\n    this.data = [...this.data].sort((a, b) =>\n      direction === \'asc\' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])\n    );\n  }\n}',react:"import {\n  PButtonPure,\n  PFlex,\n  PFlexItem,\n  PHeadline,\n  PTable,\n  PTableBody,\n  PTableCell,\n  PTableHead,\n  PTableHeadCell,\n  PTableHeadRow,\n  PTableRow,\n  PText,\n} from '@porsche-design-system/components-react';\nimport type { SortingChangeEvent } from '@porsche-design-system/components-react';\nimport { useCallback, useState } from 'react';\nimport { dataAdvanced, DataAdvanced, headAdvanced } from '@porsche-design-system/shared';\n\nexport const TableExampleAdvancedPage = (): JSX.Element => {\n  const [head, setHead] = useState(headAdvanced);\n  const [data, setData] = useState(dataAdvanced);\n\n  const onSortingChange = useCallback((e: CustomEvent<SortingChangeEvent>) => {\n    const { id, direction } = e.detail as SortingChangeEvent & { id: keyof DataAdvanced };\n    setHead((prev) => prev.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) })));\n    setData((prev) =>\n      [...prev].sort((a, b) => {\n        return direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id]);\n      })\n    );\n  }, []);\n\n  return (\n    <PTable onSortingChange={onSortingChange}>\n      <PHeadline slot=\"caption\" variant=\"headline-3\">\n        Some visual caption\n      </PHeadline>\n      <PTableHead>\n        <PTableHeadRow>\n          {head.map((item, i) => (\n            <PTableHeadCell key={i} sort={item} hideLabel={item.hideLabel}>\n              {item.name}\n            </PTableHeadCell>\n          ))}\n        </PTableHeadRow>\n      </PTableHead>\n      <PTableBody>\n        {data.map((item, i) => (\n          <PTableRow key={i}>\n            <PTableCell>\n              <PFlex>\n                <PFlexItem>\n                  <img src={item.imageUrl} width={80} height={45} style={{ marginRight: '.5rem' }} alt=\"\" />\n                </PFlexItem>\n                <PFlexItem>\n                  <PText weight=\"semibold\">{item.model}</PText>\n                  <PText size=\"x-small\">{item.date}</PText>\n                </PFlexItem>\n              </PFlex>\n            </PTableCell>\n            <PTableCell>{item.interest}</PTableCell>\n            <PTableCell>\n              <a href=\"https://porsche.com\">{item.vin}</a>\n            </PTableCell>\n            <PTableCell>{item.purchaseIntention}</PTableCell>\n            <PTableCell>{item.status}</PTableCell>\n            <PTableCell multiline={true} style={{ minWidth: '10rem' }}>\n              {item.comment}\n            </PTableCell>\n            <PTableCell>{item.leadId}</PTableCell>\n            <PTableCell>\n              <PButtonPure icon=\"edit\" style={{ padding: '.5rem' }}>\n                Edit\n              </PButtonPure>\n              <PButtonPure icon=\"delete\" style={{ padding: '.5rem' }}>\n                Delete\n              </PButtonPure>\n            </PTableCell>\n          </PTableRow>\n        ))}\n      </PTableBody>\n    </PTable>\n  );\n};",shared:"export type HeadAdvanced = {\n  id: string;\n  name: string;\n  hideLabel: boolean;\n  active?: boolean;\n  direction?: 'asc' | 'desc';\n};\n\nexport const headAdvanced: HeadAdvanced[] = [\n  { name: 'Model', id: 'model' } as HeadAdvanced,\n  { name: 'Interest', id: 'interest' } as HeadAdvanced,\n  { name: 'VIN', id: 'vin' } as HeadAdvanced,\n  { name: 'Purchase Intention', id: 'purchaseIntention' } as HeadAdvanced,\n  { name: 'Status', id: 'status' } as HeadAdvanced,\n  { name: 'Comment', id: 'comment' } as HeadAdvanced,\n  { name: 'Lead ID', id: 'leadId' } as HeadAdvanced,\n  { name: 'Action', id: 'action', hideLabel: true } as HeadAdvanced,\n].map((item, i) => ({\n  ...item,\n  ...(i > 0 &&\n    i < 7 &&\n    i !== 5 && {\n      active: i === 1,\n      direction: 'asc',\n    }),\n}));\n\nexport type DataAdvanced = {\n  imageUrl: string;\n  model: string;\n  date: string;\n  interest: string;\n  vin: string;\n  purchaseIntention: string;\n  status: string;\n  comment: string;\n  leadId: string;\n};\n\nexport const dataAdvanced: DataAdvanced[] = [\n  {\n    imageUrl: 'https://nav.porsche.com/00BC524/series-assets/1366/718@2x.jpg',\n    model: '718 Cayman',\n    date: '23.06.2021',\n    interest: 'New Car',\n    vin: '1FM5K7F84FGB16304',\n    purchaseIntention: '08/2021',\n    status: 'Won',\n    comment: '-',\n    leadId: '0000824402',\n  },\n  {\n    imageUrl: 'https://nav.porsche.com/00BC524/series-assets/1366/panamera@2x.jpg',\n    model: 'Panamera 4S',\n    date: '19.06.2021',\n    interest: 'New Car',\n    vin: '2GCEC13T141374801',\n    purchaseIntention: '11/2021',\n    status: 'Lost',\n    comment: 'Some multiline text and a column with a min width.',\n    leadId: '0000824409',\n  },\n  {\n    imageUrl: 'https://nav.porsche.com/00BC524/series-assets/1366/911@2x.jpg',\n    model: '911 Carrera S',\n    date: '19.05.2021',\n    interest: 'Used Car',\n    vin: '5GAKVCKD8EJ335750',\n    purchaseIntention: '09/2021',\n    status: 'Won',\n    comment: '-',\n    leadId: '0000824408',\n  },\n  {\n    imageUrl: 'https://nav.porsche.com/00BC524/series-assets/1366/macan@2x.jpg',\n    model: 'Macan Turbo',\n    date: '10.05.2021',\n    interest: 'Used Car',\n    vin: '1FMPU17L83LC09302',\n    purchaseIntention: '07/2021',\n    status: 'Lost',\n    comment: '-',\n    leadId: '0000824407',\n  },\n  {\n    imageUrl: 'https://nav.porsche.com/00BC524/series-assets/768/taycan@2x.jpg',\n    model: 'Taycan',\n    date: '03.05.2021',\n    interest: 'New Car',\n    vin: 'JN1BY1AR3BM375187',\n    purchaseIntention: '05/2021',\n    status: 'Won',\n    comment: '-',\n    leadId: '0000824406',\n  },\n];"}};return n[e]},m=e=>{const n={"example-basic":{"vanilla-js":'<p-tabs-bar>\n  <button type="button">Tab One</button>\n  <button type="button">Tab Two</button>\n  <button type="button">Tab Three</button>\n</p-tabs-bar>\n\n<script>\n  const tabsBar = document.querySelector(\'p-tabs-bar\');\n  tabsBar.addEventListener(\'tabChange\', (e) => {\n    e.target.activeTabIndex = e.detail.activeTabIndex;\n  });\n<\/script>',angular:'import { ChangeDetectionStrategy, Component } from \'@angular/core\';\nimport type { TabChangeEvent } from \'@porsche-design-system/components-angular\';\n\n@Component({\n  selector: \'page-tabs-bar-example-basic\',\n  template: `\n    <p-tabs-bar [activeTabIndex]="tabIndex" (tabChange)="onTabChange($event)">\n      <button type="button">Tab One</button>\n      <button type="button">Tab Two</button>\n      <button type="button">Tab Three</button>\n    </p-tabs-bar>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabsBarExampleBasicComponent {\n  tabIndex: number;\n\n  onTabChange(e: CustomEvent<TabChangeEvent>) {\n    this.tabIndex = e.detail.activeTabIndex;\n  }\n}',react:"import { PTabsBar } from '@porsche-design-system/components-react';\nimport { useCallback, useState } from 'react';\nimport type { TabChangeEvent } from '@porsche-design-system/components-react';\n\nexport const TabsBarExampleBasicPage = (): JSX.Element => {\n  const [tabIndex, setTabIndex] = useState<number>();\n  const onTabChange = useCallback((e: CustomEvent<TabChangeEvent>) => {\n    setTabIndex(e.detail.activeTabIndex);\n  }, []);\n\n  return (\n    <PTabsBar activeTabIndex={tabIndex} onTabChange={onTabChange}>\n      <button type=\"button\">Tab One</button>\n      <button type=\"button\">Tab Two</button>\n      <button type=\"button\">Tab Three</button>\n    </PTabsBar>\n  );\n};"},"example-accessibility":{"vanilla-js":'<p-tabs-bar active-tab-index="0">\n  <button type="button" id="tab-item-0" aria-controls="tab-panel-0">Tab One</button>\n  <button type="button" id="tab-item-1" aria-controls="tab-panel-1">Tab Two</button>\n  <button type="button" id="tab-item-2" aria-controls="tab-panel-2">Tab Three</button>\n</p-tabs-bar>\n\n<div id="tab-panel-0" role="tabpanel" tabindex="0" aria-labelledby="tab-item-0">\n  <p-text>Your content of Tab 1</p-text>\n</div>\n<div id="tab-panel-1" role="tabpanel" hidden tabindex="-1" aria-labelledby="tab-item-1">\n  <p-text>Your content of Tab 2</p-text>\n</div>\n<div id="tab-panel-2" role="tabpanel" hidden tabindex="-1" aria-labelledby="tab-item-2">\n  <p-text>Your content of Tab 3</p-text>\n</div>\n\n<script>\n  const panels = Array.from(document.querySelectorAll(\'[role="tabpanel"]\'));\n\n  document.querySelector(\'p-tabs-bar\').addEventListener(\'tabChange\', (e) => {\n    e.target.activeTabIndex = e.detail.activeTabIndex;\n\n    panels.forEach((panel, i) => {\n      if (i === e.detail.activeTabIndex) {\n        panel.removeAttribute(\'hidden\');\n        panel.setAttribute(\'tabindex\', \'0\');\n      } else {\n        panel.setAttribute(\'hidden\', \'\');\n        panel.setAttribute(\'tabindex\', \'-1\');\n      }\n    });\n  });\n<\/script>\n\n<style>\n  div[role=\'tabpanel\'] {\n    outline: 1px solid transparent;\n    outline-offset: 2px;\n    margin-top: 8px;\n  }\n  div[role=\'tabpanel\']:focus {\n    outline-color: #000;\n  }\n  div[role=\'tabpanel\']:focus:not(:focus-visible) {\n    outline-color: transparent;\n  }\n</style>',angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport type { TabChangeEvent } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-tabs-bar-example-accessibility',\n  styles: [\n    `\n      div[role='tabpanel'] {\n        outline: 1px solid transparent;\n        outline-offset: 2px;\n        margin-top: 8px;\n      }\n      div[role='tabpanel']:focus {\n        outline-color: #000;\n      }\n      div[role='tabpanel']:focus:not(:focus-visible) {\n        outline-color: transparent;\n      }\n    `,\n  ],\n  template: `\n    <p-tabs-bar [activeTabIndex]=\"tabIndex\" (tabChange)=\"onTabChange($event)\">\n      <ng-container *ngFor=\"let tabPanel of tabPanels; let i = index\">\n        <button type=\"button\" [attr.id]=\"'tab-item-' + i\" [attr.aria-controls]=\"'tab-panel-' + i\">\n          Tab {{ tabPanel }}\n        </button>\n      </ng-container>\n    </p-tabs-bar>\n\n    <ng-container *ngFor=\"let content of tabPanels; let i = index\">\n      <div\n        [attr.id]=\"'tab-panel-' + i\"\n        [hidden]=\"tabIndex !== i\"\n        [tabindex]=\"tabIndex === i ? 0 : -1\"\n        role=\"tabpanel\"\n        [attr.aria-labelledby]=\"'tab-item-' + i\"\n      >\n        <p-text>Your content of Tab {{ i + 1 }}</p-text>\n      </div>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabsBarExampleAccessibilityComponent {\n  tabIndex: number = 0;\n  tabPanels: string[] = ['One', 'Two', 'Three'];\n\n  onTabChange(e: CustomEvent<TabChangeEvent>) {\n    this.tabIndex = e.detail.activeTabIndex;\n  }\n}",react:"import { PTabsBar, PText } from '@porsche-design-system/components-react';\nimport { useCallback, useState } from 'react';\nimport type { TabChangeEvent } from '@porsche-design-system/components-react';\n\nexport const TabsBarExampleAccessibilityPage = (): JSX.Element => {\n  const [tabIndex, setTabIndex] = useState<number>(0);\n  const onTabChange = useCallback((e: CustomEvent<TabChangeEvent>) => {\n    setTabIndex(e.detail.activeTabIndex);\n  }, []);\n\n  const tabPanels: string[] = ['One', 'Two', 'Three'];\n\n  return (\n    <>\n      <style>{`\n        div[role=tabpanel] {\n          outline: 1px solid transparent;\n          outline-offset: 2px;\n          margin-top: 8px;\n        }\n        div[role=tabpanel]:focus {\n          outline-color: #000;\n        }\n        div[role=tabpanel]:focus:not(:focus-visible) {\n          outline-color: transparent;\n        }\n      `}</style>\n      <PTabsBar activeTabIndex={tabIndex} onTabChange={onTabChange}>\n        {tabPanels.map((tabPanel, i) => (\n          <button key={i} type=\"button\" id={`tab-item-${i}`} aria-controls={`tab-panel-${i}`}>\n            Tab {tabPanel}\n          </button>\n        ))}\n      </PTabsBar>\n\n      {tabPanels.map((content, i) => (\n        <div\n          key={i}\n          role=\"tabpanel\"\n          id={`tab-panel-${i}`}\n          hidden={tabIndex !== i}\n          tabIndex={tabIndex === i ? 0 : -1}\n          aria-labelledby={`tab-item-${i}`}\n        >\n          <PText>Your content of Tab {i + 1}</PText>\n        </div>\n      ))}\n    </>\n  );\n};"}};return n[e]},u=e=>{const n={"example-imask":{"vanilla-js":"<p-text-field-wrapper label=\"Some label\">\n  <input type=\"text\" />\n</p-text-field-wrapper>\n\n<script>\n  const isDeLocale = Intl.NumberFormat().resolvedOptions().locale.startsWith('de');\n  const dateFormat = isDeLocale ? 'dd.mm.yyyy' : 'mm/dd/yyyy';\n  const dateRange = isDeLocale ? '01.01.1900, 01.01.2100' : '01/01/1900, 01/01/2100';\n  const textFieldWrapper = document.querySelector('p-text-field-wrapper');\n  textFieldWrapper.description = `'${dateFormat}' in range [${dateRange}]`;\n\n  IMask(textFieldWrapper.querySelector('input'), {\n    lazy: false,\n    mask: dateFormat,\n    blocks: {\n      dd: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 31,\n        placeholderChar: 'd',\n      },\n      mm: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 12,\n        placeholderChar: 'm',\n      },\n      yyyy: {\n        mask: IMask.MaskedRange,\n        from: 1900,\n        to: 2100,\n        placeholderChar: 'y',\n      },\n    },\n  });\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { MaskedRange } from 'imask';\n\n@Component({\n  selector: 'page-text-field-wrapper-example-imask',\n  template: `\n    <p-text-field-wrapper [label]=\"'Some label'\" [description]=\"description\">\n      <input [type]=\"'text'\" [imask]=\"mask\" />\n    </p-text-field-wrapper>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextFieldWrapperExampleImaskComponent {\n  public isDeLocale = Intl.NumberFormat().resolvedOptions().locale.startsWith('de');\n  public dateFormat = this.isDeLocale ? 'dd.mm.yyyy' : 'mm/dd/yyyy';\n  public dateRange = this.isDeLocale ? '01.01.1900, 01.01.2100' : '01/01/1900, 01/01/2100';\n  public description = `'${this.dateFormat}' in range [${this.dateRange}]`;\n  public mask = {\n    lazy: false,\n    mask: this.dateFormat,\n    blocks: {\n      dd: {\n        mask: MaskedRange,\n        from: 1,\n        to: 31,\n        placeholderChar: 'd',\n      },\n      mm: {\n        mask: MaskedRange,\n        from: 1,\n        to: 12,\n        placeholderChar: 'm',\n      },\n      yyyy: {\n        mask: MaskedRange,\n        from: 1900,\n        to: 2100,\n        placeholderChar: 'y',\n      },\n    },\n  };\n}",react:"import { PTextFieldWrapper } from '@porsche-design-system/components-react';\nimport type { LegacyRef } from 'react';\nimport { useIMask, IMask } from 'react-imask';\n\nexport const TextFieldWrapperExampleIMaskPage = (): JSX.Element => {\n  const isDeLocale = Intl.NumberFormat().resolvedOptions().locale.startsWith('de');\n  const dateFormat = isDeLocale ? 'dd.mm.yyyy' : 'mm/dd/yyyy';\n  const dateRange = isDeLocale ? '01.01.1900, 01.01.2100' : '01/01/1900, 01/01/2100';\n  const description = `'${dateFormat}' in range [${dateRange}]`;\n  const opts = {\n    lazy: false,\n    mask: dateFormat,\n    blocks: {\n      dd: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 31,\n        placeholderChar: 'd',\n      },\n      mm: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 12,\n        placeholderChar: 'm',\n      },\n      yyyy: {\n        mask: IMask.MaskedRange,\n        from: 1900,\n        to: 2100,\n        placeholderChar: 'y',\n      },\n    },\n  };\n  const { ref } = useIMask(opts);\n\n  return (\n    <PTextFieldWrapper label=\"Some label\" description={description}>\n      <input ref={ref as LegacyRef<HTMLInputElement>} type=\"text\" />\n    </PTextFieldWrapper>\n  );\n};"},"example-search":{"vanilla-js":"<p-text-field-wrapper label=\"Search location\" hide-label=\"true\" action-icon=\"locate\">\n  <input type=\"search\" />\n</p-text-field-wrapper>\n<p-text>Value: </p-text>\n\n<script>\n  const textFieldWrapper = document.querySelector('p-text-field-wrapper');\n  const input = document.querySelector('input');\n  const text = document.querySelector('p-text');\n\n  const setInputPlaceholder = (active) => (input.placeholder = active ? 'Locating...' : '');\n\n  textFieldWrapper.addEventListener('action', (e) => {\n    e.target.actionLoading = true;\n    setInputPlaceholder(true);\n\n    // simulate async request\n    setTimeout(() => {\n      input.value = 'Stuttgart, Baden-Württemberg';\n      text.innerText = 'Value: ' + input.value;\n      e.target.actionLoading = false;\n      setInputPlaceholder(false);\n    }, 3000);\n  });\n\n  input.addEventListener('input', (e) => {\n    text.innerText = 'Value: ' + e.target.value;\n    if (textFieldWrapper.actionLoading) {\n      textFieldWrapper.actionLoading = false;\n      setInputPlaceholder(false);\n    }\n  });\n<\/script>",angular:'import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from \'@angular/core\';\n\n@Component({\n  selector: \'text-field-wrapper-example-search\',\n  template: `\n    <p-text-field-wrapper\n      label="Search location"\n      [hideLabel]="true"\n      actionIcon="locate"\n      [actionLoading]="isLoading"\n      (action)="onAction()"\n    >\n      <input type="search" [value]="value" [placeholder]="isLoading ? \'Locating...\' : \'\'" (input)="onInput($event)" />\n    </p-text-field-wrapper>\n    <p-text>Value: {{ value }}</p-text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextFieldWrapperExampleSearchComponent {\n  public value = \'\';\n  public isLoading = false;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  public onAction() {\n    this.isLoading = true;\n\n    // simulate async request\n    setTimeout(() => {\n      this.value = \'Stuttgart, Baden-Württemberg\';\n      this.isLoading = false;\n      this.cdr.markForCheck();\n    }, 3000);\n  }\n\n  public onInput(e: Event) {\n    this.value = (e.target as HTMLInputElement).value;\n    if (this.isLoading) {\n      this.isLoading = false;\n    }\n  }\n}',react:"import { PText, PTextFieldWrapper } from '@porsche-design-system/components-react';\nimport { useCallback, useState } from 'react';\nimport type { ChangeEvent } from 'react';\n\nexport const TextFieldWrapperExampleSearchPage = (): JSX.Element => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [value, setValue] = useState('');\n\n  const onAction = useCallback(() => {\n    setIsLoading(true);\n\n    // simulate async request\n    setTimeout(() => {\n      setValue('Stuttgart, Baden-Württemberg');\n      setIsLoading(false);\n    }, 3000);\n  }, []);\n\n  const onInput = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      setValue(e.target.value);\n      if (isLoading) {\n        setIsLoading(false);\n      }\n    },\n    [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  return (\n    <>\n      <PTextFieldWrapper\n        label=\"Search location\"\n        hideLabel\n        actionIcon=\"locate\"\n        actionLoading={isLoading}\n        onAction={onAction}\n      >\n        <input type=\"search\" value={value} placeholder={isLoading ? 'Locating...' : ''} onInput={onInput} />\n      </PTextFieldWrapper>\n      <PText children={'Value: ' + value} />\n    </>\n  );\n};"}};return n[e]},b=()=>{const e={"vanilla-js":"<button type=\"button\">Queue Toast</button>\n<p-toast></p-toast>\n\n<script>\n  const toast = document.querySelector('p-toast');\n  let counter = 1;\n\n  customElements.whenDefined('p-toast').then(() => {\n    document.querySelector('button').addEventListener('click', () => {\n      toast.addMessage({ text: `Some message ${counter}`, state: 'success' });\n      counter++;\n    });\n  });\n<\/script>",angular:"import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ToastManager } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'page-toast-example',\n  template: `\n    <button type=\"button\" (click)=\"onButtonClick()\">Queue Toast</button>\n    <p-toast></p-toast>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastExampleComponent {\n  private counter = 1;\n\n  constructor(private toastManager: ToastManager) {}\n\n  onButtonClick() {\n    this.toastManager.addMessage({ text: `Some message ${this.counter}`, state: 'success' });\n    this.counter++;\n  }\n}",react:"import { useToastManager, PToast } from '@porsche-design-system/components-react';\nimport { useState } from 'react';\n\nexport const ToastExamplePage = (): JSX.Element => {\n  const { addMessage } = useToastManager();\n  const [counter, setCounter] = useState(1);\n\n  const onButtonClick = () => {\n    addMessage({ text: `Some message ${counter}`, state: 'success' });\n    setCounter((prev) => prev + 1);\n  };\n\n  return (\n    <>\n      <button type=\"button\" onClick={onButtonClick}>\n        Queue Toast\n      </button>\n      <PToast />\n    </>\n  );\n};"};return e}}}]);
//# sourceMappingURL=chunk-2d0c7b41.bbc375df.js.map