@import '../../../../../../packages/utilities/projects/utilities/scss';
@import '../../../styles/internal.variables';
@import '../../../styles/mixins';

// Standard approach to show/hide elements and stay fully accessible, see https://webaim.org/techniques/css/invisiblecontent/
@mixin p-switch-label-visible() {
  position: static;
  left: auto;
  top: auto;
  width: auto;
  height: auto;
  overflow: visible;
}

@mixin p-switch-label-hidden() {
  position: absolute;
  left: -99999px;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

:host {
  display: flex !important;
}

.label {
  display: flex;
  width: auto;
  justify-content: flex-start;

  &.stretch-on {
    width: 100%;
    justify-content: space-between;
  }

  @each $breakpoint in $breakpoints {
    @include p-media-query($breakpoint) {
      &.stretch-on-#{$breakpoint} {
        width: 100%;
        justify-content: space-between;
      }

      &.stretch-off-#{$breakpoint} {
        width: auto;
        justify-content: flex-start;
      }
    }
  }
}

.text {
  @include p-switch-label-visible;
  order: 1;
  padding-left: $p-spacing-8;
  padding-right: 0;
  color: $p-color-default;

  .theme-dark & {
    color: $p-color-theme-dark-default;
  }

  .label-align-left & {
    order: 0;
    padding-left: 0;
    padding-right: $p-spacing-8;
  }

  @each $breakpoint in $breakpoints {
    @include p-media-query($breakpoint) {
      .label-align-left-#{$breakpoint} & {
        order: 0;
        padding-left: 0;
        padding-right: $p-spacing-8;
      }

      .label-align-right-#{$breakpoint} & {
        order: 1;
        padding-left: $p-spacing-8;
        padding-right: 0;
      }
    }
  }

  .label-hidden & {
    @include p-switch-label-hidden;
  }

  @each $breakpoint in $breakpoints {
    @include p-media-query($breakpoint) {
      .label-visible-#{$breakpoint} & {
        @include p-switch-label-visible;
      }

      .label-hidden-#{$breakpoint} & {
        @include p-switch-label-hidden;
      }
    }
  }

  .disabled & {
    color: $p-color-state-disabled;

    @at-root .theme-dark#{&} {
      color: $p-color-theme-dark-state-disabled;
    }
  }
}

.button {
  position: relative;
  width: p-px-to-rem(48px);
  height: p-px-to-rem(24px);
  flex-shrink: 0;
  display: block;
  margin: 0;
  padding: 0;
  appearance: none;
  box-sizing: border-box;
  border: 1px solid $p-color-neutral-contrast-medium;
  border-radius: p-px-to-rem(12px);
  background-color: transparent;
  outline: none;
  cursor: pointer;
  transition:
    background-color $p-animation-hover-duration $p-animation-hover-bezier,
    border-color $p-animation-hover-duration $p-animation-hover-bezier;

  .theme-dark & {
    border-color: $p-color-theme-dark-neutral-contrast-medium;
  }

  .checked & {
    border-color: $p-color-notification-success;
    background-color: $p-color-notification-success;

    @at-root .theme-dark#{&} {
      border-color: $p-color-theme-dark-notification-success;
      background-color: $p-color-theme-dark-notification-success;
    }
  }

  .disabled & {
    border-color: $p-color-state-disabled;
    cursor: not-allowed;

    @at-root .theme-dark#{&} {
      border-color: $p-color-theme-dark-state-disabled;
    }
  }

  .disabled.checked & {
    background-color: $p-color-state-disabled;

    @at-root .theme-dark#{&} {
      background-color: $p-color-theme-dark-state-disabled;
    }
  }

  :not(.disabled) &:hover {
    border-color: $p-color-default;

    @at-root .theme-dark#{&} {
      border-color: $p-color-theme-dark-default;
    }
  }

  :not(.disabled).checked &:hover {
    border-color: darken($p-color-notification-success, 12%);
    background-color: darken($p-color-notification-success, 12%);

    @at-root .theme-dark#{&} {
      border-color: darken($p-color-theme-dark-notification-success, 12%);
      background-color: darken($p-color-theme-dark-notification-success, 12%);
    }
  }

  &:focus {
    box-shadow: 0 0 0 2px $p-color-background-default, 0 0 0 3px $p-color-neutral-contrast-medium;

    .theme-dark & {
      box-shadow: 0 0 0 2px $p-color-theme-dark-background-default, 0 0 0 3px $p-color-theme-dark-neutral-contrast-medium;
    }
  }

  .checked &:focus {
    box-shadow: 0 0 0 2px $p-color-background-default, 0 0 0 3px $p-color-notification-success;

    @at-root .theme-dark#{&} {
      box-shadow: 0 0 0 2px $p-color-theme-dark-background-default, 0 0 0 3px $p-color-theme-dark-notification-success;
    }
  }

  &:not(:focus-visible) {
    box-shadow: none !important;
  }
}

.toggle {
  position: absolute;
  top: p-px-to-rem(2px);
  left: p-px-to-rem(2px);
  width: p-px-to-rem(18px);
  height: p-px-to-rem(18px);
  display: block;
  border-radius: 50%;
  background-color: $p-color-neutral-contrast-medium;
  transform: translateX(0);
  transition:
    background-color $p-animation-hover-duration $p-animation-hover-bezier,
    transform $p-animation-hover-duration $p-animation-hover-bezier;

  .theme-dark & {
    background-color: $p-color-theme-dark-neutral-contrast-medium;
  }

  .checked & {
    transform: translateX(p-px-to-rem(24px));
    background-color: $p-color-background-default;
  }

  :not(.checked).disabled & {
    background-color: $p-color-state-disabled;

    @at-root .theme-dark#{&} {
      background-color: $p-color-theme-dark-state-disabled;
    }
  }

  :not(.disabled):not(.checked) .button:hover & {
    background-color: $p-color-default;

    @at-root .theme-dark#{&} {
      background-color: $p-color-theme-dark-default;
    }
  }
}

.spinner {
  position: absolute;
  top: p-px-to-rem(-3px);
  left: p-px-to-rem(-3px);
  width: p-px-to-rem(24px);
  height: p-px-to-rem(24px);
}
