@import '../../../../../../packages/utilities/projects/utilities/scss';
@import '../../../styles/internal.variables';
@import '../../../styles/mixins';

@mixin label-visible() {
  .label,
  + .subline {
    position: static;
    width: auto;
    top: auto;
    left: auto;
    height: 100%;
    overflow: visible;
  }
}

@mixin label-hidden() {
  .label,
  + .subline {
    position: absolute;
    left: -99999px;
    top: auto;
    width: 1px;
    height: 1px;
    overflow: hidden;
  }
}

:host {
  vertical-align: top;
  position: relative !important;
}

$root: '.root';

#{$root} {
  $bem-block: &;
  display: flex;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  appearance: none;
  border: none;
  text-decoration: none;
  text-align: left;
  background: transparent;
  cursor: pointer;
  color: $p-color-default;
  transition: color $p-animation-hover-duration-var $p-animation-hover-bezier, font-size 1ms linear; // used for transitionend event listener
  @include p-focus($p-color-state-focus, 1px, '::before');

  + * {
    color: $p-color-default;
  }

  &:not(:disabled):not(&--loading) {
    &:hover {
      color: $p-color-state-hover;
      + * {
        color: $p-color-state-hover;
      }
    }

    &:active {
      color: $p-color-state-active;
      + * {
        color: $p-color-state-active;
      }
    }
  }

  &:disabled,
  &--loading {
    cursor: not-allowed;
    color: $p-color-state-disabled;
    + * {
      color: $p-color-state-disabled;
    }
  }

  &--theme-dark {
    @include p-focus($p-color-theme-dark-state-focus, 1px, '::before');
    color: $p-color-theme-dark-default;

    + * {
      color: $p-color-theme-dark-default;
    }

    &:not(:disabled):not(&#{$bem-block}--loading) {
      &:hover {
        color: $p-color-theme-dark-state-hover;
        + * {
          color: $p-color-theme-dark-state-hover;
        }
      }

      &:active {
        color: $p-color-theme-dark-state-active;
        + * {
          color: $p-color-theme-dark-state-active;
        }
      }
    }

    &:disabled,
    &#{$bem-block}--loading {
      color: $p-color-theme-dark-state-disabled;
      + * {
        color: $p-color-theme-dark-state-disabled;
      }
    }
  }

  &--stretch-on {
    justify-content: space-between;
  }

  @each $breakpoint in $breakpoints {
    @include p-media-query($breakpoint) {
      &--stretch-on-#{$breakpoint} {
        justify-content: space-between;
      }

      &--stretch-off-#{$breakpoint} {
        justify-content: flex-start;
      }
    }
  }

  &--size-x-small {
    @include adjust-to-font-size($p-font-size-x-small);
  }
  &--size-small {
    @include adjust-to-font-size($p-font-size-small);
  }
  &--size-medium {
    @include adjust-to-font-size($p-font-size-medium);
  }
  &--size-large {
    @include adjust-to-font-size($p-font-size-large);
  }
  &--size-x-large {
    @include adjust-to-font-size($p-font-size-x-large);
  }
  &--size-inherit {
    @include adjust-to-font-size('inherit');
  }

  &--with-label {
    @include label-visible;
  }
  &--without-label {
    @include label-hidden;
  }

  @each $breakpoint in $breakpoints {
    @include p-media-query($breakpoint) {
      &--size-x-small-#{$breakpoint} {
        @include adjust-to-font-size($p-font-size-x-small);
      }

      &--size-small-#{$breakpoint} {
        @include adjust-to-font-size($p-font-size-small);
      }
      &--size-medium-#{$breakpoint} {
        @include adjust-to-font-size($p-font-size-medium);
      }
      &--size-large-#{$breakpoint} {
        @include adjust-to-font-size($p-font-size-large);
      }
      &--size-x-large-#{$breakpoint} {
        @include adjust-to-font-size($p-font-size-x-large);
      }
      &--size-inherit-#{$breakpoint} {
        @include adjust-to-font-size('inherit');
      }
      &--with-label-#{$breakpoint} {
        @include label-visible;
      }
      &--without-label-#{$breakpoint} {
        @include label-hidden;
      }
    }
  }
}

.icon {
  flex-shrink: 0;
  width: 1.5em;
  height: 1.5em;

  #{$root}--label-align-left & {
    order: 1;
  }

  @each $breakpoint in $breakpoints {
    @include p-media-query($breakpoint) {
      #{$root}--label-align-left-#{$breakpoint} & {
        order: 1;
      }

      #{$root}--label-align-right-#{$breakpoint} & {
        order: 0;
      }
    }
  }
}

//todo: shorthand for margin
.label {
  display: block;
  box-sizing: border-box;
  border: 0;

  #{$root}--with-icon & {
    padding-right: 0.125em;
    margin-left: p-px-to-rem(4px);
  }

  #{$root}--label-align-left & {
    padding: 0;
    margin-left: 0;
    margin-right: p-px-to-rem(4px);
  }

  @each $breakpoint in $breakpoints {
    @include p-media-query($breakpoint) {
      #{$root}--label-align-left-#{$breakpoint} & {
        padding: 0;
        margin-left: 0;
        margin-right: p-px-to-rem(4px);
      }

      #{$root}--label-align-right-#{$breakpoint} & {
        padding-right: 0.125em;
        margin-right: 0;
        margin-left: p-px-to-rem(4px);
      }
    }
  }
}

.subline {
  display: flex;
  transition: color $p-animation-hover-duration-var $p-animation-hover-bezier;
  margin-top: p-px-to-rem(4px);
  padding-right: 0.125em;

  #{$root}--with-icon + & {
    margin-left: p-px-to-rem(4px);
  }

  #{$root}--with-icon + &::before {
    // We need a margin-left according to the labels font-size. The size of before gets calculated in the p-link-pure-size mixin
    content: '';
  }
}
