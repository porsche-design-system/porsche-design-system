@import '../../../../../../packages/utilities/projects/utilities/scss';
@import '../../../styles/internal.variables';

:host {
  position: relative !important;
  display: block;
}

::slotted(a),
::slotted(button) {
  font-family: $p-font-family !important;
  font-weight: inherit !important;
  font-size: inherit !important;
  line-height: inherit !important;
  margin: 0 !important;
  padding: 0 !important;
  box-sizing: border-box !important;
  appearance: none !important;
  outline: transparent solid 1px !important;
  outline-offset: 1px !important;
  text-decoration: none !important;
  text-align: left !important;
  border: 0 !important;
  background: transparent !important;
  display: inline-block !important;
  vertical-align: top !important;
  color: $p-color-default !important;
  cursor: pointer !important;
  transition: color $p-animation-hover-duration-var $p-animation-hover-bezier !important;
}

::slotted(a:hover),
::slotted(button:hover) {
  color: $p-color-state-hover !important;
}

::slotted(a:active),
::slotted(a[aria-selected='true']),
::slotted(button:active),
::slotted(button[aria-selected='true']) {
  color: $p-color-state-active !important;
}

::slotted(a:focus),
::slotted(button:focus) {
  outline-color: $p-color-state-focus !important;
}

::slotted(a:focus:not(:focus-visible)),
::slotted(button:focus:not(:focus-visible)) {
  outline-color: transparent !important;
}

::slotted(a:not(:last-child)),
::slotted(button:not(:last-child)) {
  margin-right: 1em !important;
}

.root {
  @include p-generate-type-scale($p-font-size-small);
  font-weight: $p-font-weight-regular;
  position: relative;
  margin: 0 -4px;

  &--theme-dark {
    .status-bar {
      background-color: $p-color-theme-dark-state-active;
    }

    .gradient--prev {
      background: -webkit-linear-gradient(
        rgba($p-color-theme-dark-background-default, 1) 50%,
        rgba($p-color-theme-dark-background-default, 0) 100%
      );
      background: linear-gradient(
        90deg,
        rgba($p-color-theme-dark-background-default, 1) 50%,
        rgba($p-color-theme-dark-background-default, 0) 100%
      );

      &.gradient--color-scheme-surface {
        background: -webkit-linear-gradient(
          rgba($p-color-theme-dark-background-surface, 1) 50%,
          rgba($p-color-theme-dark-background-surface, 0) 100%
        );
        background: linear-gradient(
          90deg,
          rgba($p-color-theme-dark-background-surface, 1) 50%,
          rgba($p-color-theme-dark-background-surface, 0) 100%
        );
      }
    }

    .gradient--next {
      background: -webkit-linear-gradient(
        rgba($p-color-theme-dark-background-default, 0) 0%,
        rgba($p-color-theme-dark-background-default, 1) 50%
      );
      background: linear-gradient(
        90deg,
        rgba($p-color-theme-dark-background-default, 0) 0%,
        rgba($p-color-theme-dark-background-default, 1) 50%
      );

      &.gradient--color-scheme-surface {
        background: -webkit-linear-gradient(
          rgba($p-color-theme-dark-background-surface, 0) 0%,
          rgba($p-color-theme-dark-background-surface, 1) 50%
        );
        background: linear-gradient(
          90deg,
          rgba($p-color-theme-dark-background-surface, 0) 0%,
          rgba($p-color-theme-dark-background-surface, 1) 50%
        );
      }
    }

    ::slotted(a),
    ::slotted(button) {
      color: $p-color-theme-dark-default !important;
    }

    ::slotted(a:hover),
    ::slotted(button:hover) {
      color: $p-color-theme-dark-state-hover !important;
    }

    ::slotted(a:active),
    ::slotted(a[aria-selected='true']),
    ::slotted(button:active),
    ::slotted(button[aria-selected='true']) {
      color: $p-color-theme-dark-state-active !important;
    }

    ::slotted(a:focus),
    ::slotted(button:focus) {
      outline-color: $p-color-theme-dark-state-focus !important;
    }

    ::slotted(a:focus:not(:focus-visible)),
    ::slotted(button:focus:not(:focus-visible)) {
      outline-color: transparent !important;
    }
  }

  &--theme-light-electric {
    .status-bar {
      background-color: $p-color-theme-light-electric-state-active;
    }

    .gradient--prev {
      background: -webkit-linear-gradient(
        rgba($p-color-theme-light-electric-background-default, 1) 50%,
        rgba($p-color-theme-light-electric-background-default, 0) 100%
      );
      background: linear-gradient(
        90deg,
        rgba($p-color-theme-light-electric-background-default, 1) 50%,
        rgba($p-color-theme-light-electric-background-default, 0) 100%
      );

      &.gradient--color-scheme-surface {
        background: -webkit-linear-gradient(
          rgba($p-color-theme-light-electric-background-surface, 1) 50%,
          rgba($p-color-theme-light-electric-background-surface, 0) 100%
        );
        background: linear-gradient(
          90deg,
          rgba($p-color-theme-light-electric-background-surface, 1) 50%,
          rgba($p-color-theme-light-electric-background-surface, 0) 100%
        );
      }
    }

    .gradient--next {
      background: -webkit-linear-gradient(
        rgba($p-color-theme-light-electric-background-default, 0) 0%,
        rgba($p-color-theme-light-electric-background-default, 1) 50%
      );
      background: linear-gradient(
        90deg,
        rgba($p-color-theme-light-electric-background-default, 0) 0%,
        rgba($p-color-theme-light-electric-background-default, 1) 50%
      );

      &.gradient--color-scheme-surface {
        background: -webkit-linear-gradient(
          rgba($p-color-theme-light-electric-background-surface, 0) 0%,
          rgba($p-color-theme-light-electric-background-surface, 1) 50%
        );
        background: linear-gradient(
          90deg,
          rgba($p-color-theme-light-electric-background-surface, 0) 0%,
          rgba($p-color-theme-light-electric-background-surface, 1) 50%
        );
      }
    }

    ::slotted(a),
    ::slotted(button) {
      color: $p-color-theme-light-electric-default !important;
    }

    ::slotted(a:hover),
    ::slotted(button:hover) {
      color: $p-color-theme-light-electric-state-hover !important;
    }

    ::slotted(a:active),
    ::slotted(a[aria-selected='true']),
    ::slotted(button:active),
    ::slotted(button[aria-selected='true']) {
      color: $p-color-theme-light-electric-state-active !important;
    }

    ::slotted(a:focus),
    ::slotted(button:focus) {
      outline-color: $p-color-theme-light-electric-state-focus !important;
    }

    ::slotted(a:focus:not(:focus-visible)),
    ::slotted(button:focus:not(:focus-visible)) {
      outline-color: transparent !important;
    }
  }

  &--weight-semibold {
    font-weight: $p-font-weight-semibold;

    .status-bar {
      height: 0.125em;
    }
  }

  &--size-small {
    @include p-generate-type-scale($p-font-size-small);
  }

  &--size-medium {
    @include p-generate-type-scale($p-font-size-medium);
  }

  @include p-media-query('xs') {
    &--size-small-xs {
      @include p-generate-type-scale($p-font-size-small);
    }

    &--size-medium-xs {
      @include p-generate-type-scale($p-font-size-medium);
    }
  }

  @include p-media-query('s') {
    &--size-small-s {
      @include p-generate-type-scale($p-font-size-small);
    }

    &--size-medium-s {
      @include p-generate-type-scale($p-font-size-medium);
    }
  }

  @include p-media-query('m') {
    &--size-small-m {
      @include p-generate-type-scale($p-font-size-small);
    }

    &--size-medium-m {
      @include p-generate-type-scale($p-font-size-medium);
    }
  }

  @include p-media-query('l') {
    &--size-small-l {
      @include p-generate-type-scale($p-font-size-small);
    }

    &--size-medium-l {
      @include p-generate-type-scale($p-font-size-medium);
    }
  }

  @include p-media-query('xl') {
    &--size-small-xl {
      @include p-generate-type-scale($p-font-size-small);
    }

    &--size-medium-xl {
      @include p-generate-type-scale($p-font-size-medium);
    }
  }
}
.scroll-area {
  position: relative;
  padding: 4px 4px 0;
  overflow-y: hidden;
  overflow-x: scroll;
  white-space: nowrap;
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */

  &::-webkit-scrollbar {
    display: none;
  }
}

/* Extra wrapper needed to compensate different offset parent calculation depending of browser.
  Needed for position of status bar. */
.scroll-wrapper {
  display: inline-block;
  position: relative;
  padding: 0 0 0.5em;
  min-width: 100%;

  &__trigger {
    display: block;
    position: absolute;
    top: 0;
    height: 100%;
    width: 1px;
    visibility: hidden;

    &:first-of-type {
      left: 0;
    }

    &:last-of-type {
      right: 0;
    }
  }
}

.status-bar {
  position: absolute;
  left: 0;
  bottom: 0;
  width: 0;
  height: 0.09375em;
  display: block;
  background-color: $p-color-state-active;

  &--enable-transition {
    will-change: width;
    transition: transform $p-tabs-transition-duration, width $p-tabs-transition-duration;
  }
}

.action {
  position: absolute;
  top: 4px;
  display: flex;
  transform: translate3d(0, 0, 0);

  &--prev {
    left: 0;
    justify-content: flex-start;
  }

  &--next {
    right: 0;
    justify-content: flex-end;
  }

  &--hidden {
    visibility: hidden; // to make offsetWidth work
  }
}

.gradient {
  $bem-block: &;
  position: absolute;
  top: -4px;
  bottom: -0.5em;
  width: 2em;
  pointer-events: none;

  &--prev {
    background: -webkit-linear-gradient(
      rgba($p-color-background-default, 1) 50%,
      rgba($p-color-background-default, 0) 100%
    );
    background: linear-gradient(
      90deg,
      rgba($p-color-background-default, 1) 50%,
      rgba($p-color-background-default, 0) 100%
    );

    &#{$bem-block}--color-scheme-surface {
      background: -webkit-linear-gradient(
        rgba($p-color-background-surface, 1) 50%,
        rgba($p-color-background-surface, 0) 100%
      );
      background: linear-gradient(
        90deg,
        rgba($p-color-background-surface, 1) 50%,
        rgba($p-color-background-surface, 0) 100%
      );
    }
  }

  &--next {
    background: -webkit-linear-gradient(
      rgba($p-color-background-default, 0) 0%,
      rgba($p-color-background-default, 1) 50%
    );
    background: linear-gradient(
      90deg,
      rgba($p-color-background-default, 0) 0%,
      rgba($p-color-background-default, 1) 50%
    );

    &#{$bem-block}--color-scheme-surface {
      background: -webkit-linear-gradient(
        rgba($p-color-background-surface, 0) 0%,
        rgba($p-color-background-surface, 1) 50%
      );
      background: linear-gradient(
        90deg,
        rgba($p-color-background-surface, 0) 0%,
        rgba($p-color-background-surface, 1) 50%
      );
    }
  }
}
