/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface PButtonRegular {
    /**
    * Some optional disabled state
    */
    'disabled'?: boolean;
    /**
    * The icon of the button.
    */
    'icon'?: string;
    /**
    * Button on dark background
    */
    'inverted'?: boolean;
    /**
    * Label
    */
    'label': string;
    /**
    * Disables the button and shows a loading indicator. No onClicked event will be triggered.
    */
    'loading'?: boolean;
    /**
    * React test property
    */
    'ref'?: any;
    /**
    * Specifies the HTML Type of the button. If undefined, nothing is set.
    */
    'role'?: "button" | "submit" | "reset" | undefined;
    /**
    * A button can be displayed with a smaller size
    */
    'small'?: boolean;
    /**
    * HTML tag
    */
    'tag'?: "button" | "a" | string;
    /**
    * The display type of the button.
    */
    'type'?: "highlight" | "ghost";
  }
  interface PIcon {
    /**
    * Specifies the label to use for accessibility. Defaults to the icon name.
    */
    'ariaLabel'?: string;
    /**
    * The color to use for the background of the item.
    */
    'color'?: string;
    /**
    * Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.
    */
    'flipRtl'?: boolean;
    /**
    * Specifies which icon file to use.
    */
    'icon'?: string;
    /**
    * Specifies which icon to use on `ios` mode.
    */
    'ios'?: string;
    /**
    * If enabled, ion-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
    */
    'lazy'?: boolean;
    /**
    * Specifies which icon to use on `md` mode.
    */
    'md'?: string;
    /**
    * The mode determines which platform styles to use. Possible values are: `"ios"` or `"md"`.
    */
    'mode'?: 'ios' | 'md';
    /**
    * Specifies the exact http(s) `path` to an SVG file to use.
    */
    'path'?: string;
    /**
    * The size of the icon.
    */
    'size'?: "small" | "medium" | "large";
  }
}

declare namespace LocalJSX {
  interface PButtonRegular extends JSXBase.HTMLAttributes {
    /**
    * Some optional disabled state
    */
    'disabled'?: boolean;
    /**
    * The icon of the button.
    */
    'icon'?: string;
    /**
    * Button on dark background
    */
    'inverted'?: boolean;
    /**
    * Label
    */
    'label'?: string;
    /**
    * Disables the button and shows a loading indicator. No onClicked event will be triggered.
    */
    'loading'?: boolean;
    /**
    * Called after a user's click.
    */
    'onOnClicked'?: (event: CustomEvent<any>) => void;
    /**
    * React test property
    */
    'ref'?: any;
    /**
    * Specifies the HTML Type of the button. If undefined, nothing is set.
    */
    'role'?: "button" | "submit" | "reset" | undefined;
    /**
    * A button can be displayed with a smaller size
    */
    'small'?: boolean;
    /**
    * HTML tag
    */
    'tag'?: "button" | "a" | string;
    /**
    * The display type of the button.
    */
    'type'?: "highlight" | "ghost";
  }
  interface PIcon extends JSXBase.HTMLAttributes {
    /**
    * Specifies the label to use for accessibility. Defaults to the icon name.
    */
    'ariaLabel'?: string;
    /**
    * The color to use for the background of the item.
    */
    'color'?: string;
    /**
    * Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.
    */
    'flipRtl'?: boolean;
    /**
    * Specifies which icon file to use.
    */
    'icon'?: string;
    /**
    * Specifies which icon to use on `ios` mode.
    */
    'ios'?: string;
    /**
    * If enabled, ion-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
    */
    'lazy'?: boolean;
    /**
    * Specifies which icon to use on `md` mode.
    */
    'md'?: string;
    /**
    * The mode determines which platform styles to use. Possible values are: `"ios"` or `"md"`.
    */
    'mode'?: 'ios' | 'md';
    /**
    * Specifies the exact http(s) `path` to an SVG file to use.
    */
    'path'?: string;
    /**
    * The size of the icon.
    */
    'size'?: "small" | "medium" | "large";
  }

  interface IntrinsicElements {
    'p-button-regular': PButtonRegular;
    'p-icon': PIcon;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


declare global {



  interface HTMLPButtonRegularElement extends Components.PButtonRegular, HTMLStencilElement {}
  var HTMLPButtonRegularElement: {
    prototype: HTMLPButtonRegularElement;
    new (): HTMLPButtonRegularElement;
  };

  interface HTMLPIconElement extends Components.PIcon, HTMLStencilElement {}
  var HTMLPIconElement: {
    prototype: HTMLPIconElement;
    new (): HTMLPIconElement;
  };

  interface HTMLElementTagNameMap {
    'p-button-regular': HTMLPButtonRegularElement;
    'p-icon': HTMLPIconElement;
  }

  interface ElementTagNameMap extends HTMLElementTagNameMap {}
}

