// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getReactProjectAndOpenOptions() should have correct button markup and boilerplate for stackBlitz react project and options 1`] = `
Object {
  "openOptions": Object {
    "openFile": "App.tsx",
  },
  "project": Object {
    "dependencies": Object {
      "@porsche-design-system/components-react": "2.14.0-beta.0",
      "@types/react": "^18.0.15",
      "@types/react-dom": "^18.0.6",
    },
    "description": "Some description",
    "files": Object {
      "App.tsx": "import * as React from 'react';
import { PButton } from '@porsche-design-system/components-react'

export default function App() {
  return (
    <div>
      <PButton variant=\\"primary\\">Some label</PButton>
<PButton variant=\\"primary\\" disabled>Some label</PButton>
<PButton variant=\\"primary\\" loading>Some label</PButton>

<PButton variant=\\"primary\\" hideLabel={true}>Some label</PButton>
<PButton variant=\\"primary\\" hideLabel={true} disabled>Some label</PButton>
<PButton variant=\\"primary\\" hideLabel={true} loading>Some label</PButton>
    </div>
  );
}",
      "index.html": <div id="root"></div>,
      "index.tsx": "import * as React from 'react';
import { StrictMode } from \\"react\\";
import * as ReactDOMClient from \\"react-dom/client\\";
import App from \\"./App\\";
import { PorscheDesignSystemProvider } from \\"@porsche-design-system/components-react\\";
import './style.css';

const rootElement = document.getElementById(\\"root\\");
const root = ReactDOMClient.createRoot(rootElement);

root.render(
  <StrictMode>
    <PorscheDesignSystemProvider>
      <App />
    </PorscheDesignSystemProvider>
  </StrictMode>
);",
      "style.css": "body {}",
    },
    "template": "create-react-app",
    "title": "Some title",
  },
}
`;

exports[`getReactProjectAndOpenOptions() should have correct table markup and boilerplate for stackBlitz react project and options 1`] = `
Object {
  "openOptions": Object {
    "openFile": "App.tsx",
  },
  "project": Object {
    "dependencies": Object {
      "@porsche-design-system/components-react": "2.14.0-beta.0",
      "@types/react": "^18.0.15",
      "@types/react-dom": "^18.0.6",
    },
    "description": "Some description",
    "files": Object {
      "App.tsx": "import React from 'react';
import {
  PButtonPure,
  PFlex,
  PFlexItem,
  PHeadline,
  PTable,
  PTableBody,
  PTableCell,
  PTableHead,
  PTableHeadCell,
  PTableHeadRow,
  PTableRow,
  PText,
} from '@porsche-design-system/components-react';
import type { SortingChangeEvent } from '@porsche-design-system/components-react';
import { useCallback, useState } from 'react';

            const headAdvanced = [{\\"name\\":\\"Model\\",\\"id\\":\\"model\\"},{\\"name\\":\\"Interest\\",\\"id\\":\\"interest\\",\\"active\\":true,\\"direction\\":\\"asc\\"},{\\"name\\":\\"VIN\\",\\"id\\":\\"vin\\",\\"active\\":false,\\"direction\\":\\"asc\\"},{\\"name\\":\\"Purchase Intention\\",\\"id\\":\\"purchaseIntention\\",\\"active\\":false,\\"direction\\":\\"asc\\"},{\\"name\\":\\"Status\\",\\"id\\":\\"status\\",\\"active\\":false,\\"direction\\":\\"asc\\"},{\\"name\\":\\"Comment\\",\\"id\\":\\"comment\\"},{\\"name\\":\\"Lead ID\\",\\"id\\":\\"leadId\\",\\"active\\":false,\\"direction\\":\\"asc\\"},{\\"name\\":\\"Action\\",\\"id\\":\\"action\\",\\"hideLabel\\":true}];
const dataAdvanced = [{\\"imageUrl\\":\\"https://nav.porsche.com/00BC524/series-assets/1366/718@2x.jpg\\",\\"model\\":\\"718 Cayman\\",\\"date\\":\\"23.06.2021\\",\\"interest\\":\\"New Car\\",\\"vin\\":\\"1FM5K7F84FGB16304\\",\\"purchaseIntention\\":\\"08/2021\\",\\"status\\":\\"Won\\",\\"comment\\":\\"-\\",\\"leadId\\":\\"0000824402\\"},{\\"imageUrl\\":\\"https://nav.porsche.com/00BC524/series-assets/1366/panamera@2x.jpg\\",\\"model\\":\\"Panamera 4S\\",\\"date\\":\\"19.06.2021\\",\\"interest\\":\\"New Car\\",\\"vin\\":\\"2GCEC13T141374801\\",\\"purchaseIntention\\":\\"11/2021\\",\\"status\\":\\"Lost\\",\\"comment\\":\\"Some multiline text and a column with a min width.\\",\\"leadId\\":\\"0000824409\\"},{\\"imageUrl\\":\\"https://nav.porsche.com/00BC524/series-assets/1366/911@2x.jpg\\",\\"model\\":\\"911 Carrera S\\",\\"date\\":\\"19.05.2021\\",\\"interest\\":\\"Used Car\\",\\"vin\\":\\"5GAKVCKD8EJ335750\\",\\"purchaseIntention\\":\\"09/2021\\",\\"status\\":\\"Won\\",\\"comment\\":\\"-\\",\\"leadId\\":\\"0000824408\\"},{\\"imageUrl\\":\\"https://nav.porsche.com/00BC524/series-assets/1366/macan@2x.jpg\\",\\"model\\":\\"Macan Turbo\\",\\"date\\":\\"10.05.2021\\",\\"interest\\":\\"Used Car\\",\\"vin\\":\\"1FMPU17L83LC09302\\",\\"purchaseIntention\\":\\"07/2021\\",\\"status\\":\\"Lost\\",\\"comment\\":\\"-\\",\\"leadId\\":\\"0000824407\\"},{\\"imageUrl\\":\\"https://nav.porsche.com/00BC524/series-assets/768/taycan@2x.jpg\\",\\"model\\":\\"Taycan\\",\\"date\\":\\"03.05.2021\\",\\"interest\\":\\"New Car\\",\\"vin\\":\\"JN1BY1AR3BM375187\\",\\"purchaseIntention\\":\\"05/2021\\",\\"status\\":\\"Won\\",\\"comment\\":\\"-\\",\\"leadId\\":\\"0000824406\\"}];


export const TableExampleAdvanced = (): JSX.Element => {
  const [head, setHead] = useState(headAdvanced);
  const [data, setData] = useState(dataAdvanced);

  const onSortingChange = useCallback((e: CustomEvent<SortingChangeEvent>) => {
    const { id, direction } = e.detail as SortingChangeEvent & { id: keyof DataAdvanced };
    setHead((prev) => prev.map((item) => ({ ...item, active: false, ...(item.id === id && e.detail) })));
    setData((prev) =>
      [...prev].sort((a, b) => {
        return direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id]);
      })
    );
  }, []);

  return (
    <PTable onSortingChange={onSortingChange}>
      <PHeadline slot=\\"caption\\" variant=\\"headline-3\\">
        Some visual caption
      </PHeadline>
      <PTableHead>
        <PTableHeadRow>
          {head.map((item, i) => (
            <PTableHeadCell key={i} sort={item} hideLabel={item.hideLabel}>
              {item.name}
            </PTableHeadCell>
          ))}
        </PTableHeadRow>
      </PTableHead>
      <PTableBody>
        {data.map((item, i) => (
          <PTableRow key={i}>
            <PTableCell>
              <PFlex>
                <PFlexItem>
                  <img src={item.imageUrl} width={80} height={45} style={{ marginRight: '.5rem' }} alt={} />
                </PFlexItem>
                <PFlexItem>
                  <PText weight=\\"semibold\\">{item.model}</PText>
                  <PText size=\\"x-small\\">{item.date}</PText>
                </PFlexItem>
              </PFlex>
            </PTableCell>
            <PTableCell>{item.interest}</PTableCell>
            <PTableCell>
              <a href=\\"https://porsche.com\\">{item.vin}</a>
            </PTableCell>
            <PTableCell>{item.purchaseIntention}</PTableCell>
            <PTableCell>{item.status}</PTableCell>
            <PTableCell multiline={true} style={{ minWidth: '10rem' }}>
              {item.comment}
            </PTableCell>
            <PTableCell>{item.leadId}</PTableCell>
            <PTableCell>
              <PButtonPure icon=\\"edit\\" style={{ padding: '.5rem' }}>
                Edit
              </PButtonPure>
              <PButtonPure icon=\\"delete\\" style={{ padding: '.5rem' }}>
                Delete
              </PButtonPure>
            </PTableCell>
          </PTableRow>
        ))}
      </PTableBody>
    </PTable>
  );
};",
      "index.html": <div id="root"></div>,
      "index.tsx": "import * as React from 'react';
import { StrictMode } from \\"react\\";
import * as ReactDOMClient from \\"react-dom/client\\";
import { TableExampleAdvanced } from \\"./App\\";
import { PorscheDesignSystemProvider } from \\"@porsche-design-system/components-react\\";
import './style.css';

const rootElement = document.getElementById(\\"root\\");
const root = ReactDOMClient.createRoot(rootElement);

root.render(
  <StrictMode>
    <PorscheDesignSystemProvider>
      <TableExampleAdvanced />
    </PorscheDesignSystemProvider>
  </StrictMode>
);",
      "style.css": "body {}",
    },
    "template": "create-react-app",
    "title": "Some title",
  },
}
`;

exports[`getReactProjectAndOpenOptions() should have correct textField markup with iMask and boilerplate for stackBlitz react project and options 1`] = `
Object {
  "openOptions": Object {
    "openFile": "App.tsx",
  },
  "project": Object {
    "dependencies": Object {
      "@porsche-design-system/components-react": "2.14.0-beta.0",
      "@types/react": "^18.0.15",
      "@types/react-dom": "^18.0.6",
      "react-imask": "^6.4.2",
    },
    "description": "Some description",
    "files": Object {
      "App.tsx": "import React from 'react';
import { PTextFieldWrapper } from '@porsche-design-system/components-react';
import type { LegacyRef } from 'react';
import { useIMask, IMask } from 'react-imask';

export const TextFieldWrapperExample = (): JSX.Element => {
  const isDeLocale = Intl.NumberFormat().resolvedOptions().locale.startsWith('de');
  const dateFormat = isDeLocale ? 'dd.mm.yyyy' : 'mm/dd/yyyy';
  const dateRange = isDeLocale ? '01.01.1900, 01.01.2100' : '01/01/1900, 01/01/2100';
  const description = \`'\${dateFormat}' in range [\${dateRange}]\`;
  const opts = {
    lazy: false,
    mask: dateFormat,
    blocks: {
      dd: {
        mask: IMask.MaskedRange,
        from: 1,
        to: 31,
        placeholderChar: 'd',
      },
      mm: {
        mask: IMask.MaskedRange,
        from: 1,
        to: 12,
        placeholderChar: 'm',
      },
      yyyy: {
        mask: IMask.MaskedRange,
        from: 1900,
        to: 2100,
        placeholderChar: 'y',
      },
    },
  };
  const { ref } = useIMask(opts);

  return (
    <PTextFieldWrapper label=\\"Some label\\" description={description}>
      <input ref={ref as LegacyRef<HTMLInputElement />} type=\\"text\\" />
    </PTextFieldWrapper>
  );
};",
      "index.html": <div id="root"></div>,
      "index.tsx": "import * as React from 'react';
import { StrictMode } from \\"react\\";
import * as ReactDOMClient from \\"react-dom/client\\";
import { TextFieldWrapperExample } from \\"./App\\";
import { PorscheDesignSystemProvider } from \\"@porsche-design-system/components-react\\";
import './style.css';

const rootElement = document.getElementById(\\"root\\");
const root = ReactDOMClient.createRoot(rootElement);

root.render(
  <StrictMode>
    <PorscheDesignSystemProvider>
      <TextFieldWrapperExample />
    </PorscheDesignSystemProvider>
  </StrictMode>
);",
      "style.css": "body {}",
    },
    "template": "create-react-app",
    "title": "Some title",
  },
}
`;
