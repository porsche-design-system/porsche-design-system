import type { StoryState } from '@/models/story';
import { generateAngularMarkup, getAngularCode } from '@/utils/generator/generateAngularMarkup';
import { generateReactMarkup, getReactCode } from '@/utils/generator/generateReactMarkup';
import { generateVanillaJsMarkup, getVanillaJsCode } from '@/utils/generator/generateVanillaJsMarkup';
import { generateVueMarkup, getVueCode } from '@/utils/generator/generateVueMarkup';
import type { ElementConfig, HTMLTagOrComponent } from '@/utils/generator/generator';
import type { FrameworkMarkup } from '@porsche-design-system/shared';

/**
 * Generates markup source code for all supported frameworks (vanilla JS, React, Angular, Vue)
 * based on a given generated ElementConfig and story state.
 *
 * @param {Array<string | ElementConfig<HTMLTagOrComponent> | undefined>} config
 *   An array of element configurations used to build markup. Generated by calling a story generator function.
 * @param {StoryState<HTMLTagOrComponent> | undefined} storyState
 *   The current state of the story (E.g. configured props, slots...).
 *
 * @returns {FrameworkMarkup} An object containing the generated source code for each framework.
 */
export const createFrameworkMarkup = (
  config: (string | ElementConfig<HTMLTagOrComponent> | undefined)[],
  storyState: StoryState<HTMLTagOrComponent> | undefined
): FrameworkMarkup => {
  return {
    'vanilla-js': getVanillaJsCode(generateVanillaJsMarkup(config)),
    react: getReactCode(generateReactMarkup(config, storyState ?? {})),
    angular: getAngularCode(generateAngularMarkup(config, storyState ?? {})),
    vue: getVueCode(generateVueMarkup(config, storyState ?? {})),
  };
};
