{
  "About": {
    "Introduction": "# Introduction\n## About the Porsche Design System\nThe Porsche Design System unites digital Porsche products around a shared design system, enabling everyone to speak the same language, work with the same tools and use pre-built resources to efficiently create outstanding digital products: consistent, brand-appropriate and high-quality.\n\n## Benefits for business, design and development\n\n**Ship faster and focus on value.**  \nStop wasting time on repetitive work and recreating things that already exist. Use the components and working methods to enable faster releases and quick iterations. Focus on valuable results and solving important problems.\n\n**Improve user experience.**  \nReusing the pre-built design elements ensures a consistent look and feel across different products, platforms and disciplines. Along with the products that match the marketing, design patterns improve familiarity, brand awareness and overall experience.  \nSince we load the Web Components from CDN, the cache can be shared between all applications. This leads to faster loading times and more consistent UX.\n\n**Maintain quality in the long term.**  \nUsing our centrally built and continuously maintained design system with standardised components and unified toolings leads to high-quality results. Everything meets the latest technical requirements and standards for accessibility, performance and usability.\n\n**Leverage knowledge and clarity.**  \nWith everyone having access to the system and using the same language, it is much easier to collaborate and share knowledge with a clear understanding. Onboarding new members becomes much easier and faster.\n\n## Principles of success for the Porsche Design System\nThe Porsche Design System encourages trust rather than policing by empowering self-responsible teamwork. To take full advantage of the benefits, we apply the following principles:\n\n* **Use the contents as a foundation** without modification to create a base for building individual designs.  \n* **Collaborate** between design and development, just as we do.\n* **Update continuously** to avoid increasing update deficits.\n* **Join the community** through our channels and rituals.\n* **Participate in our evolution** by contributing and giving feedback."
  },
  "Start Designing": {
    "Introduction": "# Introduction\n## Start Designing\n\nThe Porsche Design System enables designers to create outstanding digital designs by using the pre-built libraries, styles and templates - fast and high-quality. If you are working for a digital product of Porsche we are happy to invite you to our UX onboarding process and tell you more about our culture of designing great digital experiences and give you access to all of our tools, methods and communication channels: \n\n<p-link target=\"_blank\" variant=\"secondary\" href=\"https://ux.porsche.com/\">Sign Up for the Onboarding</p-link>\n\n## 1. Tooling\nTo improve output efficiency and reduce maintenance costs, at Porsche we decided to set the tools [Sketch](https://www.sketch.com/) and [Abstract](https://www.goabstract.com/) as standard for designing. Please install the latest [Abstract desktop app](https://app.goabstract.com/). \n\nYou can find a [detailed guideline on how to use Abstract here](start-designing/design-workflow)\n\n## 2. Get inspired \nAfter you received your Abstract invitation you can get a smooth and easy onboarding experience. You are welcome to have a look into other digital Porsche projects within our [Porsche Abstract Organisation](https://app.abstract.com/organizations/bc37bb03-3469-4b15-99a2-60dbec187bce/projects) and use them as a starting point.\n\n## 3. Layout setup\nThere's no need to design from scratch anymore! Instead, you can use our pre-built Sketch layout templates. They contain artboards in all relevant responsive screen sizes enriched by the right layout and grid presets (which can be turned visible via: View → Canvas → Show Layout).  \n[Download Sketch Layout Template](https://designsystem.porsche.com/sketch/porsche-design-system-layout-template.sketch)\n\n## 4. Sketch libraries and resources\nThe components of the Porsche Design System are provided in two Sketch libraries that can be easily linked with Sketch by clicking on the following RSS library links. Once linked, Sketch will automatically check for updates. \n\n### Basic Library \nThe basic library contains the design fundamentals such as typography, colours and icons.  \n[Download Porsche Design System Basic](sketch://add-library?url=https%3A%2F%2Fdesignsystem.porsche.com%2Fporsche-design-system-basic.sketch.xml) \n\n### Web Library\nThe web library provides components like buttons, form elements and many more that can be used within web applications.  \n[Download Porsche Design System Web](sketch://add-library?url=https%3A%2F%2Fdesignsystem.porsche.com%2Fporsche-design-system-web.sketch.xml)\n\nPlease be aware of the used library version (Sketch: Preferences → Libraries) and coordinate with your developer counterpart to be aligned on the version you're using.\n\n### Porsche Next font\nIn order to design Porsche web applications and to use the Porsche Design System libraries properly, you have to download and install the [Porsche Next font](https://cdn.ui.porsche.com/porsche-design-system/font/v2/Porsche_Next_WebOTF_Lat-Gr-Cyr.zip). ",
    "Design Workflow": "# Design Workflow\n\n## General information \nWe encourage an open and clear design workflow overall digital Porsche products with shared tools and workflows. Using the Abstract tool enables automated file management and version control - without the risk of losing data. The overall accessibility of files also brings different roles and teams closer together and enables a fast collaboration.\n\n[Read more about Abstract](https://www.goabstract.com/how-it-works/) or watch some [Abstract videos](https://vimeo.com/goabstract).\n\n### Project and file structure\nThe Porsche organisation is structured by the context within different sections. Product-specific files are stored in different team projects. Team projects are visible for all organisation members by default. Confidential work is stored in private projects, which are only accessible by members on invitation.\n\nFor better discoverability, files and libraries within a project are recommended to be split and named by their features in lower case with hyphenation. All libraries created within the Porsche organisation should be named with the format `porsche-design-system-[projectname].sketch`.\n\n![Abstract file structure](../../assets/abstract-filestructure.png)\n\n### User roles and rights\nUser roles define whether a user can just view or actually work on the stored files. Contributor seats for designers have to be paid and therefore requested [here](http://eepurl.com/gnOIXD).\n- **Contributors, usually designers,** have access to all features including creating, editing and updating files.\n- **Viewers, usually stakeholders and developers,** are only able to view and comment on shared files.\n\nBoth roles can be granted different rights. \n- **Members** of the organisation have access to all public projects and can be invited individually to private projects.\n- **Guests** have to be invited individually for each project to gain access.\n\n### Add members to your private project or invite guests\n1. Login to Abstract\n2. Navigate to your project and click on \"Members\" on the left-hand navigation bar\n3. Click on \"...\" on the right side of a member item to manage their role or remove them from the project\n4. Select \"Invite People\" to add new team members or invite guests\n\n## Design workflow\nChanges within files are made by using the Abstract desktop app and Sketch. Within a project, the master branch represents all approved work as the latest version of the project. Tasks that are currently under development are nested in different branches and child branches. To release a finalised task, the specific branch must be merged into the master.\n\n### 1. Start working on a change\nWe open branches for any file change we're doing to avoid having to update the master too frequently. If you would like to pick up where someone else left off in a branch, you can open a child branch.\n\n1. **Create a branch** either from the master or from an existing branch by clicking \"New branch...\" or by opening a file with \"Edit in Sketch\". Sketch files can also be opened untracked to test something without saving.\n2. **Name the branch** including the main topic, effort type or the issue number and your signature letters,  \ne.g. `pagination accessibility recoloring | mb | #44`. For more context, you can also add a description and a status to the branch.\n4. **Save changes in Sketch and sync them** regularly as commits to Abstract by clicking on \"Commit changes\" at the bottom. \n5. **Describe the committed changes** to make them visible for others, e.g. `Changed text color from blue to red`. Commit often and describe what you did. Adding detail of what you accomplished in each commit is useful for you and for your coworkers.\n\n![Abstract branches](../../assets/abstract-branches.png)\n\n### 2. Review and merge changes\nWhen you think you’re done with your branch, you should always add stakeholders or coworkers as reviewers to get feedback on your work before you merge it to the master branch.\n\n1. Select your branch that you would like to be reviewed\n2. Click \"Request Review\" in the top right and type the team members whom you would like to review your changes\n\nUpdating from the master every few weeks is effective for keeping your branch up to date and avoiding a huge workload when you’re finally ready to merge. Once your review has been approved, you’re ready to merge.\n\n1. Select the branch that you would like to merge into the master or a child branch you would like to merge into the parent branch.\n2. Click \"Merge branch\" at the top right and log a short but descriptive change in the notes.\n3. Click the button \"Merge and archive\".\n4. When your local version of the master branch is not up-to-date (often a result of being offline), you get a diverged copy. Be sure to resolve this immediately.\n5. Inform the team about your merging.\n\n### 3. Engineering and stakeholder \"handoff\"\nCollections are very useful in focusing the attention of your fellow designers and stakeholders on the screens you’re modifying. You can arrange them according to the story you’re trying to tell and to give additional context within them.\n",
    "Sketch Plugins": "# Sketch Plugins\nBelow you can find a curated list of recommended plugins that are very useful for layouts, but not obligatory for use with the Porsche Design System.\n  \n## Automate Sketch  \n[GitHub - Ashung/Automate-Sketch](https://github.com/Ashung/Automate-Sketch)  \nA lot of useful tools make your workflow more efficient.  \n\n## ImageOptim  \n[ImageOptim plugin for Sketch app](https://imageoptim.com/sketch)  \nImageOptim makes images load faster and removes bloated metadata. It saves disk space and bandwidth by compressing images without any loss of quality.\n\n## Layout Settings \n[Copy / Paste Layout Settings](https://sketchpacks.herokuapp.com/plugins/sketch-copy-paste-layout-settings)  \nThis Plugin helps you to copy layout settings from one artboard and paste into multiples artboards.\n  \n## Sketch Runner  \n[Sketch Runner](https://sketchrunner.com/)  \nRunner helps you to get around Sketch faster by giving you an intuitive interface to supercharge your daily workflow. Stop searching through your menu and start running commands directly from your keyboard.\n→ Very nice for quickly searching and placing library components!  \n\n"
  },
  "Start Coding": {
    "Introduction": "# Introduction\n## Start Coding\n\nPorsche Design System provides developers with versioned packages of **Web components**, **Angular components** and **React components** to build clean and high-quality frontends that innately come with the latest design definitions.\n\nTo enable a smooth start with the Porsche Design System we have created **sample projects** in all common frameworks. These projects show how to install and the usage of the Porsche Design System. Furthermore, the example projects contain examples and solutions for testing.\n\n## Requirements\n* [Node.js & NPM](https://nodejs.org)\n\n### Get required NPM-Packages\n\nAll releases of the Porsche Design System are available as versioned NPM packages. Please read more about them on the corresponding docs.\n* [Web components](start-coding/vanilla-js): `@porsche-design-system/components-js`\n* [Angular components](start-coding/angular): `@porsche-design-system/components-angular`\n* [React components](start-coding/react): `@porsche-design-system/components-react`\n\nThose packages can be consumed by one of the following private NPM registries:\n* Porsche Design System NPM registry ([https://porscheui.jfrog.io](https://porscheui.jfrog.io))\n* My Porsche NPM registry ([https://porschedev.jfrog.io](https://porschedev.jfrog.io))\n* Porsche Highway NPM registry ([https://highway.porsche.com/artifactory/](https://highway.porsche.com/artifactory/))\n\nIf you don't have an account for one of the those NPM registries, you can easily register for the Porsche Design System NPM registry like as follows:\n\n<p-link target=\"_blank\" href=\"https://ux.porsche.com/sign-up\">Request a Porsche Design System npm registry account</p-link>\n\n1. Follow the instructions sent by e-mail\n1. Execute `npm login --registry=https://porscheui.jfrog.io/porscheui/api/npm/npm/`\n1. Enter username, password (Artifactory API Key, __not__ Artifactory password!) and e-mail address when asked in the terminal (this will add the credentials to your global user `~/.npmrc`)\n1. Add local `.npmrc` at the root of your NPM project and add the following lines of code:\n``` \nalways-auth = true\n@porsche-design-system:registry = https://porscheui.jfrog.io/porscheui/api/npm/npm/\n``` \n\n### Get optional NPM-Packages\n\nWe provide some additional packages which could help you in your daily business and hopefully make your coding life easier. These packages are optional and not directly needed to use our Porsche Design System components.\n\nAll releases of the Porsche Design System additional packages are available as versioned NPM packages. Please read more about them on the corresponding docs.\n* [Utilities](utilities/introduction): `@porsche-design-system/utilities`\n* [Assets](assets/introduction): `@porsche-design-system/assets`\n\n## Web components used with a not-supported framework\n\nAt the time of writing, we only provide wrappers for Angular and React. But this doesn't mean that our web components can't be used with other frameworks like Vue or Ember. \nJust follow these guidelines to make our web components work in other frameworks:\n\n- [Guidelines for Vue](https://stenciljs.com/docs/vue)\n- [Guidelines for Ember](https://stenciljs.com/docs/ember)",
    "Angular": "# Angular\n\n## Quick start\n\nTo build your own application with the **Angular** components of the Porsche Design System, follow these steps:\n\n* Follow the instructions at [Introduction](start-coding/introduction) to get the required npm package\n* Run `ng new my-app` to create a new Angular workspace and initial project\n* Install the Porsche Design System\n\n```shell script\n// install with npm:\nnpm install @porsche-design-system/components-angular\n\n// install with yarn:\nyarn add @porsche-design-system/components-angular\n```\n\nYou are ready to start building your own application.\n\n### Integration\n\nAfter adding the `@porsche-design-system/components-angular` package to your project, you've to import\nthe `PorscheDesignSystemModule` in every module you want to use the components.\n\nThe following setup is a standard Angular CLI project:\n\n```ts\n// app.module.ts\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { PorscheDesignSystemModule } from '@porsche-design-system/components-angular';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    PorscheDesignSystemModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n``` \n\nChange your AppComponent to use at least one Porsche Design System component, for example:\n\n```ts\n// app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div id=\"app\">\n      <p-headline variant=\"headline-1\">Headline</p-headline>\n    </div>\n  `,\n  styles: []\n})\nexport class AppComponent {}\n```\n\nRun the application by executing `yarn start` or `npm start` and see if the Porsche Design System component is rendered\ncorrectly.\n\nYou are now ready to build your own Angular application using the Porsche Design System.\n\n## When are Porsche Design System Components initialized?\n\nSee [componentsReady()](helpers/components-ready) for further information.\n\n## Advanced usage\n\n### Prefixing\n\nIn case of a micro-service architecture, multiple instances and versions of the Porsche Design System can be combined in\na final application. This could cause conflicts due to the way how custom webcomponents are registered in the browser.\nDuring the bootstrap phase of the Porsche Design System, custom elements are defined. If a second application wants to\nregister Porsche Design System again it will cause issues especially when different versions are used.\n\nA way of preventing those conflicts is by using a unique custom prefix for the components. Simply pass your desired\nprefix to the parameter of the static `PorscheDesignSystemModule.load()` function.\n\nWhen using custom prefixed component tags, you've to add\nthe [schema `CUSTOM_ELEMENTS_SCHEMA`](https://angular.io/api/core/CUSTOM_ELEMENTS_SCHEMA) to the modules that use the\nprefixed components.\n\n```ts\n// app.module.ts\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { PorscheDesignSystemModule, WEB_COMPONENTS_PREFIX } from '@porsche-design-system/components-angular';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    PorscheDesignSystemModule.load({ prefix: 'sample-prefix' })\n  ],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nBe aware, that you still have to set the component name without the prefix as an attribute, otherwise you might get\nunexpected results. The component might display as usual, but it is no longer an Angular component which means\nbindings of inputs and outputs won't work.\n\nYou can now use the prefixed component as follows:\n\n```ts\n// app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div id=\"app\">\n      <sample-prefix-p-headline p-headline variant=\"headline-1\">Headline</sample-prefix-p-headline>\n    </div>\n  `,\n  styles: []\n})\nexport class AppComponent {}\n```\n\nYou can add more prefixes by calling `PorscheDesignSystemModule.load()` multiple times or in your sub modules:\n\n```ts\n// app.module.ts\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { PorscheDesignSystemModule } from '@porsche-design-system/components-angular';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    PorscheDesignSystemModule.load({ prefix: 'sample-prefix' }),\n    PorscheDesignSystemModule.load({ prefix: 'another-prefix' }),\n  ],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n## Sample project\n\nWe provide a public Github repository with a basic sample project setup to show how it is managed in real code. You can\nfind the repository of the Angular example project\nhere: [Sample integration Angular](https://github.com/porscheui/sample-integration-angular)\n\n## Requirement\n\n* Get the Angular cli by executing `npm install -g @angular/cli`\n\n### Get the project up and running\n\n* Clone the repository by executing  \n  `git clone https://github.com/porscheui/sample-integration-angular.git`\n* Follow the installation guidelines in the README.md file\n",
    "React": "# React\n\n## Quick start\n\nTo build your own application with the **React** components of Porsche Design System, follow these steps:\n\n- Follow the instructions at (Introduction)[/start-coding/introduction] to get the required npm package\n- Run `yarn create react-app my-app --template typescript` or `npx create-react-app my-app --template typescript` to\n  create a directory inside the current folder with the initial project structure called `my-app`\n- To add TypeScript to your **Create React App**, you have to install it:\n\n```shell script\n// install with yarn:\nyarn add typescript @types/node @types/react @types/react-dom @types/jest\n\n// install with npm:\nnpm install typescript @types/node @types/react @types/react-dom @types/jest\n```\n\n- Install the Porsche Design System\n\n```shell script\n// install with yarn:\nyarn add @porsche-design-system/components-react\n\n// install with npm:\nnpm install @porsche-design-system/components-react\n```\n\nYou are ready to start building your own application.\n\n### Integration\n\nThe following project is a standard React (Create React App) setup extended by the\nnecessary `PorscheDesignSystemProvider` which you can import from `@porsche-design-system/components-react` :\n\n```tsx\n// index.tsx\n\nimport ReactDOM from 'react-dom';\nimport { PorscheDesignSystemProvider } from '@porsche-design-system/components-react';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PorscheDesignSystemProvider>\n      <App />\n    </PorscheDesignSystemProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nChange your App file to use at least one Porsche Design System component, for example:\n\n```tsx\n// App.tsx\n\nimport { PHeadline } from '@porsche-design-system/components-react';\n\nexport const App = (): JSX.Element => (\n  <div className=\"App\">\n    <PHeadline variant=\"headline-1\">Headline from Porsche Design System</PHeadline>\n  </div>\n);\n```\n\nRun `yarn start` or `npm start` and check if the components are displayed correctly.\n\n## When are Porsche Design System components initialized?\n\nSee [componentsReady()](helpers/components-ready) for further information.\n\n## Test the application\n\n**Jest** uses **jsdom** and supports ShadowDOM since Version 12.2.0.  \nHowever, it doesn't support JavaScript modules as described in this [issue](https://github.com/jsdom/jsdom/issues/2475)\n.  \nAlso, it doesn't support `CSSStyleSheet.replace()`, `Intersection Observer`, `Element.prototype.scrollTo` and others.\n\nAs a workaround we provide a polyfill as part of the `@porsche-design-system/components-react` package.\n\nTo apply the polyfill, simply import it in your **setupTest.{js|ts}** file.\n\n**Note:** If your test includes Porsche Design System components, make sure to wrap the component you  \nwant to test with a `PorscheDesignSystemProvider` in order to avoid exceptions.\n\n### Setup file\n\n```tsx\n// setupTest.{js|ts}\n\nimport '@porsche-design-system/components-react/jsdom-polyfill';\n```\n\n### Example component\n\n```tsx\n// SingleComponent.tsx\n\nimport { useCallback, useState } from 'react';\nimport { PTabsBar } from '@porsche-design-system/components-react';\nimport type { TabChangeEvent } from '@porsche-design-system/components-react';\n\nexport const SingleComponent = (): JSX.Element => {\n  const [activeTab, setActiveTab] = useState(0);\n  const onTabChange = useCallback((e: CustomEvent<TabChangeEvent>) => {\n    setActiveTab(e.detail.activeTabIndex);\n  }, []);\n\n  return (\n    <>\n      <PTabsBar\n        activeTabIndex={activeTab}\n        onTabChange={onTabChange}\n        data-testid=\"host\"\n      >\n        <button data-testid=\"button1\">Some label</button>\n        <button data-testid=\"button2\">Some label</button>\n        <button data-testid=\"button3\">Some label</button>\n      </PTabsBar>\n      <div data-testid=\"debug\">{`Active Tab: ${activeTab + 1}`}</div>\n    </>\n  );\n};\n```\n\n### Test example component\n\n```tsx\n// SingleComponent.test.tsx\n\nimport { PorscheDesignSystemProvider, componentsReady } from '@porsche-design-system/components-react';\nimport { render } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\ntest('renders Tabs Bar from Porsche Design System and uses its events', async () => {\n  const { getByTestId } = render(\n    <PorscheDesignSystemProvider> {/* required for the component to work */}\n      <SingleComponent />\n    </PorscheDesignSystemProvider>\n  );\n\n  await componentsReady(); // we need to make sure Porsche Design System components are initialized\n\n  const debug = getByTestId('debug');\n  const button1 = getByTestId('button1');\n  const button2 = getByTestId('button2');\n  const button3 = getByTestId('button3');\n\n  expect(debug.innerHTML).toBe('Active Tab: 1');\n\n  userEvent.click(button2);\n  expect(debug.innerHTML).toBe('Active Tab: 2');\n\n  userEvent.click(button3);\n  expect(debug.innerHTML).toBe('Active Tab: 3');\n\n  userEvent.click(button1);\n  expect(debug.innerHTML).toBe('Active Tab: 1');\n});\n```\n\n### Hints about PorscheDesignSystemProvider\n\nIt might be rather redundant to wrap every single test with `PorscheDesignSystemProvider`.  \nTherefore, we offer the following advice.\n\n#### Custom helper\n\nTo reduce repetitive code you can write a custom helper function that wraps a component in `PorscheDesignSystemProvider`\nand calls the `render` function of `react-testing-library`:\n\n```tsx\n// helper.tsx\n\nimport { render, RenderResult } from '@testing-library/react';\nimport { PorscheDesignSystemProvider } from '@porsche-design-system/components-react';\n\nexport const renderWithProvider = (component: JSX.Element): RenderResult => {\n  return render(<PorscheDesignSystemProvider>{component}</PorscheDesignSystemProvider>);\n};\n```\n\n#### Disabling the validation of PorscheDesignSystemProvider\n\nAlternatively we provide a utility function `skipCheckForPorscheDesignSystemProviderDuringTests()` that can be used\nwithin your tests.  \nIt only takes effect during testing since it relies on `process.env.NODE_ENV === 'test'`.\n\nYou can apply it globally on every test by calling it once in your test setup:\n\n```tsx\n// setupTest.{js|ts}\nimport { skipCheckForPorscheDesignSystemProviderDuringTests } from '@porsche-design-system/components-react';\n\nskipCheckForPorscheDesignSystemProviderDuringTests();\n```\n\nIf you don't want to have multiple test setups or prefer a more local approach you can use it within your test:\n\n```tsx\n// SomeComponent.test.tsx\nimport { skipCheckForPorscheDesignSystemProviderDuringTests } from '@porsche-design-system/components-react';\n\ndescribe('SomeComponent', () => {\n  beforeEach(() => {\n    // either like this\n    skipCheckForPorscheDesignSystemProviderDuringTests();\n  });\n\n  it('should work', () => {\n    // or like this\n    skipCheckForPorscheDesignSystemProviderDuringTests();\n\n    // ...\n  });\n});\n```\n\n#### Disabling CDN requests from Porsche Design System and components\n\nWe provide a utility function `skipPorscheDesignSystemCDNRequestsDuringTests()` that can be used within your tests \nwhen you use the `@porsche-design-system/components-react/jsdom-polyfill` in your setup.  \nIt will suppress all CDN request of the Porsche Design System.\n\nYou can apply it globally on every test by calling it once in your test setup:\n\n```tsx\n// setupTest.{js|ts}\nimport { skipPorscheDesignSystemCDNRequestsDuringTests } from '@porsche-design-system/components-react';\n\nskipPorscheDesignSystemCDNRequestsDuringTests();\n```\n\nIf you don't want to have multiple test setups or prefer a more local approach you can use it within your test:\n\n```tsx\n// SomeComponent.test.tsx\nimport { skipPorscheDesignSystemCDNRequestsDuringTests } from '@porsche-design-system/components-react';\n\ndescribe('SomeComponent', () => {\n  beforeEach(() => {\n    // either like this\n    skipPorscheDesignSystemCDNRequestsDuringTests();\n  });\n\n  it('should work', () => {\n    // or like this\n    skipPorscheDesignSystemCDNRequestsDuringTests();\n\n    // ...\n  });\n});\n```\n\n### Additional information when using react-testing-library\n\nIf you try to submit a form via button click you will encounter issues with `react-testing-library` and `jsdom`. It is\nsimply not provided (see [Github Issue 755](https://github.com/testing-library/react-testing-library/issues/755)\nand [Github Issue 1937](https://github.com/jsdom/jsdom/issues/1937)).\n\nIf you have to test a form submit use `Simulate`.\n\n```tsx\nimport { Simulate } from 'react-dom/test-utils';\n\nconst button = getByText('SomePorscheDesignSystemButton');\n\nSimulate.submit('button');\n```\n\nYou are not able to use `getByRole` to query Porsche Design System components when using testing-library.\nTesting-library is taking default `roles` in consideration. For example a `<button>` gets the role `button` without\nexplicitly setting the attribute. To achieve this it uses\nthe [Accessibility Tree](https://developer.mozilla.org/en-US/docs/Glossary/Accessibility_tree),\nsee [documentation](https://testing-library.com/docs/guide-which-query/).\n\nWe also provide test examples in\nour [sample integration project](https://github.com/porscheui/sample-integration-react/tree/master/src/tests).\n\n## Advanced usage\n\n### Prefixing\n\nIn case of a micro-service architecture, multiple instances and versions of the Porsche Design System can be combined in\na final application. This could cause conflicts due to the way how custom webcomponents are registered in the browser.\nDuring the bootstrap phase of the Porsche Design System, custom elements are defined. If a second application wants to\nregister Porsche Design System again it will cause issues especially when different versions are used.\n\nA way of preventing those conflicts is by using a unique custom prefix for the components. Simply pass your desired\nprefix to the `prefix` property of `PorscheDesignSystemProvider`.\n\n```tsx\n// index.tsx\n\nimport ReactDOM from 'react-dom';\nimport { PorscheDesignSystemProvider } from '@porsche-design-system/components-react';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PorscheDesignSystemProvider prefix=\"sample-prefix\">\n      <App />\n    </PorscheDesignSystemProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nIn the following example the `PHeadline` component will render as `<sample-prefix-p-headline>`.\n\n```tsx\n// App.tsx\n\nimport { PHeadline } from '@porsche-design-system/components-react';\n\nexport const App = (): JSX.Element => (\n  <PHeadline>Some headline</PHeadline>\n)\n```\n\n## Sample integration\n\nWe provide a public Github repository with a basic sample project setup to show how it is managed in real code. You can\nfind the repository of the React example project\nhere: [Sample integration React](https://github.com/porscheui/sample-integration-react)\n\n### Get the project up and running\n\n- Clone the repository by executing  \n  `git clone https://github.com/porscheui/sample-integration-react.git`\n- Follow the installation guidelines in the README.md file\n",
    "Vanilla Js": "# Vanilla Js\n\n## Quick start\nTo build your own (non framework specific) application with **Native Web Components** of the Porsche Design System, follow these steps:\n\n* Follow the instructions at [Introduction](start-coding/introduction) to get the required npm package\n* Install the Porsche Design System\n\n```shell script\n// install with npm:\nnpm install @porsche-design-system/components-js\n\n// install with yarn:\nyarn add @porsche-design-system/components-js\n```\n\nAfter adding the `@porsche-design-system/components-js` package to your project, the following page setup is recommended (assuming a web server is running).\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title>Porsche Design System</title>\n    <script src=\"PATH/TO/PACKAGE/@porsche-design-system/components-js/index.js\"></script>\n  </head>\n  <body>\n    <script type=\"text/javascript\">\n      porscheDesignSystem.load();\n    </script>\n    <p-headline variant=\"headline-1\">Some text</p-headline>\n  </body>\n</html>\n``` \n\n## Advanced usage\n\n### When are Porsche Design System Components initialized?\nSee [componentsReady()](helpers/components-ready) for further information.\n\n### Prefixing\nYou can load the Porsche Design System with a custom unique prefix to prevent conflicts. Just pass the prefix as a parameter to the `load` method.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title>Porsche Design System</title>\n    <script src=\"PATH/TO/PACKAGE/@porsche-design-system/components-js/index.js\"></script>\n  </head>\n  <body>\n    <script type=\"text/javascript\">\n      porscheDesignSystem.load({ prefix: 'sample-prefix' });\n    </script>\n    <sample-prefix-p-headline variant=\"headline-1\">Some text</sample-prefix-p-headline>\n  </body>\n</html>\n```\n\n## Sample integration\nWe provide a public Github repository with a basic sample project setup to show how it is managed in real code.\nYou can find the repository of the Vanilla-JS example project here: [Sample integration Vanilla-JS](https://github.com/porscheui/sample-integration-vanillajs)\n\n### Get the project up and running\n* Clone the repository by executing  \n`git clone https://github.com/porscheui/sample-integration-vanillajs.git`\n* Follow the installation guidelines in the README.md file",
    "Next Js": "# Next Js\n\n## Quick start\nTo build your own **NextJS** application with the **React** components of the Porsche Design System, follow these steps:\n\n* Create a new application by executing:\n```shell script\n// install with yarn:\nyarn create next-app\n\n// install with npm:\nnpm init next-app\n```\n\n* Follow the instructions to set everything up\n* Switch to the created folder with `cd your-app-name`\n* To add TypeScript to your **NextJS Project**, you have to create a `tsconfig.json` file in the root of your project\n* Add typescript with `yarn add --dev typescript @types/react @types/node` or  \n`npm install --save-dev typescript @types/react @types/node` \n* Run `yarn dev` or `npm run dev` which configures your `tsconfig.json` with default values\n* You can convert your files from `.js` to `.tsx` \n* Follow the instructions at [Introduction](start-coding/introduction) to get the required npm package\n* Install the Porsche Design System  \n```shell script\n// install with yarn:\nyarn add @porsche-design-system/components-react\n\n// install with npm:\nnpm install @porsche-design-system/components-react\n```\n\nYou are ready to start building your own application.\n\nThe following project is the standard NextJS setup.\nChange your index page to use at least one Porsche Design System Component, for example:\n\n### Index page\n\n```tsx\n// index.tsx\nimport Head from 'next/head'\nimport { PHeadline } from \"@porsche-design-system/components-react\";\n\nexport default function Home() {\n  return (\n    <div className=\"container\">\n      <Head>\n        <title>Create Next App</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main>\n        <PHeadline className=\"title\">\n          Welcome to <a href=\"https://nextjs.org\">Next.js!</a> with Porsche Design System\n        </PHeadline>\n      </main>\n    </div>\n  )\n}\n```\n\n* Run `yarn build` or `npm build` to create pre-rendered pages\n* Execute `yarn start` or `npm start` and check if the components are displayed correctly.\n\n## Test the application\n\nTo set up Jest testing in in NextJS you have to manually set up jest in your project. You find detailed \ninformation here: [Get Started with Jest](https://jestjs.io/docs/en/getting-started)\n\n**Jest** uses **jsdom**.It is yet not possible to render the functionality of web components in **jsdom**.\n\nTo ensure your tests don't fail, we provide mocks for every Porsche Design System component. \nThey are distributed in the `@porsche-design-system/components-react` npm package.\n\nThe mocks must only be used if the functionality of the web component is required within the test.\nAs we test and ensure the functionality of our web components extensively, we recommend using the mocks only as a last option.\n\nTo consume the mocks you can set them up via your **setupTest.js** file in your root folder and copy the following snippet into the setup file.\n\n```js\n// setupTest.js\njest.mock('@porsche-design-system/components-react', () => {\n  return require('@porsche-design-system/components-react/mocks');\n});\n```\nYou have to access the mocks in the Mock-Factory of the `jest.mock()` function.\n\nIf you only need a single component mock you can also consume the mock directly in your test. All of our mocks are named like **p-name-mock** for example **p-headline-mock**.\n\n```tsx\n// SingleComponent.tsx\nexport function SingleComponent() {\n  return (\n    <PHeadline>Some headline</PHeadline>\n  )\n}\n```\n\n```tsx\n// SingleComponent.test.tsx\njest.mock('@porsche-design-system/components-react', () => {\n  return require('@porsche-design-system/components-react/mocks/p-headline-mock');\n});\n\ntest('renders a headline from Porsche Design System', async () => {\n  const {getByText} = render(<SingleComponent/>);\n  const headLineElement = getByText('Some headline');\n  expect(headLineElement).toBeInTheDocument();\n});\n```\n\nUse this solution until there is an upgrade to a newer **jsdom** version which provides support for **Web Components**.\nIn the meantime, we keep providing mocks.\n \nYou find detailed information on how to use mock functions in **Jest** [here](https://jestjs.io/docs/en/mock-functions.html).\n\n## Sample integration\nWe provide a public Github repository with a basic sample project setup to show how it is managed in real code.\nYou can find the repository of the NextJS example project here: [Sample integration NextJS](https://github.com/porscheui/sample-integration-nextjs)\n\n### Get the project up and running\n* Clone the repository by executing  \n`git clone https://github.com/porscheui/sample-integration-nextjs.git`\n* Follow the installation guidelines in the README.md file",
    "Gatsby": "# Gatsby\n\n## Quick start\nTo build your own **Gatsby** application with the **React** components of the Porsche Design System, follow these steps:\n\n### Requirement\n* To get Gatsby up and running follow [official Gatsby guidlines](https://www.gatsbyjs.com/docs/quick-start/)\n* To support TypeScript follow [Gatsby Typescript guidelines](https://www.gatsbyjs.com/docs/typescript/)\n* Follow the instructions at [Introduction](start-coding/introduction) to get access to the required npm package of the Porsche Design System\n* Install the Porsche Design System  \n```shell script\n// install with yarn:\nyarn add @porsche-design-system/components-react\n\n// install with npm:\nnpm install @porsche-design-system/components-react\n```\n\nYou are ready to start building your own application.\n\nThe following project is the standard Gatsby site setup.\nChange your Index page to use at least one Porsche Design System Component, for example:\n\n### Index page\n\n```tsx\n// index.tsx\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport { PHeadline, PText } from \"@porsche-design-system/components-react\"\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\n   \nconst IndexPage = () => (\n <Layout>\n   <SEO title='Home' />\n   <PHeadline>Hi people</PHeadline>\n   <PText>Welcome to your new Gatsby site.</PText>\n   <PText>Now go build something great.</PText>\n   <div>\n     <Image />\n   </div>\n   <Link to=\"/page-2/\">Go to page 2</Link>\n </Layout>\n)\n   \nexport default IndexPage\n```\n\nRun `yarn start` or `npm start` and check if the components are displayed correctly.\n\n## Test the application\n\nTo set up Jest testing in Gatsby you have to follow the instructions on how to set up jest for your project:\n\n* Step 1: [Set up Jest for Unit testing general](https://www.gatsbyjs.org/docs/unit-testing/)\n* Step 2: [Set up to test react components](https://www.gatsbyjs.org/docs/testing-react-components/)\n\n**Jest** uses **jsdom**.It is yet not possible to render the functionality of web components in **jsdom**.\n\nTo ensure your tests don't fail, we provide mocks for every Porsche Design System component. \nThey are distributed in the `@porsche-design-system/components-react` npm package.\n\nThe mocks must only be used if the functionality of the web component is required within the test.\nAs we test and ensure the functionality of our web components extensively, we recommend using the mocks only as a last option.\n\nTo consume the mocks you can set them up via your **setup-test-env.js** file in your root folder and copy the following snippet into the setup file.\n\n```js\n// setup-test-env.js\njest.mock('@porsche-design-system/components-react', () => {\n  return require('@porsche-design-system/components-react/mocks');\n});\n```\nYou have to access the mocks in the Mock-Factory of the `jest.mock()` function. \n\nIf you only need a single component mock you can also consume the mock directly in your test. All of our mocks are named like **p-name-mock** for example **p-headline-mock**.\n\n```tsx\n// SingleComponent.tsx\nexport function SingleComponent() {\n  return (\n    <PHeadline>Some headline</PHeadline>\n  )\n}\n```\n\n```tsx\n// SingleComponent.test.tsx\njest.mock('@porsche-design-system/components-react', () => {\n  return require('@porsche-design-system/components-react/mocks/p-headline-mock');\n});\n\ntest('renders a headline from Porsche Design System', async () => {\n  const {getByText} = render(<SingleComponent/>);\n  const headLineElement = getByText('Some headline');\n  expect(headLineElement).toBeInTheDocument();\n});\n```\n\nUse this solution until there is an upgrade to a newer **jsdom** version which provides support for **Web Components**.\nIn the meantime, we keep providing mocks.\n \nYou find detailed information on how to use mock functions in **Jest** [here](https://jestjs.io/docs/en/mock-functions.html).\n   \nWe also provide test examples in our [sample integration project](https://github.com/porscheui/sample-integration-gatsby/blob/master/src/components/__tests__/applicationTest.test.tsx).\n\n## Sample integration\nWe provide a public Github repository with a basic sample project setup to show how it is managed in real code.\nYou can find the repository of the Gatsby example project here: [Sample integration Gatsby](https://github.com/porscheui/sample-integration-gatsby)\n\n### Get the project up and running\n* Clone the repository by executing  \n`git clone https://github.com/porscheui/sample-integration-gatsby.git`\n* Follow the installation guidelines in the README.md file\n"
  },
  "News": {
    "Changelog": {
      "Components": "# Changelog\n\n## Porsche Design System - Components\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n### [Unreleased]\n\n### [2.7.0-beta.6] - 2021-12-08\n\n#### Added\n- `Popover`\n\n### [2.7.0-beta.5] - 2021-12-07\n\n#### Added\n**Disclaimer:** The provided theme `light-electric` is just a proof of concept, it's **not** accessible regarding its color contrast and might even be removed in an upcoming major release again.\n- `light-electric` theme for `Accordion`, `Link`, `Link Pure`, `Button`, `Button Pure`, `Tabs`, `Tabs Bar`\n\n### [2.7.0-beta.4] - 2021-12-02\n\n### [2.7.0-beta.3] - 2021-11-30\n\n#### Added\n- `Accordion` uses `MutationObserver` fallback when no `ResizeObserver` is available in older browsers\n\n#### Fixed\n- `Link` and `Link Social` not adapting slotted anchor to the width of the element \n\n### [2.7.0-beta.2] - 2021-11-24\n\n#### Added\n- `Toast`\n\n#### Fixed\n- `Banner` animations respect offset correctly\n\n### [2.7.0-beta.1] - 2021-11-16\n\n#### Fixed\n- `Headline` applies `align` and `ellipsis` prop correctly\n\n### [2.7.0-beta.0] - 2021-11-11\n\n#### Added\n- New `aria` property for `ARIA` attribute handling for: `Button`, `Button Pure`, `Icon`, `Link`, `Link Pure`, `Marque`, `Spinner`\n\n#### Fixed\n- React: warnings about `useLayoutEffect` in SSR context\n\n### [2.6.1] - 2021-11-05\n\n#### Fixed\n- Prevent breaking entire Porsche Design System due to lacking support of `ResizeObserver`, however `Accordion` still requires it \n\n### [2.6.0] - 2021-11-04\n\n#### Added\n- `unit` and `unitPosition` properties to `Text Field Wrapper`\n\n### [2.6.0-beta.0] - 2021-10-29\n\n#### Changed\n- Use `Heiti SC` (pre-installed on iOS/macOS) and `SimHei` (pre-installed on Windows) as Chinese fallback font\n\n#### Added\n- `Marque` uses `webp` images for browsers that support it\n- `Inline Notification`\n- `Icon` now supports `success` for `name` property\n\n#### Fixed\n- Colors of `Banner` for dark theme\n- Replaced CSS `inset` property with `top`, `left`, `right` and `bottom` for browser compatibility \n- Opening and closing transition of `Modal`\n\n### [2.5.1-beta.0] - 2021-10-11\n\n#### Fixed\n- Possible exceptions when components get unmounted directly\n\n### [2.5.0] - 2021-10-04\n\n#### Added\n- `SimHei` and `黑体` as fallback for all components' `font-family`\n\n### [2.5.0-beta.1] - 2021-09-28\n\n#### Changed\n- React: improved render behavior of components\n\n### [2.5.0-beta.0] - 2021-09-22\n\n#### Added\n- React: utility function `skipPorscheDesignSystemCDNRequestsDuringTests`\n\n### [2.4.0] - 2021-09-21\n\n### [2.4.0-beta.2] - 2021-09-21\n\n#### Added\n- `Link Social` and `Icon` now support `kakaotalk`, `naver`, `reddit` and `tiktok`\n- JSS caching mechanism to improve style performance\n\n#### Changed\n- Alignment of `linkedin` icon\n- Improved accessibility of `Select Wrapper`\n- `Icon` loading behaviour to non-blocking, components using the `Icon` will no longer wait for it to load\n- Validation messages of `Fieldset Wrapper` have now an additional icon representing the validation state\n\n#### Fixed\n- Box model of `Link Pure`\n- Focus of `Link Pure` with slotted anchor and hidden label\n- Focus cycling of `Modal` without focusable children\n- Suppress CORS error\n\n### [2.4.0-beta.1] - 2021-08-26\n\n#### Added\n- `active` property to `Button Pure`\n\n### [2.4.0-beta.0] - 2021-08-26\n\n#### Added\n- `icon` property of `Button Pure` and `Link Pure` was extended by `none` value\n- `alignLabel` and `stretch` property to `Button Pure` and `Link Pure`\n\n#### Changed\n- Improved `:focus-visible` and `:hover:focus-visible` colors for `Link Social` and `Link`\n- Improved slotted `<a>` coloring in dark theme for `Link Social` and `Link`\n- Validation messages of `Checkbox Wrapper`, `Radio Button Wrapper`, `Select Wrapper`, `Textarea Wrapper` and `Text Field Wrapper` have now an additional icon representing the validation state\n- `Modal` backdrop behavior to close modal on mouse-down\n\n#### Fixed\n- Slotted `<a>` coloring in dark theme for `Text`, `Headline`, `Text List`, `Banner`, `Select Wrapper` and `Link Pure`\n- Wrong background color of scrollable `Modal`'s backdrop in Safari\n\n### [2.3.0] - 2021-07-28\n\n### [2.3.0-beta.3] - 2021-07-28\n\n#### Changed\n- `Accordion` reduce paddings, vertically align carets to the first heading row, adjust border color and hover styles\n\n#### Fixed\n- `Text Field Wrapper` accessibility of type password and search\n\n### [2.3.0-beta.2] - 2021-07-15\n\n#### Added\n- `Checkbox Wrapper`, `Radio Button Wrapper`, `Select Wrapper`, `Textarea Wrapper` and `Text Field Wrapper` now reflect changes of the `required` attribute on their child component\n- `multiline` property to `Table Cell`\n- Partial function `getLoaderScript()` to initialize Porsche Design System as early as possible\n\n#### Fixed\n- `Table Head Cell` uses semi bold instead of bold as font weight\n- Transition of `Modal`\n\n### [2.3.0-beta.1] - 2021-07-08\n\n#### Added\n- `Accordion`\n\n#### Changed\n- Removed initial delay of `Banner`\n\n### [2.3.0-beta.0] - 2021-07-01\n\n#### Added\n- `Table`\n- Angular: export types from package root\n- Accessibility icon\n\n#### Changed\n- `Button`, `Button Pure` and `Switch` are now focusable while in `loading` state\n- `Text` and `Headline` inherits white-space CSS property\n- React: sync component props via property instead of attribute \n\n#### Fixed\n- Angular: support `\"strictTemplates\": true` option in `tsconfig.json`\n- Use correct icon for `arrow-last` and `arrow-first` in `Icon`, `Button` and `Link` components\n\n### [2.2.1] - 2021-06-08\n\n#### Changed\n- Optimize vertical alignment of `Modal`\n\n#### Fixed\n- URL in inject global style warning\n\n### [2.2.1-beta.1] - 2021-06-02\n\n#### Fixed\n- Margin of `Tabs Bar` within `Tabs` for Firefox and Safari\n- SVG of `Icon` is not removed after prop change, e.g. on color change\n- Fullscreen behavior of `Modal` on screens larger than 1760px\n\n### [2.2.0] - 2021-05-19\n\n#### Fixed\n- `Text` inside `Button` now has the proper size on iOS Safari when changing to and from landscape mode\n- `Banner` can now be re-opened after closing\n- Closing one `Banner` will not close other `Banners` on the site\n\n### [2.2.0-beta.2] - 2021-05-12\n\n#### Fixed\n- `Select Wrapper` value changes are now reflected correctly\n- `Select Wrapper` dark theme background color if used with `filter` prop\n\n### [2.2.0-beta.1] - 2021-05-05\n\n#### Added\n- Partial function `getIconLinks()` to preload Porsche Design System Icons\n\n#### Fixed\n- `Text Field Wrapper` spacing in Safari\n\n### [2.2.0-beta.0] - 2021-05-05\n\n#### Added\n- Partial function `getMetaTagsAndIconLinks()` to simplify cross device fav and meta icons\n\n### [2.1.0] - 2021-05-03\n\n### [2.1.0-beta.0] - 2021-05-03\n\n#### Added\n- `Switch`\n\n#### Changed\n- `Text` automatically breaks words/strings into new line being too long to fit inside their container\n- `Headline` automatically breaks words/strings into new line being too long to fit inside their container\n- Extended `Fieldset Wrapper` with `labelSize`, `required`, `state` and `message` properties. If the `Fieldset Wrapper` is set to required \n  only the label of the **Fieldset Wrapper** gets an asterisk. It is removed from all wrapped child components, as long as they are Porsche Design System form elements.\n\n### [2.0.3] - 2021-04-28\n\n### [2.0.3-beta] - 2021-04-28\n\n#### Fixed\n- Angular: Events firing twice in `Pagination`, `Modal`, `Tabs`, `Tabs Bar` and `Banner` component\n\n### [2.0.2] - 2021-04-21\n\n### [2.0.2-beta.0] - 2021-04-20\n\n#### Fixed\n- TypeScript build errors due to duplicate declarations in `types.d.ts`\n\n### [2.0.1] - 2021-04-16\n\n#### Fixed\n- Visual appearance of `Checkbox Wrapper` in iOS Safari\n- A bug where `Text Field Wrapper` would throw an error when reattaching to DOM too quickly\n- Visual bug in Firefox when zooming out `Text Field Wrapper`, `Checkbox Wrapper` and `Textarea Wrapper`\n- Angular: Streamline component styles in dark theme \n\n#### Changed\n- Aligned focus states of `Checkbox Wrapper` and `Radio Button Wrapper` across browsers\n\n### [2.0.0] - 2021-04-13\n\nIn keeping with [Semver](https://semver.org/), Porsche Design System v2.0.0 was released due to changes in the API, fundamental changes in loading behavior and others.\nWith our new major version `v2.0.0` there are some important changes that you should watch out for.\nTo make the migration from `v1.5.x` to our current `v2.0.0` easier, we offer a few guidelines.\n\n## General changes / improvements:\n\n#### All components, icons, fonts, styles and marque of the Porsche Design System are loaded versioned and chunked from a central CDN\nThis way all web based digital Porsche products share and use the cached and versioned assets regardless of the JS framework used to improve loading performance across the Porsche group.\nOnly a tiny (1.4kb sized) Porsche Design System loader script gets bundled into your application code.\nEverything else gets loaded versioned, cached and chunked from a central CDN ([read more](https://designsystem.porsche.com/latest/performance/cdn)).\nHowever, this also means that you will need an **Internet connection** to render the components in a browser (possibly relevant for development stage or intranet applications).\n\n#### Enabling Micro Frontend Architecture\nIn case of a micro-frontend architecture, multiple instances and versions of the Porsche Design System can be combined in a final application by configurable prefixing technique of the Porsche Design System components during runtime.\nPlease refer to our framework specific guidelines [Vanilla JS](https://designsystem.porsche.com/latest/start-coding/vanilla-js), [Angular](https://designsystem.porsche.com/latest/start-coding/angular) and [React](https://designsystem.porsche.com/latest/start-coding/react).\n\n#### Prevent Flash of Unstyled Content (FOUC) and Flash of Unstyled Text (FOUT)\nTo prevent FOUC/FOUT, the Porsche Design System offers various partials as part of the `@porsche-design-system/components-{js|angular|react}` package to ensure all necessary Porsche Design System fonts and components are fully loaded.\nIf you've used the `@porsche-design-system/partials` package previously, stop using it and replace the integration with the partials provided by `@porsche-design-system/components-{js|angular|react}` package.\nHave a look at our [FOUC/FOUT guidelines](https://designsystem.porsche.com/latest/performance/loading-behaviour).\n\n```diff\n- <%= require('@porsche-design-system/partials').getPorscheDesignSystemCoreStyles() %>\n+ <%= require('@porsche-design-system/components-{js|angular|react}/partials').getInitialStyles() %>\n\n- <%= require('@porsche-design-system/partials').getFontFaceCSS() %>\n+ <%= require('@porsche-design-system/components-{js|angular|react}/partials').getFontFaceStylesheet() %>\n\n- <link rel=\"preload\" href=\"path/to/webfont/nameOfWebFontFile\" as=\"font\" type=\"font/woff2\" crossorigin />\n+ <%= require('@porsche-design-system/components-{js|angular|react}/partials').getFontLinks({ weights: ['regular', 'semi-bold'] }) %>\n```\n\n#### Added support for China CDN\nOur CDN is configured to forward requests to Chinese CDN automatically when necessary.\nSo you're good to go without any configuration or multiple region specific builds of your application.\nHowever, if you are aiming for the maximum possible performance in China, you can configure which CDN the Porsche Design System must use.\nPlease follow our [CDN guidelines](https://designsystem.porsche.com/latest/performance/cdn) for more information.\n\n#### New/optimized components\n- **Tabs**\n- **Tabs Bar**\n- **Banner**\n- **Modal**\n- Headline\n- Select\n- Pagination\n- Button\n- Button Pure\n- Link\n- Link Pure\n- Spinner\n- Checkbox\n- Radio Button\n\n#### Improved TypeScript support for Angular and React\nTo ensure the best possible typing support, we have refactored our Angular and React wrappers which integrate the native web components of the Porsche Design System.\n\n#### componentsReady() works reliable\nBecause the Porsche Design System components get loaded async at the time they are needed, it might be relevant within your application or test automation to know when those have been initialized.\nTherefore, we provide in all three `@porsche-design-system/components-{js|angular|react}')` packages a reliable helper function `componentsReady()`.\n[Read more about it](https://designsystem.porsche.com/latest/helpers/components-ready).\n\n#### Removed \"blur on focus\"\nNow focus styling is only applied when you navigate through keyboard and ignored by mouse interaction for browsers supporting `:focus-visible` otherwise it will fallback to `:focus` CSS implementation.\n\n#### Changed focus styling for a better compromise between accessibility and visual appearance\nColor and outline of general focus styling has changed to `currentColor` for light/dark theme with an outline of 1px width/offset.\nIf you have custom components build with the usage of our `@porsche-design-system/utilities` package then update it to the latest version (we also provide a focus [SCSS mixin](https://designsystem.porsche.com/latest/utilities/scss/functions) and [JS function](https://designsystem.porsche.com/latest/utilities/js/functions)).\n\n#### Improved geometry of Porsche Next font\nFor better alignment and readability we've changed the geometry of the Porsche Next font which results in a visual change of font size and spacing.\n\n#### Dropped support for IE11 and EdgeHTML according to Porsche's official browser strategy 2021\nIf you still need to support these browsers, you have to stick to `v1.5.x`.\nWe offer a Browser Notification package `@porsche-design-system/browser-notification` to alert users that these browsers are no longer supported.\nIt supports a blocking layer (to be used with Porsche Design System `v2.x`), or a dismissible banner (to be used with Porsche Design System `v1.x`).\nPlease refer to our [Browser compatibility guidelines](https://designsystem.porsche.com/latest/help/browser-compatibility).\n\n#### Changed default type of Button and Button Pure\nTo be in sync with native `<button>` behavior we've changed the default `type` of **Button** and **Button Pure** component.\nThose components will render a button within their Shadow DOM as `<button type=\"submit\">` (previously `<button type=\"button\">`).\n\n- `submit`: The button submits the form data to the server. This is the default if the attribute is not specified for buttons associated with a `<form>`, or if the attribute is an empty or invalid value.\n- `button`: The button has no default behavior, and does nothing when pressed by default. It can have client-side scripts listen to the element's events, which are triggered when the events occur.\n\n#### Changed support for wrapped links around Link, Link Pure and Link Social component\nDue to the support for setting links (`<a href=\"#\">`) in our **Link**, **Link Pure** and **Link Social** components as child, we've removed support for styling the anchor tag (`<a>`) when it surrounds the component.\nSo we recommend changing the position of the `<a>` tag from wrapping the component to a direct slot (child) of it.\n\n```diff\n- <a href=\"#\"><p-link>Some label</p-link></a>\n+ <p-link><a href=\"#\">Some label</a></p-link>\n\n- <a href=\"#\"><p-link-pure>Some label</p-link-pure></a>\n+ <p-link-pure><a href=\"#\">Some label</a></p-link-pure>\n\n- <a href=\"#\"><p-link-social>Some label</p-link-social></a>\n+ <p-link-social><a href=\"#\">Some label</a></p-link-social>\n```\n\n#### Automatic * asterisk symbol to form field labels\nWe added an automatic generated * asterisk symbol to form field labels which have the required attribute.\nThis might lead to a doubled * symbol if you set one by yourself.\n\n```diff\n- <p-text-field-wrapper label=\"Some label *\"><input type=\"text\" name=\"some-name\" required /></p-text-field-wrapper>\n+ <p-text-field-wrapper label=\"Some label\"><input type=\"text\" name=\"some-name\" required /></p-text-field-wrapper>\n\n- <p-checkbox-wrapper label=\"Some label *\"><input type=\"checkbox\" name=\"some-name\" required /></p-checkbox-wrapper>\n+ <p-checkbox-wrapper label=\"Some label\"><input type=\"checkbox\" name=\"some-name\" required /></p-checkbox-wrapper>\n\n- <p-radio-button-wrapper label=\"Some label *\"><input type=\"radio\" name=\"some-name\" required /></p-radio-button-wrapper>\n+ <p-radio-button-wrapper label=\"Some label\"><input type=\"radio\" name=\"some-name\" required /></p-radio-button-wrapper>\n\n- <p-radio-button-wrapper label=\"Some label *\"><input type=\"radio\" name=\"some-name\" required /></p-radio-button-wrapper>\n+ <p-radio-button-wrapper label=\"Some label\"><input type=\"radio\" name=\"some-name\" required /></p-radio-button-wrapper>\n\n- <p-textarea-wrapper label=\"Some label *\"><textarea name=\"some-name\" required></textarea></p-textarea-wrapper>\n+ <p-textarea-wrapper label=\"Some label\"><textarea name=\"some-name\" required></textarea></p-textarea-wrapper>\n\n- <p-select-wrapper label=\"Some label *\"><select name=\"some-name\" required><option>A</option></select></p-select-wrapper>\n+ <p-select-wrapper label=\"Some label\"><select name=\"some-name\" required><option>A</option></select></p-select-wrapper>\n```\n\n#### Shadow DOM\n`Flex`, `Flex Item`, `Grid` and `Grid Item` now use Shadow DOM, thus you are not able to overwrite styles defined by these components any longer.\n\n---\n\n## Angular\n\n#### Integration of Angular components\nIn the past it was possible to provide a token called `PREVENT_WEB_COMPONENTS_REGISTRATION` which prevented the registration of the Porsche Design System components and loading of polyfills.\nDue to the fact that we no longer provide / need poly filling, we have completely removed the token.\nFor advanced usage please [read further](https://designsystem.porsche.com/latest/start-coding/angular).\n\n---\n\n## React\n\n#### Integration of React components\nIn the past `@porsche-design-system/components-react` components have initialized the **Porsche Design System Loader** automatically as soon as a component was imported.\nWith `v2.x` you have to import the `PorscheDesignSystemProvider` once in your `index.tsx` which then initializes the **Porsche Design System Loader**, e.g. like:\n```diff\n  // index.tsx\n    \n  import ReactDOM from 'react-dom';\n  import { PorscheDesignSystemProvider } from '@porsche-design-system/components-react';\n  import { App } from './App';\n    \n  ReactDOM.render(\n    <React.StrictMode>\n+     <PorscheDesignSystemProvider>\n        <App />\n+     </PorscheDesignSystemProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n```\nFor advanced usage please [read further](https://designsystem.porsche.com/latest/start-coding/react).\n\n\n#### Jsdom Polyfill for React / Jest / jsdom test automation\nWe removed test mocks for React / Jest / jsdom as Shadow DOM is supported since jsdom v12.2.0.\nInstead, we provide a Jsdom Polyfill (exclusivly for `@porsche-design-system/components-react` package) fixing missing implementation of jsdom which the Porsche Design System relies on.\n**Note:** If your test includes Porsche Design System components, make sure to wrap the component you want to test with a PorscheDesignSystemProvider in order to avoid exceptions.\nFor more information please [read further](https://designsystem.porsche.com/latest/start-coding/react).\n\n---\n\n## Vanilla JS\n\n#### Integration of Vanilla JS components\nWith `v1.x` of the Porsche Design System you've had to copy all needed JS files of `@porsche-design-system/components-js` into your target directory and include the ES5 and ESM loader snippet.\nNow you only need to copy one `index.js` file and initialize the Porsche Design System like in the example below:\n\n```diff\n  <!DOCTYPE html>\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n      <title>Porsche Design System</title>\n-     <script nomodule src=\"PATH/TO/PACKAGE/@porsche-design-system/components-js/dist/porsche-design-system/porsche-design-system.js\"></script>\n-     <script type=\"module\" src=\"PATH/TO/PACKAGE/@porsche-design-system/components-js/dist/porsche-design-system/porsche-design-system.esm.js\"></script>\n+     <script src=\"PATH/TO/PACKAGE/@porsche-design-system/components-js/index.js\"></script>\n    </head>\n    <body>\n+     <script type=\"text/javascript\">\n+       porscheDesignSystem.load();\n+     </script>\n      <p-headline variant=\"headline-1\">Some text</p-headline>\n    </body>\n  </html>\n```\nFor advanced usage please [read further](https://designsystem.porsche.com/latest/start-coding/vanilla-js).\n\n---\n\n### [2.0.0-rc.10] - 2021-04-12\n\n#### Changed\n- `Tabs` and `Tabs Bar` now respect dynamic additions / removals of `p-tabs-item`, `a` and `button` elements. Make sure to update the `activeTabIndex` when mutating elements\n- Improved performance of `Text`, `Button Pure` and `Link Pure` when `size` is not `inherit`\n\n#### Added\n- `Grid` now has a `wrap` and `gutter` property\n- Components (`Grid Item`, `Flex Item`, `Tabs Item` and `Text List Item`) that require a specific parent (`Grid`, `Flex`, `Tabs` and `Text List`) will now throw an error if used without that parent\n\n#### Fixed\n- Visual appearance of `Checkbox Wrapper` and `Radio Button Wrapper` reflect the state of the wrapped `input` element\n\n### [2.0.0-rc.9] - 2021-03-26\n\n#### Added\n- `Button Group` component\n- Fullscreen property for `Modal` on mobile\n\n#### Changed\n- Spacings, heading and sizes of `Modal`\n\n#### Fixed\n- Prevent duplicate loading of `porsche-design-system.v2.x.HASH.js` chunk when using `getComponentChunkLinks()` partial\n\n### [2.0.0-rc.8] - 2021-03-17\n\n#### Added\n- Support for full height `Content Wrapper` with flex \n- `Tabs Bar` now supports `undefined` as `activeTabIndex`\n\n#### Changed\n- `Tabs Bar` has a new default `activeTabIndex`, which is `undefined`\n- `Tabs Bar` does not work by itself anymore. The `activeTabIndex` needs to be controlled from the outside ([read more](https://designsystem.porsche.com/latest/components/tabs-bar/examples))\n- Background Color of `Select Wrapper` in `dark` theme to meet accessibility criteria\n\n### [2.0.0-rc.7] - 2021-03-15\n\n#### Fixed\n- Make shadowed `Flex` and `Grid` work in Firefox + Safari\n\n### [2.0.0-rc.6] - 2021-03-11\n\n#### Changed\n- Make `Grid` and `Grid Item` use Shadow DOM\n- Make `Flex` and `Flex Item` use Shadow DOM\n\n### [2.0.0-rc.5] - 2021-03-09\n\n#### Added\n- Configurable background color of `Content Wrapper`\n- `italic` font-style in `Text` is now overridden with `normal`\n\n#### Fixed\n- Usage of `Select Wrapper` within custom elements\n- A bug that caused `Spinner` to be displayed in a wrong size\n\n### [2.0.0-rc.4] - 2021-03-01\n\n#### Changed\n- Filter of `Select Wrapper` supports substring search\n\n#### Fixed\n- Build error in SSR\n\n### [2.0.0-rc.3] - 2021-02-17\n\n#### Added\n- React: utility function `skipCheckForPorscheDesignSystemProviderDuringTests`\n- React: tree shaking for component wrappers\n\n#### Fixed\n- Angular: error in `Checkbox Wrapper`, `Radio Button Wrapper` and `Text Field Wrapper` when `input[type]` is bound\n\n### [2.0.0-rc.2] - 2021-02-12\n\n#### Added\n- Validate usage of `Checkbox Wrapper`, `Radio Button Wrapper`, `Select Wrapper`, `Text Field Wrapper` and `Textarea Wrapper`\n\n### [2.0.0-rc.1] - 2021-02-04\n\n#### Added\n- Partial function `getComponentChunkLinks()` to preload Porsche Design System Components\n\n#### Changed\n- Added a space before asterisk (`*`) when `input`, `textarea` or `select` have `required` attribute within form wrapper components\n- Renamed partial `getFontLinks()` option from `weight` to `weights`\n\n#### Fixed\n- A bug in `Tabs Bar` where the nextButton was mistakenly rendered.\n- A bug where `Icon` was not rendered when using `lazy` property.\n- A bug in `Text Field Wrapper` with input type password where characters would overlap the icon.\n\n### [2.0.0-rc.0] - 2021-01-29\n\n#### Added\n- Link support for `Marque`\n- Sizing options `'responsive' | 'small' | 'medium'` for `Marque`\n\n#### Changed\n- Angular: added static `load()` function `PorscheDesignSystemModule` for custom prefix\n- Hide up/down spin button when using **Text Field** with `type=\"number\"` in Firefox\n\n#### Fixed\n- Angular: typings \n- React: correct handling of `ref` property\n- Unhandled exception in `Select Wrapper` if `selected` and `disabled` attributes are set on the same option\n- A bug in `Tabs Bar` where scrolling was broken when a tab was selected\n- A bug in `Tabs Bar` where the `nextButton` was always rendered\n\n### [2.0.0-alpha.13] - 2021-01-26\n\n#### Added\n- Partial function `getFontLinks()` to prevent **Flash of Unstyled Text** (FOUT)\n\n#### Fixed\n- React: correct handling of `className` property\n\n### [2.0.0-alpha.12] - 2021-01-20\n\n#### Added\n- Partial function `getInitialStyles()` to prevent **Flash of Unstyled Content** (FOUC)\n- Partial function `getFontFaceStylesheet()` to prevent **Flash of Unstyled Text** (FOUT)\n\n#### Changed\n- React: `PorscheDesignSystemProvider` needs to wrap application\n- React: component props have to be camelCase\n- React: `PorscheDesignSystemProvider` is needed while testing components\n\n#### Fixed\n- React: typings\n- React: support of objects for property values\n\n#### Removed\n- React: `getPrefixedComponents`, prefixing is handled by `PorscheDesignSystemProvider`\n\n### [2.0.0-alpha.11] - 2021-01-08\n\n#### Changed\n- Precision of relative line height\n- Changed color of `neutral contrast low`\n\n### [2.0.0-alpha.10] - 2020-12-14\n\n#### Added\n- `native` property to `Select Wrapper` to force rendering of native Browser select dropdown\n- Extended flexibility of `Headline`\n\n#### Changed\n- Some styling improvements of `Select Wrapper`\n\n#### Fixed\n- Jsdom Polyfill `fetch` error\n\n### [2.0.0-alpha.9] - 2020-12-09\n\n### Fixed\n- Improved reliability of `componentsReady()`\n\n#### Changed\n- Jsdom Polyfill `console.warn` behaviour\n\n### [2.0.0-alpha.8] - 2020-12-03\n\n### Fixed\n- A bug where `Modal` did not remove `overflow=hidden` on document body.\n\n### [2.0.0-alpha.7] - 2020-11-26\n\n#### Added\n- Jsdom Polyfill\n\n#### Removed\n- Jsdom Mocks\n- Global \"blur on focus\" script\n\n#### Changed\n- Default dropdown direction of `SelectWrapper` from `down` to `auto`\n- Made API of `Tabs` consistent with `Tabs Bar`\n- Removed transition for focus styling\n- Use `:focus-visible` as default and `:focus` as fallback for focusable elements\n\n#### Fixed\n- The Selected element of `SelectWrapper` dropdown keeps now in sync with native selection if changed programmatically\n- Invalid search results get cleared if `SelectWrapper` becomes focus state\n- Some bugs in `TabsBar`\n- Minification of dynamic slotted content styles\n- An issue where `Pagination` throws console errors if disconnected from dom.\n\n### [2.0.0-alpha.6] - 2020-10-28\n\n#### Changed\n- default `type` of `Button` and `Button Pure` to `submit`\n\n#### Fixed\n- Typings\n\n### [2.0.0-alpha.5] - 2020-10-26\n\n#### Added\n- `Modal` component\n\n#### Fixed\n- Typing for `pageChange` event of `Pagination` component\n- Typings\n\n#### Changed\n- Focus styling\n\n### [2.0.0-alpha.4] - 2020-10-14\n\n#### Added\n- Custom filter to `Select Wrapper` component\n- DropDown direction property to `Select Wrapper` component\n- Display `*` after label when `input`, `textarea` or `select` have `required` attribute within form wrapper components\n- `Tabs` component\n- `Tabs Bar` component\n- `Banner` component\n\n#### Removed\n- Default `position: relative;` style of `Link Pure` and `Button Pure` \n\n#### Fixed\n- `Spinner` zooming bug on Safari\n\n### [2.0.0-alpha.3] - 2020-09-11\n\n#### Added\n- Support to load assets from China CDN directly via browser flag: `PORSCHE_DESIGN_SYSTEM_CDN = 'cn';`\n\n#### Removed\n- Support for `<a>` wrapped `Link` and `Link Pure`\n\n### [2.0.0-alpha.2] - 2020-08-20\n\n### [2.0.0-alpha.1] - 2020-08-17\n\n#### Changed\n- Removed classnames dependency\n- Stencil Core `taskQueue` from `congestionAsync` to `async` for more performant component rendering\n\n#### Fixed\n- Focus input on label click of `Checkbox Wrapper` and `Radio Button Wrapper`\n\n### [1.5.6] - 2020-10-15\n\n### [1.5.6-rc.0] - 2020-10-13\n\n### Fixed\n- `Spinner` zooming bug on Safari\n\n### [1.5.5] - 2020-09-11\n\n### [1.5.5-rc.0] - 2020-09-07\n\n### Changed\n- Deprecated stencil lifecycle-method `componentDidUnload` to `disconnectedCallback` to fix \"`selectObserver` is undefined\" bug in `Select Wrapper` and `Pagination`\n\n### [1.5.4] - 2020-08-25\n\n### [1.5.4-rc.0] - 2020-08-17\n\n#### Changed\n- Removed classnames dependency\n- Stencil Core `taskQueue` from `congestionAsync` to `async` for more performant component rendering\n\n#### Fixed\n- Focus input on label click of `Checkbox Wrapper` and `Radio Button Wrapper`\n- Fix typings for `orientation` of `Divider` component\n\n### [2.0.0-alpha.0] - 2020-08-06\n\n#### Added\n- **Experimental:** Optional web component scoping mechanism during runtime to enable micro service architecture\n\n#### Changed\n- Web components get lazy loaded from central CDN to improve caching strategy across Porsche's digital eco system\n\n#### Removed\n- Stop browser support for **IE11** and **EdgeHTML**\n\n#### Fixed\n- Mix of `Optgroups` and `Options` on same level in `Select Wrapper` component\n- Fix typings for `orientation` of `Divider` component\n\n### [1.5.3] - 2020-08-10\n\n### [1.5.3-rc.0] - 2020-08-10\n\n#### Fixed\n- Mix of `Optgroups` and `Options` on same level in `Select Wrapper` component\n\n### [1.5.2] - 2020-07-22\n\n#### Fixed\n- Dispatch change event in `Select Wrapper`\n- Stencil react-output-target SSR Bug\n\n### [1.5.1] - 2020-07-20\n\n#### Fixed\n- SVGO settings for icons\n- Angular bug which causes `ngcc` to fail\n\n### [1.5.0] - 2020-07-16\n\n#### Added\n- Icons (active-cabin-ventilation, battery-full, bell, bookmark, car-battery, charging-active, charging-state, climate, climate-control, garage, horn, key, map, parking-brake, parking-light, preheating, send, shopping-bag, sidelights, user-manual, wrenches)\n\n#### Changed\n- Icons (arrow-first, arrow-last, battery-empty, car, card, charging-station, question)\n\n#### Fixed\n- Porsche Marque images\n\n### [1.5.0-rc.2] - 2020-07-06\n\n### [1.5.0-rc.1] - 2020-07-06\n\n#### Added\n- **Notification Neutral** color to `color` property of `p-text` and `p-icon`\n\n### [1.5.0-rc.0] - 2020-06-25\n\n#### Added\n- `Fieldset Wrapper` component\n- Improved SEO of `p-headline` and `p-text`: Added possibility to write semantic HTML tags (e.g. `<h1>-<h6>` or `<p>`, `<blockquote>`, etc.) directly as slotted content.\n- Possibility to include anchor tags directly as slots of `Link`, `Link Pure` and `Link Social` \n- `Text` new `weight` property `semibold`\n- `Button Pure` label with subline pattern as slot\n- `Link Pure` label with subline pattern as slot\n\n#### Changed\n- `Select Wrapper` is now ready for the catwalk. It is dressed now with a custom drop down list box and gets naked by default on touch devices. \n\n#### Fixed\n- Minor accessibility improvements of `icons` and `Text Field`\n- Remove native number spinner buttons of `Text Field` with type text for Firefox\n- An issue with `Button` and `Button Pure` and their `disabled` attribute\n\n### [1.4.0] - 2020-05-14\n\n### [1.4.0-rc.3] - 2020-05-08\n\n#### Added\n- `Text List`\n\n#### Changed\n- Improve caching strategy for fonts by content-based hash\n- Improve caching strategy for marque by content-based hash\n- Dimensions and sharpness of marque\n- Props for `Content Wrapper`\n\n### [1.4.0-rc.2] - 2020-05-06\n\n#### Added\n- `Content Wrapper`\n- Description property to `p-text-field-wrapper`, `p-textarea-wrapper` and `p-select-wrapper`\n- `Link Social`\n\n#### Changed\n- Improve accessibility of error and success states of form elements\n- Aria-invalid attribute of form elements if they are in error state is now managed by component\n- Rename icon name `configure` to `configurate` (prevents breaking change compared to stable v1.3.0)\n- Improve `p-icon` loading behavior\n\n#### Fixed\n- Display of wrong icons\n\n#### Removed\n- `safe-zone` property of `p-grid` (`Content Wrapper` should be used instead)\n\n### [1.4.0-rc.1] - 2020-04-27\n\n#### Added\n- Add `safe-zone` property to `p-grid` for outer grid margin, max-width and centering\n- Submit button with search icon to `p-textfield-wrapper` type search\n- Test-Projects React, Angular, Gatsby and NextJS\n\n#### Changed\n- Background color of readonly state in components `p-textfield-wrapper` and `p-textarea-wrapper`\n- Visual appearance of icons\n- Improve caching strategy for icons by content-based hash\n- Cursor of Radio, Checkbox and Select\n- Fixed naming of Mock from `p-textfield-wrapper` to `p-text-field-wrapper`\n\n#### Fixed\n- Icon loading mechanism\n\n### [1.4.0-rc.0] - 2020-04-09\n\n#### Added\n- SSR support\n\n### [1.3.0] - 2020-04-08\n\n#### Added\n- New headline size `headline-5` to `p-headline`\n- Test Mocks\n\n#### Fixed\n- Text styling of Select component on focus in IE11 and Chrome on Windows 10\n\n### [1.3.0-rc.0] - 2020-04-03\n\n#### Fixed\n- Improve form elements\n\n### [1.2.0] - 2020-03-25\n\n#### Added\n- `Divider`\n- Hover state for form elements\n\n#### Fixed\n- Support label text of form elements for Screen readers\n\n### [1.1.2] - 2020-03-17\n\n#### Changed\n- Notification colors\n\n### [1.1.1] - 2020-03-13\n\n#### Changed\n- Icon of `Checkbox` indeterminate state\n\n### [1.1.0] - 2020-03-11\n\n#### Fixed\n- Minor improvements\n\n### [1.1.0-rc.0] - 2020-03-02\n\n#### Added\n- `Select Wrapper`\n- `Checkbox Wrapper`\n- `Radio Button Wrapper`\n- `Textarea Wrapper`\n\n#### Fixed\n- `Text Field Wrapper` toggle password visibility\n\n### [1.0.3] - 2020-02-13\n\n#### Fixed\n- JS framework compatibility\n\n### [1.1.0-0] - 2020-02-06\n\n#### Added\n- `Text Field Wrapper`\n\n#### Changed\n- Add proper cursor for disabled state for `Button` and `Button Pure`\n\n### [1.0.2] - 2020-02-04\n\n#### Fixed\n- Inheritable styling of slotted content\n\n### [1.0.1] - 2020-01-30\n\n#### Added\n- Clickable area of `Link Pure` and `Button Pure` is optionally configurable by defining padding on host element\n\n### [1.0.0] - 2020-01-28\n\n#### Added\n- Cursor pointer on hover for `Button` and `Button Pure`\n- Line-height gets calculated based on Porsche type-scaling formula automatically for `Text`, `Link Pure` and `Button Pure`\n- Test helper function `componentsReady()` which indicates when lazy loaded components fully have loaded\n\n#### Changed\n- Update CDN asset paths\n- Improve font-weight definitions\n- Rename and optimize neutral colors for `Icon` and `Text`\n\n### [1.0.0-rc.1] - 2019-12-13\n\n#### Added\n- `Headline`\n- `Text`\n- `Marque`\n- `Button`\n- `Button Pure`\n- `Spinner`\n- `Icon`\n- `Flex`\n- `Grid`\n- `Link`\n- `Link Pure`\n- `Pagination`\n- \"Blur on focus\"\n",
      "Sketch Libraries": "# Changelog\n\n## Porsche Design System -  Sketch Library \"Web\"\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n### [Unreleased]\n\n### [2.3.0] - 2021-11-23\n\n#### Added\n\nType | Web Library |\n|---|---|\nComponent | Popover |\nComponent | Toast |\nComponent | Inline-Notification |\n\n#### Changed\n\nType | Web Library |\n|---|---|\nRadio Button | Adjust Wrapper |\nCheckbox | Adjust Wrapper |\nPure Link | Adjust Wrapper |\nBanner | Changed Naming |\n\n### [2.2.1] - 2021-08-03\n\nType | Web Library |\n|---|---|\nComponent | Accordion bug fixes |\n\n#### Added\n\nType | Web Library |\n|---|---|\nComponent | Table |\nComponent | Accordion |\n\n### [2.1.0] - 2021-06-08\n\n#### Added\n\nType | Web Library |\n|---|---|\nComponent | Switch |\n\n#### Changed\n\nType | Web Library |\n|---|---|\nColors | Update Layer Styles with color variables |\n\n### [2.0.3] - 2021-04-16\n\n#### Fixed\n\nType | Web Library |\n|---|---|\nComponent | Improve Modal |\n\n### [2.0.2] - 2021-03-18\n\n#### Fixed\n\nType | Web Library |\n|---|---|\nComponent |  Various bug fixes |\n\n### [2.0.1] - 2021-01-29\n\n# v1 to v2\n\n## Introduction\n\nWe recommend upgrading to v2.\nThis guide includes everything you need to migrate your offering.\n\n## Why you should migrate?\n\n**Adjustments**\n\n- Porsche Next Font with new metrics\n- Surface color for dark theme regarding accessibility criteria\n- Hover/Active color for dark theme regarding accessibility criteria\n- Focus state for light and dark theme\n- Neutral color low for light theme\n- Validation Forms\n\n**New**\n\n- Select Combobox\n- Select for dark theme\n- Banner Notification\n- Modal\n- Notification soft colors for dark theme\n- Tabs and Tabs Bar\n\n## Download Sketch Libraries\n\nHead over to [Start Designing](https://designsystem.porsche.com/v2/start-designing/introduction) to set up the new Sketch libraries.\n\n## Design migration strategy\n\nThe transition cause a major break in the UI.\n\nAsk yourself during the entire visual review and iteration process\n\n- Are you using the new Porsche Next?\n- Are you using the color styles correctly?\n- Is the spacing between components correct?\n- Does the general layout still work?\n\n### Please note\n\nUpgrading to the v2 Library will not automatically change any component created in previous version of the Library. For some Components with Text (like Buttons) you have to “Shrink the element to fit the content” in Overrides and if you have\nline-breaks you can set the “auto-size” Alignment.\n\nWe don’t recommend a piece-by-piece migration of your product in production. Teams should perform the migration first in a separate branch (or branches). This allows the creation of new design specs for any possible rough spots in alignment or sizing that may appear in the UI after upgrading.\n\nMeet with stakeholders from design, OM, and engineering to kick off the migration process.\n\nThe font for Porsche remains Porsche Next. The font metrics was redesigned for better clarity and legibility. Work with your development team to discuss how this new metrics might affect your team’s workflow. [Download the modified Porsche Next](https://cdn.ui.porsche.com/porsche-design-system/font/v2/Porsche_Next_WebOTF_Lat-Gr-Cyr.zip)\n\n## Get help\n\nIf you run into trouble and need support, the Porsche Design System Team is here to help.\nSimply go to our contribution board and [open an issue](https://github.com/porscheui/porsche-design-system-contribution) to get in touch with us.\nWe'll always do our best to answer your questions and connect you with the right people quickly.\n\n#### Added\n\nType | Web Library |\n|---|---|\nComponent | Select Combobox |\nComponent | Select for dark theme |\nComponent | Banner Notification |\nComponent | Modal |\nComponent | Tabs and Tabs Bar |\n\n#### Fixed\n\nType | Web Library |\n|---|---|\nComponent |  Validation Forms |\n\n### [2.0.0] - 2020-08-21\n\n#### Fixed\n\nType | Web Library |\n|---|---|\nComponents |  Update all components regarding font with new metrics |\nComponents |  Improved Button and Link for Viewport 320+ (XS) |\n\n### [1.5.1] - 2020-07-29\n\n#### Fixed\nType | Web Library | \n|---|---|\nComponents | Button, update scalability| \n\n### [1.5.0] - 2020-07-17\n\n#### Added\nType | Web Library | \n|---|---|\nComponents | Select Flyout | \nComponents | Button and Link Pure with Subline | \n\n### [1.4.1] - 2020-05-27\n\n#### Fixed\n\nType | Web Library |\n|---|---|\nComponents | Extended Description text components in Text Field, Textarea and Select |\nComponents |  Update icon size in components |\n\n### [1.4.0] - 2020-05-14\n\n#### Added\n\nType | Web Library |\n|---|---|\nComponents | Text List |\nComponents | Text Field Search |\nComponents | Social Link |\nComponents | Description text component in Text Field, Textarea and Select |\n\n#### Fixed\n\nType | Web Library |\n|---|---|\nComponents | Change icon size in Link & Button in 24 x 24 px  |\nComponents | Background color for Text Field, Textarea and Select  |\n\n### [1.3.0] - 2020-04-08\n\n### [1.2.0] - 2020-03-25\n\n#### Added\n\nType | Web Library |\n|---|---|\nComponents | Password (focus) |\nComponents | Divider |\nComponents | Hover state at form elements |\nComponents | Focus symbol in Textarea, Text Field, Select and Password |\n\n#### Fixed\n\nType | Web Library |\n|---|---|\nComponents | Icon pinned in password Text Field  |\n\n### [1.1.1] - 2020-03-17\n\n#### Changed\n\nType | Web Library |\n|---|---|\nComponents | Update text style for error and success |\n\n### [1.1.0] - 2020-03-11\n\n#### Added\n\nType | Web Library |\n|---|---|\nComponents | `Checkbox` `Radio Button` `Select` `Text Field` `Textarea` |\nLayer Styles | Layer styles for form components |\n\n### [1.0.3] - 2020-02-28\n\n#### Fixed\n- Various structural bugfixes \n\n### [1.0.2] - 2020-02-19\n\n#### Fixed\n- Various structural bugfixes \n\n### [1.0.1] - 2020-02-07\n\n#### Fixed\n- Various structural bugfixes \n\n### [1.0.0] - 2020-01-28\n\n#### Added\n- Text style for neutral color in Light and Dark Theme\n- Line-height is calculated automatically based on Porsche type scaling formula for Text, Link Pure and Button Pure\n\n#### Changed\n- Stylistic adjustment of the Icons\n- Renaming and optimization of neutral colors for Icon and Text\n\n### [1.0.0-rc.1] - 2019-12-13\n\n#### Added\n\nType | Web Library |\n|---|---|\nComponents | `Headline`  `Icon` `Marque` `Text` |\n\n# Changelog\n\n## Porsche Design System -  Sketch Library \"Basic\"\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n### [Unreleased]\n\n### [2.2.1] - 2021-11-16\n\n#### Changed\n\nType | Basic Library |\n|---|---|\nIcon | Color variables |\n\n### [2.2.0] - 2021-11-12\n\n#### Added\n\nType | Basic Library |\n|---|---|\nIcon | Success icon added\n\n### [2.1.0] - 2021-06-08\n\n#### Added\n\nType | Basic Library |\n|---|---|\nColor | Add color variables\n\n#### Changed\n\nType | Basic Library |\n|---|---|\nColors | Update Layer Styles with color variables |\n\n### [2.0.1] - 2021-01-29\n\n#### Added\n\nType | Basic Library |\n|---|---|\nIcons | Add new Icons |\nColor | Notification soft colors for dark theme |\n\n#### Changed\n\nType | Basic Library |\n|---|---|\nFont |  Porsche Next Font with new metrics |\nColor |  Surface color for dark theme regarding accessibility criteria  |\nColor |  Hover/Active color for dark theme regarding accessibility criteria  |\nColor |  Focus state for light and dark theme  |\n\n### [2.0.0] - 2020-08-21\n\n#### Fixed\n\nType | Basic Library |\n|---|---|\nFont |  Update font with new metrics |\n\n### [1.5.0] - 2020-07-17\n\n#### Added\n\nType | Basic Library |\n|---|---|\nColor |  Translucent background color for overlays (\"Background Shading\") |\nColor | Neutral notification color |\nColor | Background soft for notification colors |\nIcons | Add new Icons | \n\n#### Fixed\n\nType | Basic Library |\n|---|---|\nBasic |  Visual issues in Porsche Marque and update of Sketch components and assets  |\nIcons | Various Icon optimizations |\n\n### [1.4.1] - 2020-05-27\n\n#### Fixed\n\nType | Basic Library |\n|---|---|\nComponents | Various structural bugfixes |\n\n### [1.4.0] - 2020-05-14\n\n#### Added\n\nType | Basic Library |\n|---|---|\nComponents | Google Icon |\n\n#### Fixed\n\nType | Basic Library |\n|---|---|\nComponents | Icon optimization to base size 24 x 24 px |\nComponents | Optimization size of the Porsche Marque |\n\n### [1.3.0] - 2020-04-08\n\n#### Added\n\nType | Basic Library |\n|---|---|\nText Styles | Headline 5 |\n\n### [1.2.0] - 2020-03-25\n\n### [1.1.1] - 2020-03-17\n\n#### Added\n    \nType | Basic Library |\n|---|---|\nComponents | Text style warning for copytext small and x-small |\n\n#### Changed\n\nType | Basic Library |\n|---|---|\nBasic | Update notification colors for light and dark theme |\nBasic | Update sketch color palette |\n\n### [1.1.0] - 2020-03-11\n\n#### Added\n\nType | Basic Library |\n|---|---|\nText Styles | Text styles for error and success |\n\n### [1.0.3] - 2020-02-28\n\n#### Fixed\n- Various structural bugfixes \n\n### [1.0.2] - 2020-02-19\n\n#### Fixed\n- Various structural bugfixes \n\n### [1.0.1] - 2020-02-07\n\n#### Fixed\n- Various structural bugfixes \n\n### [1.0.0] - 2020-01-28\n\n#### Added\n- Text style for neutral color in Light and Dark Theme\n- Line-height is calculated automatically based on Porsche type scaling formula for Text, Link Pure and Button Pure\n\n#### Changed\n- Stylistic adjustment of the Icons\n- Renaming and optimization of neutral colors for Icon and Text\n\n### [1.0.0-rc.1] - 2019-12-13\n\n#### Added\n\nType | Basic Library |\n|---|---|\nComponents | `Button` `Button Pure` `Flex` `Grid` `Link` `Link Pure` `Pagination` `Spinner` |\n",
      "Utilities": "# Changelog\n \n## Porsche Design System - Utilities\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n### [Unreleased]\n\n### [5.3.0-beta.0] - 2021-12-07\n\n#### Added\n**Disclaimer:** The provided theme `light-electric` is just a proof of concept, it's **not** accessible regarding its color contrast and might even be removed in an upcoming major release again.\n- Theme `light-electric`\n\n### [5.2.0] - 2021-11-30\n\n#### Changed\n- Use `Heiti SC` (pre-installed on iOS/macOS) and `SimHei` (pre-installed on Windows) as Chinese fallback for `font-family`\n\n### [5.1.0] - 2021-10-04\n\n#### Added\n- External brand colors: `kakaotalk`, `naver`, `reddit` and `tiktok`\n- Global screen reader only styles to hide contents visually but grant access for screen readers.\n- `SimHei` and `黑体` as fallback for `font-family`\n\n### [5.0.0] - 2021-08-12\n\n#### Changed\n- Introduce breaking change: Slash as Division. https://sass-lang.com/documentation/breaking-changes/slash-div\n\n### [4.1.0] - 2021-07-01\n\n#### Added\n- Export `Breakpoint` type\n\n### [4.0.0] - 2020-12-17\n\n#### Changed\n- Precision of relative line height\n- Color of `neutral contrast low` from `#C9CACB` to `#E3E4E5`\n\n### [3.0.0] - 2020-11-26\n\n#### Added\n- `:focus` SCSS mixin and JS function\n- Support to load `font-face.css` from China CDN directly via browser flag: `PORSCHE_DESIGN_SYSTEM_CDN = 'cn';`\n- **Notification Soft** colors\n\n#### Changed\n- Background surface and hover/active state colors for dark theme\n- Global focus colors\n\n### [2.0.0] - 2020-08-19\n\n### [2.0.0-rc.0] - 2020-08-17\n\n#### Changed\n- `FONT_FACE_CDN_URL` with changed UPM (units per em): different character size, letter spacing and vertical alignment\n\n### [1.1.0] - 2020-08-12\n\n### [1.1.0-rc.0] - 2020-08-12\n\n#### Changed\n- Generate typography.ts static\n- Deprecated `FONT_FACE_STYLE_CDN_URL`, use `FONT_FACE_CDN_URL` instead\n\n### [1.0.6] - 2020-07-28\n\n### [1.0.6-rc.0] - 2020-07-28\n\n#### Changed\n- Use rollup to build / bundle package\n\n### [1.0.5] - 2020-07-27\n\n#### Fixed\n- Package content\n- Import of scss\n\n### [1.0.5-rc.1] - 2020-07-27\n\n#### Fixed\n- Package content\n\n### [1.0.5-rc.0] - 2020-07-27\n\n#### Fixed\n- Package content\n\n### [1.0.4] - 2020-07-27\n\n#### Fixed\n- Package content\n\n### [1.0.3] - 2020-07-27\n\n#### Fixed\n- Package content\n\n### [1.0.2] - 2020-07-24\n\n#### Fixed\n- Pipeline output of package\n\n### [1.0.1] - 2020-07-22\n\n#### Fixed\n- Added dependency CSS Types\n\n### [1.0.0] - 2020-07-15\n\n#### Added\n- **Notification Neutral** color\n- **Background Shading** color for overlays\n\n### [1.0.0-rc.0] - 2020-06-18\n\n#### Added\n- Initial release",
      "Assets": "# Changelog\n \n## Porsche Design System - Assets\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n### [Unreleased]\n\n#### Added\n- `EMAIL_CDN_BASE_URL` and `EMAIL_MANIFEST`\n\n#### Changed\n- Structure of `MARQUES_MANIFEST` because of newly added `webp` images\n\n### [4.0.0] - 2021-06-11\n\n#### Fixed\n- Use correct icon for `arrow-last` and `arrow-first`\n\n### [3.2.0] - 2021-05-18\n\n#### Changed\n- Remove IE11 `focusable=\"false\"` workaround from Icons\n\n### [3.1.0] - 2020-12-02\n\n### Added\n- Icon **menu-dots-vertical**\n\n### [3.0.0] - 2020-09-11\n\n#### Changed\n- Rename `METAICONS_CDN_BASE_URL` to `META_ICONS_CDN_BASE_URL`\n- Rename `METAICONS_MANIFEST` to `META_ICONS_MANIFEST`\n\n### [2.0.0] - 2020-08-19\n\n### [2.0.0-rc.0] - 2020-08-17\n\n#### Changed\n- Font UPM (units per em): different character size, letter spacing and vertical alignment\n\n### [1.2.1] - 2020-08-13\n\n### [1.2.1-rc.0] - 2020-08-13\n\n#### Fixed\n- Installation of package via npm\n\n### [1.2.0] - 2020-08-12\n\n#### Added\n- FONT_FACE_CDN_URL\n\n### [1.1.0] - 2020-08-07\n\n#### Added\n- Meta Icons manifest and CDN URLs\n\n### [1.0.0] - 2020-07-17\n\n#### Added\n- Initial release\n",
      "Browser Notification": "# Changelog\n \n## Porsche Browser Notification\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n### [Unreleased]\n\n### [4.0.0] - 2021-11-30\n\nThis major release is relevant as of `Porsche Design System v2.7.0`\n\n#### Changed\n- Remove `ResizeObserver` requirement \n\n### [3.0.0] - 2021-10-21\n\nThis major release is relevant as of `Porsche Design System v2.3.0`\n\n#### Changed\n- Extended feature detection of `includeOverlay()` with `ResizeObserver`, `IntersectionObserver` and `MutationObserver` to cover **critical** browser technologies used by the Porsche Design System\n\n### [2.0.0] - 2021-01-07\n\n### [2.0.0-rc.1] - 2021-01-07\n\n#### Fixed\n- Browser detection of `includeBanner()`\n\n### [2.0.0-rc.0] - 2021-01-07\n\n#### Removed\n– Universal `include()` script, use `includeBanner()` or `includeOverlay()` instead\n\n### [1.0.0] - 2020-11-26\n\n#### Added\n- Translations for `ko, cs, da, et, fi, lt, lv, no, sl, sv, tr, uk`\n\n### [1.0.0-rc.1] - 2020-10-06\n\n#### Fixed\n- Overflowing text on mobile device for overlay\n\n### [1.0.0-rc.0] - 2020-10-05\n\n#### Added\n- Initial release\n"
    },
    "Versioning": "# Versioning\n\nWe value stability and transparency. Thus we strive to ensure that our reusable components, Sketch Libraries and familiar practices don't become obsolete often and unexpectedly.\n\n## General information\nThe Porsche Design System components and Sketch Libraries are released separately following [semantic versioning](http://semver.org/) whereby the numbers indicate the level of changes that are introduced. It should help you understand and plan the potential impact of updating.\n\nMAJOR.MINOR.PATCH e.g. v1.0.1\n* **Major** (X.y.z) (breaking) changes in code or design, removal or renaming of existing features that require updates or refactorings within the application\n* **Minor** (x.Y.z) new feature (packages) in code or design\n* **Patch** (x.y.Z) bug fixes or structure optimisation\n\n## Release planning\nWe try to release with a regular schedule to enable the planning of updates. A major release every 6 months in summer and winter, and up to 3 minor releases for each major release.\n\n## Deprecation and maintenance rules\nWe work hard to minimize the number of breaking changes and provide migration paths. But of course, sometimes major releases are necessary.  \n\nIn general, we will mark removed, renamed or changed interfaces or elements as deprecated for one major release cycle before we will delete them. Updates must be scheduled and integrated within 6 months.  \n\nWe try to keep our major releases as easy to update as possible. Thus we only provide bug fixes for the latest major release. Support for older major releases is stopped as soon as a new one is released.  \nIn comparison to the component releases, the Sketch Libraries will only be provided as major versions to download without deprecated elements and bug fix support for outdated versions.\n",
    "Roadmap": "# Roadmap \nThe roadmap for the Porsche Design System represents the chronological prioritization of the milestones and the backlog of enhancements we are working on. It is no delivery commitment as it may be changed based on teams needs, feedback and new requirements.\n\nMore details about the actual backlog and work in progress can be found in our project board:  \n[Open Design System Board on GitHub (permission required)](https://github.com/porscheui/porsche-design-system/projects)\n\n## Milestones in Progress\nLegend: ✅ Completed\n\n### Platforms\n* Finalize UX platform\n* Migrate generic content from Design System- to UX platform\n* Optimize icon workflow\n* Consolidate published npm packages\n* Enable search feature for Design System- and UX platform\n\n### Generic components\n* Switch ✅\n* Data Table ✅\n* Accordion ✅\n* Toast\n* Progress Indicator\n* Tooltip\n\n### Loading Behavior\n* Improve Loading of layout components\n* Skeleton Loading\n* Re-enable SSR support ✅\n\n### UXPin\n* Optimize Components for UXPin ✅\n* Enable Design System for UXPin ✅\n\n---\n\n## Milestones Completed and Released\nLegend: ✅ Completed\n\n### Version 2.0 Stable\n* 2.0 stable release ✅\n* Adjust CDN security settings ✅\n* 2.0 RC release ✅\n* Improve CDN settings and China delivery ✅\n* Move components to CDN ✅\n* Extend optional runtime scoping mechanism of Web Components ✅\n* Change Design System loader configuration ✅\n* Improved Porsche Next Font ✅\n\n### Browser Compatibility\n* Browser Notification Overlay (v2) ✅ \n* New languages for Browser Notification ✅\n* Change Browser Compatibility & Documentation ✅\n* Provide Browser Notification Banner (v1) ✅\n\n### Generic Components\n* Tabs ✅ \n* Combobox (Extended Select) ✅ \n* Banner ✅ \n* Modal ✅\n\n### Patterns\n* Offer Form Validation Pattern ✅\n* Update Button Pattern ✅\n\n### Assets Package: Marque, Icons and Font refinement \n* Favicon and Touch Icons ✅\n* Marque Refinement ✅\n* Provide CSS Font-Face definitions ✅\n* Refine Basic Icon Set ✅\n\n### Loading Behavior/FOUC/SSR\n* Spike: Challenge Web Components regarding loading behaviour, Flash of Unstyled Content and Server-Side Rendering ✅\n* Integration example of web components to avoid FOUC/FOUT ✅\n\n### Capabilities and Testing\n* Enable React testing with Jest and JSDOM ✅\n* Setup sample integration projects for Angular/React/Gatsby/NextJS ✅\n* Enable SSR support for NextJS and Gatsby ✅\n\n### Patterns\n* Offer pre-build form patterns ✅\n* Offer pre-build button and link patterns ✅\n\n### Basic Components\n* Release Text List component ✅\n* Release Form Fieldset component ✅\n* Release Button Social component ✅\n* Release Divider component ✅\n\n### Icon Enhancement\n* Refine existing icons ✅\n* Add new icons for Porsche Product App ✅\n\n### Form Elements\n* Release Form components: Text Field, Textarea, Select, Checkbox, Radio Button ✅\n\n### Release 1.0 Stable\n* Stable Sketch library without plugin dependencies (replacement of Anima plugin with native Smart Layout functions) ✅\n* Refactoring of component APIs (events, objects, inherits) ✅\n* Refinement of design basics and utils (text, spacings and colors) ✅\n* Refinement of font handling including introduction of SemiBold font weight for headlines ✅\n* Refinement of focus states ✅\n* Ensuring stabilization and performance of packages and pipeline ✅\n* Icon refinement for 1.0 stable ✅\n* Enhance test covering of existing components ✅\n* Enhance storefront tests ✅\n* Establish automated cross browser testing (including IE11) ✅\n\n### 1.0 Alpha release\n* Auto generation of Angular and React components ✅\n* Finalize marque component ✅\n* Refactor packages for Alpha 1.0 release including documentation ✅\n* Alpha 1.0 release ✅\n\n### Launch Porsche Icon Collection\n* Release icon collection 1.0 alpha ✅\n\n### Setup Porsche Design System CDN\n- Setup Porsche Design System CDN ✅\n- Host and Manage Assets Icons, Porsche crest and fonts ✅\n\n### Finalize the style foundations\n- Color styles ✅\n- Layout (Flex, Grid) and Spacings ✅\n- Typography Styles ✅\n- Consolidate current icon collection ✅\n- Form patterns and elements research ✅\n- Typography research and testing ✅\n\n### Web Component Preparation\n- Spike StencilJS and interview consumers ✅\n- Foundation preparation ✅\n- Rebuild and launch Storefront React as Vue application ✅\n\n### Development of components for 1.0 alpha release\n- Typography (Text and Headline) ✅\n- Button Regular ✅\n- Button Icon ✅\n- Spinner ✅\n- Various form element components for testing purpose ✅\n\n### Setup infrastructure and toolchain for 1.0 release\n- Setup Open Design Tools and Processes (Abstract) ✅\n- Provide versioned Design Libraries Basic and Web ✅\n- Design and develop first release of the Design System Storefront ✅\n- Setup code distribution infrastructure (NPM Registry) ✅\n- Setup development and contribution infrastructure (GitHub, CI/CD) ✅\n- Define User- and Access-Management ✅\n\n### Collaboration and Communication \n- Define Issue Management internal/external (GitHub) ✅\n- Define and document Contribution Workflow ✅\n- Publish usage and contribution guidelines ✅\n- Publish FAQs based on community feedback ✅\n- Setup communication channels (Email, Slack) and ressources ✅\n"
  },
  "Components": {
    "Accordion": {
      "Examples": "# Accordion\n\nThe `p-accordion` is a component that reveals or hides associated sections of content.  \nAccordions are flexible in the context and can include other components of the Porsche Design System.\n\nIt is a controlled component.\nThis means it does not contain any internal state, and you got full control over its behavior.\n\n<p-inline-notification heading=\"Important note\" state=\"warning\" persistent=\"true\">\n  This component uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\" target=\"_blank\">ResizeObserver</a> API internally which isn't available in all browsers.<br>\n  If your browser does not support the ResizeObserver, a fallback is used, which might be not as performant.  \n  See <a href=\"https://caniuse.com/resizeobserver\" target=\"_blank\">caniuse.com</a> for more details on browser support.  \n</p-inline-notification>\n\n## Basic example\n\n<Playground :frameworkMarkup=\"codeExample\" :config=\"config\" :markup=\"basic\"></Playground>\n\nThe accordion width is 100% of the parent container.\nWe do strongly advise you to not use the full display width, as this will quickly result in a loss of context.\nParent containers with a maximum width of `800px` are recommended.\n\n### Headline Tag\n\nThe `tag` property needs to be set in order for the accordion to fit into the outline of the page. If there is no `tag` property provided, it defaults to `h2`.\nFor instance our example accordions use heading level 3 because they are contained in sections titled with a level 2 heading.\n\n---\n\n## Size\n\n<Playground :markup=\"sizeMarkup\" :config=\"config\">\n  <select v-model=\"size\">\n    <option disabled>Select size</option>\n    <option value=\"small\">Small</option>\n    <option value=\"medium\">Medium</option>\n    <option value=\"responsive\">Responsive</option>\n  </select>\n</Playground>\n\n---\n\n## Slotted heading\nSometimes it's useful to be able to render markup for `heading`. Therefore, a named slot can be used. Make sure **not** to define\nthe corresponding property on the host element when a named slot is used (because a property definition is preferred over a named slot).\n\nPlease **refrain** from using any other than text content as slotted markup.\n\n<Playground :markup=\"slottedMarkup\" :config=\"config\"></Playground>\n\n---\n\n## Compact\n\nBy setting `compact` to `true` you can have a more compact accordion.\nIt removes the borders and reduces the spacings.\n\nBe aware, that the `size` property will be ignored when `compact` is set to `true`.\nWe recommend using the property in case you need a side-navigation with an accordion like behavior.\n\n<Playground :markup=\"compactMarkup\" :config=\"config\"></Playground>\n\n---\n\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\nimport { getAccordionCodeSamples } from '@porsche-design-system/shared';\n  \n@Component\nexport default class Code extends Vue {\n  config = { themeable: true };\n\n  codeExample = getAccordionCodeSamples();\n\n  size = 'small';\n  content= `<p-text>\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat,\n    sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\n  </p-text>`;\n    \n  get basic() {      \n    return `<p-accordion heading=\"Some Heading\" tag=\"h3\">\n  ${this.content}\n</p-accordion>\n<p-accordion heading=\"Some Heading\" tag=\"h3\">\n  ${this.content}\n</p-accordion>`;\n    }\n  \n  get sizeMarkup() {\n    return `<p-accordion heading=\"Some Heading\" tag=\"h3\" ${this.size  === 'responsive' ? `size=\"{ base:'small', l:'medium' }\"`: `size=\"${this.size}\"`}>\n  ${this.content}\n</p-accordion>\n<p-accordion heading=\"Some Heading\" tag=\"h3\" ${this.size  === 'responsive' ? `size=\"{ base:'small', l:'medium' }\"`: `size=\"${this.size}\"`}>\n  ${this.content}\n</p-accordion>`;\n    }  \n\n  get slottedMarkup(){\n    return `<p-accordion tag=\"h3\">\n  <span slot=\"heading\">Some slotted heading</span>\n  ${this.content}\n</p-accordion>\n<p-accordion tag=\"h3\">\n  <span slot=\"heading\">Some slotted heading</span>\n  ${this.content}\n</p-accordion>`;\n    }\n\n  get compactMarkup() {      \n    return `<div style=\"max-width: 400px\">\n  <p-accordion heading=\"Some Heading\" tag=\"h3\" compact=\"true\">\n    <p-link-pure href=\"https://www.porsche.com\" icon=\"none\">Some label</p-link-pure>\n  </p-accordion>\n  <p-accordion heading=\"Some Heading\" tag=\"h3\" compact=\"true\">\n    <p-link-pure href=\"https://www.porsche.com\" icon=\"none\">Some label</p-link-pure>\n  </p-accordion>\n</div>`;\n    }\n \n  mounted() {\n    /* initially update accordion with open attribute in playground */\n    this.registerEvents();\n  \n    /* theme switch needs to register event listeners again */\n    const themeTabs = this.$el.querySelectorAll('.playground > p-tabs-bar');\n    themeTabs.forEach(tab => tab.addEventListener('tabChange', () => {\n      this.registerEvents();\n    }));\n  }\n  \n  updated(){\n    this.registerEvents();\n  }\n  \n  registerEvents() {\n    const accordions = this.$el.querySelectorAll('.playground .demo p-accordion');\n    accordions.forEach(accordionEl => accordionEl.addEventListener('accordionChange', (e) => (e.target.open = e.detail.open)));\n  }\n}\n</script>\n",
      "Usage": "# Accordion\n \n## When to use\n \n- When you want to show additional information that isn't crucial for the user to proceed their journey.\n- To shorten pages and reduce scrolling.\n- When space is at a rare and long content can't be displayed all at once (for example mobile or sidebars).\n- To organize various information in one place.\n- Amount of accordions is more than two.\n \n---\n \n## Properties\n \nTo ensure a seamless UX in all Porsche web applications it is recommended to use the accordion as follows:\n \n| Size | Usage |\n|----|----|\n| Small (default) | Use in casual occasions with a uni color background. |\n| Medium | Use whenever there is the need to highlight the accordion. |\n\n| Heading | Usage |\n|----|----|\n| Slotted | Only use when it is necessary to render the heading dynamically e.g. in different languages. |\n \n| Compact | Usage |\n|----|----|\n| false (default) | Use when to display copy, images, links. |\n| true | Use to group several links in different accordions. |\n \n \n## Behavior\n \n### Heading\n\nThe heading stays the same and does not change for collapsed or expanded state of the accordion. Customization of the heading like links, \nadditional icons or any styling is **not** allowed. It is recommended to keep the heading short & descriptive.\n \n### Content Type\nContent within an accordion should be short and easy to perceive with less interaction options. An accordion can contain copies, links, images.\nElements should be arranged with the `p-grid` component. All content should be additional information that isn't crucial for the user journey, or \nthe goals to achieve. We do not recommend to place widgets or complex interaction tasks within an accordion.\n \n### Width & Height\nTo ensure that the heading, and the icon are perceived as a visual group (Law of proximity), we recommend not stretching the component over the \nentire viewport. To ensure a good readability of copy please use not more than approximately 80 characters per line. Please find more information in \nthe [Typography guideline](components/typography). The height of an accordion results from the content within the component.\n\n\n## Usage\n \n### Open State\nBy default, the component is collapsed and should be opened when the user clicks on the accordion. If necessary, only one accordion can be rendered open.\n \n### Control\nWe recommend leaving the control to the user to open more accordions at once e.g. to compare content. Carefully consider when you want \nto bring in functionality that affects multiple accordions. Collapsing one or more accordions while expanding a different one could disrupt the user.\n \n### Scrolling\nWhen the accordion content is longer than the viewport the whole page should scroll vertically. Content should not be scrollable within\nan individual accordion, neither vertically nor horizontally!",
      "Props": "# Accordion\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type Size = 'small' | 'medium'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property  | Attribute | Description                                                                         | Type                                                                                                                                                                                                        | Default     |\n| --------- | --------- | ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| `compact` | `compact` | Displays the Accordion as compact version with thinner border and smaller paddings. | `boolean`                                                                                                                                                                                                   | `undefined` |\n| `heading` | `heading` | Defines the heading used in accordion.                                              | `string`                                                                                                                                                                                                    | `undefined` |\n| `open`    | `open`    | Defines if accordion is open.                                                       | `boolean`                                                                                                                                                                                                   | `undefined` |\n| `size`    | `size`    | The text size.                                                                      | `'small'` <br>` 'medium'` <br>` BreakpointCustomizable<Size>` | `'small'`   |\n| `tag`     | `tag`     | Sets a headline tag, so it fits correctly within the outline of the page.           | `'h1'` <br>` 'h2'` <br>` 'h3'` <br>` 'h4'` <br>` 'h5'` <br>` 'h6'`                                                                                                                                                              | `'h2'`      |\n| `theme`   | `theme`   | Adapts the color when used on dark background.                                      | `'dark'` <br>` 'light'` <br>` 'light-electric'`                                                                                                                                                                     | `'light'`   |\n\n\n## Events\n\n| Event             | Description                              | Type                              |\n| ----------------- | ---------------------------------------- | --------------------------------- |\n| `accordionChange` | Emitted when accordion state is changed. | `CustomEvent<{ open: boolean; }>` |\n"
    },
    "Banner": "# Banner\n\nDocumentation for Banner has moved.\n\n<p-link href=\"components/notifications/banner\">Go to Notification > Banner documentation</p-link>\n\nAlso have a look at the newly introduced Notification decision tree.\n\n<p-link href=\"components/notifications/usage\">Go to Notification decision tree</p-link>",
    "Button": {
      "Examples": "# Button\n\nThe `p-button` component is essential for performing form or **interaction** events. \nFor an optimal user guidance and dedicated pursuit of business or sales goals, different types of Buttons (**Primary**, **Secondary**, **Tertiary**) are available for usage. \nA Button can be used with or without a label but it's recommended to keep the **label visible** for better **usability** whenever possible. \nWhen used without a label, it is mandatory for **accessibility** to provide a descriptive label text for screen readers. \nWhenever you want to provide navigational elements, stick to the [Link](components/link) component instead.\n\n## Variants\n\nChoose between predefined styling variants.\n\n### Primary\n\n<Playground :markup=\"primary\" :config=\"config\"></Playground>\n\n### Secondary (default)\n\n<Playground :markup=\"secondary\" :config=\"config\"></Playground>\n\n### Tertiary\n\n<Playground :markup=\"tertiary\" :config=\"config\"></Playground>\n\n### Responsive\n\n<Playground :markup=\"responsive\" :config=\"config\"></Playground>\n\n### ARIA attributes and states \n\nThrough the `aria` property you have the possibility to provide additional **ARIA** attributes and states to the component. \n<Playground :markup=\"accessibility\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\n* Make sure to provide **descriptive**, self explaining **labels** which could be understood without context. If short labels are used like **\"OK\"** make sure to provide additional textual contents through **ARIA** with the `aria` property to expose a more descriptive experience to screen reader users.\n* If implementing the Button with a **hidden label** (`hide-label=\"true\"`), do not omit the label. Providing a **descriptive text** to support **screen reader** users is **mandatory**.\n* In general, you should **prevent** using the `disabled=\"true\"` state. Disabled elements are not reachable (focusable) anymore and can be missed by screen reader users. They can be confusing for sighted users as well by not pointing out why these elements are disabled.\n\n---\n\n## Button with specific icon\nIf another icon needs to be implemented, just replace the default icon with another predefined icon. Per default, all icons are fetched from the Porsche Design System CDN. Just choose an icon name from the `icon` property. If you need to link to another icon hosted somewhere else, just set the whole icon path to the `iconSource` prop.\n\n<Playground :markup=\"icon\" :config=\"config\"></Playground>\n\n---\n\n## Bind events to the Button\nYou can use native `click`, `focus`, `focusin`, `blur` and `focusout` events on the button.\n\n<Playground :markup=\"events\" :config=\"config\"></Playground>\n\n---\n\n## Remove Button from tab order\nWith setting the `tabbable` property to `false` you can remove the button from the tab order. For technical restrictions it's currently not possible to set an individual `tabindex` attribute.\n\n<Playground :markup=\"taborder\" :config=\"config\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true, spacing: 'inline' };\n    \n    primary = \n`<p-button variant=\"primary\">Some label</p-button>\n<p-button variant=\"primary\" disabled>Some label</p-button>\n<p-button variant=\"primary\" loading>Some label</p-button>\n<br>\n<p-button variant=\"primary\" hide-label=\"true\">Some label</p-button>\n<p-button variant=\"primary\" hide-label=\"true\" disabled>Some label</p-button>\n<p-button variant=\"primary\" hide-label=\"true\" loading>Some label</p-button>`;\n  \n    secondary = \n`<p-button>Some label</p-button>\n<p-button disabled=\"true\">Some label</p-button>\n<p-button loading=\"true\">Some label</p-button>\n<br>\n<p-button hide-label=\"true\">Some label</p-button>\n<p-button hide-label=\"true\" disabled>Some label</p-button>\n<p-button hide-label=\"true\" loading>Some label</p-button>`;\n\n    tertiary = \n`<p-button variant=\"tertiary\">Some label</p-button>\n<p-button variant=\"tertiary\" disabled=\"true\">Some label</p-button>\n<p-button variant=\"tertiary\" loading=\"true\">Some label</p-button>\n<br>\n<p-button variant=\"tertiary\" hide-label=\"true\">Some label</p-button>\n<p-button variant=\"tertiary\" hide-label=\"true\" disabled>Some label</p-button>\n<p-button variant=\"tertiary\" hide-label=\"true\" loading>Some label</p-button>`;\n\n    responsive =\n`<p-button variant=\"primary\" hide-label=\"{ base: true, s: false }\">Some label</p-button>\n<p-button variant=\"secondary\" hide-label=\"{ base: true, m: false }\">Some label</p-button>\n<p-button variant=\"tertiary\" hide-label=\"{ base: true, l: false }\">Some label</p-button>`;\n\n    accessibility = \n`<p-button aria=\"{ 'aria-label': 'Some more descriptive label' }\">Some label</p-button>`;\n\n    icon =\n`<p-button icon=\"delete\">Some label</p-button>\n<p-button icon-source=\"${require('./assets/icon-custom-kaixin.svg')}\" hide-label=\"true\">Some label</p-button>`;\n\n    events =\n`<p-button\n  onclick=\"alert('click')\"\n  onfocus=\"console.log('focus')\"\n  onfocusin=\"console.log('focusin')\"\n  onblur=\"console.log('blur')\"\n  onfocusout=\"console.log('focusout')\"\n>Some label</p-button>`;\n    \n    taborder =\n`<p-button tabbable=\"true\">Some label</p-button>\n<p-button tabbable=\"false\" hide-label=\"true\">Some label</p-button>`;\n  }\n</script>",
      "Usage": "# Button\n\n## When to use\n  • Use a Button to enable to execute an action (like \"submit\", \"delete\", \"add\" or \"edit\").   \n  • Use a Button to change the state of an application, which almost always happens on the same page. \n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Button as follows\n\n| Type | Usage |\n|----|----|\n| Primary | The Button filled with the Porsche brand color. This type is only to be used for one or two first priority actions within a page in order to give the user optimal guidance. |\n| Secondary | Default button with monochrome color fill. To be used for all other stand-alone Buttons that aren't high priority. |\n| Tertiary | An \"outline only\" version of the Porsche Button. In hierarchy it is always subordinated to the filled views and can be used in two different cases: 1. In combination with a filled Button (Primary or Secondary), for example in popular pairings such as \"submit\" (Primary or Secondary) and \"cancel\" (Tertiary). 2. Stand-alone, when the priority of the action is lower compared to all other Button actions within this page. |\n\n| Variant |   |\n|----|----|\n| Icon and text | This should be the variant of your choice whenever possible, as icons should preferably always be paired with text for better comprehensibility and accessibility. The length of the Button always adapts to the length of the text label. |\n| Icon only| This variant contains an icon only with no further text information. It is highly recommended to use it only in cases where the user is fully aware of the button function. This can be ensured e.g. by using an expressive icon or by logical composition with other components. |\n\n\n\n## Usage\n\n### Standard icons\nThe default icon is an arrow right that should serve in most cases. It should be changed only if it is ensured that another symbol is more appropriate to support the text content, making it easier for the user to understand the function quickly. For example:\n\n| Interaction | Icon | Example |\n|----|----|----|\n| Close | <p-icon name=\"close\" aria-label=\"Close\"></p-icon> | Close a current page or window. |\n| Cancel | <p-icon name=\"close\" aria-label=\"Close\"></p-icon> | Abandoning a process. |\n| Delete | <p-icon name=\"delete\" aria-label=\"Delete\"></p-icon> | Delete/erase content, e.g. a list item. | \n| Edit | <p-icon name=\"edit\" aria-label=\"Edit\"></p-icon> | Edit content, e.g. in lists or shop checkout. | \t\n| Add | <p-icon name=\"add\" aria-label=\"Add\"></p-icon> | Add content, e.g. a new item in a list. | \n\n### Text label\nThe text label is always set in copytext size. It is recommended to always keep the label short and give the user a hint on the indicated action, for example by including active verbs such as \"add\", \"edit\" or \"delete\". \n\n\n### Alignment\n\n#### **1. Left alignment (F-shaped reading pattern)**\n\nButtons **on standard pages or in on-page forms** are recommended to be placed **left-justified**, supporting a direct user attention flow:  \n  \nThis is based on the [F-shaped reading pattern](https://www.nngroup.com/articles/f-shaped-pattern-reading-web-content-discovered/) which is still followed by the majority of users on common web pages both on mobile and desktop ([Nielsen Norman](https://www.nngroup.com/articles/f-shaped-pattern-reading-web-content/), 2017) and has also been proven in a usability study on forms [by Luke Wroblewski](https://www.lukew.com/ff/entry.asp?571) (2007). \n  \n![F-shaped reading pattern](./assets/patterns-buttons-alignment-left-form.png)\n\n#### **2. Centered alignment**\n\n**In exceptional cases** it's even possible to place Buttons **centered** to their related content: \n\nIf the Button centring contributes to a more aesthetically pleasing look and feel, like, for example, in an image slider where the Buttons should be placed centered to the images:\n  \n  ![Z-shaped reading pattern](./assets/patterns-buttons-alignment-centered-aesthetic.png)\nIf the Button relates to a larger part or even the whole page, e.g. a \"Load more\" Button:\n  \n  ![Z-shaped reading pattern](./assets/patterns-buttons-alignment-centered-load-more.png)\n\n\n#### **3. Smaller viewports**\n\nOn smaller viewports up to 479 px screen width Buttons are always to be placed stacked and full-width. This makes it easier for the user to tap due to a larger visible touch area and also allows to give primary actions more visibility. \"Icon only\" Buttons keep their fix size on all viewports.\n\n![Mobile view for Buttons](./assets/patterns-buttons-alignment-viewport-xs.png)\n\n\n### Multi-line Buttons\n\nThough it's technically possible to use multiline text in Porsche Buttons, it's recommended to keep the Button label short and, therefore, avoid multiline Buttons. \n\n\n<div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n    <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n    <img src=\"./assets/button-examples.png\" alt=\"Examples for button usage\"/>\n</div>\n\n\n## Do's & Don'ts\n\n### Mixed usage of Button variants\n\nIt is not recommended to use \"icon and text\" and \"icon only\" Button variants in direct combination. Always try to stick to a homogeneous usage of Button variants in favour of a seamless UX. \n  \n![Example for uppercase text](./assets/button-dont.png)\n  \n---\n\n## Related components\n* [Button Group](components/button-group)\n* [Links](components/link)",
      "Props": "# Button\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type HideLabel = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property     | Attribute     | Description                                                                                                   | Type| Default              |\n| ------------ | ------------- | ------------------------------------------------------------------------------------------------------------- || -------------------- |\n| `aria`       | `aria`        | Add ARIA attributes.                                                                                          | `{ 'aria-label'?: string; 'aria-expanded'?: Booleanish; 'aria-pressed'?: boolean` <br>` 'true'` <br>` 'false'` <br>` 'mixed'; 'aria-haspopup'?: boolean` <br>` 'grid'` <br>` 'true'` <br>` 'false'` <br>` 'menu'` <br>` 'listbox'` <br>` 'tree'` <br>` 'dialog'; }`| `undefined`          |\n| `disabled`   | `disabled`    | Disables the button. No events will be triggered while disabled state is active.                              | `boolean`| `false`              |\n| `hideLabel`  | `hide-label`  | Show or hide label. For better accessibility it is recommended to show the label.                             | `boolean` <br>` BreakpointCustomizable<HideLabel>`| `false`              |\n| `icon`       | `icon`        | The icon shown.                                                                                               | `'light'` <br>` 'reset'` <br>` '360'` <br>` 'accessibility'` <br>` 'active-cabin-ventilation'` <br>` 'add'` <br>` 'adjust'` <br>` 'arrow-double-down'` <br>` 'arrow-double-left'` <br>` 'arrow-double-right'` <br>` 'arrow-double-up'` <br>` 'arrow-down'` <br>` 'arrow-first'` <br>` 'arrow-head-down'` <br>` 'arrow-head-left'` <br>` 'arrow-head-right'` <br>` 'arrow-head-up'` <br>` 'arrow-last'` <br>` 'arrow-left'` <br>` 'arrow-right'` <br>` 'arrow-up'` <br>` 'augmented-reality'` <br>` 'battery-empty'` <br>` 'battery-full'` <br>` 'bell'` <br>` 'bookmark'` <br>` 'broadcast'` <br>` 'calculator'` <br>` 'calendar'` <br>` 'camera'` <br>` 'car'` <br>` 'car-battery'` <br>` 'card'` <br>` 'charging-active'` <br>` 'charging-state'` <br>` 'charging-station'` <br>` 'chart'` <br>` 'chat'` <br>` 'check'` <br>` 'city'` <br>` 'climate'` <br>` 'climate-control'` <br>` 'clock'` <br>` 'close'` <br>` 'closed-caption'` <br>` 'co2-emission'` <br>` 'compare'` <br>` 'configurate'` <br>` 'country-road'` <br>` 'cubic-capacity'` <br>` 'delete'` <br>` 'disable'` <br>` 'document'` <br>` 'download'` <br>` 'duration'` <br>` 'edit'` <br>` 'email'` <br>` 'exclamation'` <br>` 'external'` <br>` 'filter'` <br>` 'flash'` <br>` 'fuel-station'` <br>` 'garage'` <br>` 'gift'` <br>` 'globe'` <br>` 'grid'` <br>` 'highway'` <br>` 'home'` <br>` 'horn'` <br>` 'image'` <br>` 'increase'` <br>` 'information'` <br>` 'key'` <br>` 'leaf'` <br>` 'leather'` <br>` 'list'` <br>` 'locate'` <br>` 'lock'` <br>` 'lock-open'` <br>` 'logo-baidu'` <br>` 'logo-delicious'` <br>` 'logo-digg'` <br>` 'logo-facebook'` <br>` 'logo-foursquare'` <br>` 'logo-gmail'` <br>` 'logo-google'` <br>` 'logo-hatena'` <br>` 'logo-instagram'` <br>` 'logo-kaixin'` <br>` 'logo-kakaotalk'` <br>` 'logo-linkedin'` <br>` 'logo-naver'` <br>` 'logo-pinterest'` <br>` 'logo-qq'` <br>` 'logo-qq-share'` <br>` 'logo-reddit'` <br>` 'logo-skyrock'` <br>` 'logo-sohu'` <br>` 'logo-tecent'` <br>` 'logo-telegram'` <br>` 'logo-tiktok'` <br>` 'logo-tumblr'` <br>` 'logo-twitter'` <br>` 'logo-viber'` <br>` 'logo-vk'` <br>` 'logo-wechat'` <br>` 'logo-weibo'` <br>` 'logo-whatsapp'` <br>` 'logo-xing'` <br>` 'logo-yahoo'` <br>` 'logo-youku'` <br>` 'logo-youtube'` <br>` 'logout'` <br>` 'map'` <br>` 'menu-dots-horizontal'` <br>` 'menu-dots-vertical'` <br>` 'menu-lines'` <br>` 'minus'` <br>` 'mobile'` <br>` 'moon'` <br>` 'oil-can'` <br>` 'parking-brake'` <br>` 'parking-light'` <br>` 'pause'` <br>` 'phone'` <br>` 'pin'` <br>` 'play'` <br>` 'plug'` <br>` 'plus'` <br>` 'preheating'` <br>` 'printer'` <br>` 'purchase'` <br>` 'question'` <br>` 'racing-flag'` <br>` 'refresh'` <br>` 'replay'` <br>` 'route'` <br>` 'rss'` <br>` 'save'` <br>` 'screen'` <br>` 'search'` <br>` 'send'` <br>` 'share'` <br>` 'shopping-bag'` <br>` 'shopping-cart'` <br>` 'sidelights'` <br>` 'snowflake'` <br>` 'sort'` <br>` 'stack'` <br>` 'star'` <br>` 'steering-wheel'` <br>` 'stopwatch'` <br>` 'subtract'` <br>` 'success'` <br>` 'sun'` <br>` 'switch'` <br>` 'tablet'` <br>` 'tachometer'` <br>` 'truck'` <br>` 'upload'` <br>` 'user'` <br>` 'user-group'` <br>` 'user-manual'` <br>` 'video'` <br>` 'view'` <br>` 'view-off'` <br>` 'volume-off'` <br>` 'volume-up'` <br>` 'warning'` <br>` 'weight'` <br>` 'wifi'` <br>` 'work'` <br>` 'wrench'` <br>` 'wrenches'` <br>` 'zoom-in'` <br>` 'zoom-out'` | `'arrow-head-right'` |\n| `iconSource` | `icon-source` | A custom URL path to a custom icon.                                                                           | `string`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | `undefined`          |\n| `loading`    | `loading`     | Disables the button and shows a loading indicator. No events will be triggered while loading state is active. | `boolean`| `false`              |\n| `tabbable`   | `tabbable`    | To remove the element from tab order.                                                                         | `boolean`| `true`               |\n| `theme`      | `theme`       | Adapts the button color depending on the theme.                                                               | `'dark'` <br>` 'light'` <br>` 'light-electric'`| `'light'`            |\n| `type`       | `type`        | Specifies the type of the button.                                                                             | `'button'` <br>` 'reset'` <br>` 'submit'`| `'submit'`           |\n| `variant`    | `variant`     | The style variant of the button.                                                                              | `'primary'` <br>` 'secondary'` <br>` 'tertiary'`| `'secondary'`        |\n"
    },
    "Button Group": {
      "Examples": "# Button Group\n\nThe `p-button-group` is a component for wrapping multiple buttons and display them in vertical or horizontal groups with corresponding spacing and width. By default buttons are displayed in full-width as a vertical stacked group for mobile viewports (breakpoint XS) and side-by-side in a row for larger viewports.\n\n### Responsive row/column behaviour left aligned\n\n<Playground :markup=\"buttonGroup\"></Playground>\n\n### With custom direction breakpoint\n\n<Playground :markup=\"buttonGroupCustomBreakpoint\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n  \n    buttonGroup = `<p-button-group>\n  <p-button variant=\"primary\">Some label</p-button>\n  <p-button variant=\"secondary\">Some label</p-button>\n  <p-button variant=\"tertiary\">Some label</p-button>\n</p-button-group>`;    \n\n   buttonGroupCustomBreakpoint = `<p-button-group direction=\"{base: 'column', s: 'row'}\">\n  <p-button variant=\"primary\">Some label</p-button>\n  <p-button variant=\"secondary\">Some label</p-button>\n  <p-button variant=\"tertiary\">Some label</p-button>\n</p-button-group>`;    \n  }\n</script>",
      "Usage": "# Button Group\n\n## When to use\n  • Use a Button Group to consistently align two or more buttons at once.\n\n---\n\n## Usage\n\n### Alignment\n\nYou can either order Buttons within a group horizontally or vertically. Our general recommendation is to place the buttons according to their priority - the most important button is the most left (horizontal) or on top (vertical).\n\n#### **1. Horizontal alignment**\n\nA group of Buttons can be aligned side-by-side in a row **whenever you want to** **emphasize the relationship between the different actions** and give the user an instant overview on the available options. A classical case for that would be a \"cancel\" / \"submit\" combination. This is **valid for all screens or screen areas with a width of 480 px or larger.**\n  \n![Horizontal alignment of Button groups](./assets/patterns-buttons-groups-horizontal.png)  \n \nButtons that are placed in a horizontal row on larger screens are always to be stacked on mobile (breakpoint XS) or screen areas with a maximum width of 479 px, each of them occupying a separate line, and, as generally defined for mobile, spanning full-width. According to the F pattern the primary call-to-action button should always be placed on top of the button group ([UX Design](https://uxdesign.cc/buttons-placement-and-order-bb1c4abadfcb), 2019). \n  \n![Responsive behaviour of horizontally aligned buttons](./assets/patterns-buttons-groups-horizontal-responsiveness.png)\n\n#### **2. Vertical alignment**\n\nIn case you want the users to **focus on each action separately** you should opt for vertically stacked Buttons, giving the user more space for a careful consideration of the actions provided ([UX Movement](https://uxmovement.com/mobile/optimal-placement-for-mobile-call-to-action-buttons/), 2019).\n\n![Vertical alignment of Button groups](./assets/patterns-buttons-groups-vertical.png)\n\nIn favor of visual harmony, stacked Buttons should always have the same width, aligned with the widest element of the stack (whose length depends on the text contained). \n\n\n### Limit the number of grouped Buttons.\n\nWhen multiple actions are provided at once, it should be easy for the user to grasp. For \"Icon and text\" Buttons **we recommend to go for a maximum of 4 actions at once**, as we should set a limit and don't want to overwhelm the user. Also, too many buttons might make the user feel insecure about what to do next.\n\n### Spacing in Button groups\n\nNo matter if Buttons are placed side by side or on top of each other, you should keep a minimum spacing of 16 px inbetween.\n\n![Spacing in vertical and horizontal Button groups](./assets/patterns-buttons-groups-spacing.png)\n\n---\n\n## Do's & Don'ts\n\n### Only group Buttons that are related.\n\nThough it is possible to mix up Buttons within a group, you should always make sure that the actions within a group are content-related.\n\n\n### Avoid mixing different variants.\n\nIn favor of a seamless UX you should homogeneously **stick the Button types \"Icon and Text\" and \"Icon only within a group** and avoid mixing them up.  \n  \n![Do's and Don'ts for mixing Button variants](./assets/patterns-buttons-groups-variants.png)\n\n### Differ between Primary, Secondary and Tertiary actions.\n\nWithin a Button group, you have several options to provide a clear interactive hierarchy and user guidance:\n\n- **Emphasized action(s):**  \nDue to the general guidelines, one Button within a group can be set as \"Primary\" (depending on the rest of the Buttons used on the page). If no primary action is set, but you want to give Buttons  within the group a slightly higher priority, you can go for maximum two secondary actions.  \n\n- **Actions with lower priority:**  \nButtons with lower priority that come alongside primary or secondary actions can either be set as tertiary actions (outlined Button) or as a Button or Link Pure, in case you want to reduce their priority even more. If this is the case for the whole group, you can also go for 100% tertiary Button or 100% Button/Link Pure groups.  \n\n![Do's for Button hierarchy](./assets/patterns-buttons-groups-hierarchy-1.png)  ",
      "Props": "# Button Group\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type Direction = 'row' | 'column'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property    | Attribute   | Description                                                                                                                                                                                                                                                                      | Type                                                                                                                                                                                          | Default                                    |\n| ----------- | ----------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------ |\n| `direction` | `direction` | Defines the direction of the main and cross axis. The default is ’{base: ‘column’, xs: ‘row’}' showing buttons vertically stacked on mobile viewports and side-by-side in a horizontal row from breakpoint ‘xs’. You always need to provide a base value when using breakpoints. | `'row'` <br>` 'column'` <br>` BreakpointCustomizable<Direction>` | `{     base: 'column',     xs: 'row',   }` |\n"
    },
    "Button Pure": {
      "Examples": "# Button Pure\n\nThe `p-button-pure` component is essential to perform events for **interactions**.\nA Button can be used with or without a label, but it's recommended to keep the **label visible** for better **usability** whenever possible.\nWhen used without a label, it is mandatory for **accessibility** to provide a descriptive label text for screen readers.\nWhenever you want to provide navigational elements, stick to the [Link](components/link) or [Link Pure](components/link-pure) component instead.\n\n## Basic example\n\n### With label\n\n<Playground :markup=\"withLabel\" :config=\"configInline\"></Playground>\n\n### Without label\n\n<Playground :markup=\"withoutLabel\" :config=\"configInline\"></Playground>\n\n### Responsive\n\n<Playground :markup=\"responsive\" :config=\"config\"></Playground>\n\n### ARIA attributes and states\n\nThrough the `aria` property you have the possibility to provide additional **ARIA** attributes and states to the component.\n<Playground :markup=\"accessibility\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\n* Make sure to provide **descriptive**, self explaining **labels** which could be understood without context. If short labels are used like **\"OK\"** make sure to provide additional textual contents through **ARIA** with the `aria` property to expose a more descriptive experience to screen reader users.\n* If implementing the Button with a **hidden label** (`hide-label=\"true\"`), do not omit the label. Providing a **descriptive text** to support **screen reader** users is **mandatory**.\n* In general, you should **prevent** using the `disabled=\"true\"` state. Disabled elements are not reachable (focusable) anymore and can be missed by screen reader users. They can be confusing for sighted users as well by not showing why these elements are disabled.\n\n---\n\n### Without Icon\n\nBy choosing `icon=\"none\"` the component is shown without icon.\n\n**Caution:** You can't combine  this with the prop `loading=\"true\"` nor the prop `hideLabel`\n\n<Playground :markup=\"withoutIcon\" :config=\"configInline\"></Playground>\n\n---\n\n## Size\n\nThere are predefined text sizes for the component which should cover most use cases. \nIf a specific text size is needed, the size can be set to `inherit` to specify the text size from outside.\n\n**Hint:** If you are in `hideLabel`-mode, be aware that the box-size of the rendered element will not be the same as the given (font-size) pixel value, \ne.g. setting a font-size of **\"44px\"** will not generate a box with a **\"44px\"** width/height but instead a box size generated out of Porsche type-scaling formula which will end in **\"52px\"** width/height.\n\n<Playground :markup=\"markupSize\" :config=\"config\">\n  <select v-model=\"size\">\n    <option disabled>Select a size</option>\n    <option>x-small</option>\n    <option>small</option>\n    <option>medium</option>\n    <option>large</option>\n    <option>x-large</option>\n    <option>inherit</option>\n  </select>\n</Playground>\n\n### Responsive\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"markupResponsive\" :config=\"config\"></Playground>\n\n---\n\n## Weight\n\nThere are predefined default text weights. Be aware of using the `thin` variant only with larger text sizes.\n\n<Playground :markup=\"markupWeight\" :config=\"config\">\n  <select v-model=\"weight\">\n    <option disabled>Select a weight</option>\n    <option>thin</option>\n    <option>regular</option>\n    <option>bold</option>\n  </select>\n</Playground>\n\n---\n\n## Active state\n\nProviding visually differences if a button needs to be accentuated, e.g. in hierarchical mobile menus.\n\n<Playground :markup=\"markupActive\" :config=\"config\"></Playground>\n\n---\n\n## Button with specific icon\nIf another icon needs to be implemented, just replace the default icon with another predefined icon. Per default, all icons are fetched from the Porsche Design System CDN. Just choose an icon name from the `icon` property. If you need to link to another icon hosted somewhere else, just set the whole icon path to the `iconSource` prop.\n\n<Playground :markup=\"icon\" :config=\"configInline\"></Playground>\n\n---\n\n## Alignment\n\nThe `label` can be aligned to the `right` (default) or to the `left` of the icon.\n\n<Playground :markup=\"markupAlignment\" :config=\"config\">\n  <select v-model=\"alignLabel\">\n    <option value=\"left\">Left</option>\n    <option value=\"right\">Right</option>\n    <option value=\"{ base: 'left', l: 'right' }\">Responsive</option>\n  </select>\n</Playground>\n\n---\n\n## Stretch\n\nThe `stretch` property extends the area between icon and label to the maximum available space.\nIt is recommended to use stretch only on `left` alignment and small viewports, e.g. mobile views.\n\n<Playground :markup=\"markupStretch\" :config=\"configBlock\">\n  <select v-model=\"stretch\">\n    <option value='stretch=\"true\" align-label=\"left\"'>stretch true, align-label left</option>\n    <option value='stretch=\"true\" align-label=\"right\"'>stretch true, align-label right</option>\n    <option value='stretch=\"false\" align-label=\"left\"'>stretch false, align-label left</option>\n    <option value='stretch=\"false\" align-label=\"right\"'>stretch false, align-label right</option>\n    <option value='stretch=\"{ base: true, l: false }\" align-label=\"left\"'>Responsive</option>\n  </select>\n</Playground>\n\n---\n\n## Button with custom clickable/focusable area\n\nSometimes it might be useful to enlarge the clickable/focusable area of a button to fulfill accessibility guidelines.\nTherefore a custom padding can be set on the host element.\n\n<Playground :markup=\"clickableArea\" :config=\"configInline\"></Playground>\n\n---\n\n## Bind events to the button\n\nYou can use native `click`, `focus`, `focusin`, `blur` and `focusout` events on the button.\n\n<Playground :markup=\"events\" :config=\"config\"></Playground>\n\n---\n\n## Remove button from tab order\n\nWith setting the `tabbable` property to `false` you can remove the button from the tab order. For technical restrictions it's currently not possible to set an individual `tabindex` attribute.\n\n<Playground :markup=\"taborder\" :config=\"configInline\"></Playground>\n\n---\n\n## Button with Subline\n\nIf you need additional information on your button, we provide a `<p slot=\"subline\" />`.\nThe size of the *subline* changes according to the size of the *label*. We do not support `size=\"inherit\"`, `stretch` and `alignLabel` in this pattern so far.\n\n<Playground :markup=\"subline\" :config=\"configInline\">\n  <select v-model=\"sublineSize\">\n    <option disabled>Select a size</option>\n    <option>small</option>\n    <option>medium</option>\n    <option>large</option>\n    <option>x-large</option>\n  </select>\n</Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n    configInline = { ...this.config, spacing: 'inline' };\n\n    size = 'medium';\n    sublineSize = 'small'; \n    weight = 'thin';\n    alignLabel = 'left';\n    stretch = 'stretch=\"true\" align-label=\"left\"';\n\n    withoutIcon =\n`<p-button-pure icon=\"none\">Some label</p-button-pure>\n<p-button-pure icon=\"none\" disabled=\"true\">Some label</p-button-pure>\n<p-button-pure icon=\"none\" size=\"small\" weight=\"semibold\">\n  Some label\n  <p slot=\"subline\">Some Subline</p>\n</p-button-pure>`;\n    \n    withLabel =\n`<p-button-pure>Some label</p-button-pure>\n<p-button-pure disabled=\"true\">Some label</p-button-pure>\n<p-button-pure loading=\"true\">Some label</p-button-pure>`;\n\n    withoutLabel =\n`<p-button-pure hide-label=\"true\">Some label</p-button-pure>\n<p-button-pure hide-label=\"true\" disabled=\"true\">Some label</p-button-pure>\n<p-button-pure hide-label=\"true\" loading=\"true\">Some label</p-button-pure>`;\n    \n    responsive =\n`<p-button-pure hide-label=\"{ base: true, l: false }\">Some label</p-button-pure>`;\n\n    get markupSize() {\n      const style = this.size === 'inherit' ? ' style=\"font-size: 48px;\"' : '';\n      return `<p-button-pure size=\"${this.size}\"${style}>Some label</p-button-pure>`;\n    }\n\n    accessibility = \n`<p-button-pure aria=\"{ 'aria-label': 'Some more descriptive label' }\">Some label</p-button-pure>`;\n    \n    markupResponsive = \n`<p-button-pure size=\"{ base: 'small', l: 'medium' }\">Some label</p-button-pure>`;\n\n    get markupWeight() {\n      return `<p-button-pure size=\"medium\" weight=\"${this.weight}\">Some label</p-button-pure>`;\n    }\n\n    markupActive =\n`<p-button-pure active=\"true\">Some label</p-link-pure>`;\n\n    icon =\n`<p-button-pure icon=\"delete\">Some label</p-button-pure>\n<p-button-pure icon-source=\"${require('./assets/icon-custom-kaixin.svg')}\" hide-label=\"true\">Some label</p-button-pure>`;\n \n\n    get markupAlignment() {\n      return `<p-button-pure align-label=\"${this.alignLabel}\">Some label</p-button-pure>`;\n    };\n\n    get markupStretch() {\n      return `<p-button-pure ${this.stretch}>Some label</p-button-pure>`;\n    };\n\n    clickableArea =\n`<p-button-pure style=\"padding: 1rem;\">Some label</p-button-pure>\n<p-button-pure hide-label=\"true\" style=\"padding: 1rem;\">Some label</p-button-pure>`;\n\n    events =\n`<p-button-pure\n  onclick=\"alert('click')\"\n  onfocus=\"console.log('focus')\"\n  onfocusin=\"console.log('focusin')\"\n  onblur=\"console.log('blur')\"\n  onfocusout=\"console.log('focusout')\"\n>Some label</p-button-pure>`;\n\n    taborder =\n`<p-button-pure tabbable=\"true\">Some label</p-button-pure>\n<p-button-pure tabbable=\"false\" hide-label=\"true\">Some label</p-button-pure>`;\n\n    get subline() {\n      return `<p-button-pure size=\"${this.sublineSize}\">\n  Some label\n  <p slot=\"subline\">Some Subline</p>\n</p-button-pure>\n<p-button-pure size=\"${this.sublineSize}\" weight=\"semibold\">\n  Some label\n  <p slot=\"subline\">Some Subline</p>\n</p-button-pure>`;\n    }\n  }\n</script>\n",
      "Usage": "# Button Pure\n\n## When to use\n  • Use a Button Pure as a more subtle call to action (in addition to Button Primary, Secondary or Tertiary).   \n  • Use a Button Pure to enable to execute an action (like \"submit\", \"delete\", \"add\" or \"edit\").   \n  • Use a Button Pure to change the state of an application, which almost always happens on the same page. \n\n--- \n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Button Pure as follows:\n\n| Variant | Usage |\n|----|----|\n| Icon and text | This should be the variant of your choice whenever possible, as icons should preferably always be paired with text for better comprehensibility and accessibility. |\n| Text only | The use of icons can be resigned, whenever it causes interference (e.g. in-text placement, no matching icon, complex lists or tables, alignment to elements). |\n| Icon only| When it's enough to indicate an action with an icon only, the text label can be hidden but a minimum height of 40 px must be maintained. It's recommended to use this variant only in cases when the user is fully aware of the function due to an expressive and internationally comprehensible icon. |\n| Icon, Text and Subline | This should be the variant of your choice if the Button Pure must be supplemented by a subline. However, we recommend that you only use this variant in cases where the user requires additional information. The standard variant will be used on a monochrome background, whereas the highlight variant should be used on a polychrome background (e.g. on images) for better comprehensibility and accessibility. |\n\n# Icon alignment & stretch\n\nTo enable wider usage order and stretch are customizable. Please use under recommended circumstances:\n\n| Variant | Usage |\n|----|----|\n| Icon left | This is the default state and should be used whenever possible. |\n| Icon right | On special occasions, the icon can be placed on the right side of the label (e.g. step navigation). | \n| Stretch | It's recommended to use stretch only on small viewports or areas (e.g. mobile views or sidebars). Please consider that the greater the distance between icon and label, the less they will be perceived as a visual group. |\n\n## Usage\n\n### Standard icons\nThe default icon is an arrow right that should serve in most cases. It should be changed only if it is ensured that another symbol is more appropriate to support the text content, making it easier for the user to understand the function quickly. For example:\n\n| Interaction | Icon | Example |\n|----|----|----|\n| Close | <p-icon name=\"close\" aria-label=\"Close\"></p-icon> | Close a current page or window. |\n| Cancel | <p-icon name=\"close\" aria-label=\"Close\"></p-icon> | Abandoning a process. |\n| Delete | <p-icon name=\"delete\" aria-label=\"Delete\"></p-icon> | Delete/erase content, e.g. a list item. | \n| Edit | <p-icon name=\"edit\" aria-label=\"Edit\"></p-icon> | Edit content, e.g. in lists or shop checkout. | \t\n| Add | <p-icon name=\"add\" aria-label=\"Add\"></p-icon> | Add content, e.g. a new item in a list. | \n\n### Text label\nThe text label is always set in copytext size. It is recommended to always keep the label short and give the user a hint on the indicated action, for example by including active verbs such as \"add\", \"edit\" or \"delete\". \n\n### Button Pure groups\nMultiple Buttons Pure can be combined to one Button Pure group that must be stacked left-aligned in order to guarantee scannability and legibility. It is recommended to not group more than 6 Buttons Pure in a row.\n\n<div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n    <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n    <img src=\"./assets/button-pure.png\" alt=\"\"/>\n</div>\n",
      "Props": "# Button Pure\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type AlignLabel = AlignLabelType`  \n`type HideLabel = boolean`  \n`type Size = 'small' | 'medium' | 'x-small' | 'large' | 'x-large' | 'inherit'`  \n`type Stretch = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property     | Attribute     | Description                                                                                                   | Type| Default              |\n| ------------ | ------------- | ------------------------------------------------------------------------------------------------------------- || -------------------- |\n| `active`     | `active`      | Display button in active state.                                                                               | `boolean`| `false`              |\n| `alignLabel` | `align-label` | Aligns the label.                                                                                             | `AlignLabelType` <br>` BreakpointCustomizable<AlignLabel>`                                                                                                                                                                                                                                                                                                                                                                                                  | `'right'`            |\n| `aria`       | `aria`        | Add ARIA attributes.                                                                                          | `{ 'aria-label'?: string; 'aria-expanded'?: Booleanish; 'aria-pressed'?: boolean` <br>` 'true'` <br>` 'false'` <br>` 'mixed'; 'aria-haspopup'?: boolean` <br>` 'grid'` <br>` 'true'` <br>` 'false'` <br>` 'menu'` <br>` 'listbox'` <br>` 'tree'` <br>` 'dialog'; }`                                                                                                                                                                                                                                                                                                                                     | `undefined`          |\n| `disabled`   | `disabled`    | Disables the button. No events will be triggered while disabled state is active.                              | `boolean`| `false`              |\n| `hideLabel`  | `hide-label`  | Show or hide label. For better accessibility it is recommended to show the label.                             | `boolean` <br>` BreakpointCustomizable<HideLabel>`                                                                                                                                                                                                                                                                                                                                                                                                                                        | `false`              |\n| `icon`       | `icon`        | The icon shown.                                                                                               | `IconName` <br>` 'none'`| `'arrow-head-right'` |\n| `iconSource` | `icon-source` | A custom URL path to a custom icon.                                                                           | `string`| `undefined`          |\n| `loading`    | `loading`     | Disables the button and shows a loading indicator. No events will be triggered while loading state is active. | `boolean`| `false`              |\n| `size`       | `size`        | Size of the button.                                                                                           | `'small'` <br>` 'medium'` <br>` 'x-small'` <br>` 'large'` <br>` 'x-large'` <br>` 'inherit'` <br>` BreakpointCustomizable<Size>` | `'small'`            |\n| `stretch`    | `stretch`     | Stretches the area between icon and label to max available space.                                             | `boolean` <br>` BreakpointCustomizable<Stretch>`                                                                                                                                                                                                                                                                                                                                                                                                                                        | `false`              |\n| `tabbable`   | `tabbable`    | To remove the element from tab order.                                                                         | `boolean`| `true`               |\n| `theme`      | `theme`       | Adapts the button color depending on the theme.                                                               | `'dark'` <br>` 'light'` <br>` 'light-electric'`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | `'light'`            |\n| `type`       | `type`        | Specifies the type of the button.                                                                             | `'button'` <br>` 'reset'` <br>` 'submit'`| `'submit'`           |\n| `weight`     | `weight`      | The weight of the text (only has effect with visible label).                                                  | `'bold'` <br>` 'regular'` <br>` 'semibold'` <br>` 'thin'`| `'regular'`          |\n"
    },
    "Checkbox": {
      "Examples": "# Checkbox\n\nThe `p-checkbox-wrapper` component is a styling wrapper for the native HTML input type `checkbox` form element. Checking one box doesn't uncheck other Checkboxes. By default Checkboxes are not selected.\n\nA `label` is a caption which informs the user what information a particular form field is asking for. The `p-checkbox-wrapper` component can be used with or without a label but it's recommended to keep the label visible for better accessibility whenever possible. When used without a label, it's best practice to provide a descriptive label text for screen readers.  \n\n## Basic example\n\n<Playground :markup=\"basic\" :config=\"config\">\n  <select v-model=\"label\">\n    <option value=\"show\">With label</option>\n    <option value=\"hide\">Without label</option>\n    <option value=\"responsive\">Responsive</option>\n  </select>\n</Playground>\n\n---\n\n## Indeterminate\n\nMask the visual appearance of a checkbox which has a state in-between checked and unchecked.  \nThis is especially useful for a checkbox that is used to set the state of a group of checkboxes\nat once. However this group might have a mixed state. In this case we recommend to use `checked=false`\nand `indeterminate=true`.\n\n**Note: The `indeterminate` attribute can only be set through the DOM node.\nThere is no HTML attribute to set it. Also it's worth to know, that the `indeterminate` attribute\nonly affects how the checkbox is shown. The current value is hidden from the user, but the\ncheckbox still keeps it's `checked` state. You can find more details in [the specification](https://www.w3.org/TR/html52/sec-forms.html#dom-htmlinputelement-indeterminate).**\n\n<Playground :markup=\"indeterminate\" :config=\"config\"></Playground>\n\n---\n\n## Required\n\n<Playground :markup=\"required\" :config=\"config\"></Playground>\n\n---\n\n## Disabled\n\n<Playground :markup=\"disabled\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIn general, you should **prevent** using the `disabled=\"true\"` state. Disabled elements are not reachable (focusable) anymore and can be missed by screen reader users.\nThey can be confusing for sighted users as well by not pointing out why these elements are disabled.\nA good practice when to use the disabled state is during **form submission** to prevent changes while this process is performed.\n\n---\n\n## Validation states\n\nThe `p-checkbox-wrapper` component supports the visualisation of inline validation. The `message` and `checkbox` is colored and visible/hidden depending on the defined `state`.\n\n<Playground :markup=\"validation\" :config=\"config\">\n  <select v-model=\"state\">\n    <option disabled>Select a validation state</option>\n    <option value=\"error\">Error</option>\n    <option value=\"success\">Success</option>\n    <option value=\"none\">None</option>\n  </select>\n</Playground>\n\n---\n\n## Slots\n\nSometimes it's useful to be able to render markup (e.g. an anchor tag) for `label` or `message`. Therefore a named slot can be used. Make sure **not** to define the corresponding property on the host element when a named slot is used (because a property definition is preferred over a named slot).\nFor named slots only [phrasing content](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content) is allowed.\n\n<Playground :markup=\"slots\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIf using **slotted contents** to serve form elements, make sure to provide the right **ARIA attributes** to give screen reader users the corresponding information: \n1. Add a unique ID to the `slot=\"label\"` element\n1. Add a unique ID to the `slot=\"message\"` element (if they are created)\n1. Add corresponding `aria-labelledby=\"some-label-id\"` to the `input` element which points to the `label` ID\n1. Add corresponding `aria-describedby=\"some-message-id\"` to the `input` element which points to the `message` ID when the (error/success) message appears\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { spacing: 'inline' };\n    \n    state = 'error';\n    label = 'show';\n    \n    get basic() {\n      const hideLabel = this.label === 'hide' ? 'true' : this.label === 'responsive' ? '{ base: true, l: false }' : 'false';\n      return `<p-checkbox-wrapper label=\"Some label\" hide-label=\"${hideLabel}\">\n  <input type=\"checkbox\" name=\"some-name\" />\n</p-checkbox-wrapper>\n<p-checkbox-wrapper label=\"Some label\" hide-label=\"${hideLabel}\">\n  <input type=\"checkbox\" name=\"some-name\" checked />\n</p-checkbox-wrapper>`;\n    }\n    \n    indeterminate =\n`<p-checkbox-wrapper label=\"Some label\">\n  <input type=\"checkbox\" name=\"some-name\" class=\"example-set-to-indeterminate\" />\n</p-checkbox-wrapper>\n<p-checkbox-wrapper label=\"Some label\">\n  <input type=\"checkbox\" name=\"some-name\" class=\"example-set-to-indeterminate\" checked />\n</p-checkbox-wrapper>`;\n    \n    required =\n`<p-checkbox-wrapper label=\"Some label\">\n  <input type=\"checkbox\" name=\"some-name\" required />\n</p-checkbox-wrapper>\n<p-checkbox-wrapper label=\"Some label\">\n  <input type=\"checkbox\" name=\"some-name\" required checked />\n</p-checkbox-wrapper>`;\n\n    disabled =\n`<p-checkbox-wrapper label=\"Some label\">\n  <input type=\"checkbox\" name=\"some-name\" disabled />\n</p-checkbox-wrapper>\n<p-checkbox-wrapper label=\"Some label\">\n  <input type=\"checkbox\" name=\"some-name\" disabled checked />\n</p-checkbox-wrapper>`;\n    \n    get validation() {\n      const message = this.state !== 'none' ? `Some ${this.state} validation message.` : ''; \n      return `<p-checkbox-wrapper label=\"Some label\" state=\"${this.state}\" message=\"${message}\">\n  <input type=\"checkbox\" name=\"some-name\" />\n</p-checkbox-wrapper>`;\n    }\n    \n    slots =\n`<p-checkbox-wrapper state=\"error\">\n  <span slot=\"label\" id=\"some-label-id\">Some label with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n  <input type=\"checkbox\" name=\"some-name\" aria-labelledby=\"some-label-id\" aria-describedby=\"some-message-id\" />\n  <span slot=\"message\" id=\"some-message-id\">Some error message with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n</p-checkbox-wrapper>`;\n    \n    mounted() {\n      this.$nextTick(function () {\n        const inputs = document.querySelectorAll('.example-set-to-indeterminate');\n        inputs.forEach(input => {\n          input.indeterminate = true;\n        });\n      });\n    }\n  }\n</script>",
      "Usage": "# Checkbox\n\n## When to use\n  • Use a Checkbox for a list of options when you want to enable the user to select no, one or more options.  \n  • Use a Checkbox when an explicit action is required to apply settings. \n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Checkbox as follows\n\n| Type | Usage |\n|----|----|\n| Default | The basic view of a Checkboxe is having no option selected. |\n| Indeterminate | The indeterminate state is only a visual state and cannot be achieved by direct user interaction. |\n\n## Behavior\n\n### Indeterminate\nCheckboxes can be nested when a parent and child relationship is needed. Users can either select an entire set of options or only a subset.\nChecking the parent Checkbox automatically selects all of the nested children Checkboxes. Unchecking the parent Checkbox automatically deselects all of the children Checkboxes.\n\n![Example of indeterminate checkbox](./assets/checkbox-indeterminate.png)\n\n### Label\nThe label text (always in copytext) gives the user an information about the option that can be selected. Try to keep the label short and descriptive (one word or two)\n\n### Validation and error\nContrary to Radio Buttons, each Checkbox item can have its own validation message.\nPlease find more information in the [Form pattern guideline](patterns/forms).\n\n### A stand-alone Checkbox\nIs used for a single option that the user can turn on or off (e.g. in case of a confirmation of terms and conditions).\n\n<div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n    <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n    <img src=\"./assets/checkbox-examples.png\" alt=\"Examples\" />\n</div>\n\n---\n\n## Do's & Don'ts\n\n### Mixing with Radio Buttons\n\nNever mix Radio Buttons and Checkboxes.\n\n![Don't mix Checkboxes and Radio Buttons](./assets/checkbox-dont-mix.png)\n\n### Alignment\n\nPreferably set Checkboxes vertically left-aligned, as this supports scannability way better than a horizontal alignment.\n\n![Don't set checkboxes horizontaly](./assets/checkbox-dont-alignment.png)\n\n---\n\n## Related Components\n* [Radio Button](components/radio-button)\n* [Select](components/select)",
      "Props": "# Checkbox\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type HideLabel = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property    | Attribute    | Description                                                                      | Type                                                                                                                               | Default  |\n| ----------- | ------------ | -------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| `hideLabel` | `hide-label` | Show or hide label. For better accessibility it's recommended to show the label. | `boolean` <br>` BreakpointCustomizable<HideLabel>` | `false`  |\n| `label`     | `label`      | The label text.                                                                  | `string`                                                                                                                           | `''`     |\n| `message`   | `message`    | The message styled depending on validation state.                                | `string`                                                                                                                           | `''`     |\n| `state`     | `state`      | The validation state.                                                            | `'error'` <br>` 'none'` <br>` 'success'`                                                                                                   | `'none'` |\n"
    },
    "Color": {
      "Examples": "# Color\n\nThere is no color web component available but predefined SCSS/JS variables and functions provided in a npm package called `@porsche-design-system/utilities`.  \n**[Read installation instructions for the Porsche Design System SCSS/JS utilities package](utilities/introduction)**\n",
      "Usage": "# Color\n\nTogether with other basic elements like typography, iconography or imagery, the\nright use of colors gives every UI the specific Porsche feeling and is\ntherefore one of the most important tools to create a consistent visual\nbranding. Even more so when it comes to UX, color is to be used intentionally to create\npatterns, set emphasis on important elements and, by doing so, provide visual\nguidance and information.\n\nThe Porsche Design System color system provides two color themes that are based on the Porsche color palette and can be\nused for different visual environments. Both themings are to be found in the Porsche Design System Sketch library.\n\n---\n\n## Porsche Design System color themes\n\nWhen designing Porsche applications, the first decision to make is whether the content should be displayed in a merely light or dark environment.\nThat's when the Porsche Design System color themes come into play that come with a limited color set you should stick to for page backgrounds as well as for text and icons: \n\n- **The Porsche Light Theme should always be first choice.**\n- The Porsche Dark Theme is only to be used for exceptional cases, e.g. if an application is to stand out from the rest of visual communication for strategic reasons or if the context of use is unsuitable for a bright shining display. \n  \nAll Porsche Design System components are optimized for both Light and Dark Theme. \n\n### Additional elements\nFor designing additional elements (such as tiles, dividers or other graphical elements) you have several options:\n\n- Use the accessibility-safe colors provided for the theme (Neutral Contrast High and Neutral Contrast Medium), as they guarantee optimal contrast on the theming's backgrounds. This is highly recommended whenever you want to convey important information.\n- Neutral Contrast Low is not accessibility-safe and, therefore, recommended to be used only for displaying \"nice to have\" or merely decorative elements that are not crucial for information perception. \n\n### Information level\n\nIn order to define the colors to be used within the screen the **information level** of the respective elements is crucial. \n\n- Play with darker/lighter grey shades to make an element stand out from the background or to set emphasize on it. \n- For large screen space make sure to only use the dedicated surface color for your theme (e.g. Surface). \n- Use the brand color only for highlighting single elements.\n\n### Mixing themes\nWithin certain limits it's allowed to mix the Porsche color themes. For example you could integrate a limited Dark Theme area in your Light Theme\nto visually distinguish it from the rest of the content. **Always make sure that the vast majority of the screen consists of the initially chosen theme.**\nThe color proportion scales for each theme might be a little helper in doing so.\n\n### Color usage\nAll colors must always be used in 100% opacity.\n\n### Focus\nThe `:focus` state helps you to navigate through all interactive elements via tab key. \nBy default, the focused element has a 1px solid outline with a 1px offset, respectively 2px offset for components that come with a background-color or border. \nThe color for the outline is defined by the currentColor value, which refers to the element's color. \nFor example, a primary button will have a 1px solid brand color red outline with 2px offset as `:focus`. \nAdditionally, the input controls which also reflect their validation state color.\n\n---\n\n## Porsche Light Theme \n![Porsche Light Theme colors](./assets/color-theme-light.png)\n\n### Brand color\n\n|                                                                              \t|                      \t    | HEX     \t| RGB           \t| Usage                                     |\n|-----------------------------------------------------------------------------\t|---------------------------|----------\t|----------------\t|------------------------------------------ |\n| <ColorBadge theme=\"light\" color=\"brand\"/> \t                                          | **Brand**         \t| #D5001C \t| 213/0/28       \t| CI color                     |\n\n\n### Background colors\n\n|                                                                         \t|                      \t    | HEX     \t| RGB           \t| Usage            |\n|-------------------------------------------------------------------------\t|---------------------------|----------\t|----------------\t|----------------- |\n| <ColorBadge theme=\"light\" color=\"background-default\"/>  \t                                    | **Background Default**        \t| #FFFFFF \t| 255/255/255   \t| Page background  |\n| <ColorBadge theme=\"light\" color=\"background-surface\"/> \t                                    | **Background Surface**        \t| #F2F2F2 \t| 242/242/242     | Additional backgrounds, for example for tiles or contrasting content areas |\n| <ColorBadge theme=\"light\" color=\"background-shading\"/>  | **Background Shading** | #0E1418 (opacity 0.9) | 14/20/24 (opacity 0.9) | Full-page overlays to make e.g. modal layers stand out from the background  | \n\n#### Background notification colors\n\n|                                                                         \t|                      \t    | HEX     \t| RGB           \t| Usage            |\n|-------------------------------------------------------------------------\t|---------------------------|----------\t|----------------\t|----------------- |\n| <ColorBadge theme=\"light\" color=\"notification-error-soft\"/> \t                          | **Background Error Soft**        \t| #FAE6E6 \t| 250/230/230   | Error Soft (only to be used for notification background) \t  | \n| <ColorBadge theme=\"light\" color=\"notification-success-soft\"/> \t                        | **Background Success Soft**        \t| #E5F3E7 \t| 229/243/231  \t  | Success Soft (only to be used for notification background)  \t  |\n| <ColorBadge theme=\"light\" color=\"notification-warning-soft\"/> \t                        | **Background Warning Soft**       \t| #FFF5E5 \t| 255/245/229  \t| Warning Soft (only to be used for notification background)\t  |\n| <ColorBadge theme=\"light\" color=\"notification-neutral-soft\"/> \t                        | **Background Neutral Soft**       \t| #E5EFF8 \t| 229/239/248  \t| Neutral Soft (only to be used for notification background)\t  | \n\n\n### Base color\n\n|                                                                              \t|                      \t    | HEX     \t| RGB           \t| Usage                                     |\n|-----------------------------------------------------------------------------\t|---------------------------|----------\t|----------------\t|------------------------------------------ |\n| <ColorBadge theme=\"light\" color=\"default\"/>    \t                                      | **Default**        \t| #000000 \t| 0/0/0          \t| Default text/icon color                   |\n\n### Neutral colors\nThe neutral palette is to be used for all basic architectonic page elements such as tile backgrounds, dividers or other graphical elements.\nThe set consists of several grey shades that are based on a pre-defined mixing ratio of black in combination with a slightly touch of blue.\n\n|                                                                         \t|                                    | HEX      | RGB              | Usage           | Accessibility Level AA           |\n|-------------------------------------------------------------------------\t|------------------------------------|----------|------------------|-----------------|-----------------|\n| <ColorBadge theme=\"light\" color=\"neutral-contrast-high\"/> \t            | **Neutral Contrast High**          | #323639 \t| 50/54/57         | div. elements   | ✓   |\n| <ColorBadge theme=\"light\" color=\"neutral-contrast-medium\"/> \t            | **Neutral Contrast Medium**        | #626669 \t| 98/102/105         | div. elements   | ✓   |\n| <ColorBadge theme=\"light\" color=\"neutral-contrast-low\"/> \t                | **Neutral Contrast Low**           | #E3E4E5 \t| 227/228/229        | only for decorative elements   | -   |\n\n\n### Notifications\nNotification colors are to be used only to display warnings, error or status messages.\nWhen using notification colors …\n\n- … always make sure not to rely on color only when displaying status (for more information scroll down to *Accessibility*).\n- … always check manually if the color contrast is sufficient depending on the Porsche color theme and, therefore, the background color in use.\n\n|                                                                         \t|                         \t| HEX     \t| RGB         \t| Usage            |Accessibility Level AA          |\n|-------------------------------------------------------------------------\t|---------------------------|---------\t|-------------\t|-----------------| -----------------|\n| <ColorBadge theme=\"light\" color=\"notification-error\"/> \t                          | **Error**          \t| #E00000 \t| 224/0/0   | Error notification \t  | ✓   |\n| <ColorBadge theme=\"light\" color=\"notification-success\"/> \t                        | **Success**        \t| #018A16 \t| 1/138/22  \t  | Success notification \t  | ✓   |\n| <ColorBadge theme=\"light\" color=\"notification-warning\"/> \t                        | **Warning**        \t| #FF9B00 \t| 255/155/0  \t| Warning notification (only to be used on default background)\t  | - |\n| <ColorBadge theme=\"light\" color=\"notification-neutral\"/> \t                        | **Neutral**        \t| #0061BD \t| 0/97/189  \t| Neutral notification\t  | ✓  |\n\n### States\n\n|                                                         |                 | HEX     \t| RGB         \t| Usage          |\n|---------------------------------------------------------|-----------------|-----------|---------------|----------------|\n| <ColorBadge theme=\"light\" color=\"state-hover\"/> \t      | **Hover**       | #D5001C \t| 213/0/28      | Hover state    |\n| <ColorBadge theme=\"light\" color=\"state-active\"/> \t      | **Active**      | #D5001C \t| 213/0/28      | Active state   |\n| <ColorBadge theme=\"light\" color=\"state-disabled\"/>      | **Disabled**    | #96989A \t| 150/152/154   | Disabled state |\n\n\n### Color proportions\n\n![Porsche Light Theme color proportions](./assets/color-theme-proportions-light.png)\n\n\n---\n\n### Porsche Dark Theme\n\n![Porsche Dark Theme colors](./assets/color-theme-dark.png)\n\n### Brand color\n\n|                                                                              \t|                      \t    | HEX     \t| RGB           \t| Usage                                     |\n|-----------------------------------------------------------------------------\t|---------------------------|----------\t|----------------\t|------------------------------------------ |\n| <ColorBadge theme=\"dark\" color=\"brand\"/> \t                                          | **Brand**         \t| #D5001C \t| 213/0/28       \t| CI color                    |\n\n### Background colors\n\n|                                                                       \t|                      \t    | HEX     \t| RGB           \t| Usage            |\n|-----------------------------------------------------------------------\t|---------------------------|----------\t|----------------\t|----------------- |\n| <ColorBadge theme=\"dark\" color=\"background-default\"/> \t                                    | **Background Default**        \t| #0E1418 \t| 14/20/24      \t| Page background  |\n| <ColorBadge theme=\"dark\" color=\"background-surface\"/>                                      | **Background Surface**        \t| #262B2E \t| 38/43/46        | Additional backgrounds, for example for tiles or contrasting content areas |\n| <ColorBadge theme=\"dark\" color=\"background-shading\"/>  | **Background Shading** | #0E1418 (opacity 0.9) | 14/20/24 (opacity 0.9) | Full-page overlays to make e.g. modal layers stand out from the background  | \n\n\n#### Background notification colors\n\n|                                                                         \t|                      \t    | HEX     \t| RGB           \t| Usage            |\n|-------------------------------------------------------------------------\t|---------------------------|----------\t|----------------\t|----------------- |\n| <ColorBadge theme=\"dark\" color=\"notification-error-soft\"/> \t                          | **Background Error Soft**        \t| #FEC5C5 \t| 254/197/197   | Error Soft (only to be used for notification background) \t  | \n| <ColorBadge theme=\"dark\" color=\"notification-success-soft\"/> \t                        | **Background Success Soft**        \t| #BFEEC6 \t| 191/238/198  \t  | Success Soft (only to be used for notification background)  \t  |\n| <ColorBadge theme=\"dark\" color=\"notification-warning-soft\"/> \t                        | **Background Warning Soft**       \t| #FFE6BF \t| 255/230/191 \t| Warning Soft (only to be used for notification background)\t  |\n| <ColorBadge theme=\"dark\" color=\"notification-neutral-soft\"/> \t                        | **Background Neutral Soft**       \t| #C7E4FF \t| 199/228/255 \t| Neutral Soft (only to be used for notification background)\t  | \n\n\n### Base color\n\n|                                                                         \t|                    \t    | HEX     \t| RGB           \t| Usage                                   |\n|-------------------------------------------------------------------------\t|-------------------------|----------\t|----------------\t|---------------------------------------- |\n| <ColorBadge theme=\"dark\" color=\"default\"/>  \t                                    | **Default**      \t| #FFFFFF \t| 255/255/255    \t| Default text/icon color                 |\n\n### Neutral colors\nThe neutral palette is to be used for all basic architectonic page elements such as tile backgrounds, dividers or other graphical elements.\nThe set consists of several grey shades that are based on a pre-defined mixing ratio of black in combination with a slightly touch of blue.\n\n|                                                                         \t|                                    | HEX      | RGB              | Usage           | Accessibility Level AA           |\n|-------------------------------------------------------------------------\t|------------------------------------|----------|------------------|-----------------|-----------------|\n| <ColorBadge theme=\"dark\" color=\"neutral-contrast-high\"/> \t                | **Neutral Contrast High**          | #E3E4E5 \t| 227/228/229      | div. elements   | ✓   |\n| <ColorBadge theme=\"dark\" color=\"neutral-contrast-medium\"/> \t            | **Neutral Contrast Medium**        | #B0B1B2 \t| 176/177/178      | div. elements   | ✓   |\n| <ColorBadge theme=\"dark\" color=\"neutral-contrast-low\"/> \t                | **Neutral Contrast Low**           | #4A4E51 \t| 74/78/81         | only for decorative elements | -   |\n\n### Notifications\nNotification colors are to be used only to display warnings, error or status messages.\nWhen using notification colors …\n\n- … always make sure not to rely on color only when displaying status (for more information scroll down to *Accessibility*).\n- … always check manually if the color contrast is sufficient depending on the Porsche color theme and, therefore, the background color in use.\n\n|                                                                         \t|                         \t| HEX     \t| RGB         \t| Usage            |Accessibility Level AA          |\n|-------------------------------------------------------------------------\t|---------------------------|---------\t|-------------\t|-----------------| -----------------|\n| <ColorBadge theme=\"dark\" color=\"notification-error\"/> \t                                        | **Error**          \t| #FC1717 \t| 252/23/23   \t  | Error notification | ✓   |\n| <ColorBadge theme=\"dark\" color=\"notification-success\"/> \t                                      | **Success**        \t| #01BA1D \t| 1/186/29  \t  | Success notification |  ✓   |\n| <ColorBadge theme=\"dark\" color=\"notification-warning\"/> \t                                    | **Warning**        \t| #FF9B00 \t| 255/155/0  \t| Warning notification | ✓   |\n| <ColorBadge theme=\"dark\" color=\"notification-neutral\"/> \t                                    | **Neutral**        \t| #2193FF \t| 33/147/255  \t| Neutral notification | ✓   |\n\n### States\nThe focus color is only to be used to highlight components on focus enabling users navigating through the website via keyboard.\n\n|                                                        |                 | HEX     \t| RGB         \t| Usage              |\n|--------------------------------------------------------|-----------------|------------|---------------|----------------|\n| <ColorBadge theme=\"dark\" color=\"state-hover\"/> \t     | **Hover**       | #FF0223\t| 255/2/35      | Hover state    |\n| <ColorBadge theme=\"dark\" color=\"state-active\"/> \t     | **Active**      | #FF0223 \t| 255/2/35     | Active state   |\n| <ColorBadge theme=\"dark\" color=\"state-disabled\"/>      | **Disabled**    | #7C7F81 \t| 124/127/129   | Disabled state |\n\n### Color proportions\n\n![Porsche Dark Theme color proportions](./assets/color-theme-proportions-dark.png)\n\n\n--- \n\n## Porsche color principles\n\n### Be consistent.\nOnce you’ve picked a **Porsche color theme** for you UI design you should stick with it within the application.\nEnsure consistency by integrating audits in your workflow.\n\n### Be accessible.\nAlways keep in mind that **not every user gets to experience colors the same way**\ndue to color blindness, visual impairment or simply because of the environment.\nTherefore, you should always care about accessibility.\n\n### Be purposeful.\nUse color wisely and always **focus on supporting the user’s needs** and the purpose of the content within the UI.\n\n### Be Porsche.\nGenerate a dedicated **Porsche feeling** within the UI by using the colors given\nin the brand color palette. Avoid using shades or opacity values for the brand\ncolors.\n\nSticking to the [Porsche Brand Code](https://brandguide.porsche.com/elements/manual/view/id/548) this means:\n\n- Generous (but also well-considered) use of white space to emphasize the brand’s exclusiveness and high-quality.\n- Form follows function – and so does color.\n- Use color to support a clean, precise design language. Stick to the essentials and avoid a non-functional decorative use of color.\n\n---\n\n## Accessibility\n\nIn order to make content accessible for a wide range of people and to improve the product’s usability in general, we stick to the common [WCAG 2.1 Standard](https://www.w3.org/WAI/standards-guidelines/wcag/new-in-21/) when designing Porsche web applications.\n\n- Always ensure a sufficient contrast ratio. The combination of text and background color should pass the WCAG AA standard and have a contrast ratio of at least 4.5:1 for standard text size and 3:1 for larger text sizes.\n\n- Combinations of other colored elements must pass the WCAG AA standard with a minimum 3:1 ratio, unless it's only a decorative element.\n\n- Don’t rely on color only to convey information (for example when displaying status or error messages). This is of high importance especially in critical cases, e.g. when displaying safety-relevant vehicle data.\n\n---\n\n## Helpful tools and resources\n\n### Sketch plugins\n- [Stark](https://getstark.co)\n- [Color Contrast Analyser](https://github.com/getflourish/Sketch-Color-Contrast-Analyser)\nBoth plugins help you to check the color contrast of two selected layers in Sketch, no matter if it's text or surface color.\n\n### Web tools\n- [Color Oracle](https://colororacle.org/) is a free color blindness simulator for both Windows and Mac, that gives you an impression on how your designs are perceived by visually impaired users.\n-  With [Tanaguru Contrast Finder](http://contrast-finder.tanaguru.com/) you can easily check color contrasts on your desired level of accessibility.\n\n---\n\n## Do's & Don'ts\nAlways ensure a sufficient contrast ratio. The combination of text and background color should pass the WCAG AA standard.\n\n![Example for accessibility](./assets/color-accessibility-dont-01.png)"
    },
    "Content Wrapper": {
      "Examples": "# Content Wrapper\n\nWhen designing a web page you have different possibilities to layout your content – be it limited to a dedicated width with spacings to the left and right of the viewport (\"basic\" version), stretched to the largest viewport without any spacing (\"extended\") or even to the largest total screen width (\"fluid\").\nThe `p-content-wrapper` defines the outer spacings between the content area and the left and right screen sides, as well as centering its content and setting a max-width.\n\nCan be used along with [Grid](components/grid), [Flex](components/flex) or with any custom content.\n\n### Width\n\n* **Basic**: max width 1920px including 7-10% safe zone\n* **Extended**: max width 1920px\n* **Fluid**: full width\n\n<Playground :markup=\"basic\" :config=\"config\">\n  <select v-model=\"width\">\n    <option disabled>Select a width mode</option>\n    <option value=\"basic\">Basic</option>\n    <option value=\"extended\">Extended</option>\n    <option value=\"fluid\">Fluid</option>\n  </select>\n</Playground>\n\n### Background color\n\n* **transparent**: does not set any background color\n* **default**: uses surface color depending on theming\n\n<Playground :markup=\"transparent\" class=\"playground-content-wrapper-background-color\" :config=\"config\">\n  <select v-model=\"backgroundColor\">\n    <option disabled>Select a background color</option>\n    <option value=\"transparent\">Transparent</option>\n    <option value=\"default\">Default</option>    \n  </select>\n</Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    width = 'basic';\n    backgroundColor = 'transparent';\n    config = { themeable: true };    \n    \n    get basic(){\n      return `<p-content-wrapper width=\"${this.width}\">\n  <div class=\"example-content\">Some content</div>\n</p-content-wrapper>`;\n    }\n    get transparent(){\n      return `<p-content-wrapper background-color=\"${this.backgroundColor}\">\n  <div class=\"example-content\">Some content</div>\n</p-content-wrapper>`;\n    }\n\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  @import '~@porsche-design-system/utilities/scss';\n\n  ::v-deep .playground-content-wrapper-background-color .demo{\n    background-color: deeppink;\n  }  \n  \n  ::v-deep .example-content {\n    @include p-text-small;\n    color: $p-color-theme-dark-default;\n    text-align: center;\n    background: lightskyblue;\n  }\n</style>",
      "Usage": "# Content Wrapper\n\n**The Content Wrapper enables you to …**\n- … define outer spacings between content area and left/right screen side.\n- … center the content area within the screen.\n- … set a maximum width for the content area.\n\n## Types\n\nDepending on your layout requirements you can choose between the following options for the content area, whereas each of them can be applied module-based to give you a maximum of flexibility for your page layouts:\n\n### Basic (default)\n\nDepending on the screen width the \"Basic\" variant **includes a margin of 7% or 10% between content area and the left and right screen sides** (100% = full screen width):\n\n| **Viewport** | **Margin** |\n|--------------|------------|\n| **XS-L (320-1759 px)** | 7% |\n| **XL (1760 px or larger)** | 10% |\n\n### Extended\n\nThe \"Extended\" content area includes no defined margin on the left and right of the content and has a maximum width of 1920 px. Thus, in viewport sizes from 1920 px onwards there is a growing white space outside the left and right edge of the content area.\n\n### Fluid\n\nThis is the variant of your choice when you want your content to span to the full screen width, containing no margin or visual gap between content area and screen edges.\n\n### Layout combination of content width variants\n\n![Content Wrapper with Fluid safe zone](./assets/content-wrapper-width-variants.png)\n\n## Layout approach or: How to combine Content Wrapper with Grid, Flex or …\n\n**The Content Wrapper can house both the Grid and Flex or any custom content.** The principle of how to apply the Content Wrapper component is quite simple – just think \"from big to small\" when defining the module layouts:\n  \n1. First of all, you define the **Content Wrapper** type for your layout part based on the content width variants described above.\n2. **The content area of each layout part** can then itself be designed by using Grid and/or Flex or any custom way of content layouting, depending on the individual requirements of the module.\n\n## Related components\n\n- [Grid](components/grid)\n- [Flex](components/flex)",
      "Props": "# Content Wrapper\n\n## Properties\n\n| Property          | Attribute          | Description                                                                                                                                        | Type                               | Default         |\n| ----------------- | ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------- | --------------- |\n| `backgroundColor` | `background-color` | Defines the background color.                                                                                                                      | `'default'` <br>` 'transparent'`       | `'transparent'` |\n| `theme`           | `theme`            | Adapts the color when used on dark background.                                                                                                     | `'dark'` <br>` 'light'`                | `'light'`       |\n| `width`           | `width`            | Defines the outer spacings between the content area and the left and right screen sides, as well as centering its content and setting a max-width. | `'basic'` <br>` 'extended'` <br>` 'fluid'` | `'basic'`       |\n"
    },
    "Divider": {
      "Examples": "# Divider\n\nThe `p-divider` is used as 'horizontal or vertical rule' and displays a dividing line.\nThe component is self-closing. Slotted content between the component tags won't be displayed. \n\n## Horizontal\n\n<Playground :markup=\"horizontal\" :config=\"config\"></Playground>\n\n## Vertical\n\n**Hint:** The component has not an implicit vertical height unless we set a container which provides it or define the height on the component itself.\n\n<Playground :markup=\"vertical\" :config=\"config\"></Playground>\n\n## Responsive\n\nYou can change the Divider orientation by using different major breakpoints `xs`, `s`, `m`, `l`, `xl`.\n\n<Playground :markup=\"responsive\" :config=\"config\"></Playground>\n\n## Colors\n\nPredefined colors associated with its theme are available.\n\n<Playground :markup=\"colors\" :config=\"config\">\n  <select v-model=\"color\">\n    <option disabled>Select a color</option>\n    <option>neutral-contrast-low</option>\n    <option>neutral-contrast-medium</option>\n    <option>neutral-contrast-high</option>\n  </select>\n</Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };    \n    color = 'neutral-contrast-low';\n    \n    horizontal = `<p-divider></p-divider>`;\n\n    vertical = \n`<div class=\"divider-vertical-container-example\">\n  <p-divider orientation=\"vertical\"></p-divider>\n</div>`;\n\n    responsive =\n`<div class=\"divider-vertical-responsive-container-example\">\n  <p-divider orientation=\"{base: 'horizontal', l: 'vertical'}\"></p-divider>\n</div>`;\n\n    get colors(){\n      return `<p-divider color=\"${this.color}\"></p-divider>`;\n    }\n  }\n</script>\n<style scoped lang=\"scss\">\n  @import '~@porsche-design-system/utilities/scss';\n\n  ::v-deep .divider-vertical-container-example {\n    display: flex;\n    height: 100px;\n  }\n  @include p-media-query(\"l\") {\n    ::v-deep .divider-vertical-responsive-container-example {\n      display: flex;\n      height: 100px;\n    }\n  }\n</style>",
      "Usage": "# Divider\n\n## When to use\n  • Use a Divider to create visual separation between related sections of content.   \n  • Use a Divider as a single element or embedded in components like, for example, tables or accordions.\n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Divider as follows\n\n| Type | Usage |\n|----|----|\n| Horizontal divider | The horizontal dividers is preset with auto-width thus technically adapts to the width of surrounding elements per default. |\n| Vertical divider | The vertical divider preset default height of 100%. |\n| Responsiveness | Both variants provide a responsive behaviour, so it's also possible to switch between the variants responsively (e.g. when it's necessary to switch from a horizontal divider on desktop to a vertical divider on mobile screens). |\n\n\n## Usage\n\n### Color appearance\n\nDividers should generally **only be used in neutral colors**. Depending on the purpose the Porsche Design System provides three neutral scales for both Light and Dark Theme. Prefererably they should be used only on the themes' background colors (Background or Surface color).\n\n#### Neutral Contrast Low\nThis subtle color version **should be used only for \"nice to have\" and merely decorative dividers** that have no immediate effect on the user's perception of the page content as the color \"Neutral Contrast Low\" is not accessibility-safe for neither Light nor Dark Theme. Or in other words: You can use a divider in Neutral Contrast Low whenever the answer to \"Would the user safely find their way around without the divider?\" would definitely be \"Yes\". In these examples the dividers are helpful, but without them the large spacing would do the job of making the separation between the text parts recognizable:\n\n![Example for divider in Neutral Contrast Low](./assets/divider-neutralcontrast-low1.png)  \n  \n\n![Example for divider in Neutral Contrast Low](./assets/divider-neutralcontrast-low2.png)\n\n#### Neutral Contrast Medium / Neutral Contrast High\n\n**Whenever it's crucial for the perception of the page content**, you should go for dividers in Neutral Contrast Medium or Neutral Contrast High. In this example a visual impaired user would hardly be able to recognize the divider as a relevant part for the price calculation if it wouldn't be displayed in a higher contrast color:\n\n![Example for divider in Neutral Contrast Medium](./assets/divider-neutralcontrast-medium.png)\n\n### Layout appearance\n\nThe dividers provided in the Porsche Design System can be used in different visual appearance depending on the layout purpose: \n\n#### Full-bleed divider\n\nFull-bleed dividers **span the entire length of a module or page (\"end to end\")**. Therefore they can be used to separate page sections that require a clear and more distinct visual separation, for example to separate the header from the rest of the web page.\n\n![Full-bleed divider spanning from left to right edge of the web page](./assets/divider-fullbleed.png)\n\n#### Inset divider\n\nInset dividers are **used with an offset that is often generated by preset grid margins, module paddings or by individually defined outer spacings**. They are appropriate for separating related content (like, for example, table rows or a list of contact items) and help users to scan content and perceive it as a related collection. \n\n![Inset dividers with left and right outer spacing](./assets/divider-inset.png)\n\n---\n\n## Do’s & Don’ts\n\n### Avoid heavy use of dividers.\nDividers **should be used sparingly** within a page layout. This is especially relevant for dividers that are used as single elements (and therefore not necessarily occur multiple times as parts of a table, for example). A heavy use of dividers can lead to visual distraction and crowded interfaces, also taking up too much space especially on mobile screens.\n\n### Don't use dividers only to structure content.\n\n**Dividers are not the only way to create visual rhythm and hierarchy** on a web page. You should always consider other options for structuring content before using dividers, such as: \n\n* White space / spacings (think of general perception rules like the law of proximity)\n* Sizings\n* Color (e.g. emphasizing content by using lighter or darker colors)\n\nAlso sometimes the elements on a page already create a visual structure on their own (like an image grid, for example) and there might be no need for using extra separating elements like dividers.\n\n### Keep decorative use to a minimum.\n\nDividers **should always be used to structure and therefore help the user perceiving the content** of a web page. A usage for a 100% decorative purpose is possible, but should be kept to an absolute minimum.\n\n---\n\n## Related components\n\n* [Grid](components/grid)\n* [Spacing](components/spacing)",
      "Props": "# Divider\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type Orientation = 'vertical' | 'horizontal'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property      | Attribute     | Description                       | Type                                                                                                                                                                                                                                                         | Default                  |\n| ------------- | ------------- | --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------ |\n| `color`       | `color`       | Defines color depending on theme. | `'neutral-contrast-high'` <br>` 'neutral-contrast-low'` <br>` 'neutral-contrast-medium'`                                                                                                                                                                             | `'neutral-contrast-low'` |\n| `orientation` | `orientation` | Defines orientation.              | `'vertical'` <br>` 'horizontal'` <br>` BreakpointCustomizable<Orientation>` | `'horizontal'`           |\n| `theme`       | `theme`       | Adapts color depending on theme.  | `'dark'` <br>` 'light'`                                                                                                                                                                                                                                          | `'light'`                |\n"
    },
    "Fieldset": {
      "Examples": "# Fieldset\n\nThe `p-fieldset-wrapper` is a grouping component for wrapping contextual associated form elements. \nIts visible part is an HTML *legend* element, which can be seen like a headline for describing the meaning of a form block.\nYou can see some usage examples on our [form patterns section](patterns/forms/resources).\n\n## Basic example with label\n\n<Playground :markup=\"withLabelMarkup\"></Playground>\n\n--- \n\n## Slotted label\n\n<Playground :markup=\"slottedLabelMarkup\"></Playground>\n\n---\n\n## Size\n\n<Playground :markup=\"sizeMarkup\" :config=\"config\">\n  <select v-model=\"size\">\n    <option disabled>Select a label-size</option>\n    <option value=\"small\">small</option>\n    <option value=\"medium\">medium</option>\n  </select>\n</Playground>\n\n--- \n\n## Required\n\nIf the `p-fieldset-wrapper` is set to `required=\"true\"`, only the label of the `p-fieldset-wraper` gets an asterisk. \nIt is removed from all wrapped child components, as long as they are Porsche Design System form elements.\nYou should still set required on the input of the wrapped form elements to ensure accessibility, and the support of screen readers.\n\n<Playground :markup=\"requiredMarkup\"></Playground>\n\n--- \n\n## State\n\n<Playground :markup=\"stateMarkup\" :config=\"config\">\n  <select v-model=\"state\">\n    <option disabled>Select a state</option>\n    <option value=\"error\">error</option>\n    <option value=\"success\">success</option>\n  </select>\n</Playground>\n\n--- \n\n## Slotted message\n\n<Playground :markup=\"slottedMessageMarkup\" :config=\"config\">\n  <select v-model=\"slottedMessage\">\n    <option disabled>Select a state</option>\n    <option value=\"error\">error</option>\n    <option value=\"success\">success</option>\n  </select>\n</Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n \n    size = 'small';\n    state = 'error';\n    slottedMessage = 'error';\n\n    withLabelMarkup =\n`<p-fieldset-wrapper label=\"Some legend label\">\n  <p-text-field-wrapper label=\"Some label\">\n    <input type=\"text\" name=\"some-name\" />\n  </p-text-field-wrapper>\n</p-fieldset-wrapper>`;\n\n    slottedLabelMarkup =\n`<p-fieldset-wrapper>\n  <span slot=\"label\">Some legend label</span>\n  <p-text-field-wrapper label=\"Some label\">\n    <input type=\"text\" name=\"some-name\" />\n  </p-text-field-wrapper>\n</p-fieldset-wrapper>`;\n\n   get sizeMarkup() {\n    return `<p-fieldset-wrapper label=\"Some legend label\" label-size=${this.size}>\n  <p-text-field-wrapper label=\"Some label\">\n    <input type=\"text\" name=\"some-name\" />\n  </p-text-field-wrapper>\n</p-fieldset-wrapper>`;\n   }\n\n    requiredMarkup =\n`<p-fieldset-wrapper label=\"Some legend label\" required=\"true\">\n  <p-text-field-wrapper label=\"Some label\">\n    <input type=\"text\" name=\"some-name\" required />\n  </p-text-field-wrapper>\n</p-fieldset-wrapper>`;\n\n   get stateMarkup() {\n    const attr = ` state=${this.state} message=\"${this.state === 'error' ? 'Some error message' : 'Some success message'}\" `;\n    return `<p-fieldset-wrapper label=\"Some legend label\"${attr} class=\"state-markup\">\n  <p-text-field-wrapper label=\"Some label\" state=${this.state}>\n    <input type=\"text\" name=\"some-name\" />\n  </p-text-field-wrapper>\n  <p-checkbox-wrapper label=\"Some label\" hide-label=\"false\" state=${this.state}>\n   <input type=\"checkbox\" name=\"some-name\" />\n  </p-checkbox-wrapper>\n  <p-checkbox-wrapper label=\"Some label\" hide-label=\"false\" state=${this.state}>\n    <input type=\"checkbox\" name=\"some-name\" />\n  </p-checkbox-wrapper>\n</p-fieldset-wrapper>`;\n   }\n\n   get slottedMessageMarkup() {\n    const attr = `${this.slottedMessage === 'error' ? 'Some error message' : 'Some success message'}`;\n    return `<p-fieldset-wrapper label=\"Some legend label\" state=${this.slottedMessage}>\n  <p-text-field-wrapper label=\"Some label\" state=${this.slottedMessage}>\n    <input type=\"text\" name=\"some-name\" />\n  </p-text-field-wrapper>\n  <span slot=\"message\">${attr}</span>\n</p-fieldset-wrapper>`;\n   }\n  }\n</script>\n\n<style>\n  .state-markup > * {\n    margin-top: .5rem;\n  }\n</style>\n",
      "Usage": "# Fieldset\n\n## When to use\n  • When you need a container for visually-grouped form elements, e.g. form fields.\n\n---\n\n## Behavior\n\n### Sections including form elements\nWe recommend for each fieldset the headline 4 (for the visible part *legend*) of the respective viewport.\nPlease find more information in the [Form pattern guideline](patterns/forms).\n\n<div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n    <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n    <img src=\"./assets/fieldset-examples.png\" alt=\"Examples for fieldset\" />\n</div>\n",
      "Props": "# Fieldset\n\n## Properties\n\n| Property    | Attribute    | Description                                       | Type                             | Default    |\n| ----------- | ------------ | ------------------------------------------------- | -------------------------------- | ---------- |\n| `label`     | `label`      | The label text.                                   | `string`                         | `''`       |\n| `labelSize` | `label-size` | The size of the label text.                       | `'medium'` <br>` 'small'`            | `'medium'` |\n| `message`   | `message`    | The message styled depending on validation state. | `string`                         | `''`       |\n| `required`  | `required`   | Marks the Fieldset as required.                   | `boolean`                        | `false`    |\n| `state`     | `state`      | The validation state.                             | `'error'` <br>` 'none'` <br>` 'success'` | `'none'`   |\n"
    },
    "Flex": {
      "Examples": "# Flex\n\nThe Porsche Design System flex layout system is based on standard CSS Flexbox browser behaviour and can be controlled by the properties of the `p-flex` container and `p-flex-item`.\nIt can be used to quickly layout standard content blocks or components. \nIt does not replace the [Grid](components/grid) component which should be used to define basic page structures.\n\n### Flex\nInitialize standard Flexbox container to define Flex context.\n\n<Playground :markup=\"flexInline()\"></Playground>\n\n### Inline\nFlex inline displays Flex containers in a row.\n\n<Playground :markup=\"flexInline('true')\"></Playground>\n\n### Responsive\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"flexInline('{ base: false, l: true }')\"></Playground>\n\n---\n\n### Flex direction\n\nDefine or change direction of the Flex items to rows or columns and set order.\n\n#### Row\n\n<Playground :markup=\"direction('row')\"></Playground>\n\n#### Row-reverse\n\n<Playground :markup=\"direction('row-reverse')\"></Playground>\n\n#### Column\n\n<Playground :markup=\"direction('column')\"></Playground>\n\n#### Column-reverse\n\n<Playground :markup=\"direction('column-reverse')\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"direction('{ base: \\'column\\', l: \\'row\\' }')\"></Playground>\n\n---\n\n### Flex wrap\n\nThe flex wrap property is used to force Flex items to stay in line independently of the Flex container width, or to flow in multiple lines forced by the Flex container width.\n\n#### Nowrap\n\n<Playground :markup=\"wrap()\"></Playground>\n\n#### Wrap\n\n<Playground :markup=\"wrap('wrap')\"></Playground>\n\n#### Wrap-reverse\n\n<Playground :markup=\"wrap('wrap-reverse')\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"wrap('{ base: \\'wrap\\', l: \\'nowrap\\' }')\"></Playground>\n\n---\n\n### Flex justify-content\n\nThis property defines the alignment of Flex items on the main axis in conjunction to their siblings.\n\n#### Flex-start\n\n<Playground :markup=\"justifyContent()\"></Playground>\n\n#### Flex-end\n\n<Playground :markup=\"justifyContent('flex-end')\"></Playground>\n\n#### Center\n\n<Playground :markup=\"justifyContent('center')\"></Playground>\n\n#### Space-between\n\n<Playground :markup=\"justifyContent('space-between')\"></Playground>\n\n#### Space-around\n\n<Playground :markup=\"justifyContent('space-around')\"></Playground>\n\n#### Space-evenly\n\n<Playground :markup=\"justifyContent('space-evenly')\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"justifyContent('{ base: \\'flex-start\\', l: \\'flex-end\\' }')\"></Playground>\n\n---\n\n### Flex align-items\n\nThis property defines the alignment of Flex items on the cross axis in conjunction to their siblings.\n\n#### Stretch\n\n<Playground :markup=\"alignItems()\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Flex-start\n\n<Playground :markup=\"alignItems('flex-start')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Flex-end\n\n<Playground :markup=\"alignItems('flex-end')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Center\n\n<Playground :markup=\"alignItems('center')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Baseline\n\n<Playground :markup=\"alignItems('baseline')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"alignItems('{ base: \\'flex-start\\', l: \\'flex-end\\' }')\" :config=\"{height: 'fixed'}\"></Playground>\n\n---\n\n### Flex align-content\n\nThis aligns Flex items on the cross axis of the Flex container when there is extra space available.\nThis property has only effect when there is more than one line of Flex items.\n\n#### Stretch\n\n<Playground :markup=\"alignContent()\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Flex-start\n\n<Playground :markup=\"alignContent('flex-start')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Flex-end\n\n<Playground :markup=\"alignContent('flex-end')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Center\n\n<Playground :markup=\"alignContent('center')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Space-between\n\n<Playground :markup=\"alignContent('space-between')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Space-around\n\n<Playground :markup=\"alignContent('space-around')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Space-evenly\n\n<Playground :markup=\"alignContent('space-evenly')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"alignContent('{ base: \\'flex-start\\', l: \\'flex-end\\' }')\" :config=\"{height: 'fixed'}\"></Playground>\n\n---\n\n## Modifier for Flex items (children)\n\n### Flex-item width\n\nThe widths of Flex items is normally defined through its contents by default.\nBut it is also possible to define specific predefined widths.\n\n#### Specific\n\n<Playground :markup=\"widthSpecific\" :config=\"{spacing: 'block-small'}\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"widthWrap\"></Playground>\n\n---\n\n### Flex-item offset\n\nItems can have different offsets that work similar like column widths.\n\n#### Widths\n\n<Playground :markup=\"offsetWidths\" :config=\"{spacing: 'block-small'}\"></Playground>\n\n#### Responsive\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"offsetReponsive\" :config=\"{spacing: 'block-small'}\"></Playground>\n\n---\n\n### Flex-item align-self\n\nYou can override the align-items properties of the Flex container for individual Flex items.\n\n#### Auto\n\n<Playground :markup=\"alignSelf()\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Stretch\n\n<Playground :markup=\"alignSelf('stretch', 'flex-start')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Flex-start\n\n<Playground :markup=\"alignSelf('flex-start')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Flex-end\n\n<Playground :markup=\"alignSelf('flex-end')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Center\n\n<Playground :markup=\"alignSelf('center')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Baseline\n\n<Playground :markup=\"alignSelf('baseline')\" :config=\"{height: 'fixed'}\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"alignSelf('{ base: \\'flex-start\\', l: \\'flex-end\\' }')\" :config=\"{height: 'fixed'}\"></Playground>\n\n---\n\n### Flex-item grow\n\nFlexbox default behaviours on how the item widths are rendered (stretched) can be overwritten with the following class names.\n\nIt handles how to grow an item based on the space that is left to fulfill the parent's width.\n\n#### Grow - 0\n\n<Playground :markup=\"grow()\"></Playground>\n\n#### Grow - 1\n\n<Playground :markup=\"grow('1')\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l`, `xl`.\n\n<Playground :markup=\"grow('{ base: 0, l: 1 }')\"></Playground>\n\n---\n\n### Flex-item shrink\n\nFlexbox default behaviour on how the item widths are rendered (shrinked) can be overwritten with the following class names.\n\nIt handles how to shrink an item based on the space that exceeds the parents width to fulfill it.\n\n#### Shrink - 1\n\n<Playground :markup=\"shrink()\"></Playground>\n\n#### Shrink - 0\n\n<Playground :markup=\"shrink('0')\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"shrink('{ base: 0, l: 1 }')\"></Playground>\n\n---\n\n### Flex-item shorthand\n\nSetting shorthand properties for Flex grow, shrink and base:\n\n#### Initial (grow:0, shrink:1 and base:auto)\n\n<Playground :markup=\"flexShorthand('initial')\"></Playground>\n\n#### Auto (grow:1, shrink:1 and base:auto)\n\n<Playground :markup=\"flexShorthand('auto')\"></Playground>\n\n#### Equal (grow:1, shrink:1 and base:0)\n\n<Playground :markup=\"flexShorthand('equal')\"></Playground>\n\n#### None (grow:0, shrink:0 and base:auto)\n\n<Playground :markup=\"flexShorthand('none')\"></Playground>\n\n#### Responsiveness\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"flexShorthand('{base: \\'initial\\', l: \\'equal\\'}')\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    flexInline(value: string) {\n      const attr = value ? ` inline=\"${value}\"` : '';\n      return `<p-flex${attr} class=\"example-flex\">\n  <p-flex-item>1</p-flex-item>\n  <p-flex-item>2</p-flex-item>\n</p-flex>\n<p-flex${attr} class=\"example-flex\">\n  <p-flex-item>1</p-flex-item>\n  <p-flex-item>2</p-flex-item>\n</p-flex>`;\n    }\n\n    direction(value: string) {\n      const attr = value ? ` direction=\"${value}\"` : '';\n      return `<p-flex${attr} class=\"example-flex\">\n  <p-flex-item>1</p-flex-item>\n  <p-flex-item>2</p-flex-item>\n  <p-flex-item>3</p-flex-item>\n</p-flex>`;\n    }\n\n    wrap(value: string) {\n      const attr = value ? ` wrap=\"${value}\"` : '';\n      return `<p-flex${attr} class=\"example-flex\">\n  ${Array.from(Array(9)).map((x, i) => `<p-flex-item>${i+1}</p-flex-item>`).join('\\n  ')}\n</p-flex>`;\n    }\n    \n    justifyContent(value: string) {\n      const attr = value ? ` justify-content=\"${value}\"` : '';\n      return `<p-flex${attr} class=\"example-flex\">\n  <p-flex-item>1</p-flex-item>\n  <p-flex-item>2</p-flex-item>\n  <p-flex-item>3</p-flex-item>\n</p-flex>`;\n    }\n\n    alignItems(value: string) {\n      const attr = value ? ` align-items=\"${value}\"` : '';\n      return `<p-flex${attr} class=\"example-flex\">\n  <p-flex-item>1</p-flex-item>\n  <p-flex-item>2</p-flex-item>\n  <p-flex-item>3</p-flex-item>\n</p-flex>`;\n    }\n\n    alignContent(value: string) {\n      const attr = value ? ` align-content=\"${value}\"` : '';\n      return `<p-flex wrap=\"wrap\"${attr} class=\"example-flex\">\n  ${Array.from(Array(9)).map((x, i) => `<p-flex-item>${i+1}</p-flex-item>`).join('\\n  ')}\n</p-flex>`;\n    }\n    \n    alignSelf(value: string, valueParent?: string) {\n      const attr = value ? ` align-self=\"${value}\"` : '';\n      const parentAttr = valueParent ? ` align-items=\"${valueParent}\"` : '';\n      return `<p-flex${parentAttr} class=\"example-flex\">\n  <p-flex-item${value === 'baseline' ? attr : ''}>1</p-flex-item>\n  <p-flex-item>2</p-flex-item>\n  <p-flex-item${attr}>3</p-flex-item>\n  <p-flex-item>4</p-flex-item>\n</p-flex>`;\n    }\n    \n    grow(value: string) {\n      const attr = value ? ` grow=\"${value}\"` : '';\n      return `<p-flex class=\"example-flex\">\n  <p-flex-item>1</p-flex-item>\n  <p-flex-item${attr}>2</p-flex-item>\n</p-flex>`;\n    }\n    \n    shrink(value: string) {\n      const attr = value ? ` shrink=\"${value}\"` : '';\n      return `<p-flex class=\"example-flex\">\n  <p-flex-item${attr} style=\"width: 80%\">1</p-flex-item>\n  <p-flex-item style=\"width: 80%\">2</p-flex-item>\n</p-flex>`;\n    }\n    \n    flexShorthand(value: string) {\n      const attr = value ? ` flex=\"${value}\"` : '';\n      return `<p-flex class=\"example-flex\">\n  <p-flex-item${attr}>1 - short content</p-flex-item>\n  <p-flex-item${attr}>2 - large amount of content lorem ipsum dolor sit amet consecutor sibling nira space</p-flex-item>\n  <p-flex-item${attr}>3 - short content</p-flex-item>\n</p-flex>`;\n    }\n    \n    widthSpecific =\n`<p-flex class=\"example-flex\">\n  <p-flex-item width=\"one-quarter\">one-quarter</p-flex-item>\n  <p-flex-item width=\"one-quarter\">one-quarter</p-flex-item>\n  <p-flex-item width=\"one-quarter\">one-quarter</p-flex-item>\n  <p-flex-item width=\"one-quarter\">one-quarter</p-flex-item>\n</p-flex>\n<p-flex class=\"example-flex\">\n  <p-flex-item width=\"one-third\">one-third</p-flex-item>\n  <p-flex-item width=\"one-third\">one-third</p-flex-item>\n  <p-flex-item width=\"one-third\">one-third</p-flex-item>\n</p-flex>\n<p-flex class=\"example-flex\">\n  <p-flex-item width=\"half\">half</p-flex-item>\n  <p-flex-item width=\"half\">half</p-flex-item>\n</p-flex>\n<p-flex class=\"example-flex\">\n  <p-flex-item width=\"two-thirds\">two-thirds</p-flex-item>\n  <p-flex-item width=\"one-third\">one-third</p-flex-item>\n</p-flex>\n<p-flex class=\"example-flex\">\n  <p-flex-item width=\"three-quarters\">three-quarters</p-flex-item>\n  <p-flex-item width=\"one-quarter\">one-quarter</p-flex-item>\n</p-flex>\n<p-flex class=\"example-flex\">\n  <p-flex-item width=\"full\">full</p-flex-item>\n</p-flex>`;\n\n    widthWrap =\n`<p-flex wrap=\"wrap\" class=\"example-flex\">\n  <p-flex-item width=\"{ base: 'half', l: 'one-quarter' }\">1</p-flex-item>\n  <p-flex-item width=\"{ base: 'half', l: 'one-quarter' }\">2</p-flex-item>\n  <p-flex-item width=\"{ base: 'half', l: 'one-quarter' }\">3</p-flex-item>\n  <p-flex-item width=\"{ base: 'half', l: 'one-quarter' }\">4</p-flex-item>\n</p-flex>`;\n\n    offsetWidths =\n`<p-flex class=\"example-flex\">\n  <p-flex-item offset=\"one-quarter\" width=\"three-quarters\">Offset: quarter</p-flex-item>\n</p-flex>\n<p-flex class=\"example-flex\">\n  <p-flex-item offset=\"one-third\" width=\"two-thirds\">Offset: third</p-flex-item>\n</p-flex>\n<p-flex class=\"example-flex\">\n  <p-flex-item offset=\"half\" width=\"half\">Offset: half</p-flex-item>\n</p-flex>\n<p-flex class=\"example-flex\">\n  <p-flex-item offset=\"two-thirds\" width=\"one-third\">Offset: 2 thirds</p-flex-item>\n</p-flex>\n<p-flex class=\"example-flex\">\n  <p-flex-item offset=\"three-quarters\" width=\"one-quarter\">Offset: 3 quarters</p-flex-item>\n</p-flex>`;\n\n    offsetReponsive =\n`<p-flex class=\"example-flex\">\n  <p-flex-item offset=\"{ base: 'none', l: 'one-third' }\">Responsive offset</p-flex-item>\n</p-flex>`;\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  @import '~@porsche-design-system/utilities/scss';\n\n  $color-blue-1: lightskyblue;\n  $color-blue-2: deepskyblue;\n  $color-blue-3: dodgerblue;\n  $color-blue-4: royalblue;\n  $color-highlight: deeppink;\n\n  ::v-deep .example-flex {\n    & > * {\n      @include p-text-small;\n      padding: 0 6vw;\n      color: $p-color-theme-dark-default;\n      text-align: center;\n\n      &:nth-child(1n) {\n        background-color: $color-blue-1;\n      }\n\n      &:nth-child(2n) {\n        background-color: $color-blue-2;\n      }\n\n      &:nth-child(3n) {\n        background-color: $color-blue-3;\n      }\n\n      &:nth-child(4n) {\n        background-color: $color-blue-4;\n      }\n\n      &[align-self] {\n        background-color: $color-highlight;\n      }\n\n      &[align-self='baseline']:nth-child(1) {\n        margin-top: $p-spacing-24;\n      }\n    }\n\n    &[align-items] > *:not([align-self='stretch']) {\n      &:nth-child(1n) {\n        height: 40px;\n      }\n\n      &:nth-child(2n) {\n        height: 80px;\n      }\n\n      &:nth-child(3n) {\n        height: 54px;\n      }\n    }\n\n    &[align-items='baseline'] > :nth-child(2) {\n      margin-top: $p-spacing-24;\n    }\n  }\n</style>",
      "Props": "# Flex\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type AlignContent = 'center' | 'flex-start' | 'flex-end' | 'space-between' | 'space-around' | 'space-evenly' | 'stretch'`  \n`type AlignItems = 'center' | 'flex-start' | 'flex-end' | 'stretch' | 'baseline'`  \n`type Direction = 'row' | 'column' | 'row-reverse' | 'column-reverse'`  \n`type Inline = boolean`  \n`type JustifyContent = 'center' | 'flex-start' | 'flex-end' | 'space-between' | 'space-around' | 'space-evenly'`  \n`type Wrap = 'nowrap' | 'wrap' | 'wrap-reverse'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property         | Attribute         | Description                                                                                                                                                               | Type                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Default        |\n| ---------------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || -------------- |\n| `alignContent`   | `align-content`   | This aligns a flex container's individual lines when there is extra space in the cross-axis, similar to how 'justifyContent' aligns individual items along the main axis. | `'center'` <br>` 'flex-start'` <br>` 'flex-end'` <br>` 'space-between'` <br>` 'space-around'` <br>` 'space-evenly'` <br>` 'stretch'` <br>` BreakpointCustomizable<AlignContent>` | `'stretch'`    |\n| `alignItems`     | `align-items`     | Defines how the flex items are aligned along the cross axis.                                                                                                              | `'center'` <br>` 'flex-start'` <br>` 'flex-end'` <br>` 'stretch'` <br>` 'baseline'` <br>` BreakpointCustomizable<AlignItems>`                                                                                                                                                                                                                                                                                                | `'stretch'`    |\n| `direction`      | `direction`       | Defines the direction of the main and cross axis. The default 'row' defines the main axis as horizontal left to right.                                                    | `'row'` <br>` 'column'` <br>` 'row-reverse'` <br>` 'column-reverse'` <br>` BreakpointCustomizable<Direction>`                                                                                                                                                                                                                                                                                                                                                                             | `'row'`        |\n| `inline`         | `inline`          | Defines the flex containers content flow if 2 or more containers are siblings of each other.                                                                              | `boolean` <br>` BreakpointCustomizable<Inline>`| `false`        |\n| `justifyContent` | `justify-content` | Defines how the flex items are aligned along the main axis.                                                                                                               | `'center'` <br>` 'flex-start'` <br>` 'flex-end'` <br>` 'space-between'` <br>` 'space-around'` <br>` 'space-evenly'` <br>` BreakpointCustomizable<JustifyContent>`                                                                                            | `'flex-start'` |\n| `wrap`           | `wrap`            | Handles wrapping behaviour of elements.                                                                                                                                   | `'nowrap'` <br>` 'wrap'` <br>` 'wrap-reverse'` <br>` BreakpointCustomizable<Wrap>`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | `'nowrap'`     |\n\n# Flex Item\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type AlignSelf = 'center' | 'auto' | 'flex-start' | 'flex-end' | 'stretch' | 'baseline'`  \n`type Flex = 'none' | 'auto' | 'initial' | 'equal'`  \n`type Grow = 0 | 1`  \n`type Offset = 'none' | 'one-quarter' | 'one-third' | 'half' | 'two-thirds' | 'three-quarters'`  \n`type Shrink = 0 | 1`  \n`type Width = 'auto' | 'one-quarter' | 'one-third' | 'half' | 'two-thirds' | 'three-quarters' | 'full'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property    | Attribute    | Description                                                                                                                                                                      | Type| Default     |\n| ----------- | ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || ----------- |\n| `alignSelf` | `align-self` | Defines how this flex item is aligned along the cross axis. This overwrites the cross axis alignment set by the container. Corresponds to the 'alignSelf' css property.          | `'center'` <br>` 'auto'` <br>` 'flex-start'` <br>` 'flex-end'` <br>` 'stretch'` <br>` 'baseline'` <br>` BreakpointCustomizable<AlignSelf>`                                                                                                                                      | `'auto'`    |\n| `flex`      | `flex`       | The shorthand property for the combined definition of 'shrink', 'grow' and 'basis'                                                                                               | `'none'` <br>` 'auto'` <br>` 'initial'` <br>` 'equal'` <br>` BreakpointCustomizable<Flex>`                                                                                                                                                                                                                                                                                                                                                                                           | `'initial'` |\n| `grow`      | `grow`       | The ability to allow/disallow the flex child to grow.                                                                                                                            | `0` <br>` 1` <br>` BreakpointCustomizable<Grow>`| `0`         |\n| `offset`    | `offset`     | The offset of the column. You can also supply values for specific breakpoints, like {base: 'none', l: 'one-quarter'}. You always need to provide a base value when doing this.   | `'none'` <br>` 'one-quarter'` <br>` 'one-third'` <br>` 'half'` <br>` 'two-thirds'` <br>` 'three-quarters'` <br>` BreakpointCustomizable<Offset>`                                                                       | `'none'`    |\n| `shrink`    | `shrink`     | The ability to allow/disallow the flex child to shrink.                                                                                                                          | `0` <br>` 1` <br>` BreakpointCustomizable<Shrink>`| `1`         |\n| `width`     | `width`      | The width of the flex item. You can also supply values for specific breakpoints, like {base: 'full', l: 'one-quarter'}. You always need to provide a base value when doing this. | `'auto'` <br>` 'one-quarter'` <br>` 'one-third'` <br>` 'half'` <br>` 'two-thirds'` <br>` 'three-quarters'` <br>` 'full'` <br>` BreakpointCustomizable<Width>` | `'auto'`    |\n"
    },
    "Grid": {
      "Examples": "# Grid\n\nThe `p-grid` provides a visual structuring system for a homogeneous and balanced content placement across all Porsche web experiences and screen sizes. \nThe Porsche Design System grid system is based upon a standard 12 column responsive grid.\nIts main purpose is to provide a solid and flexible grid system for defining layout areas and page structures.\nIt is not meant to function as a toolkit for layouting content blocks or components.\nFor this, the [Flex](components/flex) component is the right choice.\n\nIn order to prevent horizontal scrolling and correct alignment it's recommended to use the **Grid** wrapped within [**Content Wrapper**](components/content-wrapper).\n\n\n### Grid size\n\nFollowing example shows a standard grid implementation.  \n\n<Playground :markup=\"size\" :config=\"config\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"sizeResponsiveness\" :config=\"config\"></Playground>\n\n---\n\n### Grid offset\n\nIn some cases it can be necessary to indent columns. The grid gives basic indentions based on grid sizings.\n\n<Playground :markup=\"offset\" :config=\"config\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"offsetResponsiveness\" :config=\"config\"></Playground>\n\n---\n\n### Grid direction\n\nIn some cases it might be necessary to define or change direction of the columns/rows. The default setting is `row`. But `column` is also possible to set the columns vertically underneath each other. A change of the optical order can be achieved by setting `reverse`.\n\n#### Row (default)\n\n<Playground :markup=\"direction('row')\" :config=\"config\"></Playground>\n\n#### Row reverse\n\n<Playground :markup=\"direction('row-reverse')\" :config=\"config\"></Playground>\n\n#### Column\n\n<Playground :markup=\"direction('column')\" :config=\"config\"></Playground>\n\n#### Column-reverse\n\n<Playground :markup=\"direction('column-reverse')\" :config=\"config\"></Playground>\n\n#### Responsiveness\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"direction('{ base: \\'column\\', m: \\'row\\' }', '{ base: 12, m: 4 }')\" :config=\"config\"></Playground>\n\n---\n\n### Grid gutter\n\nThe grid gutter can have the sizes `16`, `24` and `36`.\n\n#### Gutter\n\n<Playground :markup=\"gutter()\" :config=\"config\"></Playground>\n\n#### Gutter with breakpoint\n\nThe gutter sizes can be set on different breakpoints.\n\n<Playground :markup=\"gutterBreakpoint()\" :config=\"config\"></Playground>\n\n---\n\n### Grid wrap\n\n#### Wrap (default)\n\n<Playground :markup=\"wrap('wrap')\" :config=\"config\"></Playground>\n\n#### Nowrap\n\n<Playground :markup=\"wrap('nowrap')\" :config=\"config\"></Playground>\n\n---\n\n### Grid nesting\n\nBasic nesting of grids is supported. \"Basic\" because of percentage value of width and gutter which couldn't be calculated for each column width. Here are some examples of \"do's\" and \"don'ts\":\n\n<Playground :markup=\"nesting\" :config=\"config\"></Playground>\n\n#### Possible nesting by keeping columns in \"the grid\"\n\nOnly columns with the following widths could be nested:\n\n* total width of 8\n* total width of 6\n* total width of 4\n\n#### Forbidden nesting\n\nNesting inside columns with the following widths should be prevented, because all item widths won't be in \"the grid\" anymore:\n\n* total width of 11\n* total width of 10\n* total width of 9\n* total width of 7\n* total width of 5\n* total width of 3\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { spacing: 'block-small' };\n    \n    get size() {\n      return `<p-grid class=\"example-grid\">\n  <p-grid-item size=\"12\">12</p-grid-item>\n</p-grid>\n${Array.from(Array(11)).map((x, i) => `<p-grid class=\"example-grid\">\n  <p-grid-item size=\"${i+1}\">${i+1}</p-grid-item>\n  <p-grid-item size=\"${11-i}\">${11-i}</p-grid-item>\n</p-grid>`).join('\\n')}`;\n    }\n\n    sizeResponsiveness =\n`<p-grid class=\"example-grid\">\n  <p-grid-item size=\"{ base: 6, m: 2 }\">A</p-grid-item>\n  <p-grid-item size=\"{ base: 6, m: 10 }\">B</p-grid-item>\n</p-grid>`;\n\n    get offset() {\n      return `${Array.from(Array(11)).map((x, i) => `<p-grid class=\"example-grid\">\n    <p-grid-item offset=\"${i+1}\" size=\"${11-i}\">${i+1}</p-grid-item>\n</p-grid>`).join('\\n')}`;\n    }\n    \n    offsetResponsiveness =\n`<p-grid class=\"example-grid\">\n  <p-grid-item offset=\"{ base: 6, m: 2 }\" size=\"{ base: 6, m: 10 }\">A</p-grid-item>\n</p-grid>`;\n\n    direction(value: string, size: string = '4') {\n      const attr = value ? ` direction=\"${value}\"` : '';\n      const sizeAttr = value ? ` size=\"${size}\"` : '';\n      return `<p-grid${attr} class=\"example-grid\">\n  <p-grid-item${sizeAttr}>A</p-grid-item>\n  <p-grid-item${sizeAttr}>B</p-grid-item>\n  <p-grid-item${sizeAttr}>C</p-grid-item>\n</p-grid>`;\n    }\n\n    gutter() {\n      return `<p-grid gutter=\"16\" class=\"example-grid\">\n  <p-grid-item size=\"4\">A</p-grid-item>\n  <p-grid-item size=\"4\">B</p-grid-item>\n  <p-grid-item size=\"4\">C</p-grid-item>\n</p-grid>\n<p-grid gutter=\"24\" class=\"example-grid\">\n  <p-grid-item size=\"4\">D</p-grid-item>\n  <p-grid-item size=\"4\">E</p-grid-item>\n  <p-grid-item size=\"4\">F</p-grid-item>\n</p-grid>\n<p-grid gutter=\"36\" class=\"example-grid\">\n  <p-grid-item size=\"4\">G</p-grid-item>\n  <p-grid-item size=\"4\">H</p-grid-item>\n  <p-grid-item size=\"4\">I</p-grid-item>\n</p-grid>`; \n    }\n\n    gutterBreakpoint(){\n      return `<p-grid gutter=\"{base: 36, m: 16}\" class=\"example-grid\">\n    <p-grid-item size=\"4\">A</p-grid-item>\n    <p-grid-item size=\"4\">B</p-grid-item>\n    <p-grid-item size=\"4\">C</p-grid-item>\n  </p-grid>`;\n    }\n\n    wrap(value: string) {\n      return `<p-grid wrap=\"${value}\" class=\"example-grid\">\n  <p-grid-item size=\"6\">A</p-grid-item>\n  <p-grid-item size=\"6\">B</p-grid-item>\n  <p-grid-item size=\"6\">C</p-grid-item>\n  <p-grid-item size=\"6\">D</p-grid-item>\n</p-grid>`; \n    }\n    \n    nesting =\n`<p-grid>\n  <p-grid-item size=\"6\">\n    <p-grid class=\"example-grid\">\n      <p-grid-item size=\"6\">A</p-grid-item>\n      <p-grid-item size=\"6\">B</p-grid-item>\n    </p-grid>\n  </p-grid-item>\n  <p-grid-item size=\"6\">\n    <p-grid class=\"example-grid\">\n      <p-grid-item size=\"4\">A</p-grid-item>\n      <p-grid-item size=\"8\">B</p-grid-item>\n    </p-grid>\n  </p-grid-item>\n</p-grid>`;\n\n\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  @import '~@porsche-design-system/utilities/scss';\n  \n  ::v-deep .example-grid p-grid-item {\n    @include p-text-small;\n    color: $p-color-theme-dark-default;\n    text-align: center;\n    background: lightskyblue;\n    background-clip: content-box;\n    \n    &[offset] {\n      color: lightskyblue;\n      text-indent: calc(-100% - 48px);\n    }\n  }\n</style>",
      "Usage": "# Grid\n\n## Architecture\n\n- **The 12 grid columns** offer a high layout flexibility by\nbeing dividable by 2, 3, 4 or 6. For layouting on mobile screens (widths < 759px), it is recommended to use a 6-column-grid to avoid too much small-scaling or even „cluttering“.\n- **The grid gutter** separates the columns horizontally by in-between-spacings.\nThe gutter is defined with fixed pixel sizes and breakpoints to balance size\nratios between elements on the respective screen size. \n- **The grid width** is resulting from the total screen width minus gutter widths and minus defined margins resulting from the [Content Wrapper](components/content-wrapper) in use. The Grid component can only be combined with the \"Basic\" content width variant.\n\n![Porsche Design System grid architecture](./assets/grid-components.png)\n\n### Overview \n\n| Viewport | Range | Columns | Gutter | Margin (100% = full screen width) | \n| -------- | -------- | -------- | -------- | -------- | \n| **XS** | 320-759 px | 12 columns (Design only: 6 columns) |  16 px | 7% | \n| **S** | 760-999 px | 12 columns |  24 px | 7% | \n| **M** | 1000-1299 px | 12 columns | 36 px| 7% | \n| **L** | 1300-1759 px  |  12 columns | 36 px | 7% |  \n| **XL** | 1760 px or larger |  12 columns | 36 px | 10% | \n\n![Porsche Design System grid architecture](./assets/grid-viewports.png)\n\n## Grid breakpoints \nBreakpoints are predefined width points at which the layout can be changed to fit the corresponding screen size.\nWithin the layouts for Porsche web experiences we use the following main breakpoints, derived from statistical data on browser size usage: \n\n- 480px\n- 760px\n- 1000px \n- 1300px\n- 1760px\n\nIt is highly recommended to stick to the defined breakpoints, especially for general elements like headers or footers. But not every individual offered breakpoint has to be used.\n\n### Optimising for defined viewport sizes\n\nBased on statistical use of specific devices all Porsche web layouts should be optimised for the following viewport sizes: \n\n- 320 / 375px\n- 768px\n- 1024px\n- 1366px\n- 1920px\n\nThe main breakpoints (see above) are deliberately chosen with some distance from the optimised device sizes due to a higher fault tolerance.\n\n### Viewport range\n\nTo provide consistency throughout all Porsche web experiences, all layouts should be optimised for a viewport range from **320 px** to a maximum of **1920 px**. For viewport sizes from 1920 px onwards a growing white space outside the left and right edge should be used. This can be done by using the \"extended\" content width variant of the [Content Wrapper](components/content-wrapper) component.\n\n![Porsche Design System grid architecture](./assets/grid-maxwidth.png)\n\n### Layout template \nTo make layouting from scratch as easy as possible, the optimized viewport sizes are provided by [Sketch artboard templates](https://designsystem.porsche.com/sketch/porsche-design-system-layout-template.sketch). They come with final layout settings (including the responsive grid) that can be turned visible via: View → Canvas → Show Layout.\n\n## Tips for responsive layouting\n\n### Use the grid purposefully\n\nAll content elements that should behave responsively should be placed horizontally within the grid, always starting in a column. The spacing between content elements is therefore defined by the grid gutter. \nIn most cases, this should refer to modules or content boxes, while smaller spaces on a more or less \"micro-level\" (both vertical and horizontal) should be defined by using the [Spacing](components/spacing) component.\n\n![Porsche Design System grid alignment](./assets/grid-alignment.png)\n\n### Use the given possibilites wisely\n\nWhen it comes to designing a component or module responsively, there are several screws that can be turned to adapt to different screen sizes, such as changing:\n\n- the component’s grid column width and, therefore, its wrapping behaviour. Example: A 3-column text on desktop, each column using 4 grid columns, can be stacked on mobile using 12 grid columns.\n- text sizes – commonly using smaller text on mobile, larger text on bigger screens.\n- the general layout of the component by using different patterns on mobile and desktop. Example: Turning a multi-column teaser module on desktop into an accordion on mobile.\n\nWhen designing responsive layouts, always aim to find the solution that works best for the specific case, keeping the user and the specific use context in mind.\n\n![Porsche Design System grid behaviour](./assets/grid-behaviour.png)\n\n### Don’t be afraid to think outside of the box\n\nIt is possible to place elements end-to-end, spanning from left to the right edge of the screen. This can be done by using the \"fluid\" content width variant of the [Content Wrapper](components/content-wrapper) component.\nAn example would be a full-width image that generates a more emotional and concise side entry. However, this should be a well-contemplated exception.\n\nAlso, for image groups, it is possible to break out of the grid in order to create a stronger visual coherence. The outer edges (left and right) of the image group should always be placed within the grid, whereas the edges between the single images can be placed exactly in the middle of the gutter.\n\n![End-to-end placement](./assets/grid-endtoend.png)\n",
      "Props": "# Grid\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type Direction = 'row' | 'column' | 'row-reverse' | 'column-reverse'`  \n`type Gutter = 16 | 24 | 36`  \n`type Wrap = 'nowrap' | 'wrap'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property    | Attribute   | Description                                                                                                                                                                                                                                                           | Type                                                                                                                                                                                                                                                                                                                                                                                                                                                             | Default                      |\n| ----------- | ----------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------- |\n| `direction` | `direction` | Defines the direction of the main and cross axis. The default 'row' defines the main axis as horizontal left to right. Also defines the direction for specific breakpoints, like {base: 'column', l: 'row'}. You always need to provide a base value when doing this. | `'row'` <br>` 'column'` <br>` 'row-reverse'` <br>` 'column-reverse'` <br>` BreakpointCustomizable<Direction>` | `'row'`                      |\n| `gutter`    | `gutter`    | Defines the gutter size for specific breakpoints. You always need to provide a base value when doing this.                                                                                                                                                            | `16` <br>` 24` <br>` 36` <br>` BreakpointCustomizable<Gutter>`                                                                                                                                                                                                                                                                       | `{ base: 16, s: 24, m: 36 }` |\n| `wrap`      | `wrap`      | Handles wrapping behaviour of elements.                                                                                                                                                                                                                               | `'nowrap'` <br>` 'wrap'` <br>` BreakpointCustomizable<Wrap>`                                                                                                                                                                                                                                                             | `'wrap'`                     |\n\n# Grid Item\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type Offset = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11`  \n`type Size = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property | Attribute | Description                                                                                                                                                                                       | Type| Default |\n| -------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || ------- |\n| `offset` | `offset`  | The offset of the column. Can be between 0 and 11. Also defines the offset of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this. | `0` <br>` 1` <br>` 2` <br>` 3` <br>` 4` <br>` 5` <br>` 6` <br>` 7` <br>` 8` <br>` 9` <br>` 10` <br>` 11` <br>` BreakpointCustomizable<Offset>`         | `0`     |\n| `size`   | `size`    | The size of the column. Can be between 1 and 12. Also defines the size of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this.     | `1` <br>` 2` <br>` 3` <br>` 4` <br>` 5` <br>` 6` <br>` 7` <br>` 8` <br>` 9` <br>` 10` <br>` 11` <br>` 12` <br>` BreakpointCustomizable<Size>` | `1`     |\n"
    },
    "Icon": {
      "Examples": "# Icon\n\nAlong with other Porsche basic elements - such as colors, typography and the Porsche marque - icons are core components of the Porsche design. \nThe clear graphic symbols allow quick orientation and are internationally recognized.\nThe Porsche Design System is using a **SVG icon system** to visually present an icon object. \nEach icon is hosted on the Porsche Design System CDN to be served and cached as fast as possible.\n\n\n## Name\n\nFor more information and a complete overview of all available Porsche icons, head over to Porsche Icons ([Porsche Icons](https://icons.porsche.com)).  \nTo reference an icon just use the `name` property with a predefined icon id.\n\n<Playground :markup=\"name\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nWith the use of SVG icons, there are options to enhance accessibility to users using screen readers. Here are some good practices:\n* Always provide a textual description through **ARIA** with the `aria` property to expose a more descriptive experience to screen reader users.\n* If icons are purely decorative or are used in combination with text, hide the icon for screen readers:\n```html\n<p-icon name=\"arrow\" aria-hidden=\"true\" />\n```\n    \n---\n\n## Size\n\nThere are default sizes for the icon component which should cover most use cases. If a specific size is needed, the size can be set to `inherit` in order to specify the size from outside.\n\n<Playground :markup=\"sizeMarkup\" :config=\"config\">\n  <select v-model=\"size\">\n    <option disabled>Select a size</option>\n    <option>small</option>\n    <option>medium</option>\n    <option>large</option>\n    <option>inherit</option>\n  </select>\n</Playground>\n    \n---\n\n## Color\nPredefined colors associated with its theme are available. Furthermore, inherit mode can be used to define a custom color.\n\n<Playground :markup=\"colorMarkup\" :config=\"config\">\n  <select v-model=\"color\">\n    <option disabled>Select a color</option>\n    <option value=\"brand\">Brand</option>\n    <option value=\"default\">Default</option>\n    <option value=\"neutral-contrast-high\">Neutral Contrast High</option>\n    <option value=\"neutral-contrast-medium\">Neutral Contrast Medium</option>\n    <option value=\"neutral-contrast-low\">Neutral Contrast Low</option>\n    <option value=\"notification-success\">Notification Success</option>\n    <option value=\"notification-warning\">Notification Warning</option>\n    <option value=\"notification-error\">Notification Error</option>\n    <option value=\"notification-neutral\">Notification Neutral</option>\n    <option value=\"inherit\">Inherit</option>\n  </select>\n</Playground>\n\n---\n\n## Custom icon\nThe whole Porsche icon set is hosted on the Porsche Design System CDN. If there is need to show a custom icon which doesn't exist yet, you can define a custom path (absolute or relative) to your SVG icon in the `source` property. Be sure that the custom icon serves the specific needs like size and viewbox which are described in the [design documentation](components/icon/design).\n\n<Playground :markup=\"custom\" :config=\"config\"></Playground>\n\n---\n\n## Lazy loaded icon\nIcons can be lazy loaded, which means that they are being loaded (fetched) when they get visible in the viewport.\n\n<Playground :markup=\"lazy\" :config=\"config\"></Playground>\n\n---\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { capitalCase } from 'change-case';\n  import { ICONS_MANIFEST } from '@porsche-design-system/assets';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n\n    size = 'large';\n    color = 'brand';\n    \n    get name() {\n      return Object.keys(ICONS_MANIFEST).map(x => `<p-icon name=\"${x}\" aria=\"{ 'aria-label': '${capitalCase(x)} icon' }\"></p-icon>`).join('\\n');\n    }\n    \n    get sizeMarkup() {\n      const style = this.size === 'inherit' ? ' style=\"width: 96px; height: 96px;\"' : '';\n      return `<p-icon size=\"${this.size}\" name=\"highway\" aria=\"{ 'aria-label': 'Highway icon' }\"${style}></p-icon>`\n    }\n    \n    get colorMarkup() {\n      const style = this.color === 'inherit' ? ' style=\"color: deeppink\"' : '';\n      return `<p-icon name=\"highway\" color=\"${this.color}\" aria=\"{ 'aria-label': 'Highway icon' }\"${style}></p-icon>`\n    }\n    \n    custom =\n`<p-icon source=\"${require('./assets/icon-custom-kaixin.svg')}\" aria=\"{ 'aria-label': 'Icon for social media platform Kaixin' }\"></p-icon>`;\n\n    lazy =\n`<p-icon name=\"information\" lazy=\"true\" aria=\"{ 'aria-label': 'Information icon' }\" />`;\n  }\n</script>",
      "Usage": "# Icon\n\n## Overview\nA complete overview of all available Porsche icons, head over to [Porsche Icons](https://icons.porsche.com).\n\n---\n\n## Look & feel\n\nThe clean style of the Porsche icon set matches the Porsche brand aesthetically and creates a consistent look and feel across all products and platforms. Each icon is reduced to its minimal form reflecting essential characteristics. By following the typical Porsche lines and uniting the exclusive, high-classy and very sportive brand image, the Porsche icons provide  a high recognizability and readability, even in very small sizes. \n\n---\n\n## Usage\n\n### Base area & grid\n\nAll icons are placed on a transparent 24x24 pixel base area, including a dedicated safe zone. \n\nThe icons themselves are built upon a base grid structure and guidelines for sizing the different icon shapes. These scale guidelines ensure that each icon has the same visual weight so they all feel the same size, regardless of their overall shape. \n\n### Interactive\n\nFor interactive icons you should use the [Button Pure](components/button-pure) that comes with a dedicated click/touch area and with different states.\n\n### Color\n\nThe icons come with standard colors you should stick to. However, when you decide to override the default icon colors for special reasons, it is recommended to use the color(s) uniformly throughout your application to provide consistency.\n\n### Context\n\nIcons can stand alone as visual symbols or in combination with text. Either way, always keep in mind that a semantic element can have different meanings depending on the context it is put into, such as within different labels.\n",
      "Guideline": "# Icon\n\nWe want to enable you to use the icons you need. Check the [Porsche Design System](https://icons.porsche.com/#/) for an appropriate icon you are looking for. If there is no match, we encourage you to build, test and use the icons you need. To help you meet the quality standards of Porsche, you will find the guidelines below.\n\nDo you have an icon that is mandatory for several teams and purposes? We are happy to include it in the Porsche Design System. Feel free to get in touch with us on our [Porsche Design System Slack](https://porschedev.slack.com/archives/CT7AVHTTQ)\n\n\n\n**Icon Quality Standards**\n\n1. Metaphor and Appearance matches the Porsche icon environment\n\n2. Quality assurance (grid, color, pixel, naming, metatags, export criteria)\n\n3. User Testing (Recognition, Information scent)\n\n---\n\n## Metaphor and Appearance\n\n- Check the Porsche environment for similar or close icons to adapt (Web, App, In Car, Print).\n- Stick to the basic geometric shapes.\n- Default Porsche icons are based on 1px lines.\n- Use easy and commonly known metaphors.\n- Keep the details and complexity to a minimum.\n\n---\n\n## Quality assurance\n\n- Build your icons based on the default grid (24x24px). \n- Snap pixels to the grid to ensure a sharp visual appearance (prevents blurred lines because of anti-aliasing on low-resolution displays).\n- Icons with a centered vertical or horizontal 1px stroke must be placed 1px off to the left and/or top.\n- Try to balance the icons width and height for uniformed appearance in icon groups.\n- Respect the safe area around the icon (approximately 2px, can vary depending on ratio of icon).\n- Check your design in reference with other icons from the Porsche Design System.\n- Make sure corresponding icons have the same position e.g. the \"add\" and \"remove\" icon.\n- Design with only one color.\n\n**SVG Export Guideline**\n\n- Transform vector forms in a full, coherent vector shape. (convert strokes to shapes and merge objects)\n- Delete everything that is not necessary (layers, strokes, variants, etc.).\n- Export your icon as svg.\n- Name svg according to the icons (e.g. \"delete.svg\" or \"edit.svg\"). Name social icons \"logo-companyname.svg\".\n- We recommend running your svg through an optimizer to gain pure semantic code. Online SVG Optimizer: [Vecta](https://vecta.io/nano)\n\n---\n\n## User Testing\n\nWe want to ensure that icons are perceived in the intended way. To test icons for recognition and information scent we provide a simple Usabilityhub-Template. This is also required when moving icons to the Porsche Design System. Further, we highly recommend testing the icons in the specific use case.\n\nRead more on  \n[Nielsen Norman Group](https://www.nngroup.com/articles/icon-testing/)\n[UsabilityHub](https://usabilityhub.com/examples/easiest-icon-to-understand)\n\n\n",
      "Props": "# Icon\n\n## Properties\n\n| Property | Attribute | Description                                                                                      | Type| Default              |\n| -------- | --------- | ------------------------------------------------------------------------------------------------ || -------------------- |\n| `aria`   | `aria`    | Add ARIA attributes.                                                                             | `{ 'aria-label'?: string; }`| `undefined`          |\n| `color`  | `color`   | Basic color variations depending on theme property.                                              | `'brand'` <br>` 'default'` <br>` 'inherit'` <br>` 'neutral-contrast-high'` <br>` 'neutral-contrast-low'` <br>` 'neutral-contrast-medium'` <br>` 'notification-error'` <br>` 'notification-neutral'` <br>` 'notification-success'` <br>` 'notification-warning'`| `'default'`          |\n| `lazy`   | `lazy`    | If enabled, icon will be loaded lazily when it's visible in the viewport.                        | `boolean`| `false`              |\n| `name`   | `name`    | Specifies which icon to use.                                                                     | `'light'` <br>` 'reset'` <br>` '360'` <br>` 'accessibility'` <br>` 'active-cabin-ventilation'` <br>` 'add'` <br>` 'adjust'` <br>` 'arrow-double-down'` <br>` 'arrow-double-left'` <br>` 'arrow-double-right'` <br>` 'arrow-double-up'` <br>` 'arrow-down'` <br>` 'arrow-first'` <br>` 'arrow-head-down'` <br>` 'arrow-head-left'` <br>` 'arrow-head-right'` <br>` 'arrow-head-up'` <br>` 'arrow-last'` <br>` 'arrow-left'` <br>` 'arrow-right'` <br>` 'arrow-up'` <br>` 'augmented-reality'` <br>` 'battery-empty'` <br>` 'battery-full'` <br>` 'bell'` <br>` 'bookmark'` <br>` 'broadcast'` <br>` 'calculator'` <br>` 'calendar'` <br>` 'camera'` <br>` 'car'` <br>` 'car-battery'` <br>` 'card'` <br>` 'charging-active'` <br>` 'charging-state'` <br>` 'charging-station'` <br>` 'chart'` <br>` 'chat'` <br>` 'check'` <br>` 'city'` <br>` 'climate'` <br>` 'climate-control'` <br>` 'clock'` <br>` 'close'` <br>` 'closed-caption'` <br>` 'co2-emission'` <br>` 'compare'` <br>` 'configurate'` <br>` 'country-road'` <br>` 'cubic-capacity'` <br>` 'delete'` <br>` 'disable'` <br>` 'document'` <br>` 'download'` <br>` 'duration'` <br>` 'edit'` <br>` 'email'` <br>` 'exclamation'` <br>` 'external'` <br>` 'filter'` <br>` 'flash'` <br>` 'fuel-station'` <br>` 'garage'` <br>` 'gift'` <br>` 'globe'` <br>` 'grid'` <br>` 'highway'` <br>` 'home'` <br>` 'horn'` <br>` 'image'` <br>` 'increase'` <br>` 'information'` <br>` 'key'` <br>` 'leaf'` <br>` 'leather'` <br>` 'list'` <br>` 'locate'` <br>` 'lock'` <br>` 'lock-open'` <br>` 'logo-baidu'` <br>` 'logo-delicious'` <br>` 'logo-digg'` <br>` 'logo-facebook'` <br>` 'logo-foursquare'` <br>` 'logo-gmail'` <br>` 'logo-google'` <br>` 'logo-hatena'` <br>` 'logo-instagram'` <br>` 'logo-kaixin'` <br>` 'logo-kakaotalk'` <br>` 'logo-linkedin'` <br>` 'logo-naver'` <br>` 'logo-pinterest'` <br>` 'logo-qq'` <br>` 'logo-qq-share'` <br>` 'logo-reddit'` <br>` 'logo-skyrock'` <br>` 'logo-sohu'` <br>` 'logo-tecent'` <br>` 'logo-telegram'` <br>` 'logo-tiktok'` <br>` 'logo-tumblr'` <br>` 'logo-twitter'` <br>` 'logo-viber'` <br>` 'logo-vk'` <br>` 'logo-wechat'` <br>` 'logo-weibo'` <br>` 'logo-whatsapp'` <br>` 'logo-xing'` <br>` 'logo-yahoo'` <br>` 'logo-youku'` <br>` 'logo-youtube'` <br>` 'logout'` <br>` 'map'` <br>` 'menu-dots-horizontal'` <br>` 'menu-dots-vertical'` <br>` 'menu-lines'` <br>` 'minus'` <br>` 'mobile'` <br>` 'moon'` <br>` 'oil-can'` <br>` 'parking-brake'` <br>` 'parking-light'` <br>` 'pause'` <br>` 'phone'` <br>` 'pin'` <br>` 'play'` <br>` 'plug'` <br>` 'plus'` <br>` 'preheating'` <br>` 'printer'` <br>` 'purchase'` <br>` 'question'` <br>` 'racing-flag'` <br>` 'refresh'` <br>` 'replay'` <br>` 'route'` <br>` 'rss'` <br>` 'save'` <br>` 'screen'` <br>` 'search'` <br>` 'send'` <br>` 'share'` <br>` 'shopping-bag'` <br>` 'shopping-cart'` <br>` 'sidelights'` <br>` 'snowflake'` <br>` 'sort'` <br>` 'stack'` <br>` 'star'` <br>` 'steering-wheel'` <br>` 'stopwatch'` <br>` 'subtract'` <br>` 'success'` <br>` 'sun'` <br>` 'switch'` <br>` 'tablet'` <br>` 'tachometer'` <br>` 'truck'` <br>` 'upload'` <br>` 'user'` <br>` 'user-group'` <br>` 'user-manual'` <br>` 'video'` <br>` 'view'` <br>` 'view-off'` <br>` 'volume-off'` <br>` 'volume-up'` <br>` 'warning'` <br>` 'weight'` <br>` 'wifi'` <br>` 'work'` <br>` 'wrench'` <br>` 'wrenches'` <br>` 'zoom-in'` <br>` 'zoom-out'` | `'arrow-head-right'` |\n| `size`   | `size`    | The size of the icon.                                                                            | `'inherit'` <br>` 'large'` <br>` 'medium'` <br>` 'small'`| `'small'`            |\n| `source` | `source`  | Specifies a whole icon path which can be used for custom icons.                                  | `string`| `undefined`          |\n| `theme`  | `theme`   | Adapts the text color depending on the theme. Has no effect when 'inherit' is set as color prop. | `'dark'` <br>` 'light'`| `'light'`            |\n"
    },
    "Link": {
      "Examples": "# Link\n\nThe `p-link` component is essential to perform changes in **page routes**.\nFor an optimal user guidance and dedicated pursuit of business or sales goals, different types of Links (**Primary**, **Secondary**, **Tertiary**) are available for usage.\nA Link can be used with or without a label, but it's recommended to keep the **label visible** for better **usability** whenever possible.\nWhen used without a label, it is mandatory for **accessibility** to provide a descriptive label text for screen readers.\nIn case you want the user to execute an action, you should select the [Button](components/button) component instead.\n\n\n## Variants\n\nChoose between predefined styling variants.\n\n### Primary\n\n<Playground :markup=\"buttons('primary')\" :config=\"config\"></Playground>\n\n### Secondary (default)\n\n<Playground :markup=\"buttons()\" :config=\"config\"></Playground>\n\n### Tertiary\n\n<Playground :markup=\"buttons('tertiary')\" :config=\"config\"></Playground>\n\n### Responsive\n\n<Playground :markup=\"responsive\" :config=\"config\"></Playground>\n\n### ARIA attributes and states\n\nThrough the `aria` property you have the possibility to provide additional **ARIA** attributes and states to the component.\n<Playground :markup=\"accessibility\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\n* Make sure to provide **descriptive**, self explaining **labels** which could be understood without context. If short labels are used like **\"OK\"** make sure to provide additional textual contents to expose a more descriptive experience to screen reader users. This can be done through **ARIA** with the `aria` property or by using the **slotted** approach where you can set the `aria-label` attribute directly on the anchor tag.\n* If implementing the Link with a **hidden label** (`hide-label=\"true\"`), do not omit the label. Providing a **descriptive text** to support **screen reader** users is **mandatory**.\n* In general, preventing opening new windows by default with (`target=\"_blank\"`) is a good choice. Let users choose by themselves how to open links. However, if you choose to implement `target=\"_blank\"`, make sure to provide additional information with ARIA label, e.g.: `aria-label=\"Porsche Taycan model page (opens in new window)\"` \n\n---\n\n## Framework routing (anchor nesting)\n\nTo support custom anchor tags (e.g. framework specific routing) you can provide them as a **slotted element** of the component.\n\n<Playground :markup=\"routing\" :config=\"config\"></Playground>\n\n---\n\n## Link with specific icon\nIf another icon needs to be implemented, just replace the default icon with another predefined icon. Per default, all icons are fetched from the Porsche Design System CDN. Just choose an icon name from the `icon` property. If you need to link to another icon hosted somewhere else, just set the whole icon path to the `iconSource` prop.\n\n<Playground :markup=\"icon\" :config=\"config\"></Playground>\n\n## Bind events to the Link\nYou can use native `click`, `focus`, `focusin`, `blur` and `focusout` events on the link.\n\n<Playground :markup=\"events\" :config=\"config\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true, spacing: 'inline' };\n    \n    buttons(value: string) {\n      const attr = value ? ` variant=\"${value}\"` : '';\n      return `<p-link${attr} href=\"https://www.porsche.com\">Some label</p-link>\n<p-link${attr} href=\"https://www.porsche.com\" hide-label=\"true\">Some label</p-link>`;\n    }\n\n    responsive =\n`<p-link variant=\"primary\" href=\"https://www.porsche.com\" hide-label=\"{ base: true, s: false }\">Some label</p-link>\n<p-link variant=\"secondary\" href=\"https://www.porsche.com\" hide-label=\"{ base: true, m: false }\">Some label</p-link>\n<p-link variant=\"tertiary\" href=\"https://www.porsche.com\" hide-label=\"{ base: true, l: false }\">Some label</p-link>`;\n\n    accessibility = \n`<p-link href=\"https://www.porsche.com\" aria=\"{ 'aria-label': 'Some more descriptive label' }\">Some label</p-link>`;\n\n    routing =\n`<p-link>\n  <a href=\"https://www.porsche.com\">Some label</a>\n</p-link>`;\n\n    icon =\n`<p-link href=\"https://www.porsche.com\" icon=\"phone\">Some label</p-link>\n<p-link href=\"https://www.porsche.com\" icon-source=\"${require('./assets/icon-custom-kaixin.svg')}\" hide-label=\"true\">Some label</p-link>`;\n\n    events =\n`<p-link\n  href=\"https://www.porsche.com\"\n  onclick=\"alert('click'); return false;\"\n  onfocus=\"console.log('focus')\"\n  onfocusin=\"console.log('focusin')\"\n  onblur=\"console.log('blur')\"\n  onfocusout=\"console.log('focusout')\"\n>Some label</p-link>`;\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  .example-link {\n    display: inline-block;\n    outline: none;\n    text-decoration: none;\n  }\n</style>",
      "Usage": "# Link\n\n## When to use\n  • Use a Link to navigate to another page.  \n  • Use a Button to change the state of an application, which almost always happens on the same page. \n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Link as follows\n\n| Type | Usage |\n|----|----|\n| Primary | Link filled with the Porsche brand color. This type is only to be used for one or two high-priority actions within a page in order to give the user optimal guidance. |\n| Secondary | Default link with monochrome color fill. To be used for all other stand-alone Links that aren't high priority. |\n| Tertiary | An \"outline only\" link version. In hierarchy it is always subordinated to the filled view and can be used in two different cases. 1. In combination with a filled link (primary or secondary), for example in popular pairings such as \"submit\" (primary or secondary) and \"cancel\" (tertiary). 2. Stand-alone, when the priority of the action is lower compared to all other link actions within this page. |\n\n\n| Variant |   |\n|----|----|\n| Icon and text | This should be the option of your choice whenever possible, as icons should preferably always be paired with text for better comprehensibility and accessibility. The length of the link always adapts to the length of the text label.|\n| Icon only| This variant contains an icon only with no further text information. It is highly recommended to use it only in cases where the user is fully aware of the link function. This can be ensured e.g. by using an expressive icon or by logical composition with other components. |\n\n## Usage\n\n### Default icon\nThe default icon is an arrow right that can be replaced by any icon available in the Porsche web icon set. It should be changed only if it is ensured that another symbol is more appropriate to support the text content, making it easier for the user to understand the function quickly.  \n\n### Internal and external links\nFor internal links the arrow should be sufficient in most cases. External links can be displayed with the following icon:\n\n<p-link href=\"https://www.porsche.com\" icon=\"external\" aria-label=\"Extern link\">Some label</p-link>\n\n\n### Link position\n\nBy default the link is to be positioned left-aligned within a module or a screen. In special cases, where it serves a better user guidance, the position can be changed.\n\n### Link width\n\nEven if there is no technical limit to the link width, you should always make sure that the link remains legible, even more so in multiline state. It is recommended to use max. 100 characters per line (equals approx. 700px link width).\n\n### Multiline links\n\nThough it's technically possible to use multiline text in links, it's recommended to keep the text label short and, therefore, avoid multiline links.\n\n\n<div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n    <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n    <img src=\"./assets/link-examples.png\" alt=\"\"/>\n</div>\n",
      "Props": "# Link\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type HideLabel = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property     | Attribute     | Description                                                                                                    | Type| Default              |\n| ------------ | ------------- | -------------------------------------------------------------------------------------------------------------- || -------------------- |\n| `aria`       | `aria`        | Add ARIA attributes.                                                                                           | `{ 'aria-label'?: string; }`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | `undefined`          |\n| `download`   | `download`    | Special download attribute to open native browser download dialog if target url points to a downloadable file. | `string`| `undefined`          |\n| `hideLabel`  | `hide-label`  | Show or hide label. For better accessibility it is recommended to show the label.                              | `boolean` <br>` BreakpointCustomizable<HideLabel>`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | `false`              |\n| `href`       | `href`        | When providing an url then the component will be rendered as `<a>`.                                            | `string`| `undefined`          |\n| `icon`       | `icon`        | The icon shown.                                                                                                | `'light'` <br>` 'reset'` <br>` '360'` <br>` 'accessibility'` <br>` 'active-cabin-ventilation'` <br>` 'add'` <br>` 'adjust'` <br>` 'arrow-double-down'` <br>` 'arrow-double-left'` <br>` 'arrow-double-right'` <br>` 'arrow-double-up'` <br>` 'arrow-down'` <br>` 'arrow-first'` <br>` 'arrow-head-down'` <br>` 'arrow-head-left'` <br>` 'arrow-head-right'` <br>` 'arrow-head-up'` <br>` 'arrow-last'` <br>` 'arrow-left'` <br>` 'arrow-right'` <br>` 'arrow-up'` <br>` 'augmented-reality'` <br>` 'battery-empty'` <br>` 'battery-full'` <br>` 'bell'` <br>` 'bookmark'` <br>` 'broadcast'` <br>` 'calculator'` <br>` 'calendar'` <br>` 'camera'` <br>` 'car'` <br>` 'car-battery'` <br>` 'card'` <br>` 'charging-active'` <br>` 'charging-state'` <br>` 'charging-station'` <br>` 'chart'` <br>` 'chat'` <br>` 'check'` <br>` 'city'` <br>` 'climate'` <br>` 'climate-control'` <br>` 'clock'` <br>` 'close'` <br>` 'closed-caption'` <br>` 'co2-emission'` <br>` 'compare'` <br>` 'configurate'` <br>` 'country-road'` <br>` 'cubic-capacity'` <br>` 'delete'` <br>` 'disable'` <br>` 'document'` <br>` 'download'` <br>` 'duration'` <br>` 'edit'` <br>` 'email'` <br>` 'exclamation'` <br>` 'external'` <br>` 'filter'` <br>` 'flash'` <br>` 'fuel-station'` <br>` 'garage'` <br>` 'gift'` <br>` 'globe'` <br>` 'grid'` <br>` 'highway'` <br>` 'home'` <br>` 'horn'` <br>` 'image'` <br>` 'increase'` <br>` 'information'` <br>` 'key'` <br>` 'leaf'` <br>` 'leather'` <br>` 'list'` <br>` 'locate'` <br>` 'lock'` <br>` 'lock-open'` <br>` 'logo-baidu'` <br>` 'logo-delicious'` <br>` 'logo-digg'` <br>` 'logo-facebook'` <br>` 'logo-foursquare'` <br>` 'logo-gmail'` <br>` 'logo-google'` <br>` 'logo-hatena'` <br>` 'logo-instagram'` <br>` 'logo-kaixin'` <br>` 'logo-kakaotalk'` <br>` 'logo-linkedin'` <br>` 'logo-naver'` <br>` 'logo-pinterest'` <br>` 'logo-qq'` <br>` 'logo-qq-share'` <br>` 'logo-reddit'` <br>` 'logo-skyrock'` <br>` 'logo-sohu'` <br>` 'logo-tecent'` <br>` 'logo-telegram'` <br>` 'logo-tiktok'` <br>` 'logo-tumblr'` <br>` 'logo-twitter'` <br>` 'logo-viber'` <br>` 'logo-vk'` <br>` 'logo-wechat'` <br>` 'logo-weibo'` <br>` 'logo-whatsapp'` <br>` 'logo-xing'` <br>` 'logo-yahoo'` <br>` 'logo-youku'` <br>` 'logo-youtube'` <br>` 'logout'` <br>` 'map'` <br>` 'menu-dots-horizontal'` <br>` 'menu-dots-vertical'` <br>` 'menu-lines'` <br>` 'minus'` <br>` 'mobile'` <br>` 'moon'` <br>` 'oil-can'` <br>` 'parking-brake'` <br>` 'parking-light'` <br>` 'pause'` <br>` 'phone'` <br>` 'pin'` <br>` 'play'` <br>` 'plug'` <br>` 'plus'` <br>` 'preheating'` <br>` 'printer'` <br>` 'purchase'` <br>` 'question'` <br>` 'racing-flag'` <br>` 'refresh'` <br>` 'replay'` <br>` 'route'` <br>` 'rss'` <br>` 'save'` <br>` 'screen'` <br>` 'search'` <br>` 'send'` <br>` 'share'` <br>` 'shopping-bag'` <br>` 'shopping-cart'` <br>` 'sidelights'` <br>` 'snowflake'` <br>` 'sort'` <br>` 'stack'` <br>` 'star'` <br>` 'steering-wheel'` <br>` 'stopwatch'` <br>` 'subtract'` <br>` 'success'` <br>` 'sun'` <br>` 'switch'` <br>` 'tablet'` <br>` 'tachometer'` <br>` 'truck'` <br>` 'upload'` <br>` 'user'` <br>` 'user-group'` <br>` 'user-manual'` <br>` 'video'` <br>` 'view'` <br>` 'view-off'` <br>` 'volume-off'` <br>` 'volume-up'` <br>` 'warning'` <br>` 'weight'` <br>` 'wifi'` <br>` 'work'` <br>` 'wrench'` <br>` 'wrenches'` <br>` 'zoom-in'` <br>` 'zoom-out'` | `'arrow-head-right'` |\n| `iconSource` | `icon-source` | A custom URL path to a custom icon.                                                                            | `string`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | `undefined`          |\n| `rel`        | `rel`         | Specifies the relationship of the target object to the link object.                                            | `string`| `undefined`          |\n| `target`     | `target`      | Target attribute where the link should be opened.                                                              | `string`| `'_self'`            |\n| `theme`      | `theme`       | Adapts the link color when used on dark background.                                                            | `'dark'` <br>` 'light'` <br>` 'light-electric'`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | `'light'`            |\n| `variant`    | `variant`     | The style variant of the link.                                                                                 | `'primary'` <br>` 'secondary'` <br>` 'tertiary'`| `'secondary'`        |\n"
    },
    "Link Pure": {
      "Examples": "# Link Pure\n\nThe `p-link-pure` component is essential for performing changes in **page routes**.\nA Link can be used with or without a label, but it's recommended to keep the **label visible** for better **usability** whenever possible.\nWhen used without a label, it is mandatory for **accessibility** to provide a descriptive label text for screen readers.\nIn case you want the user to execute an action, you should select the [Button](components/button) or [Button Pure](components/button-pure) component instead.\n\n## Basic example\n\n### With label\n\n<Playground :markup=\"withLabel\" :config=\"config\"></Playground>\n\n### Without label\n\n<Playground :markup=\"withoutLabel\" :config=\"config\"></Playground>\n\n### Responsive\n\n<Playground :markup=\"responsive\" :config=\"config\"></Playground>\n\n### ARIA attributes and states\n\nThrough the `aria` property you have the possibility to provide additional **ARIA** attributes and states to the component.\n<Playground :markup=\"accessibility\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\n* Make sure to provide **descriptive**, self explaining **labels** which could be understood without context. If short labels are used like **\"OK\"** make sure to provide additional textual contents to expose a more descriptive experience to screen reader users. This can be done through **ARIA** with the `aria` property or by using the **slotted** approach where you can set the `aria-label` attribute directly on the anchor tag.\n* If implementing the Link with a **hidden label** (`hide-label=\"true\"`), do not omit the label. Providing a **descriptive text** to support **screen reader** users is **mandatory**.\n* In general, preventing opening new windows by default with (`target=\"_blank\"`) is a good choice. Let users choose by themselves how to open links. However, if you choose to implement `target=\"_blank\"`, make sure to provide additional information with ARIA label, e.g.: `aria-label=\"Porsche Taycan model page (opens in new window)\"`\n\n---\n\n### Without Icon\n\nBy choosing `icon=\"none\"` the component is shown without icon.\n\n**Caution:** You can't combine  this with the prop `hideLabel`\n\n<Playground :markup=\"withoutIcon\" :config=\"configInline\"></Playground>\n\n## Size\n\nThere are predefined text sizes for the component which should cover most use cases. \nIf a specific text size is needed, the size can be set to `inherit` to specify the text size from outside.  \n\n**Hint:** If you are in `hideLabel`-mode, be aware that the box-size of the rendered element will not be the same as the given (font-size) pixel value, \ne.g. setting a font-size of **\"44px\"** will not generate a box with a **\"44px\"** width/height but instead a box size generated out of Porsche type-scaling formula which will end in **\"52px\"** width/height.\n\n<Playground :markup=\"sizeMarkup\" :config=\"config\">\n  <select v-model=\"size\">\n    <option disabled>Select a style variant</option>\n    <option>x-small</option>\n    <option>small</option>\n    <option>medium</option>\n    <option>large</option>\n    <option>x-large</option>\n    <option>inherit</option>\n  </select>\n</Playground>\n\n### Responsive\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l`, `xl`.\n\n<Playground :markup=\"sizeResponsive\" :config=\"config\"></Playground>\n\n---\n\n## Weight\n\nThere are predefined default text weights. Be aware of using the `thin` variant only with larger text sizes.\n\n<Playground :markup=\"weightMarkup\" :config=\"config\">\n  <select v-model=\"weight\">\n    <option disabled>Select a weight</option>\n    <option>thin</option>\n    <option>regular</option>\n    <option>bold</option>\n  </select>\n</Playground>\n\n---\n\n## Framework routing (anchor nesting)\n\nTo support custom anchor tags (e.g. framework specific routing) you can provide them as a **slotted element** (recommended) of the component.\n\n<Playground :markup=\"routing\" :config=\"config\"></Playground>\n\n---\n\n## Active state\n\nProviding visually differences if a link changes its state can be achieved by setting the `active` property. \n\n<Playground :markup=\"activeHref\" :config=\"config\"></Playground>\n\n---\n\n## Examples how to use with Framework specific router and \"active state\" support\n\n### Angular\n\n```html\n<p-link-pure [active]=\"rla.isActive\">\n  <a routerLink=\"/path/to/heaven\" routerLinkActive #rla=\"routerLinkActive\"></a>\n</p-link-pure>\n```\n\n### React\n\n```tsx\n<PLinkPure active={isActive}>\n  <Link to=\"/path/to/heaven\">Some label</Link>\n</PLinkPure>\n```\n\n### VueJs\n\n```html\n<router-link :to=\"/path/to/heaven\" v-slot=\"{ href, navigate, isActive }\">\n  <p-link-pure :href=\"href\" @click=\"navigate\" :active=\"isActive\">Some label</p-link-pure>\n</router-link>\n```\n\n## Link with specific icon\n\nIf another icon needs to be implemented, just replace the default icon with another predefined icon. Per default, all icons are fetched from the Porsche Design System CDN. Just choose an icon name from the `icon` property. If you need to link to another icon hosted somewhere else, just set the whole icon path to the `iconSource` prop.\n\n<Playground :markup=\"icon\" :config=\"configInline\"></Playground>\n\n---\n\n## Alignment\n\nThe `label` can be aligned to the `right` (default) or to the `left` of the icon.\n\n<Playground :markup=\"alignmentMarkup\" :config=\"config\">\n  <select v-model=\"alignLabel\">\n    <option value=\"left\">Left</option>\n    <option value=\"right\">Right</option>\n    <option value=\"{ base: 'left', l: 'right' }\">Responsive</option>\n  </select>\n</Playground>\n\n---\n\n## Stretch\n\nThe `stretch` property extends the area between icon and label to the maximum available space.\nIt is recommended to use stretch only on `left` alignment and small viewports, e.g. mobile views.\n\n<Playground :markup=\"stretchMarkup\" :config=\"configBlock\">\n  <select v-model=\"stretch\">\n    <option value='stretch=\"true\" align-label=\"left\"'>stretch true, align-label left</option>\n    <option value='stretch=\"true\" align-label=\"right\"'>stretch true, align-label right</option>\n    <option value='stretch=\"false\" align-label=\"left\"'>stretch false, align-label left</option>\n    <option value='stretch=\"false\" align-label=\"right\"'>stretch false, align-label right</option>\n    <option value='stretch=\"{ base: true, l: false }\" align-label=\"left\"'>Responsive</option>\n  </select>\n</Playground>\n\n---\n\n## Link with custom clickable/focusable area\n\nSometimes it might be useful to enlarge the clickable/focusable area of a link to fulfill accessibility guidelines.\nTherefore a custom padding can be set on the host element.\n\n<Playground :markup=\"clickableArea\" :config=\"configInline\"></Playground>\n\n---\n\n## Bind events to the link\n\nYou can use native `click`, `focus`, `focusin`, `blur` and `focusout` events on the link.\n\n<Playground :markup=\"events\" :config=\"config\"></Playground>\n\n---\n\n## Link Pure with Subline\n\nIf you need additional information on your link, we provide a `<p slot=\"subline\" />`.\nThe size of the *subline* changes according to the size of the *label*. We do not support `size=\"inherit\"`, `stretch` and `alignLabel`in this pattern so far.\n\n**Note:** If you intend to use a `<a>` tag inside of the `p-link-pure` component, keep in mind that the slot needs to be *outside* of the anchor tag to function properly! Make sure to add an `aria-describedby` attribute to expose the correct accessibility tree.\n\n<Playground :markup=\"subline\" :config=\"configInline\">\n  <select v-model=\"sublineSize\">\n    <option disabled>Select a size</option>\n    <option>small</option>\n    <option>medium</option>\n    <option>large</option>\n    <option>x-large</option>\n  </select>\n</Playground>\n\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n    configInline = { ...this.config, spacing: 'inline' };\n    \n    size = 'medium';\n    sublineSize = 'small';\n    weight = 'thin';\n    alignLabel = 'left';\n    stretch = 'stretch=\"true\" align-label=\"left\"';\n    \n    withLabel =\n`<p-link-pure href=\"https://www.porsche.com\">Some label</p-link-pure>`;\n\n    withoutLabel =\n`<p-link-pure href=\"https://www.porsche.com\" hide-label=\"true\">Some label</p-link-pure>`;\n\n    responsive =\n`<p-link-pure href=\"https://www.porsche.com\" hide-label=\"{ base: true, l: false }\">Some label</p-link-pure>`;\n\n    accessibility = \n`<p-link-pure href=\"https://www.porsche.com\" aria=\"{ 'aria-label': 'Some more descriptive label' }\">Some label</p-link-pure>`;\n\n    withoutIcon =\n`<p-link-pure icon=\"none\" href=\"https://www.porsche.com\">Some label</p-link-pure>\n<p-link-pure icon=\"none\" size=\"small\" weight=\"semibold\" href=\"https://www.porsche.com\">\n  Some label\n  <p slot=\"subline\">Some Subline</p>\n</p-link-pure>`;\n\n    get sizeMarkup() {\n      const style =this.size === 'inherit' ? ' style=\"font-size: 48px;\"' : '';\n      return `<p-link-pure href=\"https://www.porsche.com\" size=\"${this.size}\"${style}>Some label</p-link-pure>`;\n    }\n    \n    sizeResponsive =\n`<p-link-pure href=\"https://www.porsche.com\" size=\"{ base: 'small', l: 'medium' }\">Some label</p-link-pure>`;\n\n    get weightMarkup() {\n      return `<p-link-pure href=\"https://www.porsche.com\" size=\"medium\" weight=\"${this.weight}\">Some label</p-link-pure>`;\n    }\n\n    routing =\n`<p-link-pure>\n  <a href=\"https://www.porsche.com\">Some label</a>\n</p-link-pure>`;\n\n    activeHref =\n`<p-link-pure active=\"true\" href=\"https://www.porsche.com\">Some label</p-link-pure>`;\n\n    activeWithoutHref =\n`<p-link-pure active=\"true\">Some label</p-link-pure>`;\n\n    icon =\n`<p-link-pure href=\"https://www.porsche.com\" icon=\"phone\">Some label</p-link-pure>\n<p-link-pure icon-source=\"${require('./assets/icon-custom-kaixin.svg')}\" hide-label=\"true\" href=\"https://www.porsche.com\">Some label</p-link-pure>`;\n\n    clickableArea =\n`<p-link-pure href=\"https://www.porsche.com\" style=\"padding: 1rem;\">Some label</p-link-pure>\n<p-link-pure href=\"https://www.porsche.com\" hide-label=\"true\" style=\"padding: 1rem;\">Some label</p-link-pure>\n<p-link-pure style=\"padding: 1rem;\">\n  <a href=\"https://www.porsche.com\">Some label</a>\n</p-link-pure>\n<p-link-pure hide-label=\"true\" style=\"padding: 1rem;\">\n  <a href=\"https://www.porsche.com\">Some label</a>\n</p-link-pure>`;\n\n    get alignmentMarkup() {\n      return `<p-link-pure align-label=\"${this.alignLabel}\" href=\"https://www.porsche.com\">Some label</p-link-pure>`;\n    };\n\n    get stretchMarkup() {\n      return `<p-link-pure ${this.stretch} href=\"https://www.porsche.com\">Some label</p-link-pure>`;\n    };\n\n    events =\n`<p-link-pure\n  href=\"https://www.porsche.com\"\n  onclick=\"alert('click'); return false;\"\n  onfocus=\"console.log('focus')\"\n  onfocusin=\"console.log('focusin')\"\n  onblur=\"console.log('blur')\"\n  onfocusout=\"console.log('focusout')\"\n>Some label</p-link-pure>`;\n\n    get subline() {\n      return `<p-link-pure size=\"${this.sublineSize}\" href=\"https://www.porsche.com\">\n  Some label\n  <p slot=\"subline\">Some Subline</p>\n</p-link-pure>\n<p-link-pure size=\"${this.sublineSize}\" weight=\"semibold\">\n  <a href=\"https://www.porsche.com\" aria-describedby=\"subline\">Some label</a>\n  <p slot=\"subline\" id=\"subline\">Some Subline</p>\n</p-link-pure>`;\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  ::v-deep .example-link {\n    display: inline-block;\n    outline: none;\n    text-decoration: none;\n  }\n</style>\n",
      "Usage": "# Link Pure\n\n## When to use\n  • Use a Link Pure as a more subtle call to action compared to the normal Porsche Design System Link.   \n  • Use a Link Pure to navigate the user to another page. \n\n--- \n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Button Pure as follows:\n\n| Variant | Usage |\n|----|----|\n| Icon and text | This should be the variant of your choice whenever possible, as icons should preferably always be paired with text for better comprehensibility and accessibility. |\n| Text only | The use of icons can be resigned, whenever it causes interference (e.g. in-text placement, no matching icon, complex lists or tables, alignment to elements). |\n| Icon only| When it's enough to indicate an action with an icon only, the text label can be hidden but a minimum height of 40 px must be maintained. It's recommended to use this variant only in cases when the user is fully aware of the function due to an expressive and internationally comprehensible icon. |\n| Icon, Text and Subline | This should be the variant of your choice if the Button Pure must be supplemented by a subline. However, we recommend that you only use this variant in cases where the user requires additional information. The standard variant will be used on a monochrome background, whereas the highlight variant should be used on a polychrome background (e.g. on images) for better comprehensibility and accessibility. |\n\n# Icon alignment & stretch\n\nTo enable wider usage order and stretch are customizable. Please use under recommended circumstances:\n\n| Variant | Usage |\n|----|----|\n| Icon left | This is the default state and should be used whenever possible. |\n| Icon right | On special occasions, the icon can be placed on the right side of the label (e.g. step navigation). | \n| Stretch | It's recommended to use stretch only on small viewports or areas (e.g. mobile views or sidebars). Please consider that the greater the distance between icon and label, the less they will be perceived as a visual group. |\n\n## Usage\n\n### Standard icons\nThe default icon is an arrow right that can be replaced by any icon available in the Porsche web icon set. It should be changed only if it is ensured that another symbol is more appropriate to support the text content, making it easier for the user to understand the function quickly.  \n\n### External and internal links\nFor internal links the arrow should be sufficient in most cases. External links can be displayed with the following icon: \n\n<p-link-pure icon=\"external\" target=\"_blank\" href=\"https://www.porsche.com\">External link</p-link-pure>\n\n### Text label\nThe text label within a link should always be short and descriptive.\n\n\n### Link Pure on images\n\nA Link Pure can be placed on images, e.g. when using it as an additional link on image sliders or teaser images that are clickable themselves. In this case, the Link Pure can give the user an additional hint on the clickability of the whole image. \nTo guarantee the readability on pictures we recommend the highlight variant.\n\n### Link Pure groups\n\nMultiple Links Pure can be combined to one Link Pure group that must be stacked left-aligned in order to guarantee scannability and legibility. It is recommended to not group more than 6 Links Pure in a row.\n\n\n<div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n    <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n    <img src=\"./assets/link-pure.png\" alt=\"Example\"/>\n</div>\n\n\n",
      "Props": "# Link Pure\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type AlignLabel = AlignLabelType`  \n`type HideLabel = boolean`  \n`type Size = 'small' | 'medium' | 'x-small' | 'large' | 'x-large' | 'inherit'`  \n`type Stretch = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property     | Attribute     | Description                                                                                                    | Type| Default              |\n| ------------ | ------------- | -------------------------------------------------------------------------------------------------------------- || -------------------- |\n| `active`     | `active`      | Display link in active state.                                                                                  | `boolean`| `false`              |\n| `alignLabel` | `align-label` | Aligns the label.                                                                                              | `AlignLabelType` <br>` BreakpointCustomizable<AlignLabel>`                                                                                                                                                                                                                                                                                                                                                                                                  | `'right'`            |\n| `aria`       | `aria`        | Add ARIA attributes.                                                                                           | `{ 'aria-label'?: string; }`| `undefined`          |\n| `download`   | `download`    | Special download attribute to open native browser download dialog if target url points to a downloadable file. | `string`| `undefined`          |\n| `hideLabel`  | `hide-label`  | Show or hide label. For better accessibility it is recommended to show the label.                              | `boolean` <br>` BreakpointCustomizable<HideLabel>`                                                                                                                                                                                                                                                                                                                                                                                                                                        | `false`              |\n| `href`       | `href`        | When providing an url then the component will be rendered as `<a>`.                                            | `string`| `undefined`          |\n| `icon`       | `icon`        | The icon shown. By choosing 'none', no icon is displayed                                                       | `IconName` <br>` 'none'`| `'arrow-head-right'` |\n| `iconSource` | `icon-source` | A custom URL path to a custom icon.                                                                            | `string`| `undefined`          |\n| `rel`        | `rel`         | Specifies the relationship of the target object to the link object.                                            | `string`| `undefined`          |\n| `size`       | `size`        | Size of the link.                                                                                              | `'small'` <br>` 'medium'` <br>` 'x-small'` <br>` 'large'` <br>` 'x-large'` <br>` 'inherit'` <br>` BreakpointCustomizable<Size>` | `'small'`            |\n| `stretch`    | `stretch`     | Stretches the area between icon and label to max available space.                                              | `boolean` <br>` BreakpointCustomizable<Stretch>`                                                                                                                                                                                                                                                                                                                                                                                                                                        | `false`              |\n| `target`     | `target`      | Target attribute where the link should be opened.                                                              | `string`| `'_self'`            |\n| `theme`      | `theme`       | Adapts the button color depending on the theme.                                                                | `'dark'` <br>` 'light'` <br>` 'light-electric'`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | `'light'`            |\n| `weight`     | `weight`      | The weight of the text (only has effect with visible label).                                                   | `'bold'` <br>` 'regular'` <br>` 'semibold'` <br>` 'thin'`| `'regular'`          |\n"
    },
    "Link Social": {
      "Examples": "# Link Social\n\nThe `p-link-social` component is a set of pre-defined social icons for various fields of application like linking to social media platforms or social sharing dialogs.\n\n## Variants\n\nChoose between a set of pre-defined social icons.\n\n<Playground :markup=\"variants\" :config=\"config\">\n  <select v-model=\"platform\">\n    <option disabled>Select a social platform</option>\n    <option value=\"Facebook\">Facebook</option>\n    <option value=\"Google\">Google</option>\n    <option value=\"Instagram\">Instagram</option>\n    <option value=\"KakaoTalk\">KakaoTalk</option>\n    <option value=\"LinkedIn\">LinkedIn</option>\n    <option value=\"Naver\">Naver</option>\n    <option value=\"Pinterest\">Pinterest</option>\n    <option value=\"Reddit\">Reddit</option>\n    <option value=\"TikTok\">TikTok</option>\n    <option value=\"Twitter\">Twitter</option>\n    <option value=\"WeChat\">WeChat</option>\n    <option value=\"WhatsApp\">WhatsApp</option>\n    <option value=\"XING\">XING</option>\n    <option value=\"YouTube\">YouTube</option>\n  </select>\n</Playground>\n\n### Responsive\n\n<Playground :markup=\"responsive\" :config=\"config\"></Playground>\n\n---\n\n## Framework routing (anchor nesting)\n\nTo support custom anchor tags (e.g. framework specific routing) you can provide them as a **slotted element** of the component. \n\n<Playground :markup=\"routing\" :config=\"config\"></Playground>\n\n---\n\n## Specific icon\nIf another icon needs to be implemented, just replace the default icon with another pre-defined icon. Per default, all icons are fetched from the Porsche Design System CDN. Just choose an icon name from the `icon` property. If you need to link to another icon hosted somewhere else, just set the whole icon path to the `iconSource` prop.\n\n<Playground :markup=\"iconMarkup\" :config=\"config\"></Playground>\n\n--- \n\n## Pattern of grouped components \n\n<Playground :markup=\"grouped\" :config=\"config\"></Playground>\n\n### SCSS code example how to achieve a grouped pattern\n\n```scss  \n// With CSS Grid (The more elegant way but not suppoerted by IE11)\n.example-grouped {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, p-px-to-rem(48px));\n  grid-column-gap: $p-spacing-8;\n  grid-row-gap: $p-spacing-8;\n}\n\n// Fallback with IE11 support\n.example-grouped {\n  &::before {\n    content: \"\";\n    display: block;\n    margin-top: -$p-spacing-8;\n  }\n  > * {\n    margin-top: $p-spacing-8;\n    &:not(:last-child) {\n      margin-right: $p-spacing-8;\n    }\n  }\n}\n``` \n\n---\n\n## Bind events to the Link\nYou can use native `click`, `focus`, `focusin`, `blur` and `focusout` events on the link.\n\n<Playground :markup=\"events\" :config=\"config\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true, spacing: 'inline' };\n    platform = 'Facebook';\n\n    get icon() {\n      return `logo-${this.platform.toLowerCase()}`;\n    }\n    \n    get variants() {\n      return `<p-link-social href=\"https://example.com\" icon=\"${this.icon}\" target=\"_blank\" rel=\"nofollow noopener\">${this.platform}</p-link-social>\n<p-link-social href=\"https://example.com\" hide-label=\"true\" icon=\"${this.icon}\" target=\"_blank\" rel=\"nofollow noopener\">${this.platform}</p-link-social>`;\n    }\n    \n    responsive =\n`<p-link-social href=\"https://www.facebook.com/\" icon=\"logo-facebook\" hide-label=\"{ base: true, l: false }\" target=\"_blank\" rel=\"nofollow noopener\">Facebook</p-link-social>`;\n    \n    routing =\n`<p-link-social icon=\"logo-facebook\">\n  <a href=\"https://www.facebook.com/\" target=\"_blank\" rel=\"nofollow noopener\">Facebook</a>\n</p-link-social>`;\n\n    iconMarkup =\n`<p-link-social href=\"https://example.com\" icon=\"logo-tumblr\" target=\"_blank\" rel=\"nofollow noopener\">Tumblr</p-link-social>\n<p-link-social href=\"https://example.com\" icon-source=\"${require('./assets/icon-custom-kaixin.svg')}\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Kaixin</p-link-social>`;\n\n    grouped =\n`<div class=\"example-grouped\">\n<p-link-social href=\"https://www.facebook.com/\" icon=\"logo-facebook\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Facebook</p-link-social>\n<p-link-social href=\"https://www.google.com/\" icon=\"logo-google\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Google</p-link-social>\n<p-link-social href=\"https://www.instagram.com/\" icon=\"logo-instagram\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Instagram</p-link-social>\n<p-link-social href=\"https://www.kakaocorp.com/\" icon=\"logo-kakaotalk\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">KakaoTalk</p-link-social>\n<p-link-social href=\"https://www.linkedin.com/\" icon=\"logo-linkedin\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">LinkedIn</p-link-social>\n<p-link-social href=\"https://www.naver.com/\" icon=\"logo-naver\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Naver</p-link-social>\n<p-link-social href=\"https://www.pinterest.com/\" icon=\"logo-pinterest\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Pinterest</p-link-social>\n<p-link-social href=\"https://www.reddit.com/\" icon=\"logo-reddit\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Reddit</p-link-social>\n<p-link-social href=\"https://www.tiktok.com/\" icon=\"logo-tiktok\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">TikTok</p-link-social>\n<p-link-social href=\"https://www.twitter.com/\" icon=\"logo-twitter\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Twitter</p-link-social>\n<p-link-social href=\"https://www.wechat.com/\" icon=\"logo-wechat\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Wechat</p-link-social>\n<p-link-social href=\"https://wa.me/491525557912\" icon=\"logo-whatsapp\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Whatsapp</p-link-social>\n<p-link-social href=\"https://www.xing.com\" icon=\"logo-xing\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">XING</p-link-social>\n<p-link-social href=\"https://www.youtube.com\" icon=\"logo-youtube\" hide-label=\"true\" target=\"_blank\" rel=\"nofollow noopener\">Youtube</p-link-social>\n</div>`;\n\n    events =\n`<p-link-social\n  href=\"https://www.facebook.com/\"\n  icon=\"logo-facebook\"\n  onclick=\"alert('click'); return false;\"\n  onfocus=\"console.log('focus')\"\n  onfocusin=\"console.log('focusin')\"\n  onblur=\"console.log('blur')\"\n  onfocusout=\"console.log('focusout')\"\n  target=\"_blank\" \n  rel=\"nofollow noopener\"\n>Facebook</p-link-social>`;\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  @import \"~@porsche-design-system/utilities/scss\";\n  \n  ::v-deep .example-link {\n    display: inline-block;\n    outline: none;\n    text-decoration: none;\n  }\n  \n  ::v-deep .example-grouped {\n    &::before {\n      content: \"\";\n      display: block;\n      margin-top: -$p-spacing-8;\n    }\n    > * {\n      margin-top: $p-spacing-8;\n      &:not(:last-child) {\n        margin-right: $p-spacing-8;\n      }\n    }\n  }\n</style>",
      "Usage": "# Link Social\n\n## When to use\n  • Use a Link Social to enable the user to link to social media platforms or social sharing dialogs.   \n\n--- \n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Link Social as follows\n\n| Variant | Usage |\n|----|----|\n| Icon and label| Due to better comprehensibility and accessibility, you should preferably go for this variant. The length of the link always adapts to the length of the label. As for the icon, you can either choose between one of the social platform icons provided in the Porsche icon set or also use a specific icon, whereas it must refer (which should be clear) to a social platform. |\n| Icon only| This variant contains an icon only with no further text information. It should preferably be used e.g. for social sharing links, when the user is totally aware of the button functionality due to a clear context. |\n| Group | The Link Social group contains the most used social icons that can be used as a group.\n\n\n## Usage\n\n### Icon\nThe icon refers to the logo of the respective social platform. For the specific social icons the corresponding icon must be used.\n\n### Label\nThe label within a link should always be short and descriptive.\n\n### Hover state\nAs for the social icons that are currently provided in the Porsche Design System, the background changes to the specific corporate social platform color on hover. For specific social icons, for which no brand color is currently provided in the Porsche Design System, a dark grey must be used as hover color instead (as defined for the standard [Button](components/button)/[Link](components/link)).",
      "Props": "# Link Social\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type HideLabel = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property     | Attribute     | Description                                                         | Type                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | Default     |\n| ------------ | ------------- | ------------------------------------------------------------------- || ----------- |\n| `hideLabel`  | `hide-label`  | Show or hide label.                                                 | `boolean` <br>` BreakpointCustomizable<HideLabel>`                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `false`     |\n| `href`       | `href`        | When providing an url then the component will be rendered as `<a>`. | `string`| `undefined` |\n| `icon`       | `icon`        | The icon shown.                                                     | `'logo-baidu'` <br>` 'logo-delicious'` <br>` 'logo-digg'` <br>` 'logo-facebook'` <br>` 'logo-foursquare'` <br>` 'logo-gmail'` <br>` 'logo-google'` <br>` 'logo-hatena'` <br>` 'logo-instagram'` <br>` 'logo-kaixin'` <br>` 'logo-kakaotalk'` <br>` 'logo-linkedin'` <br>` 'logo-naver'` <br>` 'logo-pinterest'` <br>` 'logo-qq'` <br>` 'logo-qq-share'` <br>` 'logo-reddit'` <br>` 'logo-skyrock'` <br>` 'logo-sohu'` <br>` 'logo-tecent'` <br>` 'logo-telegram'` <br>` 'logo-tiktok'` <br>` 'logo-tumblr'` <br>` 'logo-twitter'` <br>` 'logo-viber'` <br>` 'logo-vk'` <br>` 'logo-wechat'` <br>` 'logo-weibo'` <br>` 'logo-whatsapp'` <br>` 'logo-xing'` <br>` 'logo-yahoo'` <br>` 'logo-youku'` <br>` 'logo-youtube'` | `undefined` |\n| `iconSource` | `icon-source` | A custom URL path to a custom social icon.                          | `string`| `undefined` |\n| `rel`        | `rel`         | Specifies the relationship of the target object to the link object. | `string`| `undefined` |\n| `target`     | `target`      | Target attribute where the link should be opened.                   | `string`| `'_self'`   |\n| `theme`      | `theme`       | Adapts the link color when used on dark background.                 | `'dark'` <br>` 'light'`| `'light'`   |\n"
    },
    "Marque": {
      "Examples": "# Marque\n\nThe `p-marque` gives the Porsche brand a distinctive look, sets it apart from others within the overall external image and represents the quality of the product. \n\n## Variants\n\n### Marque with registered trademark (®)\nIn web applications for the United States and/or Canada as well as with international purpose *including* United States and/or Canada, the Porsche marque must always be used with the ®. The ® is optimized to match the respective crest size.\n\n<Playground :markup=\"marqueWithTM\"></Playground>\n\n### Marque without registered trademark (®)\nThis variant is to be used whenever the United States and/or Canada are not part of the web application's target markets.\n<Playground :markup=\"marqueWithoutTM\"></Playground>\n\n## Link\n\nThe Porsche marque will be rendered as `<a>`-tag as soon as an `href` is provided.\n\n<Playground :markup=\"marqueWithTMAndLink\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIf the Marque is used with a link, make sure to add a descriptive label to inform screen reader users what the link stands for. This can be done through **ARIA** with the `aria` property.\n\n## Bind events to the link\n\nYou can use native `click`, `focus`, `focusin`, `blur` and `focusout` events on the custom element.\n\n<Playground :markup=\"eventsMarkup\"></Playground>\n\n---\n\n## Size\n\nBy default, the sizing is responsive, but can be changed to a static size when needed.\n\n<Playground :markup=\"sizeMarkup\">\n  <select v-model=\"size\">\n    <option disabled>Select a size variant</option>\n    <option value=\"responsive\">Responsive</option>\n    <option value=\"small\">Small</option>\n    <option value=\"medium\">Medium</option>\n  </select>\n</Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    size = 'small';\n\n    marqueWithTM = `<p-marque></p-marque>`;\n    marqueWithTMAndLink = `<p-marque href=\"https://www.porsche.com\" aria=\"{ 'aria-label': 'Porsche Homepage' }\"></p-marque>`;\n    marqueWithoutTM = `<p-marque trademark=\"false\"></p-marque>`;\n\n    get sizeMarkup() {\n      return `<p-marque size=\"${this.size}\"></p-marque>`;\n    }\n\n    eventsMarkup =\n`<p-marque\n  href=\"https://www.porsche.com\"\n  onclick=\"alert('click'); return false;\"\n  onfocus=\"console.log('focus')\"\n  onfocusin=\"console.log('focusin')\"\n  onblur=\"console.log('blur')\"\n  onfocusout=\"console.log('focusout')\"\n></p-marque>`;\n  }\n</script>\n",
      "Usage": "# Marque\n\n## Sizes\n\nSlight adjustments ensure that the Porsche marque is optimally perceived as equally as possible in the various image sizes.\n\n| Size | Usage |\n|------|--------|\n| **Small** | Viewports with 1299 px width or lower |\n| **Medium** | Viewports with 1300 pixel width or larger |\n\n---\n\n## Content\n\nThe two elements that make up the overall logo for the Porsche marque are the **word \"Porsche\" (logotype)** and the **Porsche Crest** as an image-based logo. The three-dimensional colored Porsche marque is used as a fixed unit, always including crest and logotype, across all media, and **may not be changed**. \n\n---\n\n## Usage\n\n- Within static digital applications, the Porsche Marque is **always used without shadow**. For moving images a separate Crest with shadow is available.\n- The Porsche Marque may **only be used on a white background**.\n\n--- \n\n## Do's & Don'ts\n\n- The marque **may not be altered** in relation to its two elements or their size. The marque may never be used without the Porsche lettering, as the sender identification cannot be guaranteed.\n- The Porsche marque **may not be used against coloured or busy backgrounds** (e.g. shading). As the Porsche crest has a high level of graphical complexity, excessive visual turmoil may be created.\n\n![Example for Porsche marque](./assets/porsche-marque-donts-01.png)\n",
      "Props": "# Marque\n\n## Properties\n\n| Property    | Attribute   | Description                                                         | Type                                   | Default        |\n| ----------- | ----------- | ------------------------------------------------------------------- | -------------------------------------- | -------------- |\n| `aria`      | `aria`      | Add ARIA attributes.                                                | `{ 'aria-label'?: string; }` | `undefined`    |\n| `href`      | `href`      | When providing an url then the component will be rendered as `<a>`. | `string`                               | `undefined`    |\n| `size`      | `size`      | Adapts sizing of marque.                                            | `'medium'` <br>` 'responsive'` <br>` 'small'`  | `'responsive'` |\n| `target`    | `target`    | Target attribute where the link should be opened.                   | `string`                               | `'_self'`      |\n| `trademark` | `trademark` | Show/hide trademark sign.                                           | `boolean`                              | `true`         |\n"
    },
    "Modal": {
      "Examples": "# Modal\n\nThe `p-modal` is a temporary overlay to focus the user's attention on one task while interactions with the underlying page are blocked. It is only used as highly disruptive modal notification to present important information until dismissed. Or as Modal Dialog to confirm critical user actions, such as confirming an irreversible choice. It should be used thoughtfully and sparingly.\n\nModals are flexible in the context and can include other components of the Porsche Design System.\n\nIt is a controlled component.\nThis grants you flexible control over the Modal's behavior especially whether it should stay open after user interaction like submission of a form.\n\n## Basic\n\nIt is crucial to note that `p-modal` is displayed within your DOM hierarchy as an overlay through a high `z-index` value. \nTherefore, you need to ensure any parent elements don't define a `z-index` or have a `transform` style in place. \nOtherwise, the modal might get clipped or overlapped by other elements.\n\nThe most important property of `p-modal` is its `open` attribute.  When it is present the Modal will be visible.\n  \nIn order to get notified when the Modal gets closed by clicking the `x` button, the backdrop or by pressing the `Escape` key you need to register an event listener for the `close` event which is emitted by `p-modal`.\n\nThe size of `p-modal` adjusts itself to the content with a predefined min/max width.\n\n<Playground :markup=\"basic\">\n  <select v-model=\"width\">\n    <option disabled>Select a modal width</option>\n    <option value=\"minWidth\">min width</option>\n    <option value=\"maxWidth\">max width</option>\n  </select>\n</Playground>\n\nNote that `.footer` is a custom CSS class in order to responsively style the buttons which is achieved with respect to guidelines for [Buttons](components/button/usage).\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nTo support **keyboard navigation**, please take care of correct **focus handling** after closing the Modal with `ESC` or `Enter` key:\nThe trigger element (e.g. a button) which has opened the Modal must **receive focus state again** after the Modal is closed. This is important to keep focus order consistent.\nYou can test it out by navigation this example with the keyboard only.\n\n### Framework Implementations\n\n<Playground :frameworkMarkup=\"frameworks\"></Playground>\n\n## Basic Scrollable\n\nIf the Modal's content does not fit into the current boundaries the content becomes scrollable.\n\n<Playground :markup=\"scrollable\"></Playground>\n\n## Without Heading\n\nPassing a `heading` to the modal is optional. \n\n<Playground :markup=\"withoutHeading\"></Playground>\n\n## Without Close Button\n\nIt is possible to not render the close button by setting the `disable-close-button` attribute.  \nAt the same time this also deactivates closing the Modal by pressing `Escape`.  \nIf you want to disable closing the Modal by clicking the backdrop, you can set the `disable-backdrop-click` attribute.\n\n<Playground :markup=\"withoutCloseButton\"></Playground>\n\n## Fullscreen\n\nThe Modal supports a `fullscreen` property.\nDue to the size of fullscreen on desktop, it is easy to lose context for the consumer. \nFurthermore, you lose helpful functionality like backdrop click. This is why fullscreen modals are recommended for mobile devices only.\n\n<Playground :markup=\"fullscreen\"></Playground>\n\nOf course, any combination of the available options is possible.\n\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\n\n@Component\nexport default class Code extends Vue {\n  modals = [];\n  width = 'minWidth';\n\n  frameworks = {\n    'vanilla-js': `modal.addEventListener('close', () => {\n  modal.open = false;\n});`,\n    angular: `import { Component } from '@angular/core';\n\n@Component({\n  selector: 'modal-page',\n  template: \\`<p-modal [open]=\"isModalOpen\" (close)=\"handleModalClose($event)\">...</p-modal>\\`,\n})\nexport class ModalPage {\n  isModalOpen = false;\n\n  handleModalClose(e: CustomEvent<void>) {\n    this.isModalOpen = false;\n  }\n}`,\n    react: `import { useCallback, useState } from 'react';\nimport { PModal } from '@porsche-design-system/components-react';\n\nconst ModalPage = (): JSX.Element => {\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const handleModalClose = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n\n  return <PModal open={isModalOpen} onClose={handleModalClose}>...</PModal>\n}`,\n  };\n\n  mounted() {\n    this.registerEvents();\n    \n    // workaround for iOS 13.x masking modal within example\n    document.querySelectorAll('.example').forEach(el => el.style.overflow = 'visible');\n\n    // workaround for iOS 13.x not respecting flex-wrap: wrap; correctly\n    // timeout is needed for component to render \n    setTimeout(() => {\n      document.getElementById('modal-scrollable').shadowRoot.querySelector('.root').style.alignSelf = 'start'\n    }, 1000);\n  }\n\n  updated() {\n    // event handling is registered again on every update since markup is changing and references are lost\n    this.registerEvents();\n  }\n\n  registerEvents() {\n    this.modals = Array.from(document.querySelectorAll('p-modal'));\n    \n    const buttonsOpen = Array.from(document.querySelectorAll('.playground .demo > p-button'));\n    buttonsOpen.forEach((btn, index) => btn.addEventListener('click', () => this.openModal(index)));\n    \n    this.modals.forEach((modal, index) => {\n      modal.addEventListener('close', () => this.closeModal(index));\n      const buttons = Array.from(modal.querySelectorAll('p-button'));\n      buttons.forEach((btn) => btn.addEventListener('click', () => this.closeModal(index)));\n    });\n  }\n\n\n  get basic() {\n    const content = this.width === 'maxWidth' ? '<div style=\"max-width: 100%; width: 100vw; height: 500px\"><p-text>Some Content in responsive max width</p-text></div>' : '<p-text>Some Content</p-text>';\n    \n    return `<p-button type=\"button\" aria=\"{ 'aria-haspopup': 'dialog' }\">Open Modal</p-button>\n<p-modal heading=\"Some Heading\" open=\"false\">\n  ${content}\n  <p-button-group class=\"footer\">\n    <p-button>Save</p-button>\n    <p-button type=\"button\" variant=\"tertiary\">Close</p-button>\n  </p-button-group>\n</p-modal>`;}\n  \n  scrollable =\n`<p-button type=\"button\" aria=\"{ 'aria-haspopup': 'dialog' }\">Open Modal</p-button>\n<p-modal id=\"modal-scrollable\" heading=\"Some Heading\" open=\"false\">\n  <p-text>Some Content</p-text>\n  <div style=\"height: 40vh;\"></div>\n  <p-text>More Content</p-text>\n  <div style=\"height: 40vh;\"></div>\n  <p-text>Even More Content</p-text>\n  <p-button-group class=\"footer\">\n    <p-button>Save</p-button>\n    <p-button type=\"button\" variant=\"tertiary\">Close</p-button>\n  </p-button-group>\n</p-modal>`;\n\n  withoutHeading =\n`<p-button type=\"button\" aria=\"{ 'aria-haspopup': 'dialog' }\">Open Modal</p-button>\n<p-modal open=\"false\">\n  <p-text>Some Content</p-text>\n</p-modal>`;\n\n  withoutCloseButton =\n`<p-button type=\"button\" aria=\"{ 'aria-haspopup': 'dialog' }\">Open Modal</p-button>\n<p-modal heading=\"Some Heading\" disable-close-button open=\"false\">\n  <p-text>Some Content</p-text>\n</p-modal>`;\n\n  fullscreen =\n`<p-button type=\"button\" aria=\"{ 'aria-haspopup': 'dialog' }\">Open Modal</p-button>\n<p-modal heading=\"Some Heading\" open=\"false\" fullscreen=\"{ base: true, s: false }\">\n  <p-flex direction=\"column\" class=\"fullscreen-container\">\n    <p-flex-item grow=\"1\">\n      <p-text>Some Content</p-text>\n    </p-flex-item>\n    <p-button-group class=\"footer\">\n      <p-button>Save</p-button>\n      <p-button type=\"button\" variant=\"tertiary\">Close</p-button>\n    </p-button-group>\n  </p-flex>\n</p-modal>`;\n\n  openModal(index: number): void {\n    this.modals[index].open = true;\n  }\n  \n  closeModal(index: number): void {\n    this.modals[index].open = false;\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n  @import '~@porsche-design-system/utilities/scss';\n\n  \n  ::v-deep .footer {  \n    padding: p-px-to-rem(32px) 0 0;\n  }\n  ::v-deep .fullscreen-container {\n    flex: 1;\n  }\n</style>\n",
      "Usage": "# Modal\n\n## When to use\n\n  • Use a Modal when you want to show additional information to the user without losing context of the parent page.  \n  • Use a Modal when there are steps the user needs to do before the task can be completed.  \n  • Use a Modal where you need to ask for confirmation from the user before doing a lengthy or dangerous action.  \n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Modal as follows\n\n| Type | Usage |\n|----|----|\n| Default Modal | Use a default modal for content that doesn’t require a complex task. |\n| Fullscreen | Fullscreen modals group a series of tasks. Because they take up the entire screen, fullscreen modals are the only modals over which other modals can appear. Fullscreen should only be used on mobile. Due to the size of fullscreen on desktop, it is easy to lose context for the consumer. Furthermore, you lose helpful functionality like the backdrop click.\n\n\n\n| Variant | Usage |\n|----|----|\n| Basic | By default, Modals have a title and can be closed by clicking on the “x” in the upper right hand corner of the container. |\n| Without close icon | The Modal without close “x” will dont close the modal without any interaction. |\n| Without title | If the context is short and clear, the title can be skipped to avoid duplication. |\n| Without title and close icon | For descriptive content and the need to close the Modal with a interaction. |\n\n\n## Behavior\n\n### Overlay\nWe use a shaded background overlay to provide to provide the feeling of a third dimensional layer. \nThis also eliminates distraction and helps the user focus on the Modal content.\n\n### Animation\nThe background overlay animates once a Modal is launched to grab a user’s attention and retain their focus.\n\n### Close\nWithin a Modal are multiple ways to dismiss a Modal but a user needs to intentionally make that choice.\n\n### Back Button Behavior\nUsers tend to use the back button of the browser to close a modal. We recommend overwriting the native back button behavior of the browser to close the modal instead of directing the user to the previous page.\n\n## Usage\n\n### Attention\nModals are disruptive. Only use Modals when you need the user’s full attention for the period of time the Modal is displayed.\n\n### Scrolling\nScrolling is available but we recommend to put Modal content in a single view. If your Modal has a lot of detail or a \nlong list of items, consider a different solution, such as a form or a table.\n\n### Size\nThe modal can be adjusted in width and can be used depending on the requirements. It is important that the minimum and maximum sizes are observed. In addition, the modal should be aligned with the grid.\n\n### Line length\nWe recommend to use no more than 80 characters or glyphs per line. This might differ a bit depending on the respective line height and viewport size and results in different pixel widths depending on the Porsche type class in use. Please find more information in the [Typography guideline](components/typography).\n\n### Loading Behavior (API Calls)\nThe task completion action should take place immediately and close the modal. If a duration is needed for the response we recommend closing the modal and use an overlay with loading spinner. Please consider for longer loading periods it makes sense to not block the user from using your product while waiting for the answer of the api call. For any sort of feedback relating to the request use the provided banner component.\n\n![Loading behvior for api calls](./assets/modal-dialog-loading-behavior.gif)\n\n---\n\n## Do’s & Don’ts\n\n### Don't use more than three buttons\nThere should be no more than three actions. Actions should always be located within an action bar at the bottom of the Modal. Button order and positioning should follow our guidelines for [Buttons](components/button/usage).\n\n![Usage Buttons](./assets/modal-dialog-more-than-three-buttons.png)\n\n### Stacking Modals\nModals shouldn’t launch other modals. Stacking Modals makes it hard to dismiss them and confuses the user on their levels of importance.\n\n![Stacking modals](./assets/modal-stacking-modals.png)\n",
      "Props": "# Modal\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type Fullscreen = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property               | Attribute                | Description                                                                           | Type                                                                                                                               | Default     |\n| ---------------------- | ------------------------ | ------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| `disableBackdropClick` | `disable-backdrop-click` | If true, the modal will not be closable via backdrop click.                           | `boolean`                                                                                                                          | `false`     |\n| `disableCloseButton`   | `disable-close-button`   | If true, the modal will not have a close button.                                      | `boolean`                                                                                                                          | `false`     |\n| `fullscreen`           | `fullscreen`             | If true the modal uses max viewport height and width. Should only be used for mobile. | `boolean` <br>` BreakpointCustomizable<Fullscreen>` | `false`     |\n| `heading`              | `heading`                | The title of the modal                                                                | `string`                                                                                                                           | `undefined` |\n| `open`                 | `open`                   | If true, the modal is open.                                                           | `boolean`                                                                                                                          | `false`     |\n\n\n## Events\n\n| Event   | Description                                       | Type                |\n| ------- | ------------------------------------------------- | ------------------- |\n| `close` | Emitted when the component requests to be closed. | `CustomEvent<void>` |\n"
    },
    "Notifications": {
      "Introduction": "# Notifications\n\nNotifications are an important method of communicating with users and providing feedback. \n\nTheir main aim should be to help users perform a task and not necessarily interfere or get in the way of users while using your product. Ensure your **notifications are relevant, timely, and informative.** \n\n**Keep in Mind:**\nHighly frequented or disruptive Notifications can have a **negative impact** on the user's experience. \n\n---\n\n## When to use\n\nIn order to find the right notification type for your use case, we have defined some decision-making rules for you:\n\n<p-link href=\"components/notifications/decision-tree\" variant=\"primary\">Go to the Decision Tree</p-link>\n\n---\n\n## Types/Behavior\n\n|  Components  | Placement             | Follow-up Action           | Hide      | Criticality  | States        \n| ----------- | -------------------- | -------------------------- |------------------- | ----- | ----- |\n| **Form elements (Inline Validation)**   | Below form element         | Yes            | Resolved      | Low       | Success, Error      \n| **Toast**              | Bottom, Left          | No            | Automatically (6s)  | Low/Medium | Neutral, Success\n| **Inline Notification**      | Before/After Content  | Yes           | Resolved/Dismiss    | Medium     | Neutral, Success, Warning, Error\n| **Banner**              | Top, Center           | Yes           | Resolved/Dismiss | Medium/High  | Neutral, Warning, Error\n| **Modal**              | Center                | Yes           | Resolved/Dismiss | High   | Neutral, Warning, Error\n\n## z-index in descending order\n\n| Component | z-index             |\n| --------- | ------------------- |\n| Toast     | {{zIndexes.toast}}  |\n| Modal     | {{zIndexes.modal}}  |\n| Banner    | {{zIndexes.banner}} |\n\n<p-button v-on:click=\"startDemo()\">Start Live Demo</p-button>\n\n<!-- shared across playgrounds -->\n<p-toast ref=\"toast\"></p-toast>\n<div>  \n  <p-modal ref=\"modal\" heading=\"Some Heading\" :open=\"isModalOpen\">\n    <p-text>Some Content</p-text>\n  </p-modal>\n</div>\n\n\n## References\n* Duncan P. Brumby, Christian P. Janssen, and Gloria Mark, [How Do Interruptions Affect Productivity?](https://link.springer.com/chapter/10.1007/978-1-4842-4221-6_9)\n (Rethinking Productivity in Software Engineering, 2019)\n* Kim Flaherty, [Indicators, Validations, and Notifications](https://www.nngroup.com/articles/indicators-validations-notifications/)s (Nielsen Norman Group, 2015)\n* Aurora Harley, [Visibility of System Status](https://www.nngroup.com/articles/visibility-system-status/)\n (Nielsen Norman Group, 2018)\n* Jakob Nielsen, [10 Usability Heuristics for User Interface Design](https://www.nngroup.com/articles/ten-usability-heuristics/) (Nielsen Norman Group, 1994)\n* [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/)\n\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { BANNER_Z_INDEX, MODAL_Z_INDEX, TOAST_Z_INDEX } from '@porsche-design-system/components/src/constants';\n  \n  @Component\n  export default class Code extends Vue {\n    isModalOpen = false;\n    isBannerOpen = false;\n    toastCounter = 1;\n\n    zIndexes = {\n      toast: TOAST_Z_INDEX,\n      modal: MODAL_Z_INDEX,\n      banner: BANNER_Z_INDEX,\n    };\n  \n    mounted() {\n      this.$refs.modal.addEventListener('close', () => this.isModalOpen = false);\n    }\n\n    startDemo() {\n      this.$refs.toast.addMessage({ text: `Some message ${this.toastCounter}`});\n      this.toastCounter++;\n      this.isModalOpen = true;\n      if(!this.isBannerOpen){    \n        this.openBanner();\n      }\n    };\n\n    openBanner() {\n      const el = document.createElement('p-banner');\n      el.innerHTML = `\n        <span slot=\"title\">Some banner title</span>\n        <span slot=\"description\">Some banner description.</span>\n      `;\n      document.getElementById('app').append(el);\n\n      this.isBannerOpen = true;\n      el.addEventListener('dismiss', () => {\n        this.isBannerOpen = false;\n      });\n    };\n  }\n</script>",
      "Inline Notification": "# Notifications\n\n## Inline Notification\n\nThe `p-inline-notification` is a controlled component that provides action-based feedback messages (e.g. after performing a task) or to convey informational and/or critical notification like some site related topics.  \n\nReview the [notification decision tree](components/notifications/decision-tree) to determine which notification component is best for a particular scenario.\n\n## Basic\n\n<Playground :markup=\"basic\" :config=\"config\"></Playground>\n\n\n## State\n\nColoring can be controlled via the `state` property.\n\n<Playground :markup=\"stateDemo\" :config=\"config\">\n  <select v-model=\"state\">\n    <option disabled>Select a state</option>\n    <option value=\"neutral\">Neutral</option>\n    <option value=\"success\">Success</option>\n    <option value=\"warning\">Warning</option>\n    <option value=\"error\">Error</option>\n  </select>\n</Playground>\n\n## Persistent\n\nTo make the `p-inline-notification` non-closable by the user, use the `persistent` property.\n\n<Playground :markup=\"persistent\" :config=\"config\"></Playground>\n\n## Event Handling\n\n### Close Button\n\nThe custom event that is emitted on close button click is called `dismiss`.  \nIt can be used to remove the component.\n\n<Playground :frameworkMarkup=\"events\" :config=\"config\">\n  <button id=\"bannerEventsButton\" type=\"button\">Show Inline Notification</button>\n  <br>\n  <br>\n  <div id=\"bannerEventsWrapper\" hidden>\n    <p-inline-notification :heading=\"defaultHeading\" :description=\"defaultDescription\"></p-inline-notification>\n  </div>\n</Playground>\n\n### Action Button\n\nA custom interaction, e.g., to retry the previous action like submitting a form, can be provided by setting the optional `actionLabel`, `actionIcon` and `actionLoading` properties.  \nThe custom event that is emitted on action button click is called `action`.\n\n<Playground :frameworkMarkup=\"actionButton\" :config=\"config\">\n  <p-inline-notification\n    id=\"bannerAction\"\n    :heading=\"defaultHeading\"\n    :description=\"defaultDescription\"\n    action-label=\"Retry\"\n    action-icon=\"reset\"\n  ></p-inline-notification>\n  <br>\n  <button id=\"bannerActionButton\" type=\"button\">Reset `actionLoading`</button>\n</Playground>\n\n## Slotted Content\n\nRich markup for the `heading` can be applied by using `slot=\"heading\"`.  \nRich markup for the `description` can be used by the unnamed default slot.  \n\n<Playground :markup=\"slottedContent\" :config=\"config\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { getInlineNotificationCodeSamples } from '@porsche-design-system/shared';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n    \n    state = 'neutral';\n    width = 'basic';\n\n    defaultHeading = 'Some heading';\n    defaultDescription = 'Some description.';\n    slottedHeading = 'Some slotted heading';\n    slottedDescription = 'Some slotted description. You can also add inline <a href=\"https://porsche.com\">links</a> to route to another page.';\n\n    basic =\n`<p-inline-notification heading=\"${this.defaultHeading}\" description=\"${this.defaultDescription}\">\n</p-inline-notification>\n<br>\n<!-- or alternatively -->\n<p-inline-notification heading=\"${this.defaultHeading}\">\n  ${this.defaultDescription}\n</p-inline-notification>`;\n    \n    get stateDemo() {\n      return `<p-inline-notification heading=\"${this.defaultHeading}\" description=\"${this.defaultDescription}\" state=\"${this.state}\">\n</p-inline-notification>`;\n    }\n    \n    persistent =\n`<p-inline-notification heading=\"${this.defaultHeading}\" description=\"${this.defaultDescription}\" persistent=\"true\">\n</p-inline-notification>`;\n\n    slottedContent =\n`<p-inline-notification>\n  <span slot=\"heading\">${this.slottedHeading}</span>\n  ${this.slottedDescription}\n</p-inline-notification>`;\n\n    events = getInlineNotificationCodeSamples('example-events');\n    actionButton = getInlineNotificationCodeSamples('example-action-button');\n  \n    mounted(): void {\n      const buttonEvents = document.querySelector('#bannerEventsButton');\n      const bannerEvents = document.querySelector('#bannerEventsWrapper p-inline-notification');\n      const { parentElement } = bannerEvents;\n      buttonEvents.addEventListener('click', () => (parentElement.hidden = false));\n      bannerEvents.addEventListener('dismiss', () => (parentElement.hidden = true));\n\n      const buttonAction = document.querySelector('#bannerActionButton');\n      const bannerAction = document.querySelector('#bannerAction');\n      buttonAction.addEventListener('click', () => (bannerAction.actionLoading = false));\n      bannerAction.addEventListener('action', () => (bannerAction.actionLoading = true));\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  button {\n    padding: .5rem 1rem;\n  }\n</style>",
      "Toast": "# Notifications\n\n## Toast\n\nThe `p-toast` component manages both the queue and display of toast messages.  \nTherefore, you can only have a single instance of this component within in your application. We recommend rendering it close to the `body`, e.g., in your `App.tsx` or `app.component.ts`. This way you reduce the chance of having issues with its z-index and fixed positioning.  \n\nReview the [notification decision tree](components/notifications/decision-tree) to determine which notification component is best for a particular scenario.\n\n## Basic\n\nQueuing messages on `p-toast` component happens via its `addMessage()` method.  \nFor Angular users, we offer the injectable `ToastManager` service, for React, there is the `useToastManager()` hook.  \nBoth expose the `addMessage()` method, which needs to be called with a parameter that has the following structure:\n\n```ts\ntype ToastMessage = {\n  text: string;\n  state?: 'neutral' | 'success';\n};\n```\n\n<Playground :frameworkMarkup=\"basic\" :config=\"config\" @onThemeChange=\"onThemeChange\">\n  <label>\n    State:\n    <select v-model=\"toastState\">\n      <option disabled>Select a state</option>\n      <option value=\"neutral\">Neutral</option>\n      <option value=\"success\">Success</option>\n    </select>\n  </label>\n  <br><br>\n  <label>\n    Text:&nbsp;\n    <input type=\"text\" v-model=\"toastText\">\n  </label>\n  <br><br>\n  <button type=\"button\" v-on:click=\"queueToast()\">Queue Toast</button>\n</Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\n\nBy their very nature, toast components are **not fully accessibility compliant** and do not meet success criterion 2.2.1 (\"Timing Adjustable\") because of the default timing of 6 seconds until it automatically disappears.\nThis behavior cannot be adjusted and could result in users not being able to interact with Web content in a reasonable amount of time.\nSo be careful **not to use toast messages for relevant information**.\nContent and user interactions should always be understandable and usable without a toast message.\n\n## Offset\n\nThe bottom position of the `p-toast` can be adjusted via the `offsetBottom` property.\n\n<Playground :markup=\"offsetMarkup\" :config=\"{...config, withoutDemo: true}\" @onThemeChange=\"onThemeChange\">\n  <label>\n    Offset Bottom\n    <input type=\"number\" min=\"0\" max=\"200\" step=\"5\" v-model=\"offsetBottom\" @change=\"onOffsetChange\">\n  </label>\n  <br><br>\n  <button type=\"button\" v-on:click=\"queueToast()\">Queue Toast</button>\n</Playground>\n\n<!-- shared across playgrounds -->\n<p-toast ref=\"toast\"></p-toast>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { getToastCodeSamples } from '@porsche-design-system/shared';\n  import { defaultToastOffset } from '@porsche-design-system/components/src/components/feedback/toast/toast/toast-utils';\n  import type { Theme } from '@/models';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n\n    toastState = 'neutral';\n    toastText = 'Some message';\n    toastCounter = 1;\n    offsetBottom = defaultToastOffset.s;\n    \n    get basic() { \n      return Object.entries(getToastCodeSamples()).reduce((result, [key, markup]) => ({\n        ...result,\n        [key]: markup\n          .replace(/(state:) 'success'/, `$1 '${this.toastState}'`)\n          .replace(/(Some message)/, this.toastText)\n      }), {});\n    }\n\n    get offsetMarkup() {\n      return `<p-toast offset-bottom=\"${this.offsetBottom}\"></p-toast>`;\n    }\n\n    queueToast(): void {\n      this.$refs.toast.addMessage({ text: `${this.toastText} ${this.toastCounter}`, state: this.toastState });\n      this.toastCounter++;\n    }\n\n    onThemeChange(theme: Theme): void {\n      this.$refs.toast.theme = theme;\n    }\n\n    onOffsetChange(): void {\n      this.$refs.toast.offsetBottom = this.offsetBottom;\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  button {\n    padding: .5rem 1rem;\n  }\n  .example--dark label {\n    color: white\n  }\n</style>",
      "Banner": "# Notifications\n\n## Banner\nThe `p-banner` component provides action-based feedback messages (e.g. after performing a task) or to convey informational and/or critical notification like some site related topics. \n\nReview the [notification decision tree](components/notifications/decision-tree) to determine which notification component is best for a particular scenario.\n\n## Basic implementation\nThe `p-banner` component is positioned absolute above the page content by default. For personal adjustments, go to \"Custom styling\" section.\n\n<Playground :markup=\"basic\" :config=\"config\">\n  <select v-model=\"state\">\n    <option disabled>Select a state</option>\n    <option value=\"neutral\">Neutral</option>\n    <option value=\"warning\">Warning</option>\n    <option value=\"error\">Error</option>\n  </select>\n</Playground>\n\n## Persistent\nIf the **Banner** shouldn't be removable by the user, add `persistent` prop.\n\n<Playground :markup=\"persistent\" :config=\"config\"></Playground>\n\n## Width\nThe `p-banner` behaves the same as the **ContentWrapper** component and can be adapted to the same widths to match with your layout.\n\n<Playground :markup=\"markupWidth\" :config=\"config\">\n  <select v-model=\"width\">\n    <option disabled>Select a width</option>\n    <option value=\"basic\">Basic</option>\n    <option value=\"extended\">Extended</option>\n    <option value=\"fluid\">Fluid</option>\n  </select>\n</Playground>\n\n## Example with user interaction\n\n<p-button type=\"button\" v-on:click=\"openBanner($event)\">Open Banner</p-button>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nTo support **keyboard navigation**, please take care of correct **focus handling** after closing the Banner with `ESC` or `Enter` key:\nThe trigger element (e.g. a button) which has opened the Banner must **receive focus state again** after the Banner is closed. This is important to keep focus order consistent.\nYou can test it out by navigation this example with the keyboard only.\n\n## Custom styling\nThe `p-banner` component has some values which can be overwritten by CSS Custom Properties (aka CSS Variables):\n\n```scss\n// default CSS variables\n--p-banner-position-type: fixed;\n--p-banner-position-top: p-px-to-rem(56px);\n--p-banner-position-bottom: p-px-to-rem(56px);\n\n// overwrite with CSS variables\np-banner {\n  --p-banner-position-top: 200px;\n}\n``` \n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { componentsReady } from '@porsche-design-system/components-js';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n    \n    state = 'neutral';\n    width = 'basic';\n    \n    get basic() {\n      return `<p-banner state=\"${this.state}\">\n  <span slot=\"title\">Some banner title</span>\n  <span slot=\"description\">Some banner description. You can also add inline <a href=\"https://porsche.com\">links</a> to route to another page.</span>\n</p-banner>`\n    }\n    \n    persistent =\n`<p-banner persistent=\"true\">\n  <span slot=\"title\">Some banner title</span>\n  <span slot=\"description\">Some banner description.</span>\n</p-banner>`;\n\n    get markupWidth() {\n      return `<p-banner width=\"${this.width}\">\n  <span slot=\"title\">Some banner title</span>\n  <span slot=\"description\">Some banner description.</span>\n</p-banner>`;\n    }\n    \n    openBanner = (event) => {\n      const el = document.createElement('p-banner');\n      const currentTarget = event.currentTarget;\n      el.innerHTML = `\n        <span slot=\"title\">Some banner title</span>\n        <span slot=\"description\">Some banner description.</span>\n      `;\n      document.getElementById('app').append(el);\n      el.addEventListener('dismiss', () => {\n        currentTarget.focus();\n      });\n    };\n  \n    mounted(): void {\n      const banners = document.querySelectorAll('p-banner');\n      banners.forEach((el) => el.addEventListener(\"dismiss\", () => console.log(\"dismissed\")));\n\n      // scroll to top since banners have autofocus on close button via componentDidLoad\n      componentsReady(this.$el).then(() => {\n        document.querySelector('html').scrollTop = 0;\n      });\n    }\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  ::v-deep .demo p-banner {\n    --p-banner-position-type: static;\n  }\n</style>",
      "Decision Tree": "# Notifications\n\n## Decision Tree\n\nThe decision tree can guide you when to use which notification component.\nFirst, walk through the four cases and pick the one that represents your case the best.\nFrom there, a few simple questions will lead you to the recommended component for your notification.\n\n---\n\n## Provide additional information for a task, a status, or their current action.\n\nStatus: Neutral\n\n#### Example use Cases:\n* Ask for User data\n* Request feedback\n* Validation code was sent to phone\n* We sent you an email\n\n![The five basic elements of Porsche forms](./assets/notification-neutral.png)\n\n#### Related Components:\n\n* [Inline Notification](components/notifications/inline-notification)\n* [Modal](components/modal) \n* [Toast](components/notifications/toast) \n\n---\n\n## Confirm a task was completed as expected.\n\nStatus: Success\n\n#### Example use Cases:\n* From submit was successful\n* Selection made is approved\n* Changes are saved/made/applied successfully\n* An Upload was successful\n* A request was submitted successfully\n  \n![The five basic elements of Porsche forms](./assets/notification-success.png)\n\n#### Related Components:\n\n* [Inline Notification](components/notifications/inline-notification)\n* Inline Validation (supported by all form elements)\n* [Toast](components/notifications/toast)\n\n---\n\n## Inform/confirm that the user is taking actions or an event occurs that is not desirable or might have effects.\n\nStatus: Warning\n\n#### Example use Cases:\n* The user’s login session is about to expire\n* Planned system maintenance is coming soon\n* About to leave the system\n* About to delete a vehicle or user data\n  \n![The five basic elements of Porsche forms](./assets/notification-warning.png)\n\n#### Related Components:\n\n* [Banner](components/notifications/banner) \n* [Inline Notification](components/notifications/inline-notification)\n* [Modal](components/modal) \n\n---\n\n## Inform/confirm that the user is taking actions or an event occurs that is not desirable or might have effects.\n\nStatus: Error\n\n#### Example use Cases:\n* Internet connection lost\n* Form submit error (mandatory fields missing)\n* Wrong input format\n* Credentials can't be found\n* Feedback Page (Success / Error)\n* There is a problem uploading a file\n  \n![The five basic elements of Porsche forms](./assets/notification-error.png)\n\n#### Related Components:\n\n* [Banner](components/notifications/banner) \n* [Inline Notification](components/notifications/inline-notification)\n* Inline Validation (supported by all form elements)\n* [Modal](components/modal) \n",
      "Props": "# Notifications\n\n## Inline Notification\n\n### Properties\n\n| Property        | Attribute        | Description                                                                                                          | Type| Default              |\n| --------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------- |\n| `actionIcon`    | `action-icon`    | Action icon of the inline-notification.                                                                              | `'light'` <br>` 'reset'` <br>` '360'` <br>` 'accessibility'` <br>` 'active-cabin-ventilation'` <br>` 'add'` <br>` 'adjust'` <br>` 'arrow-double-down'` <br>` 'arrow-double-left'` <br>` 'arrow-double-right'` <br>` 'arrow-double-up'` <br>` 'arrow-down'` <br>` 'arrow-first'` <br>` 'arrow-head-down'` <br>` 'arrow-head-left'` <br>` 'arrow-head-right'` <br>` 'arrow-head-up'` <br>` 'arrow-last'` <br>` 'arrow-left'` <br>` 'arrow-right'` <br>` 'arrow-up'` <br>` 'augmented-reality'` <br>` 'battery-empty'` <br>` 'battery-full'` <br>` 'bell'` <br>` 'bookmark'` <br>` 'broadcast'` <br>` 'calculator'` <br>` 'calendar'` <br>` 'camera'` <br>` 'car'` <br>` 'car-battery'` <br>` 'card'` <br>` 'charging-active'` <br>` 'charging-state'` <br>` 'charging-station'` <br>` 'chart'` <br>` 'chat'` <br>` 'check'` <br>` 'city'` <br>` 'climate'` <br>` 'climate-control'` <br>` 'clock'` <br>` 'close'` <br>` 'closed-caption'` <br>` 'co2-emission'` <br>` 'compare'` <br>` 'configurate'` <br>` 'country-road'` <br>` 'cubic-capacity'` <br>` 'delete'` <br>` 'disable'` <br>` 'document'` <br>` 'download'` <br>` 'duration'` <br>` 'edit'` <br>` 'email'` <br>` 'exclamation'` <br>` 'external'` <br>` 'filter'` <br>` 'flash'` <br>` 'fuel-station'` <br>` 'garage'` <br>` 'gift'` <br>` 'globe'` <br>` 'grid'` <br>` 'highway'` <br>` 'home'` <br>` 'horn'` <br>` 'image'` <br>` 'increase'` <br>` 'information'` <br>` 'key'` <br>` 'leaf'` <br>` 'leather'` <br>` 'list'` <br>` 'locate'` <br>` 'lock'` <br>` 'lock-open'` <br>` 'logo-baidu'` <br>` 'logo-delicious'` <br>` 'logo-digg'` <br>` 'logo-facebook'` <br>` 'logo-foursquare'` <br>` 'logo-gmail'` <br>` 'logo-google'` <br>` 'logo-hatena'` <br>` 'logo-instagram'` <br>` 'logo-kaixin'` <br>` 'logo-kakaotalk'` <br>` 'logo-linkedin'` <br>` 'logo-naver'` <br>` 'logo-pinterest'` <br>` 'logo-qq'` <br>` 'logo-qq-share'` <br>` 'logo-reddit'` <br>` 'logo-skyrock'` <br>` 'logo-sohu'` <br>` 'logo-tecent'` <br>` 'logo-telegram'` <br>` 'logo-tiktok'` <br>` 'logo-tumblr'` <br>` 'logo-twitter'` <br>` 'logo-viber'` <br>` 'logo-vk'` <br>` 'logo-wechat'` <br>` 'logo-weibo'` <br>` 'logo-whatsapp'` <br>` 'logo-xing'` <br>` 'logo-yahoo'` <br>` 'logo-youku'` <br>` 'logo-youtube'` <br>` 'logout'` <br>` 'map'` <br>` 'menu-dots-horizontal'` <br>` 'menu-dots-vertical'` <br>` 'menu-lines'` <br>` 'minus'` <br>` 'mobile'` <br>` 'moon'` <br>` 'oil-can'` <br>` 'parking-brake'` <br>` 'parking-light'` <br>` 'pause'` <br>` 'phone'` <br>` 'pin'` <br>` 'play'` <br>` 'plug'` <br>` 'plus'` <br>` 'preheating'` <br>` 'printer'` <br>` 'purchase'` <br>` 'question'` <br>` 'racing-flag'` <br>` 'refresh'` <br>` 'replay'` <br>` 'route'` <br>` 'rss'` <br>` 'save'` <br>` 'screen'` <br>` 'search'` <br>` 'send'` <br>` 'share'` <br>` 'shopping-bag'` <br>` 'shopping-cart'` <br>` 'sidelights'` <br>` 'snowflake'` <br>` 'sort'` <br>` 'stack'` <br>` 'star'` <br>` 'steering-wheel'` <br>` 'stopwatch'` <br>` 'subtract'` <br>` 'success'` <br>` 'sun'` <br>` 'switch'` <br>` 'tablet'` <br>` 'tachometer'` <br>` 'truck'` <br>` 'upload'` <br>` 'user'` <br>` 'user-group'` <br>` 'user-manual'` <br>` 'video'` <br>` 'view'` <br>` 'view-off'` <br>` 'volume-off'` <br>` 'volume-up'` <br>` 'warning'` <br>` 'weight'` <br>` 'wifi'` <br>` 'work'` <br>` 'wrench'` <br>` 'wrenches'` <br>` 'zoom-in'` <br>` 'zoom-out'` | `'arrow-head-right'` |\n| `actionLabel`   | `action-label`   | Action label of the inline-notification.                                                                             | `string`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | `undefined`          |\n| `actionLoading` | `action-loading` | Disables the action button and shows a loading indicator. No events will be triggered while loading state is active. | `boolean`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | `false`              |\n| `description`   | `description`    | Description of the inline-notification.                                                                              | `string`| `''`                 |\n| `heading`       | `heading`        | Heading of the inline-notification.                                                                                  | `string`| `''`                 |\n| `persistent`    | `persistent`     | Defines if the inline-notification can be closed/removed by the user.                                                | `boolean`| `false`              |\n| `state`         | `state`          | State of the inline-notification.                                                                                    | `'error'` <br>` 'neutral'` <br>` 'success'` <br>` 'warning'`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | `'neutral'`          |\n| `theme`         | `theme`          | Adapts the inline-notification color depending on the theme.                                                         | `'dark'` <br>` 'light'`| `'light'`            |\n\n\n### Events\n\n| Event     | Description                                | Type                |\n| --------- | ------------------------------------------ | ------------------- |\n| `action`  | Emitted when the action button is clicked. | `CustomEvent<void>` |\n| `dismiss` | Emitted when the close button is clicked.  | `CustomEvent<void>` |\n\n## Toast\n\n### Properties\n\n<p style=\"max-width: 100%\">\n\n`type OffsetBottom = number`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property       | Attribute       | Description                                    | Type                                                                                                                       | Default              |\n| -------------- | --------------- | ---------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- | -------------------- |\n| `offsetBottom` | `offset-bottom` | The bottom offset of the toast.                | `number` <br>` BreakpointCustomizable<OffsetBottom>` | `defaultToastOffset` |\n| `theme`        | `theme`         | Adapts the toast color depending on the theme. | `'dark'` <br>` 'light'`                                                                                                        | `'light'`            |\n\n\n### Methods\n\n`addMessage(message: ToastMessage) => Promise<void>`\n\n\n\n\n## Banner\n\n### Properties\n\n| Property     | Attribute    | Description                                                                       | Type                                | Default     |\n| ------------ | ------------ | --------------------------------------------------------------------------------- | ----------------------------------- | ----------- |\n| `persistent` | `persistent` | Defines if the banner can be closed/removed by the user.                          | `boolean`                           | `false`     |\n| `state`      | `state`      | State of the banner.                                                              | `'error'` <br>` 'neutral'` <br>` 'warning'` | `'neutral'` |\n| `theme`      | `theme`      | Adapts the banner color depending on the theme.                                   | `'dark'` <br>` 'light'`                 | `'light'`   |\n| `width`      | `width`      | Defines the width of the banner corresponding to the `content-wrapper` dimensions | `'basic'` <br>` 'extended'` <br>` 'fluid'`  | `'basic'`   |\n\n\n### Events\n\n| Event     | Description                               | Type                |\n| --------- | ----------------------------------------- | ------------------- |\n| `dismiss` | Emitted when the close button is clicked. | `CustomEvent<void>` |\n"
    },
    "Pagination": {
      "Examples": "# Pagination\n\n## Basic usage\n\nTo adapt the pagination to the specific viewport context, the amount of displayed page items varies between either `7` (desktop/tablet) or `5` (mobile). The components handles responsive viewport sizing by default.\n\n<Playground :markup=\"basic()\" :config=\"config\"></Playground>\n\n### Max Number of Page Links: 7 (desktop)\n\n<Playground :markup=\"basic('7')\" :config=\"config\"></Playground>\n\n### Max Number of Page Links: 5 (mobile)\n\n<Playground :markup=\"basic('5')\" :config=\"config\"></Playground>\n\n### Responsive\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l` and `xl`.\n\n<Playground :markup=\"basic('{ base: 5, s: 7 }')\" :config=\"config\"></Playground>\n\n--- \n\n## Behaviour playground\nBy changing values for total amount of items, items to display per page and number of currently active page, the behaviour of the pagination component can be changed.\n\n<Playground class=\"playground-pagination\" :markup=\"behaviour\" :config=\"config\">\n  <template v-slot:default=\"{ theme }\">\n    <label style=\"display:inline-block; margin-right: 16px;\">\n      <p-text :theme=\"theme\" tag=\"span\" size=\"x-small\">Total items count</p-text>\n      <input type=\"number\" v-bind:value=\"totalItemsCount\" v-on:input=\"totalItemsCount = $event.target.value\" />\n    </label>\n    <label style=\"display:inline-block; margin-right: 16px;\">\n      <p-text :theme=\"theme\" tag=\"span\" size=\"x-small\">Items per page</p-text>\n      <input type=\"number\" v-bind:value=\"itemsPerPage\" v-on:input=\"itemsPerPage = $event.target.value\" />\n    </label>\n    <label style=\"display:inline-block\">\n      <p-text :theme=\"theme\" tag=\"span\" size=\"x-small\">Active page</p-text>\n      <input type=\"number\" v-bind:value=\"activePage\" v-on:input=\"activePage = $event.target.value\" />\n    </label>\n  </template>\n</Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n    \n    totalItemsCount = 500;\n    itemsPerPage = 25;\n    activePage = 1;\n    \n    basic(max: string) {\n      const attr = max ? ` max-number-of-page-links=\"${max}\"` : '';\n      return `<p-pagination total-items-count=\"500\" items-per-page=\"25\" active-page=\"1\"${attr}></p-pagination>`;\n    }\n\n    get behaviour() {\n      return `<p-pagination total-items-count=\"${this.totalItemsCount}\" items-per-page=\"${this.itemsPerPage}\" active-page=\"${this.activePage}\"></p-pagination>`\n    }\n\n    mounted(){\n      this.registerEvents();\n    }\n    \n    updated(){\n      this.registerEvents();\n    }\n    \n    registerEvents() {\n      const playground = this.$el.querySelector('.playground-pagination p-pagination');\n      playground.addEventListener('pageChange', (e) => {\n        this.activePage = e.detail.page;\n      });\n    }\n  }\n</script>",
      "Usage": "# Pagination\n\n## When to use\n  • Use a Pagination whenever a content (text, images, videos) is split into several pages. \n  • Use a Pagination to provide information on the existing amount of pages. \n  • Use a Pagination to show the current page position. \n  • Use a Pagination to allow the user to navigate between the single content pages.   \n\n--- \n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Pagination as follows\n\n| Variant | Usage |\n|----|----|\n| Icon and label| Due to better comprehensibility and accessibility, you should preferably go for this variant. The length of the link always adapts to the length of the label. As for the icon, you can either choose between one of the social platform icons provided in the Porsche icon set or also use a specific icon, whereas it must refer (which should be clear) to a social platform. |\n| Icon only| This variant contains an icon only with no further text information. It should preferably be used e.g. for social sharing links, when the user is totally aware of the button functionality due to a clear context. |\n| Group | The Link Social group contains the most used social icons that can be used as a group.\n\n\n\n## Usage \n\n### Displaying 6 pages or 8 pages or more\n\nIf there are at least 6 or 8 pages, an ellipsis (\"...\") is shown for a dedicated range of pages that are located inbetween the visible pagination numbers. \n\n![Example for displaying 8 pages or more](./assets/pagination-desktop-plus8.png)\n\n## Positioning and spacing\n\nThe pagination should always be placed centered beneath the related content, keeping a minimum top spacing of 32 px.\n",
      "Props": "# Pagination\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type MaxNumberOfPageLinks = NumberOfPageLinks`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property               | Attribute                  | Description                                              | Type                                                                                                                                                                                                    | Default                         |\n| ---------------------- | -------------------------- | -------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------- |\n| `activePage`           | `active-page`              | Index of the currently active page.                      | `number`                                                                                                                                                                                                | `1`                             |\n| `allyLabel`            | `ally-label`               | Aria label what the pagination is used for.              | `string`                                                                                                                                                                                                | `'Pagination'`                  |\n| `allyLabelNext`        | `ally-label-next`          | Aria label for next page icon.                           | `string`                                                                                                                                                                                                | `'Next page'`                   |\n| `allyLabelPage`        | `ally-label-page`          | Aria label for page navigation.                          | `string`                                                                                                                                                                                                | `'Page'`                        |\n| `allyLabelPrev`        | `ally-label-prev`          | Aria label for previous page icon.                       | `string`                                                                                                                                                                                                | `'Previous page'`               |\n| `itemsPerPage`         | `items-per-page`           | The total count of items which should be shown per page. | `number`                                                                                                                                                                                                | `1`                             |\n| `maxNumberOfPageLinks` | `max-number-of-page-links` | The maximum number of page links rendered                | `NumberOfPageLinks` <br>` BreakpointCustomizable<MaxNumberOfPageLinks>` | `{     base: 5,     xs: 7,   }` |\n| `theme`                | `theme`                    | Adapts the color when used on dark background.           | `'dark'` <br>` 'light'`                                                                                                                                                                                     | `'light'`                       |\n| `totalItemsCount`      | `total-items-count`        | The total count of items.                                | `number`                                                                                                                                                                                                | `1`                             |\n\n\n## Events\n\n| Event        | Description                    | Type                                                   |\n| ------------ | ------------------------------ | ------------------------------------------------------ |\n| `pageChange` | Emitted when the page changes. | `CustomEvent<{ page: number; previousPage: number; }>` |\n"
    },
    "Popover": {
      "Examples": "# Popover\n\nThe `p-popover` component can be used to display some additional content on top of another in conjunction with \nthe info <p-popover description=\"Hello World\"></p-popover>-button.\n\n## Basic\n\nIt's important, that the Popover isn't used within a parent node having e.g. `overflow: hidden` as style defined. \nThen it might be shown cut-off under certain circumstances because it's placed relative \nto the info <p-icon name=\"information\" aria=\"{ 'aria-label': 'Information icon' }\"></p-icon>-button node technically.\n\nOnly one Popover can be opened at the time, by clicking another Popover the opened Popover will be closed.\n\nYou can use the `description` or the slot of the Popover to provide content which will be displayed in the open Popover.\n\n**Hint:** The Popover uses a z-index of `{{zIndex}}` to be displayed on top of most elements. This only works if the \n[stacking context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context) is not broken and following elements\nhave a lower z-index.\n\n<Playground :markup=\"basicMarkup\" :config=\"config\"></Playground>\n\n### ARIA attributes and states\n\nThrough the `aria` property you have the possibility to provide an additional **aria-label** attribute to the component.\n\n<Playground :markup=\"accessibilityMarkup\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\n\n- Make sure to provide a **descriptive**, self explaining **label** which could be understood without context to expose a more descriptive experience to screen reader users, \ntelling them what they can expect to read after clicking the info <p-icon name=\"information\" aria=\"{ 'aria-label': 'Information icon' }\"></p-icon>-button.\n\n---\n\n## Direction\n\nIt's possible to define a preferred direction in which the popover should open, given there is enough space in viewport. Otherwise, \nit will be opened in the direction with most available space automatically.\n\n<Playground :markup=\"directionMarkup\" :config=\"config\">\n  <select v-model=\"direction\">\n    <option disabled>Select a direction</option>\n    <option value=\"top\">Top</option>\n    <option value=\"right\">Right</option>\n    <option value=\"bottom\">Bottom</option>\n    <option value=\"left\">Left</option>\n  </select>\n</Playground>\n\n<script lang=\"ts\">\nimport {POPOVER_Z_INDEX} from \"../../../constants\"; \n\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { overflowX: 'visible' };\n\n    direction = 'left';\n    popoverContent = 'Some additional content.';\n    zIndex = POPOVER_Z_INDEX;\n    \n    basicMarkup = `<p-text>\n  Some content <p-popover>${this.popoverContent}</p-popover> which is longer.<br>  Some more content <p-popover description=\"${this.popoverContent}\"></p-popover>.\n</p-text>`;\n\n    descriptionMarkup = `<p-popover description=\"${this.popoverContent}\"></p-popover>`;\n\n    get directionMarkup() {\n      return `<p-popover direction=\"${this.direction}\">${this.popoverContent}</p-popover>`;\n    }\n\n    accessibilityMarkup = `<p-text>\n  Some content <p-popover aria=\"{ 'aria-label': 'Some more descriptive label' }\">${this.popoverContent}</p-popover>\n</p-text>`;\n    \n  }\n</script>\n",
      "Usage": "# Popover\n\n## When to use\n\n* To display additional information that is not necessary for the task completion (User Flow).\n* To give further explanation about workflow for better understandability.\n* When it's not possible to show the content directly.\n\n---\n\n## Behavior \n\n\n### Open\n\nThe popover will be triggered via `click` on the info <p-icon name=\"information\" aria=\"{ 'aria-label': 'Information icon' }\"></p-icon>-button.\n\n### Close \n\nBoth the `esc` key and `click` outside the popover will close it.\n\n### Direction\n \nIt's possible to define a preferred direction in which the popover should open (`top`, `right`, `bottom` , and `left`), \ngiven there is enough space in the viewport. Otherwise, it will be opened in the direction with the most available space automatically.\n\n\n## Usage\n\n### Placement\n\n* Position popovers, so they don’t block related content.\n* Use popovers consistently throughout your site.\n\n## References\n\nNielsen Norman Group [Tooltip Guidelines](https://www.nngroup.com/articles/tooltip-guidelines/)\n\n",
      "Props": "# Popover\n\n## Properties\n\n| Property      | Attribute     | Description                                                                                                                                                        | Type                                     | Default     |\n| ------------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------- | ----------- |\n| `aria`        | `aria`        | Add ARIA attributes.                                                                                                                                               | `{ 'aria-label'?: string; }`   | `undefined` |\n| `description` | `description` | Descriptive text to show additional information when popover is open                                                                                               | `string`                                 | `undefined` |\n| `direction`   | `direction`   | Preferred direction in which popover should open, given there is enough space in viewport. Otherwise it will be opened in the direction with most available space. | `'bottom'` <br>` 'left'` <br>` 'right'` <br>` 'top'` | `'bottom'`  |\n"
    },
    "Radio Button": {
      "Examples": "# Radio Button\n\nThe `p-radio-button-wrapper` component is a styling wrapper for the native HTML input type `radio` form element.\nThe singular property of a Radio Button makes it distinct from a checkbox, which allows more than one (or no) item to be selected and for the unselected state to be restored.\n\nA `label` is a caption which informs the user what information a particular form field is asking for. The `p-radio-button-wrapper` component can be used with or without a label but it's recommended to keep the label visible for better accessibility whenever possible. When used without a label, it's best practice to provide a descriptive label text for screen readers.  \n\n## Basic examples\n\n<Playground :markup=\"basic\" :config=\"config\">\n  <select v-model=\"label\">\n    <option value=\"show\">With label</option>\n    <option value=\"hide\">Without label</option>\n    <option value=\"responsive\">Responsive</option>\n  </select>\n</Playground>\n\n---\n\n## Required\n\n<Playground :markup=\"required\" :config=\"config\"></Playground>\n\n---\n\n## Disabled\n\n<Playground :markup=\"disabled\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIn general, you should **prevent** using the `disabled=\"true\"` state. Disabled elements are not reachable (focusable) anymore and can be missed by screen reader users.\nThey can be confusing for sighted users as well by not pointing out why these elements are disabled.\nA good practice when to use the disabled state is during **form submission** to prevent changes while this process is performed.\n\n---\n\n## Validation states\n\nThe `p-radio-button-wrapper` component supports the visualisation of inline validation. The `message` and `radio` is colored and visible/hidden depending on the defined `state`.\n\n<Playground :markup=\"validation\" :config=\"config\">\n  <select v-model=\"state\">\n    <option disabled>Select a validation state</option>\n    <option value=\"error\">Error</option>\n    <option value=\"success\">Success</option>\n    <option value=\"none\">None</option>\n  </select>\n</Playground>\n\n---\n\n## Slots\n\nSometimes it's useful to be able to render markup (e.g. an anchor tag) for `label` or `message`. Therefore a named slot can be used. Make sure **not** to define the corresponding property on the host element when a named slot is used (because a property definition is preferred over a named slot).\nFor named slots only [phrasing content](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content) is allowed.\n\n<Playground :markup=\"slots\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIf using **slotted contents** to serve form elements, make sure to provide the right **ARIA attributes** to give screen reader users the corresponding information:\n1. Add a unique ID to the `slot=\"label\"` element\n1. Add a unique ID to the `slot=\"message\"` element (if they are created)\n1. Add corresponding `aria-labelledby=\"some-label-id\"` to the `input` element which points to the `label` ID\n1. Add corresponding `aria-describedby=\"some-message-id\"` to the `input` element which points to the `message` ID when the (error/success) message appears\n\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { spacing: 'block' };\n  \n    state = 'error';\n    label = 'show';\n    \n    get basic() {\n      const attr = `hide-label=\"${this.label === 'hide' ? 'true' : this.label === 'responsive' ? '{ base: true, l: false }' : 'false'}\"`;\n      return `<p-radio-button-wrapper label=\"Some label\" ${attr}>\n  <input type=\"radio\" name=\"some-name-1\" />\n</p-radio-button-wrapper>\n<p-radio-button-wrapper label=\"Some label\" ${attr}>\n  <input type=\"radio\" name=\"some-name-1\" />\n</p-radio-button-wrapper>`;\n    }\n    \n    required =\n`<p-radio-button-wrapper label=\"Some label\">\n  <input type=\"radio\" name=\"some-name-4\" required />\n</p-radio-button-wrapper>\n<p-radio-button-wrapper label=\"Some label\">\n  <input type=\"radio\" name=\"some-name-4\" required checked />\n</p-radio-button-wrapper>`;\n\n    disabled =\n`<p-radio-button-wrapper label=\"Some label\">\n  <input type=\"radio\" name=\"some-name-4\" disabled />\n</p-radio-button-wrapper>\n<p-radio-button-wrapper label=\"Some label\">\n  <input type=\"radio\" name=\"some-name-4\" disabled checked />\n</p-radio-button-wrapper>`;\n\n    get validation() {\n      const attr = ` message=\"${this.state !== 'none' ? `Some ${this.state} validation message.` : ''}\"`\n      return `<p-radio-button-wrapper label=\"Some label\" state=\"${this.state}\">\n  <input type=\"radio\" name=\"some-name-5\" />\n</p-radio-button-wrapper>\n<p-radio-button-wrapper label=\"Some label\" state=\"${this.state}\"${attr}>\n  <input type=\"radio\" name=\"some-name-5\" />\n</p-radio-button-wrapper>`;\n    }\n    \n    slots =\n`<p-radio-button-wrapper state=\"error\">\n  <span slot=\"label\" id=\"some-label-id-1\">Some label with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n  <input type=\"radio\" name=\"some-name-6\" aria-labelledby=\"some-label-id-1\" />\n</p-radio-button-wrapper>\n<p-radio-button-wrapper state=\"error\">\n  <span slot=\"label\" id=\"some-label-id-2\">Some label with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n  <input type=\"radio\" name=\"some-name-6\" aria-labelledby=\"some-label-id-2\" aria-describedby=\"some-message-id\" />\n  <span slot=\"message\" id=\"some-message-id\">Some error message with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n</p-radio-button-wrapper>`\n  }\n</script>\n",
      "Usage": "# Radio Button\n\n## When to use\n  • Use a Radio Button to enable a user to select one value from a predefined list.  \n  • Use a Radio Button as soon as two options are mutually exclusive.  \n  • Use a Radio Button when the user should see all available options.\n\n---\n\n## Behavior\n\n### Label\nThe label text (always in copytext) gives the user an information about the option that can be selected. Try to keep the label short and descriptive (one word or two).\n\n### Validation and error\nFor a group of Radio Buttons the validation message is set at the end of the list. This means that the validation for a Radio Button behaves differently from the other form elements where the validation is set for each individual component.\nPlease find more information in the [Form pattern guideline](patterns/forms).\n\n### Items\nWe recommend using a Radio Button for a selection of 3-6 items. For a larger number of items (≥ 7) it is recommended to use a Select component instead. \"If possible, use radio buttons rather than Selects. Radio buttons have lower cognitive load because they make all options permanently visible so that users can easily compare (…).\" (Jakob Nielsen, 2004)\n\n### Group\nIn a group of Radio Buttons one option should be selected by default, except for cases where a pre-selection can lead to wrong assumptions, i.e. \"Male\" or \"Female\".\nIn this case no option should be selected by default.\n\n<div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n    <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n    <img src=\"./assets/radio-button-examples.png\" alt=\"Examples for radio button usage\" />\n</div>\n\n\n## Do's & Don'ts\n\n### Alignment\nAlways align Radio Buttons with more than 2 items vertically left-aligned, as a horizontal alignment is more difficult to scan for the user and more difficult to see which label belongs to which radio.\n\n![Example for alignment](./assets/radio-button-dont-alignment.png)\n\n### Single choice\nNever use a Radio Button alone. In this case you should you the Checkbox instead.\n\n![Example for single choice](./assets/radio-button-dont-single-choice.png)\n\n---\n\n## Related Components\n\n* [Checkbox](components/checkbox)\n* [Select](components/select)\n",
      "Props": "# Radio Button\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type HideLabel = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property    | Attribute    | Description                                                                      | Type                                                                                                                               | Default  |\n| ----------- | ------------ | -------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| `hideLabel` | `hide-label` | Show or hide label. For better accessibility it's recommended to show the label. | `boolean` <br>` BreakpointCustomizable<HideLabel>` | `false`  |\n| `label`     | `label`      | The label text.                                                                  | `string`                                                                                                                           | `''`     |\n| `message`   | `message`    | The message styled depending on validation state.                                | `string`                                                                                                                           | `''`     |\n| `state`     | `state`      | The validation state.                                                            | `'error'` <br>` 'none'` <br>` 'success'`                                                                                                   | `'none'` |\n"
    },
    "Select": {
      "Examples": "# Select\n\nThe `p-select-wrapper` component is a styling wrapper for the native HTML `<select>` form element.\nTo improve accessibility on devices with touch support, it defaults to the native user interface behaviour.\n\nA `label` is a caption which informs the user what information a particular form field is asking for.\nThe `p-select-wrapper` component can be used with or without a label but it's recommended to keep the label visible for better accessibility whenever possible.\nWhen used without a label, it's best practice to provide a descriptive label text for screen readers.  \n\n## Basic example\n\n<Playground :markup=\"basic\" :config=\"config\">\n  <select v-model=\"label\">\n    <option disabled>Select a label mode</option>\n    <option value=\"show\">With label</option>\n    <option value=\"hide\">Without label</option>\n    <option value=\"responsive\">Responsive</option>\n  </select>\n</Playground>\n\n---\n\n## Basic example without preselection\n\nTo ensure the user makes a conscious choice, use `<option></option>` as placeholder.\nIf the select is required, use `<option hidden></option>` to enforce a selection.\n\n<Playground :markup=\"basicNoPreselection\" :config=\"config\">\n  <select v-model=\"isRequired\">\n    <option disabled>Select a label mode</option>\n    <option value=\"false\">optional</option>\n    <option value=\"true\">required</option>\n  </select>\n</Playground>\n\n---\n\n## With filter\nThis option enhances the native select filter by providing an additional search field where the user can type their own search string. \nThe filter reduces the amount of option items by searching for the typed characters starting with the first character of the options text.\n\n<Playground :markup=\"withFilter\" :config=\"config\"></Playground>\n\n---\n\n## With optgroups\n\n<Playground :markup=\"withOptgroups\" :config=\"config\"></Playground>\n\n--- \n\n## Dropdown direction\n\n<Playground :markup=\"direction\" :config=\"config\">\n  <select v-model=\"dropdownDirection\">\n    <option disabled>Select a dropdown mode</option>\n    <option value=\"down\">Direction down</option>\n    <option value=\"up\">Direction up</option>\n    <option value=\"auto\">Direction auto</option>\n  </select>\n</Playground>\n\n---\n\n## With description text\n\nA description text can be added to explain the meaning of a specific form field. It's meant to be a textual enhancement of the label text and is technically connected with the `hide-label` property.\n\n<Playground :markup=\"withDescriptionText\" :config=\"config\"></Playground>\n\n---\n\n## Required\n\n<Playground :markup=\"required\" :config=\"config\"></Playground>\n\n---\n\n## Disabled\n\n<Playground :markup=\"disabled\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIn general, you should **prevent** using the `disabled=\"true\"` state. Disabled elements are not reachable (focusable) anymore and can be missed by screen reader users.\nThey can be confusing for sighted users as well by not pointing out why these elements are disabled.\nA good practice when to use the disabled state is during **form submission** to prevent changes while this process is performed.\n\n---\n\n## Validation states\n\nThe `p-select-wrapper` component supports the visualisation of inline validation.\n\n<Playground :markup=\"validationStates\" :config=\"config\">\n  <select v-model=\"state\">\n    <option disabled>Select a validation state</option>\n    <option value=\"error\">Error</option>\n    <option value=\"success\">Success</option>\n    <option value=\"none\">None</option>\n  </select>\n</Playground>\n\n---\n\n## Slots\n\nSometimes it's useful to be able to render markup (e.g. an anchor tag) for `label` or `message`.  \nTherefore, a named slot can be used. Make sure **not** to define the corresponding property on the host element when a named slot is used (because a property definition is preferred over a named slot).\nFor named slots only [phrasing content](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content) is allowed.\n\n<Playground :markup=\"slots\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIf using **slotted contents** to serve form elements, make sure to provide the right **ARIA attributes** to give screen reader users the corresponding information:\n1. Add a unique ID to the `slot=\"label\"` element\n1. Add a unique ID to the `slot=\"message\"` element (if they are created)\n1. Add corresponding `aria-labelledby=\"some-label-id\"` to the `select` element which points to the `label` ID\n1. Add corresponding `aria-describedby=\"some-description-id some-message-id\"` to the `select` element which points to both, the `description` ID (if set) and the `message` ID when the (error/success) message appears\n\n---\n\n## Changing the selected option programmatically\nIn JS there is no possibility to listen to the `onchange` event or the `mutationObserver` if the selected option is changed programmatically, e.g.:\n```tsx\n//Won't update the custom styled dropdown\nselectElement.options[3].selected = true;\n```\n\nTo force re-rendering of the custom dropdown, the selected option needs to be changed by adding/removing the `selected` attribute, e.g.\n\n```tsx\n//Won't update the custom styled dropdown\nselectElement.options[3].setAttribute('selected', 'selected');\nselectElement.options[0].removeAttribute('selected');\n```\n\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\n\nconst buildOptions = (opts: string[]): string[] => opts.map(val => `<option value=\"${val}\">Option ${val.toUpperCase()}</option>`);\n\n@Component\nexport default class Code extends Vue {\n  config = { themeable: true, overflowX: 'visible' };\n  \n  label = 'show';\n  state = 'error';\n  dropdownDirection = 'auto';\n  isRequired = 'false';\n  \n  get basic() {\n    const attr = `hide-label=\"${this.label === 'hide' ? 'true' : this.label === 'responsive' ? '{ base: true, l: false }' : 'false'}\"`;\n      return `<p-select-wrapper label=\"Some label\" ${attr}>\n  <select name=\"some-name\">\n    ${buildOptions(['a','b','c','d','e','f']).join('\\n    ')}\n  </select>\n</p-select-wrapper>`;\n    }\n\n  get basicNoPreselection() {\n    const option = this.isRequired === 'false' ? '<option></option>' : '<option hidden></option>';\n    const required = this.isRequired === 'true' ? ' required' : '';\n    \n    return `<p-select-wrapper label=\"Some label\">\n  <select name=\"some-name\"${required}>\n    ${option}\n    ${buildOptions(['a','b','c']).join('\\n    ')}\n  </select>\n</p-select-wrapper>`;\n    }\n\n    \n  get withFilter() {\n    const options = {\n      AF: 'Afghanistan',\n      AX: 'Åland Islands',\n      AL: 'Albania',\n      DZ: 'Algeria',\n      AS: 'American Samoa',\n      AD: 'Andorra',\n      AO: 'Angola',\n      AI: 'Anguilla',\n      AQ: 'Antarctica',\n      AG: 'Antigua and Barbuda',\n      AR: 'Argentina',\n      AM: 'Armenia',\n      AW: 'Aruba',\n      AU: 'Australia',\n      AT: 'Austria',\n      AZ: 'Azerbaijan',\n      BS: 'Bahamas',\n      BH: 'Bahrain',\n      BD: 'Bangladesh',\n      BB: 'Barbados',\n      BY: 'Belarus',\n      BE: 'Belgium',\n      BZ: 'Belize',\n      BJ: 'Benin',\n      BM: 'Bermuda',\n      BT: 'Bhutan',\n      BO: 'Bolivia, Plurinational State of',\n      BQ: 'Bonaire, Sint Eustatius and Saba',\n      BA: 'Bosnia and Herzegovina',\n      BW: 'Botswana',\n      BV: 'Bouvet Island',\n      BR: 'Brazil',\n      IO: 'British Indian Ocean Territory',\n      BN: 'Brunei Darussalam',\n      BG: 'Bulgaria',\n      BF: 'Burkina Faso',\n      BI: 'Burundi',\n      KH: 'Cambodia',\n      CM: 'Cameroon',\n      CA: 'Canada',\n      CV: 'Cape Verde',\n      KY: 'Cayman Islands',\n      CF: 'Central African Republic',\n      TD: 'Chad',\n      CL: 'Chile',\n      CN: 'China',\n      CX: 'Christmas Island',\n      CC: 'Cocos (Keeling) Islands',\n      CO: 'Colombia',\n      KM: 'Comoros',\n      CG: 'Congo',\n      CD: 'Congo, the Democratic Republic of the',\n      CK: 'Cook Islands',\n      CR: 'Costa Rica',\n      CI: 'Côte d\\'Ivoire',\n      HR: 'Croatia',\n      CU: 'Cuba',\n      CW: 'Curaçao',\n      CY: 'Cyprus',\n      CZ: 'Czech Republic',\n      DK: 'Denmark',\n      DJ: 'Djibouti',\n      DM: 'Dominica',\n      DO: 'Dominican Republic',\n      EC: 'Ecuador',\n      EG: 'Egypt',\n      SV: 'El Salvador',\n      GQ: 'Equatorial Guinea',\n      ER: 'Eritrea',\n      EE: 'Estonia',\n      ET: 'Ethiopia',\n      FK: 'Falkland Islands (Malvinas)',\n      FO: 'Faroe Islands',\n      FJ: 'Fiji',\n      FI: 'Finland',\n      FR: 'France',\n      GF: 'French Guiana',\n      PF: 'French Polynesia',\n      TF: 'French Southern Territories',\n      GA: 'Gabon',\n      GM: 'Gambia',\n      GE: 'Georgia',\n      DE: 'Germany',\n      GH: 'Ghana',\n      GI: 'Gibraltar',\n      GR: 'Greece',\n      GL: 'Greenland',\n      GD: 'Grenada',\n      GP: 'Guadeloupe',\n      GU: 'Guam',\n      GT: 'Guatemala',\n      GG: 'Guernsey',\n      GN: 'Guinea',\n      GW: 'Guinea-Bissau',\n      GY: 'Guyana',\n      HT: 'Haiti',\n      HM: 'Heard Island and McDonald Islands',\n      VA: 'Holy See (Vatican City State',\n      HN: 'Honduras',\n      HK: 'Hong Kong',\n      HU: 'Hungary',\n      IS: 'Iceland',\n      IN: 'India',\n      ID: 'Indonesia',\n      IR: 'Iran, Islamic Republic of',\n      IQ: 'Iraq',\n      IE: 'Ireland',\n      IM: 'Isle of Man',\n      IL: 'Israel',\n      IT: 'Italy',\n      JM: 'Jamaica',\n      JP: 'Japan',\n      JE: 'Jersey',\n      JO: 'Jordan',\n      KZ: 'Kazakhstan',\n      KE: 'Kenya',\n      KI: 'Kiribati',\n      KP: 'Korea, Democratic People\\'s Republic of',\n      KR: 'Korea, Republic of',\n      KW: 'Kuwait',\n      KG: 'Kyrgyzstan',\n      LA: 'Lao People\\'s Democratic Republic',\n      LV: 'Latvia',\n      LB: 'Lebanon',\n      LS: 'Lesotho',\n      LR: 'Liberia',\n      LY: 'Libya',\n      LI: 'Liechtenstein',\n      LT: 'Lithuania',\n      LU: 'Luxembourg',\n      MO: 'Macao',\n      MK: 'Macedonia, the former Yugoslav Republic of',\n      MG: 'Madagascar',\n      MW: 'Malawi',\n      MY: 'Malaysia',\n      MV: 'Maldives',\n      ML: 'Mali',\n      MT: 'Malta',\n      MH: 'Marshall Islands',\n      MQ: 'Martinique',\n      MR: 'Mauritania',\n      MU: 'Mauritius',\n      YT: 'Mayotte',\n      MX: 'Mexico',\n      FM: 'Micronesia, Federated States of',\n      MD: 'Moldova, Republic of',\n      MC: 'Monaco',\n      MN: 'Mongolia',\n      ME: 'Montenegro',\n      MS: 'Montserrat',\n      MA: 'Morocco',\n      MZ: 'Mozambique',\n      MM: 'Myanmar',\n      NA: 'Namibia',\n      NR: 'Nauru',\n      NP: 'Nepal',\n      NL: 'Netherlands',\n      NC: 'New Caledonia',\n      NZ: 'New Zealand',\n      NI: 'Nicaragua',\n      NE: 'Niger',\n      NG: 'Nigeria',\n      NU: 'Niue',\n      NF: 'Norfolk Island',\n      MP: 'Northern Mariana Islands',\n      NO: 'Norway',\n      OM: 'Oman',\n      PK: 'Pakistan',\n      PW: 'Palau',\n      PS: 'Palestinian Territory, Occupied',\n      PA: 'Panama',\n      PG: 'Papua New Guinea',\n      PY: 'Paraguay',\n      PE: 'Peru',\n      PH: 'Philippines',\n      PN: 'Pitcairn',\n      PL: 'Poland',\n      PT: 'Portugal',\n      PR: 'Puerto Rico',\n      QA: 'Qatar',\n      RE: 'Réunion',\n      RO: 'Romania',\n      RU: 'Russian Federation',\n      RW: 'Rwanda',\n      BL: 'Saint Barthélemy',\n      SH: 'Saint Helena, Ascension and Tristan da Cunha',\n      KN: 'Saint Kitts and Nevis',\n      LC: 'Saint Lucia',\n      MF: 'Saint Martin (French part',\n      PM: 'Saint Pierre and Miquelon',\n      VC: 'Saint Vincent and the Grenadines',\n      WS: 'Samoa',\n      SM: 'San Marino',\n      ST: 'Sao Tome and Principe',\n      SA: 'Saudi Arabia',\n      SN: 'Senegal',\n      RS: 'Serbia',\n      SC: 'Seychelles',\n      SL: 'Sierra Leone',\n      SG: 'Singapore',\n      SX: 'Sint Maarten (Dutch part',\n      SK: 'Slovakia',\n      SI: 'Slovenia',\n      SB: 'Solomon Islands',\n      SO: 'Somalia',\n      ZA: 'South Africa',\n      GS: 'South Georgia and the South Sandwich Islands',\n      SS: 'South Sudan',\n      ES: 'Spain',\n      LK: 'Sri Lanka',\n      SD: 'Sudan',\n      SR: 'Suriname',\n      SJ: 'Svalbard and Jan Mayen',\n      SZ: 'Swaziland',\n      SE: 'Sweden',\n      CH: 'Switzerland',\n      SY: 'Syrian Arab Republic',\n      TW: 'Taiwan, Province of China',\n      TJ: 'Tajikistan',\n      TZ: 'Tanzania, United Republic of',\n      TH: 'Thailand',\n      TL: 'Timor-Leste',\n      TG: 'Togo',\n      TK: 'Tokelau',\n      TO: 'Tonga',\n      TT: 'Trinidad and Tobago',\n      TN: 'Tunisia',\n      TR: 'Turkey',\n      TM: 'Turkmenistan',\n      TC: 'Turks and Caicos Islands',\n      TV: 'Tuvalu',\n      UG: 'Uganda',\n      UA: 'Ukraine',\n      AE: 'United Arab Emirates',\n      GB: 'United Kingdom',\n      US: 'United States',\n      UM: 'United States Minor Outlying Islands',\n      UY: 'Uruguay',\n      UZ: 'Uzbekistan',\n      VU: 'Vanuatu',\n      VE: 'Venezuela, Bolivarian Republic of',\n      VN: 'Viet Nam',\n      VG: 'Virgin Islands, British',\n      VI: 'Virgin Islands, U.S',\n      WF: 'Wallis and Futuna',\n      EH: 'Western Sahara',\n      YE: 'Yemen',\n      ZM: 'Zambia',\n      ZW: 'Zimbabwe',      \n    };\n    return `<p-select-wrapper filter=\"true\" label=\"Some label\">\n<select name=\"some-name\">\n  ${Object.entries(options).map(([value, label]) => `<option value=\"${value}\"${value === 'AQ' ? ' disabled' : ''}>${label}</option>`).join('\\n    ')}\n</select>\n</p-select-wrapper>`;\n  }\n  \n  withOptgroups =\n`<p-select-wrapper label=\"Some label\">\n  <select name=\"some-name\">\n    <optgroup label=\"Some optgroup label 1\">\n      ${buildOptions(['a','b','c','d','e','f']).join('\\n      ')}\n    </optgroup>\n    <optgroup label=\"Some optgroup label 2\">\n      ${buildOptions(['g','h','i']).join('\\n      ')}\n    </optgroup>\n  </select>\n</p-select-wrapper>`;\n\n  get direction() {\n    return `<p-select-wrapper label=\"Some label\" dropdown-direction=\"${this.dropdownDirection}\">\n  <select name=\"some-name\">\n    ${buildOptions(['a','b','c','d','e','f']).join('\\n    ')}\n  </select>\n</p-select-wrapper>`;\n}\n    \n  withDescriptionText =\n`<p-select-wrapper label=\"Some label\" description=\"Some description\">\n  <select name=\"some-name\">\n    ${buildOptions(['a','b','c']).join('\\n    ')}\n  </select>\n</p-select-wrapper>`;\n\n  required =\n`<p-select-wrapper label=\"Some label\">\n  <select name=\"some-name\" required>\n    ${buildOptions(['a','b','c']).join('\\n    ')}\n  </select>\n</p-select-wrapper>`;\n\n  disabled =\n`<p-select-wrapper label=\"Some label\">\n  <select name=\"some-name\" disabled>\n    ${buildOptions(['a','b','c']).join('\\n    ')}\n  </select>\n</p-select-wrapper>`;\n\n  get validationStates() {\n    const attr = `message=\"${this.state !== 'none' ? `Some ${this.state} validation message.` : ''}\"`;\n    return `<p-select-wrapper label=\"Some label\" state=\"${this.state}\" ${attr}>\n  <select name=\"some-name\" aria-invalid=\"${this.state === 'error'}\">\n    ${buildOptions(['a','b','c']).join('\\n    ')}\n  </select>\n</p-select-wrapper>`\n    }\n\n  slots =\n`<p-select-wrapper state=\"error\">\n  <span slot=\"label\" id=\"some-label-id\">Some label with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n  <span slot=\"description\" id=\"some-description-id\">Some description with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n  <select name=\"some-name\" aria-labelledby=\"some-label-id\" aria-describedby=\"some-description-id some-message-id\">\n    ${buildOptions(['a','b','c']).join('\\n    ')}\n  </select>\n  <span slot=\"message\" id=\"some-message-id\">Some error message with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n</p-select-wrapper>`;\n}\n</script>\n",
      "Usage": "# Select\n\n## When to use\n  • Use a Select to trigger an action based on the selected option.  \n  • Use a Select to choose and search one option from a list of items.  \n  • Use a Select to navigate the user to a new position.  \n  • Use a Select to recommending a default option for most users.\n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Select as follows\n\n| Type | Usage |\n|----|----|\n| Without label (Pure) | The component without label is only used if the context clearly describes what the component is to be used for and no further explanation is required. |\n| Description text | Sometimes it’s helpful for the user to get further information on the input. This can be done by providing a description text displayed openly and directly outside the form field. |\n| With custom filter | For a large amount of select options (e.g. country/state select), we offer the custom filter to select easily and fast the desired of the available options. |\n\n| Variant |  |\n|----|----|\n| Without preselection (mandatory field) | Use this, if you don't know or if you need to make sure the user makes a conscious choice. |\n| With preselection (mandatory field) | Use this, if you have a reason to believe one of the options is most likely (this can be based on most popular / probable option, or on data you know about the user) or you know the default or current option. |\n| Without preselection (optional field) | Use this, to make it possible to go back to empty default (e.g. in case of an incorrect selection). |\n\n\n\n## Behavior\n\n### Label\nThe label text (always in copytext) gives the user an information about the option that can be selected. Try to keep the label short and descriptive (one word or two).\n\n### Validation and error\nValidation text for a Select is placed right below the field box. This places the error next to the offending select,\nso there is no confusion for the user as to what field failed validation. Effective error messaging can help the user to understand the problem and how to fix it. Please find more information in the [Form pattern guideline](patterns/forms).\n\n### Knowledge\nDo the users know their input without having to look at a list of the different options? If the answer is 'no' it might be better to use a component showing the options directly (such as Radio Buttons).\n\n### Number of options\nGenerally, a limit of 5-10 options is recommended. [Baymard Institute](https://baymard.com/blog/drop-down-usability) However, it depends on the individual context. If several options are offered it makes sense to offer an autocomplete.\n\n### Sorting\nIt's recommended to use common sort order for menu items (frequency of use, alpha or numeric).\n\n\n<div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n   <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n   <img src=\"./assets/select-examples.png\" alt=\"Examples for select usage\" />\n</div>\n\n## Do's & Don'ts\n\n### Content\nAvoid Select boxes for data that is highly familiar such as the day, month or year. Having to find these options in a long menu is tedious, breaks the previous guideline and can create even more work for users.\n\n![Example for alignment](./assets/select-dont-content.png)\n\n### Number of options in view\nVery long Select boxes that require scrolling make it impossible for users to see all their choices in one glance. However this cannot always be avoided. Therefore make sure that when open there is only a maximum of 7 elements in the field of view without having to scroll.\n\n![Example for alignment](./assets/select-dont-items.png)\n\n### Don’t default to ‘please select’\nUsers don’t need to be told to ‘please select’ if there’s a field that’s empty. Only use defaults when applicable to most users (see variants).\n\n---\n\n## Related Components\n\n* [Checkbox](components/checkbox)\n* [Radio Button](components/radio-button)\n",
      "Props": "# Select\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type HideLabel = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property            | Attribute            | Description                                                                       | Type                                                                                                                               | Default   |\n| ------------------- | -------------------- | --------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- | --------- |\n| `description`       | `description`        | The description text.                                                             | `string`                                                                                                                           | `''`      |\n| `dropdownDirection` | `dropdown-direction` | Changes the direction to which the dropdown list appears.                         | `'auto'` <br>` 'down'` <br>` 'up'`                                                                                                         | `'auto'`  |\n| `filter`            | `filter`             | Filters select options by typing a character                                      | `boolean`                                                                                                                          | `false`   |\n| `hideLabel`         | `hide-label`         | Show or hide label. For better accessibility it is recommended to show the label. | `boolean` <br>` BreakpointCustomizable<HideLabel>` | `false`   |\n| `label`             | `label`              | The label text.                                                                   | `string`                                                                                                                           | `''`      |\n| `message`           | `message`            | The message styled depending on validation state.                                 | `string`                                                                                                                           | `''`      |\n| `native`            | `native`             | Forces rendering of native browser select dropdown                                | `boolean`                                                                                                                          | `false`   |\n| `state`             | `state`              | The validation state.                                                             | `'error'` <br>` 'none'` <br>` 'success'`                                                                                                   | `'none'`  |\n| `theme`             | `theme`              | Adapts the select color depending on the theme.                                   | `'dark'` <br>` 'light'`                                                                                                                | `'light'` |\n"
    },
    "Spacing": {
      "Examples": "# Spacing\n\n## Spacing system\nThe Porsche Design System spacing values are based on an eighth system:  \n`4 | 8 | 16 | 24 | 32 | 40 | 48 | 56 | 64 | 72 | 80`\n\nFor every unit there is an equivalent `SCSS` variable which has to be additionally installed with the `SCSS utility package` provided in an extra repository.\n**[Read installation instructions for the Porsche Design System SCSS utils package](utilities/introduction)**\n\n\n### Overview of available spacings\n\n| SCSS variable \t| PX     \t| REM \t|  VISUALIZATION     \t                    | LAYOUT SPACING |\n|-------------------|-----------|-------|-------------------------------------------| ---- |\n| `$p-spacing-4`  \t| 4 px  \t| 0.25 \t| ![spacing 4](./assets/spacing-4.png)      |   x-small |   \n| `$p-spacing-8`  \t| 8 px  \t| 0.5  \t| ![spacing 8](./assets/spacing-8.png)      |   small | \n| `$p-spacing-16` \t| 16 px \t| 1    \t| ![spacing 16](./assets/spacing-16.png)    |    medium |\n| `$p-spacing-24` \t| 24 px \t| 1.5  \t| ![spacing 24](./assets/spacing-24.png)    |   - | \n| `$p-spacing-32` \t| 32 px \t| 2    \t| ![spacing 32](./assets/spacing-32.png)    |   large | \n| `$p-spacing-40` \t| 40 px \t| 2.5  \t| ![spacing 40](./assets/spacing-40.png)    |   - | \n| `$p-spacing-48` \t| 48 px \t| 3    \t| ![spacing 48](./assets/spacing-48.png)    |   x-large | \n| `$p-spacing-56` \t| 56 px \t| 3.5  \t| ![spacing 56](./assets/spacing-56.png)    |   - | \n| `$p-spacing-64` \t| 64 px \t| 4    \t| ![spacing 64](./assets/spacing-64.png)    |   - | \n| `$p-spacing-72` \t| 72 px \t| 4.5  \t| ![spacing 72](./assets/spacing-72.png)    |  - |  \n| `$p-spacing-80` \t| 80 px \t| 5    \t| ![spacing 80](./assets/spacing-80.png)    |   xx-large |\n\n\n\n\n## Layout spacings\n\nTo be more consistent, there is a reduced set of spacings which should be used as main layout spacings (e.g. for vertical spacings between elements).  \n\n### Overview of reduced layout spacings\n\n| SCSS variable                | PX        | REM   | VISUALIZATION                            |\n|------------------------------|-----------|-------|------------------------------------------|\n| `$p-layout-x-small`          | 4 px      | 0.25  | ![spacing xs](./assets/spacing-4.png)    |     \n| `$p-layout-small`            | 8 px      | 0.5   | ![spacing s](./assets/spacing-8.png)     |    \n| `$p-layout-medium`           | 16 px     | 1     | ![spacing m](./assets/spacing-16.png)    |    \n| `$p-layout-large`            | 32 px     | 2     | ![spacing l](./assets/spacing-32.png)    |    \n| `$p-layout-x-large`          | 48 px     | 3     | ![spacing xl](./assets/spacing-48.png)   |    \n| `$p-layout-xx-large`         | 80 px     | 5     | ![spacing xxl](./assets/spacing-80.png)  |    ",
      "Usage": "# Spacing\nWe use predefined spacings to position components vertically and horizontally within a layout. Reusing defined spacings provides a consistent user experience across all pages and makes development easier. For fluid layouts the spacings should be used in combination with the [Responsive Grid](components/grid).\n\n### 8px spacing system - the Porsche formula\n\nThe Porsche spacing system is based on multiples of eight. The unit of 8px refers to the general base size of 16px (= 1em), that is also applied in the typography and other component sizes.\n\n![The Porsche spacing formula](./assets/spacings-formula.png)\n\n## Spacing system and layout spacings\n\nFor layouting we recommend to use the layout spacings that are available for developers as variables from x-small to xx-large.\nAdditional increments of the spacing system can be used for specific requirements as long as it is based on the 8px spacing system.\n\n\n![The Porsche spacing formula](./assets/spacings-example-02.png)\nExample: Mixed use of the spacing system with layout and custom spacings.\n\n## Working with space\n\nSpacing is a powerful design element, an integral part of every layout, which can create relationships, hierarchy, and rhythm between components.\n\n### Relationships\n\nThe space between components can determine if the elements\nseem to have a meaningful connection. Closely placed elements relate to each\nother. If more space is added between components, the relationship weakens. Using a consistent spacing pattern across elements can also create a quickly\nintelligible relationship.\n\n### Hierarchy\n\nLeaving different spaces between elements or sections of\ninformation will influence the reader to perceive them as having a different\nrelevance. Elements that have more space around them tend to be perceived as being\nfurther up in the hierarchy. Creating hierarchy on the page guides viewers' eyes and helps\nseparate and organise elements in the design and guide users' attention to\ncertain elements.\n\n### White space (also: negative space)\n\nThe empty space (also referred to as negative space) in a\ndesign. Although called white space, the blank space can be filled with any color\nas long as it’s free of elements like text, graphics or images, creating a\nwell-spaced and clear product. White space helps deliver a good experience by\ngiving elements space to breathe and letting the reader’s eye relax.\n\n## Usage in Sketch\n\n### Define the grid\nThe Porsche Design System works with 8px\nincrements, but it allows 4px values in a few cases, where greater flexibility is\nneeded. We recommend setting up the workspace with a 4px grid system. You can\nchange the Sketch grid settings via: View → Canvas → Grid Settings → Grid Block\nSize: 4px. Or, when setting up a totally new UI design file, feel free to use\nthe [Porsche Design System layout template](https://designsystem.porsche.com/sketch/porsche-design-system-layout-template.sketch) with predefined settings.\n\n### Snap to grid\nMost design apps have the option to snap elements to the grid.\nUsing this feature will help position elements faster in the layout.\n\n### Nudging\nTo make the UI design workflow as smooth as possible, it is helpful to adjust\nthe nudging (= increments an element moves when using keyboard arrows) to the\ngrid steps in use. We recommend the following settings, reachable via Sketch\nsettings → Canvas:\n\n- Move objects **1px** using Arrow keys. \n- Move objects **8px** using Shift-Arrow keys.\n\n## Design tools vs. web browser\n\n### Translating Sketch spacings into variables \n\nWhen it comes to design-to-dev-handover, we should always keep in mind that the handling of\nspacings is different: Whereas the designer sets the spacings manually in Sketch\nlayouts, the developer implements them by using pre-defined spacing variables\n(e.g. spacing-8 or spacing-16) or the layout variables (e.g. layout-small or layout-medium). Therefore, we should always make sure that the\nspacings in sketch are set as correctly as possible and that they the developer\ncan easily read them in Abstract's inspect mode - of course, a personal\nconversation between designer and developer is always the best way to get\noptimal results.\n\n![Abstract inspect view of spacing](./assets/spacings-inspect.png)\n\n### Borders\nWhile in Sketch the border isn't added to the shape size, browsers\nconsider borders as solid space around elements by default. We recommend to\nignore this fact while designing and to always set the focus on giving the developer\nthe right spacing sizes between or inside elements, even if this results in\nslightly higher elements in implementation due to the additional border.\n\n### Lines\nLines can be created using either a narrow rectangle or a path\nwith a stroke. For better readability of the space between elements, we\nrecommend using paths with a stroke.\n\n### Text boxes\nDevelopers measure the spacing of typography from the bounding box\nof the text element. When working with typography, the bounding box should be\nplaced within the grid parameters, even if the baseline of the typography is not\non the grid line. It's best to always create texts using the text tool, not as a\nbox!\n\n![Text box placement](./assets/spacings-bounding-box.png)\n\n### How to handle uneven image heights\nIt is no rocket science setting the correct 8px spacing values when the element\nheights correspond to the 4px grid themselves. But there is an exception, where\nelement heights don’t fit in perfectly: Images. They can be displayed in many\ndifferent aspect ratios (such as 16:9 or 4:3) and follow various rules for\nhandling responsiveness (like cropping or resizing). Depending on their width\nand the screen size, their height will most likely not fit in the 4px grid. To\nfollow a consistent rule, we recommend to always place the upper part (X/Y\nvalue) on the grid system, even if the bottom part doesn’t fit. The following\nelement underneath should then be placed on the grid line again. As for the\nimplementation of the spacing, the developer should use the spacing variable\nwith the value closest to it. For example, the following design case might lead\nto an implemented spacing value of 16 px, as this the spacing variable the most\nclose to 18 px.\n\n![Image placement](./assets/spacing-images.png)"
    },
    "Spinner": {
      "Examples": "# Spinner\n\nThere are unavoidable moments when the user has to wait for more than 1 second (for example due to technical processing of information or requests).\nThese moments should be bridged with a good user feedback in order to not leave the user uncertain about what's currently happening - also to avoid a high bounce rate and to obtain a positive impression of your website or application.\n\nFor ongoing operations between 2-10 seconds, where the loading progress cannot be determined, use a **Spinner** (looped indicator) to inform the user about an ongoing operation. Use it either stand-alone (for example as page loader) or within components, such as in Buttons to indicate progress after clicking \"save\".\n\n## Size\n\nThere are predefined sizes for the component available which should cover most use cases. \nIf a specific size is needed, the size can be set to `inherit` to specify the text size from outside.\n\n<Playground :markup=\"sizeMarkup\" :config=\"config\">\n  <select v-model=\"size\">\n    <option disabled>Select a size</option>\n    <option>small</option>\n    <option>medium</option>\n    <option>large</option>\n    <option>inherit</option>\n  </select>\n</Playground>\n\n### Responsive\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l`, `xl`.\n\n<Playground :markup=\"responsive\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nTo announce the correct loading state for **screen reader** users, it is mandatory to provide a meaningful state description through **ARIA** with the `aria` property.\n\n---\n\n## Technical notes\n\nFor automated visual regression tests the spinner animation can be disabled by setting a global css variable: \n\n```\n:root {\n  --p-animation-duration__spinner: 0s !important;\n}\n```\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n    \n    size = 'small';\n    \n    get sizeMarkup() {\n      const style = this.size === 'inherit' ? ' style=\"width: 96px; height: 96px;\"' : '';\n      return `<p-spinner size=\"${this.size}\"${style} aria=\"{ 'aria-label': 'Loading page content' }\" />`;\n    }\n    \n    responsive =\n`<p-spinner size=\"{ base: 'small', l: 'medium' }\" aria=\"{ 'aria-label': 'Loading page content' }\" />`;\n\n  }\n</script>\n",
      "Usage": "# Spinner\n\n## When to use\n  • Use a Spinner when the user has to wait for more than 1 second.   \n  • Use a Spinner either stand-alone or within components (e.g. in Buttons to indicate progress after clicking \"save\").\n\n---\n\n## Behavior\n\n### Screen blocking\nUsing a spinner for only parts of a screen or within dedicated components usually means that the user is able to cancel the operation, for example by clicking somewhere else. If the user is not supposed to start another activity, you should block the whole screen. This can be done using a full size block overlay for the whole screen and placing the loader on top.\n\n* Light Theme: Blocking layer in Porsche Light, 90% opacity\n* Dark Theme: Blocking layer in Porsche Dark, 90% opacity\n\n\n## Usage\n\n### Spinner position\nWhenever used as an independent item within a page or module, the spinner should always be placed vertically and horizontally centered within the referring area. Within a dedicated component, the placement of the spinner is determined by the respective element it replaces or accompanies.\n\n### Component blocking\nIf a spinner is triggered by an interaction within a component, it is recommended to disable the component while the spinner is visible.\n\n### With text label\n\nIncluding text can be helpful to improve clarity. Keep it simple by only explaining\n**why** the user is waiting. Avoid using texts such as \"Don't click again\" to prevent\nthe user from clicking twice on a shopping button in order to not create an extra order.\nA loading animation should always be a user-friendly helper, not a threat.\n\n* For small sizes, you should use copytext.\n* For larger Spinner sizes, you can use any additional size, depending on your needs and the available space.\n* Text must always be placed beneath or on the right side of the loader.\n\n\n<div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n    <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n    <img src=\"./assets/spinner-blocking.png\" alt=\"\"/>\n</div>\n\n---\n\n## Do's & Don'ts\n\n### Spinner overload\nUsing too much spinners at the same time time or using too much of them within a page or application in general can also create user frustration. This should be avoided by carefully considering where a loader makes sense and which loader type is the best.\n\n### Delays of more than 10 seconds\nA spinner offers feedback about a loading state, but not on how long it will take for the loading to be finished. Fostering the user to stare at a spinning wheel for more than 10 seconds will most likely make the users get impatient, wandering around on your website, abandon their current task, or, worst case, close your application. So if the result takes more than 10 seconds to appear, you should better provide a progress bar showing the estimated waiting time.",
      "Props": "# Spinner\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type Size = 'small' | 'medium' | 'large' | 'inherit'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property | Attribute | Description                                      | Type                                                                                                                                                                                                                                                                                                                                                                                | Default     |\n| -------- | --------- | ------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| `aria`   | `aria`    | Add ARIA attributes.                             | `{ 'aria-label'?: string; }`                                                                                                                                                                                                                                                                                                                                              | `undefined` |\n| `size`   | `size`    | Size of the spinner.                             | `'small'` <br>` 'medium'` <br>` 'large'` <br>` 'inherit'` <br>` BreakpointCustomizable<Size>` | `'small'`   |\n| `theme`  | `theme`   | Adapts the spinner color depending on the theme. | `'dark'` <br>` 'light'`                                                                                                                                                                                                                                                                                                                                                                 | `'light'`   |\n"
    },
    "Switch": {
      "Examples": "# Switch\n\nThe `p-switch` component is a control that is used to quickly switch between two possible states. \nA switch is only used for these binary actions that occur immediately after the user “flips the switch”. \nCommonly it is used for “on/off” state.\n\nIt is a controlled component.\nThis means it does not contain any internal state, and you got full control over its behavior.\n\n## Basic example\n\nThe `p-switch` component can be used with a visible or hidden label, but it's recommended to keep the label visible for better accessibility whenever possible.\nA `label` is a caption which informs the user which action is followed by interaction.\nWhen used with hidden label, it's best practice to provide a descriptive label text for screen readers.\n\n<Playground :markup=\"basic\" :config=\"config\">\n  <select v-model=\"label\">\n    <option value=\"show\">With label</option>\n    <option value=\"hide\">Without label</option>\n    <option value=\"responsive\">Responsive</option>\n  </select>\n</Playground>\n\n### Framework Implementations\n\n<Playground :frameworkMarkup=\"frameworks\"></Playground>\n\n---\n\n## Disabled\n\n<Playground :markup=\"disabled\" :config=\"config\"></Playground>\n\n---\n\n## Loading\n\n<Playground :markup=\"loading\" :config=\"config\"></Playground>\n\n---\n\n## Alignment + Stretch\n\nThe `label` can be aligned to the `right` (default) or to the `left` in addition with enabled `stretch` property which is recommended on mobile views.\n\n<Playground :markup=\"alignment\" :config=\"config\">\n  <select v-model=\"alignLabel\">\n    <option value=\"right\">Right</option>\n    <option value=\"left\">Left</option>\n    <option value=\"responsive\">Responsive</option>\n  </select>\n</Playground>\n\n---\n\n## Bind events\nYou can use native `click`, `focus`, `focusin`, `blur` and `focusout` events on the **Switch**.\n\n<Playground :markup=\"events\" :config=\"config\"></Playground>\n\n---\n\n## Remove from tab order\nWith setting the `tabbable` property to `false` you can remove the **Switch** from the tab order.\nFor technical restrictions it's currently not possible to set an individual `tabindex` attribute.\n\n<Playground :markup=\"taborder\" :config=\"config\"></Playground>\n\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\n\n@Component\nexport default class Code extends Vue {\n  config = { themeable: true, spacing: 'block' };\n\n  frameworks = {\n    'vanilla-js': `switchElement.addEventListener('switchChange', (e) => {\n  e.target.checked = e.detail.checked;\n});`,\n    angular: `import { Component } from '@angular/core';\nimport type { SwitchChangeEvent } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'some-switch-page',\n  template: \\`<p-switch [checked]=\"checked\" (switchChange)=\"onSwitchChange($event)\">Some label</p-switch>\\`,\n})\nexport class SomeSwitchPage {\n  checked: boolean;\n\n  onSwitchChange(e: CustomEvent<SwitchChangeEvent>) {\n    this.checked = e.detail.checked;\n  }\n}`,\n    react: `import { useCallback, useState } from 'react';\nimport { PSwitch } from '@porsche-design-system/components-react';\nimport type { SwitchChangeEvent } from '@porsche-design-system/components-react';\n\nconst SomeSwitchPage = (): JSX.Element => {\n  const [checked, setChecked] = useState<boolean>();\n  const onSwitchChange = useCallback((e: CustomEvent<SwitchChangeEvent>) => {\n    setChecked(e.detail.checked);\n  }, []);\n\n  return <PSwitch checked={checked} onSwitchChange={onSwitchChange}>Some label</PSwitch>\n}`,\n  };\n\n  label = 'show';\n  alignLabel = 'right';\n\n  get basic() {\n    const hideLabel = this.label === 'hide' ? ' hide-label=\"true\"' : this.label === 'responsive' ? ' hide-label=\"{ base: true, l: false }\"' : '';\n    return `<p-switch${hideLabel}>Some label</p-switch>\n<p-switch${hideLabel} checked=\"true\">Some label</p-switch>`;\n  };\n\n  get alignment() {\n    const alignLabel = this.alignLabel === 'left' ? ' align-label=\"left\"' : this.alignLabel === 'responsive' ? ' align-label=\"{ base: \\'left\\', l: \\'right\\' }\"  stretch=\"{ base: true, l: false }\"' : '';\n    return `<p-switch${alignLabel}>Some label</p-switch>\n<p-switch${alignLabel} checked=\"true\">Some label</p-switch>`;\n  };\n\n  disabled = `<p-switch disabled=\"true\">Some label</p-switch>\n<p-switch disabled=\"true\" checked=\"true\">Some label</p-switch>`;\n\n  loading = `<p-switch loading=\"true\">Some label</p-switch>\n<p-switch loading=\"true\" checked=\"true\">Some label</p-switch>`;\n\n  events = `<p-switch\n  onclick=\"alert('click')\"\n  onfocus=\"console.log('focus')\"\n  onfocusin=\"console.log('focusin')\"\n  onblur=\"console.log('blur')\"\n  onfocusout=\"console.log('focusout')\"\n>Some label</p-switch>`;\n\n  taborder = `<p-switch tabbable=\"false\">Some label</p-switch>\n<p-switch tabbable=\"true\">Some label</p-switch>`;\n\n  mounted() {\n    /* initially update switch with checked attribute in playground */\n    this.registerEvents();\n\n    /* theme switch needs to register event listeners again */\n    const themeTabs = this.$el.querySelectorAll('.playground > p-tabs-bar');\n    themeTabs.forEach(tab => tab.addEventListener('tabChange', () => {\n      this.registerEvents();\n    }));\n  }\n\n  updated(){\n    this.registerEvents();\n  }\n\n  registerEvents() {\n    const switches = this.$el.querySelectorAll('.playground .demo p-switch');\n    switches.forEach(switchEl => switchEl.addEventListener('switchChange', (e) => (e.target.checked = e.detail.checked)));\n  }\n}\n</script>\n",
      "Usage": "# Switch\n\n## When to use\n\n• If an instant response of applied settings is required without an explicit action.  \n• To enable or disable a mode, feature, or function. If a setting requires a button press before it can take effect, you should use a [Checkbox](components/checkbox) instead.  \n• When user is toggling independent features or behaviors.\n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Switch as follows\n\n| Type | Usage |\n|----|----|\n| Right aligned (default) | If the switch is used stand-alone, we recommend to use the switch aligned to the left (Switch vs. Label). |\n| Left aligned | If the switch is used within a list (e.g. settings) we recommend to place the switch on the right side (Label vs. Switch). Especially for handling on mobile devices.|\n\n\n\n## Behavior\n\n### Label\n\nRemember that Switches are meant to be two mutually exclusive states. The Switch is accompanied by a straightforward and concise label (always in copytext) to make the component accessible. That microcopy is very important, as users should be able to see and understand the function behind the Switch. It’s better to avoid anything longer than two words, as you want that first glance to be all that’s needed to use the Switch.\n\n### Stretching\n\nDepending on the use case (e.g. list on mobile), the spacing between the switch and the label can be stretched to the size of the container. \n\n### Action\n\nSwitches should never require users to press a button to apply the settings because a switch is a toggle button. When you require users to press a submit button, you confuse them because it’s not what they expect. You should only use switches on changes that need to take effect instantaneously. \n\n### Validation\n\nWe recommend to use only one validation for errors. Success is already provided by the active switch and does not require any further validation. Use a validation only when necessary. E.g. to show error message or direct feedback of this control. Do not distract users with unimportant information. For page level feedback, use the [Banner](components/banner) notification.\n\n\n### Helper text\n\nProvide help only when help is truly required! For example, if it is important for the user to know what consequences their activation of the Switch will cause.\n\n\n### Switch\n\nThe switch should change the state only when the server response is positive. For longer delay use the loading state.\n\n\n---\n\n## Do's & Don'ts\n\n### Multiple choice\n\nDon’t use the slide Switch for multiple choice questions\n\n![Multiple choice questions](./assets/switch-multiple_choice.png)\n\n### Intermediate state\n\nDon’t use slide Switch when an intermediate state is required. [Use Checkbox instead!](components/checkbox)\n\n![Intermediate state](./assets/switch-intermediate-state.png)\n\n### Label\n\nDon’t use only the label to describe the states of the Switch. A label next to the Switch must describe the affected property.\n\n![Switch Label](./assets/switch-label.png)\n\n### Alignment\n\nPreferably set Switches vertically left-aligned, as this supports scannability way better than a horizontal alignment.\n\n\n## Related Components\n\n- [Checkbox](components/checkbox)\n- [Button](components/button)",
      "Props": "# Switch\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type AlignLabel = AlignLabelType`  \n`type HideLabel = boolean`  \n`type Stretch = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property     | Attribute     | Description                                                                                                   | Type                                                                                                                                                                     | Default   |\n| ------------ | ------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------- |\n| `alignLabel` | `align-label` | Aligns the label.                                                                                             | `AlignLabelType` <br>` BreakpointCustomizable<AlignLabel>` | `'right'` |\n| `checked`    | `checked`     | Visualize the switch with on/off status.                                                                      | `boolean`                                                                                                                                                                | `false`   |\n| `disabled`   | `disabled`    | Disables the switch. No events will be triggered while disabled state is active.                              | `boolean`                                                                                                                                                                | `false`   |\n| `hideLabel`  | `hide-label`  | Show or hide label. For better accessibility it's recommended to show the label.                              | `boolean` <br>` BreakpointCustomizable<HideLabel>`                                       | `false`   |\n| `loading`    | `loading`     | Disables the switch and shows a loading indicator. No events will be triggered while loading state is active. | `boolean`                                                                                                                                                                | `false`   |\n| `stretch`    | `stretch`     | Stretches the contents to max available space.                                                                | `boolean` <br>` BreakpointCustomizable<Stretch>`                                       | `false`   |\n| `tabbable`   | `tabbable`    | To remove the element from tab order.                                                                         | `boolean`                                                                                                                                                                | `true`    |\n| `theme`      | `theme`       | Adapts the switch color depending on the theme.                                                               | `'dark'` <br>` 'light'`                                                                                                                                                      | `'light'` |\n\n\n## Events\n\n| Event          | Description                             | Type                                 |\n| -------------- | --------------------------------------- | ------------------------------------ |\n| `switchChange` | Emitted when checked status is changed. | `CustomEvent<{ checked: boolean; }>` |\n"
    },
    "Table": {
      "Examples": "# Table\n\nThe `p-table` component displays tabular data and offers column-wise sorting options.  \nIt combines a consistent appearance together with great accessibility while not having restrictions regarding its content.\nTherefore, it can be used for plain text but also rich content like images, form elements and buttons.\n\nIt is a controlled component. This means it does not contain any internal state, and you got full control over its behavior.\n\n## Basic Table\n\n<Playground :frameworkMarkup=\"basic\">\n  <p-table caption=\"Some caption\" ref=\"tableBasic\">\n    <p-table-head>\n      <p-table-head-row>\n        <p-table-head-cell v-for=\"(item, index) in headBasic\" :key=\"index\">{{ item }}</p-table-head-cell>\n      </p-table-head-row>\n    </p-table-head>\n    <p-table-body>\n      <p-table-row v-for=\"(item, index) in dataBasic\" :key=\"index\">\n        <p-table-cell>{{ item.model }}</p-table-cell>\n        <p-table-cell>{{ item.date }}</p-table-cell>\n        <p-table-cell>{{ item.interest }}</p-table-cell>\n        <p-table-cell>{{ item.status }}</p-table-cell>\n        <p-table-cell>{{ item.leadId }}</p-table-cell>\n      </p-table-row>\n    </p-table-body>\n  </p-table>\n</Playground>\n\n---\n\n## Caption\n\nA caption that describes the content of the table can be set in two ways. \nIt's mandatory to define a descriptive caption to fulfill accessibility criteria.\n\n### Via property\n\nUsing the `caption` property doesn't display the caption but instead can be used to improve accessibility of the table.  \n\n<Playground :markup=\"captionProperty\"></Playground>\n\n### Via slot\n\nWhen using the `caption` slot its content will be rendered while offering full control of appearance.  \n\n<Playground :markup=\"captionSlot\"></Playground>\n\n---\n\n## Column Headers\n\nThe `p-table`'s head can be configured by setting one or more of the following properties on each `p-table-head-cell`.\n\n### Sorting\n\nIn order to have a sortable table column you need to provide the `sort` property.  \nIt has the following structure:\n\n```ts\ntype TableHeadCellSort = {\n  id: string; // identifier for the column to be sorted by\n  active: boolean;\n  direction: 'asc' | 'desc';\n};\n```\n\nUpon clicking a sortable `p-table-head-cell` element, the `p-table` emits a `sortingChange` event that you should subscribe to.\n\n<Playground :frameworkMarkup=\"sorting\">\n  <p-table caption=\"Some caption\" ref=\"tableSorting\">\n    <p-table-head>\n      <p-table-head-row>\n        <p-table-head-cell v-for=\"(item, index) in headSorting\" :key=\"index\" ref=\"headCellsSorting\">{{ item.name }}</p-table-head-cell>\n      </p-table-head-row>\n    </p-table-head>\n    <p-table-body>\n      <p-table-row v-for=\"(item, index) in dataSorting\" :key=\"index\">\n        <p-table-cell>{{ item.col1 }}</p-table-cell>\n        <p-table-cell>{{ item.col2 }}</p-table-cell>\n        <p-table-cell>{{ item.col3 }}</p-table-cell>\n      </p-table-row>\n    </p-table-body>\n  </p-table>\n</Playground>\n\n### Hide Label\n\nSometimes you want to hide the label of a table column for example when the column's content is self-explanatory. This can be achieved by setting the `hide-label` property.\n\n<Playground :markup=\"hideLabel\"></Playground>\n\n---\n\n## Advanced Table\n\nThe appearance of a table's contents can be customized as illustrated in the following example. \n\n<Playground :frameworkMarkup=\"advanced\">\n  <p-table ref=\"tableAdvanced\">\n    <p-headline slot=\"caption\" variant=\"headline-3\">Some visual caption</p-headline>\n    <p-table-head>\n      <p-table-head-row>\n        <p-table-head-cell v-for=\"(item, index) in headAdvanced\" :key=\"index\" ref=\"headCellsAdvanced\">{{ item.name }}</p-table-head-cell>\n      </p-table-head-row>\n    </p-table-head>\n    <p-table-body>\n      <p-table-row v-for=\"(item, index) in dataAdvanced\" :key=\"index\">\n        <p-table-cell>\n          <p-flex>\n            <p-flex-item>\n              <img :src=\"item.imageUrl\" width=\"80\" height=\"45\" style=\"margin-right: 0.5rem\" alt=\"\">\n            </p-flex-item>\n            <p-flex-item>\n              <p-text weight=\"semibold\">{{ item.model }}</p-text>\n              <p-text size=\"x-small\">{{ item.date }}</p-text>\n            </p-flex-item>\n          </p-flex>\n        </p-table-cell>\n        <p-table-cell>{{ item.interest }}</p-table-cell>\n        <p-table-cell><a href=\"https://porsche.com\">{{ item.vin }}</a></p-table-cell>\n        <p-table-cell>{{ item.purchaseIntention }}</p-table-cell>\n        <p-table-cell>{{ item.status }}</p-table-cell>\n        <p-table-cell multiline=\"true\" style=\"min-width: 10rem;\">{{ item.comment }}</p-table-cell>\n        <p-table-cell>{{ item.leadId }}</p-table-cell>\n        <p-table-cell>\n          <p-button-pure icon=\"edit\" style=\"padding: .5rem\">Edit</p-button-pure>\n          <p-button-pure icon=\"delete\" style=\"padding: .5rem\">Delete</p-button-pure>\n        </p-table-cell>\n      </p-table-row>\n    </p-table-body>\n  </p-table>\n</Playground>\n\n\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\nimport { dataBasic, headBasic, dataSorting, headSorting, dataAdvanced, headAdvanced, getTableCodeSamples } from '@porsche-design-system/shared';\n\n@Component\nexport default class Code extends Vue {\n  headBasic = headBasic;\n  dataBasic = dataBasic;\n  headSorting = headSorting;\n  dataSorting = dataSorting;\n  headAdvanced = headAdvanced;\n  dataAdvanced = dataAdvanced;\n\n  basic = getTableCodeSamples('example-basic');\n  sorting = getTableCodeSamples('example-sorting');\n  advanced = getTableCodeSamples('example-advanced');\n\n  basicTableHead = `<p-table-head>\n    <p-table-head-row>\n      <p-table-head-cell>Column 1</p-table-head-cell>\n      <p-table-head-cell>Column 2</p-table-head-cell>\n      <p-table-head-cell>Column 3</p-table-head-cell>\n    </p-table-head-row>\n  </p-table-head>`;\n\n  basicTableBodyRow = `<p-table-row>\n      <p-table-cell>Cell 1</p-table-cell>\n      <p-table-cell>Cell 2</p-table-cell>\n      <p-table-cell>Cell 3</p-table-cell>\n    </p-table-row>`;\n\n  basicTableBody = `<p-table-body>\n     ${this.basicTableBodyRow}\n  </p-table-body>`;\n\n  captionProperty = `<p-table caption=\"Some caption\">\n  ${this.basicTableHead}\n  ${this.basicTableBody}\n</p-table>`;\n\n  captionSlot = `<p-table>\n  <p-headline slot=\"caption\" variant=\"headline-3\">Some slotted caption</p-headline>\n  ${this.basicTableHead}\n  ${this.basicTableBody}\n</p-table>`;\n\n  hideLabel = `<p-table caption=\"Some caption\">\n  <p-table-head>\n    <p-table-head-row>\n      <p-table-head-cell>Column 1</p-table-head-cell>\n      <p-table-head-cell>Column 2</p-table-head-cell>\n      <p-table-head-cell hide-label=\"true\">Column 3</p-table-head-cell>\n    </p-table-head-row>\n  </p-table-head>\n  ${this.basicTableBody}\n</p-table>`;\n\n  mounted(): void {\n    this.syncHeadCellProperties();\n    this.registerEvents();\n  }\n\n  registerEvents(): void {\n    this.$refs.tableAdvanced.addEventListener('sortingChange', (e) => {\n      const { id, direction } = e.detail;\n      this.headAdvanced = this.headAdvanced.map((x) => ({ ...x, active: false, ...(x.id === id && e.detail) }));\n      this.dataAdvanced = [...this.dataAdvanced].sort((a, b) => (direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])));\n      this.syncHeadCellProperties();\n    });\n\n    this.$refs.tableSorting.addEventListener('sortingChange', (e) => {\n      const { id, direction } = e.detail;\n      this.headSorting = this.headSorting.map((x) => ({ ...x, active: false, ...(x.id === id && e.detail) }));\n      this.dataSorting = [...this.dataSorting].sort((a, b) => (direction === 'asc' ? a[id].localeCompare(b[id]) : b[id].localeCompare(a[id])));\n      this.syncHeadCellProperties();\n    });\n  }\n\n  syncHeadCellProperties(): void {\n    this.$refs.headCellsAdvanced.forEach((cell, i) => {\n      cell.sort = this.headAdvanced[i];\n      cell.hideLabel = this.headAdvanced[i].hideLabel;\n    });\n\n    this.$refs.headCellsSorting.forEach((cell, i) => {\n      cell.sort = this.headSorting[i];\n    });\n  }\n}\n</script>\n",
      "Usage": "# Table\n\n## When to use\n\n- Use table to display and compare a collection of structured data in rows and columns.\n- Use table as a tool to query, consume, and navigate to specific data.\n- Use table if there are at least two or more columns of data parameters.\n\n---\n\n## Behavior\n\n### Column header\n\nColumn headers should be relevant to the data it represents and succinct. \nBest practice is to use one or two keywords for the column header, whenever possible, and avoid the necessity to wrap the column header text to fit the table layout.\n\n### Cell data\n\nThe table is flexible allowing for the display of rich content to support the specific requirements of the application use cases.\n\n### Sort\n\nIf sorting is enabled columns can be sorted in ascending or descending order. \nThe order direction will be displayed with an according arrow icon.  \n\n### Responsive\n\nThe table stretches to the full available width and becomes horizontally scrollable if necessary.\n\n### Table caption\n\nA caption describing the contents of the table for accessibility only. \nThis won't be visible in the browser. \nUse an element with an attribute of `slot=\"name\"` for a visible caption.\n",
      "Props": "# Table\n\n## Properties\n\n| Property  | Attribute | Description                                                                                                                                                                         | Type     | Default     |\n| --------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ----------- |\n| `caption` | `caption` | A caption describing the contents of the table for accessibility only. This won't be visible in the browser. Use an element with an attribute of slot='name' for a visible caption. | `string` | `undefined` |\n\n\n## Events\n\n| Event           | Description                      | Type                                                                  |\n| --------------- | -------------------------------- | --------------------------------------------------------------------- |\n| `sortingChange` | Emitted when sorting is changed. | `CustomEvent<{ id: string; active: boolean; direction: Direction; }>` |\n\n# Table Head Cell\n\n## Properties\n\n| Property    | Attribute    | Description                                                                                                                 | Type                                                     | Default     |\n| ----------- | ------------ | --------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------- | ----------- |\n| `hideLabel` | `hide-label` | Hides the label but stays accessible for screen readers. This property only takes effect when sort property is not defined. | `boolean`                                                | `false`     |\n| `sort`      | --           | Defines sortability properties.                                                                                             | `{ id: string; active: boolean; direction: Direction; }` | `undefined` |\n"
    },
    "Tabs": {
      "Examples": "# Tabs\n\nThe `p-tabs` component makes it easy to explore and switch between different views. You can organize and allow navigation\nbetween groups of content that are related and at the same level of hierarchy. The component handles the display of content\naccording to the active tab and all accessibility attributes on your tab and tab content.\n\nThis variant does not support `a` tags and should not be used for navigation. \nIf you need to update your window location have a look at [Tabs Bar](components/tabs-bar) component.\n\n---\n\n## Basic example\n\nBasic implementation shows a tab list with buttons to switch between the content. For every `p-tabs-item` inside of the `p-tabs` component, a tab\nwill be created. The assigned `label` property defines also the name of the button.\n\nEvery `p-tabs-item` holds a `slot` to display content which can be individually assigned. \n\n<Playground :markup=\"basic\" :config=\"config\"></Playground>\n\n## Size\n\n<Playground :markup=\"sizeMarkup\" :config=\"config\">\n  <select v-model=\"size\">\n    <option disabled>Select size</option>\n    <option value=\"small\">Small</option>\n    <option value=\"medium\">Medium</option>\n  </select>\n</Playground>\n\n## Weight\n\n<Playground :markup=\"weightMarkup\" :config=\"config\">\n  <select v-model=\"weight\">\n    <option disabled>Select weight</option>\n    <option value=\"regular\">Regular</option>\n    <option value=\"semibold\">SemiBold</option>\n  </select>\n</Playground>\n\n## Gradient Color Scheme\n\nIf the amount of tabs exceeds the viewport, the component renders arrow-buttons to help with horizontal scrolling.\nThe background and gradient has to align to your chosen background.\n\n<Playground :markup=\"gradientMarkup\" :config=\"{ ...config, colorScheme: gradientColorScheme }\">\n  <select v-model=\"gradientColorScheme\">\n    <option disabled>Select gradient-color-scheme</option>\n    <option value=\"default\">Default</option>\n    <option value=\"surface\">Surface</option>\n  </select>\n</Playground>\n\n## Active Tab\n\nYou may need to change the initial active tab. To do so, set the `active-tab-index` attribute of `p-tabs`.\nMake sure to update the `activeTabIndex` when adding or removing elements.\n\n<Playground :markup=\"activeTab\" :config=\"config\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  const buildTabsItem = (name: string, index: number) => \n`  <p-tabs-item label=\"Tab ${name}\">\n    <p-text>Tab Content ${name}</p-text>\n  </p-tabs-item>`;\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n\n    weight = 'semibold';\n    size = 'medium';\n    gradientColorScheme = 'surface';\n\n    basic =\n`<p-tabs>\n${['One', 'Two', 'Three'].map(buildTabsItem).join('\\n')}\n</p-tabs>`;\n\n    get sizeMarkup() {\n      return `<p-tabs size=\"${this.size}\">\n${['One', 'Two', 'Three'].map(buildTabsItem).join('\\n')}\n</p-tabs>`;\n    }\n\n    get weightMarkup() {\n      return `<p-tabs weight=\"${this.weight}\">\n${['One', 'Two', 'Three'].map(buildTabsItem).join('\\n')}\n</p-tabs>`;\n    }\n\n    get gradientMarkup() {\n      return `<p-tabs gradient-color-scheme=\"${this.gradientColorScheme}\">\n${['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen', 'Twenty']\n  .map(buildTabsItem).join('\\n')}\n</p-tabs>`;\n    }\n    \n    activeTab =\n`<p-tabs active-tab-index=\"1\">\n${['One', 'Two', 'Three'].map(buildTabsItem).join('\\n')}\n</p-tabs>`;\n  }\n</script>",
      "Usage": "# Tabs\n\n## When to use\n  • Use Tabs when there is a large amount of content that can be separated.  \n  • Use Tabs to make the content accessible without reloading the page or compromising on space.  \n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Tabs as follows\n\n| Type | Usage |\n|----|----|\n| Standard | Standard (regular) will be used on a monochrome background. |\n| Highlight | Highlight (semibold) will be used on a polychrome background (e.g. on images) for better comprehensibility and accessibility. |\n| Small | Small are used to provide an additional level or for smaller viewports. | \n| Medium | Medium tabs are usually used in page header or for larger viewports. |  \t\n\n## Behavior\n\n### Overflow\n\nWhen a set of Tabs cannot fit on screen the tab bar becomes horizontal swibeable and navigable with arrows. \nTo navigate back and forth use the arrows.\n\n## Usage\n\n### Scalable\n\nAs Tabs can horizontally scroll, technically a UI could have as many tabs as needed. You should use no more than six tabs. \n\n### Text label\n\nIt is recommended to always keep the label short. Try not to use more than two words for a tab label.\n\n### Navigation\n\nNot be used for primary navigation.\n\n\n---\n\n## Related Component\n* [Tabs Bar](components/tabs-bar)\n",
      "Props": "# Tabs\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type Size = 'small' | 'medium'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property              | Attribute               | Description                                                            | Type                                                                                                                                                                                                        | Default     |\n| --------------------- | ----------------------- | ---------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| `activeTabIndex`      | `active-tab-index`      | Defines which tab to be visualized as selected (zero-based numbering). | `number`                                                                                                                                                                                                    | `0`         |\n| `gradientColorScheme` | `gradient-color-scheme` | Adapts the background gradient color of prev and next button.          | `'default'` <br>` 'surface'`                                                                                                                                                                                    | `'default'` |\n| `size`                | `size`                  | The text size.                                                         | `'small'` <br>` 'medium'` <br>` BreakpointCustomizable<Size>` | `'small'`   |\n| `theme`               | `theme`                 | Adapts the color when used on dark background.                         | `'dark'` <br>` 'light'` <br>` 'light-electric'`                                                                                                                                                                     | `'light'`   |\n| `weight`              | `weight`                | The text weight.                                                       | `'regular'` <br>` 'semibold'`                                                                                                                                                                                   | `'regular'` |\n\n\n## Events\n\n| Event       | Description                         | Type                                       |\n| ----------- | ----------------------------------- | ------------------------------------------ |\n| `tabChange` | Emitted when active tab is changed. | `CustomEvent<{ activeTabIndex: number; }>` |\n\n# Tabs Item\n\n## Properties\n\n| Property | Attribute | Description                     | Type     | Default     |\n| -------- | --------- | ------------------------------- | -------- | ----------- |\n| `label`  | `label`   | Defines the label used in tabs. | `string` | `undefined` |\n"
    },
    "Tabs Bar": {
      "Examples": "# Tabs Bar\n\nThe `p-tabs-bar` component is a styled button/link list for multiple purposes. You can use it with your framework router to ensure\nyour window location updates on tab click, use it for hash routing and displaying content accordingly to the hash, to change the state of another element\nand therefore change the appearance of your content or as skip navigation to move on a longer page.\n\nThe component does not handle the display of your content. If you use the component you have to manually care for the\ncontent to be rendered beneath. To help with this task the component triggers an event called `tabChange` with the index\nof the active tab.\n\nIf you intend to only change content on tab-click without location changes and you are fine that the content needs to be pre-rendered then we prepared a component which also\nhandles the correct display of content according to the active tab. Have a look at the [Tabs](components/tabs) component.\n\n**Note**: We use `<button>` tags in the examples below because you have to use anchor tags with `href`\nin your application! Therefore, we avoid messing with the window location.\n\nIt is a controlled component.\nThis means it does not contain any internal state, and you got full control over its behavior.\n\n---\n\n## Basic example\n\nBasic implementation is a tab bar with tabs to switch between the content. Just put `<button>` tags if you need to change e.g. the state on tab-click or `<a>`\ntags, if you also have to manipulate the window location, inside the `<p-tabs-bar>` component and it will handle all styling behaviors.\n\nIn order to get notified when the active tabs change, you need to register an event listener for the `tabChange` event which is emitted by `p-tabs-bar`.\n\n### Framework Implementations\n\n<Playground :frameworkMarkup=\"frameworks\"></Playground>\n\n### Buttons\n\n<Playground :markup=\"basicButton\" :config=\"config\"></Playground>\n\n### Links\n\n<Playground :markup=\"basicAnchor\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\n\nThe `p-tabs-bar` component is detached from the content which belongs to the active tab. We provide the necessary `role=\"tab\"`, `tabindex` and `aria-selected` on the tabs inside the component.\n\nTo be truly accessible you need to provide some more information because every tab needs an `aria-controls` attribute which points to the corresponding `id` of the `tabpanel`. \nThe content placeholder needs the `role=\"tabpanel\"` and the attribute `aria-labelledby` which points to the unique id of the corresponding tab (`aria-controls`).\n\n<Playground class=\"playground-tabs-bar\" :markup=\"accessibility\" :config=\"config\"></Playground>\n\n---\n## Active Tab\n\n**Note:** Keep in mind that the property `active-tab-index` uses zero-based numbering. Setting `active-tab-index` to `undefined` removes the selection. Make sure to update the `activeTabIndex` when adding or removing elements.\n\n<Playground class=\"playground-tabs-bar\" :markup=\"activeTab\" :config=\"config\"></Playground>\n\n## Size\n\n<Playground :markup=\"sizeMarkup\" :config=\"config\">\n  <select v-model=\"size\">\n    <option disabled>Select size</option>\n    <option value=\"small\">Small</option>\n    <option value=\"medium\">Medium</option>\n  </select>\n</Playground>\n\n## Weight\n\n<Playground :markup=\"weightMarkup\" :config=\"config\">\n  <select v-model=\"weight\">\n    <option disabled>Select weight</option>\n    <option value=\"regular\">Regular</option>\n    <option value=\"semibold\">SemiBold</option>\n  </select>\n</Playground>\n\n## Gradient Color Scheme\n\nIf the amount of tabs exceeds the viewport, the component renders arrow-buttons to help with horizontal scrolling.\nThe background and gradient has to align to your chosen background.\n\n<Playground :markup=\"gradientMarkup\" :config=\"{ ...config, colorScheme: gradientColorScheme }\">\n  <select v-model=\"gradientColorScheme\">\n    <option disabled>Select gradient-color-scheme</option>\n    <option value=\"default\">Default</option>\n    <option value=\"surface\">Surface</option>\n  </select>\n</Playground>\n\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\n\nconst buildButton = (name: string) => `  <button type=\"button\">Tab ${name}</button>`;\nconst buildAnchor = (name: string) => `  <a href=\"https://porsche.com\">Tab ${name}</a>`;\nconst buildTabPanel = (id: number) => `<div id=\"tab-panel-${id}\" hidden role=\"tabpanel\" aria-labelledby=\"tab-item-${id}\">\n  <p-text>Your content of Tab ${id}</p-text> \n</div>`;\n  \n@Component\nexport default class Code extends Vue {\n  config = { themeable: true };\n\n  frameworks = {\n    'vanilla-js': `tabsBar.addEventListener('tabChange', (e) => {\n  e.target.activeTabIndex = e.detail.activeTabIndex;\n});`,\n    angular: `import { Component } from '@angular/core';\nimport type { TabChangeEvent } from '@porsche-design-system/components-angular';\n\n@Component({\n  selector: 'tabs-bar-page',\n  template: \\`<p-tabs-bar [activeTabIndex]=\"tabIndex\" (tabChange)=\"onTabChange($event)\">...</p-tabs-bar>\\`,\n})\nexport class TabsBarPage {\n  tabIndex: number;\n\n  onTabChange(e: CustomEvent<TabChangeEvent>) {\n    this.tabIndex = e.detail.activeTabIndex;\n  }\n}`,\n    react: `import { useCallback, useState } from 'react';\nimport { PTabsBar } from '@porsche-design-system/components-react';\nimport type { TabChangeEvent } from '@porsche-design-system/components-react';\n\nconst TabsBarPage = (): JSX.Element => {\n    const [tabIndex, setTabIndex] = useState<number>();\n    const onTabChange = useCallback((e: CustomEvent<TabChangeEvent>) => {\n        setTabIndex(e.detail.activeTabIndex);\n    }, []);\n\n    return <PTabsBar activeTabIndex={tabIndex} onTabChange={onTabChange}>...</PTabsBar>\n}`,\n    };\n\n  weight = 'semibold';\n  size = 'medium';\n  gradientColorScheme = 'surface';\n\n  basicButton =\n`<p-tabs-bar>\n${['One', 'Two', 'Three'].map(buildButton).join('\\n')}\n</p-tabs-bar>`;\n\n  basicAnchor =\n`<p-tabs-bar>\n${['One', 'Two', 'Three'].map(buildAnchor).join('\\n')}\n</p-tabs-bar>`;\n\n  accessibility =\n`<p-tabs-bar active-tab-index=\"0\">\n  <button type=\"button\" id=\"tab-item-1\" aria-controls=\"tab-panel-1\">Tab One</button>\n  <button type=\"button\" id=\"tab-item-2\" aria-controls=\"tab-panel-2\">Tab Two</button>\n  <button type=\"button\" id=\"tab-item-3\" aria-controls=\"tab-panel-3\">Tab Three</button>\n</p-tabs-bar>\n \n${[1, 2, 3].map(buildTabPanel).join('\\n')}`;\n\n  get sizeMarkup() {\n    return `<p-tabs-bar size=\"${this.size}\">\n${['One', 'Two', 'Three'].map(buildButton).join('\\n')}\n</p-tabs-bar>`;\n  }\n\n  get weightMarkup() {\n    return `<p-tabs-bar weight=\"${this.weight}\">\n${['One', 'Two', 'Three'].map(buildButton).join('\\n')}\n</p-tabs-bar>`;\n    }\n    \n  get gradientMarkup() {\n    return `<p-tabs-bar gradient-color-scheme=\"${this.gradientColorScheme}\">\n${['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen', 'Twenty']\n  .map(buildButton).join('\\n')}\n</p-tabs-bar>`;\n  }\n    \n  activeTab =\n`<p-tabs-bar active-tab-index=\"0\">\n${['One', 'Two', 'Three'].map(buildButton).join('\\n')}\n</p-tabs-bar>`;\n    \n  mounted(){\n    // initially update tabsBars with activeTabIndex attribute in playground\n   this.updateAndRegister();\n    \n    // theme switch needs to register event listeners again\n    const themeTabs = this.$el.querySelectorAll('.playground > p-tabs-bar');      \n    themeTabs.forEach(tab => tab.addEventListener('tabChange', () => {\n      this.updateAndRegister(); \n    }));    \n  }\n  \n  updated(){\n    this.registerEvents();\n  }\n\n  updateAndRegister() {\n    this.updateActiveTabIndex(this.$el.querySelector('.playground-tabs-bar .example p-tabs-bar'));      \n    this.registerEvents();\n  }\n  \n  registerEvents() {\n    const tabsBars = this.$el.querySelectorAll('.playground:not(.playground-tabs-bar) .example .demo p-tabs-bar');\n    tabsBars.forEach(tabsBar => tabsBar.addEventListener('tabChange', this.onTabChange));\n\n    //bind tabsBars with activeTabIndex set as attribute\n    const tabsBarsWithActiveIndex = this.$el.querySelectorAll('.playground-tabs-bar .example .demo p-tabs-bar');\n    tabsBarsWithActiveIndex.forEach(tabsBar => tabsBar.addEventListener('tabChange', (e: CustomEvent<TabChangeEvent>)=> {\n      this.onTabChange(e);\n      this.updateActiveTabIndex(e.target, e.detail.activeTabIndex);\n    }));\n  }\n  \n  hiddenNodes = null;\n  onTabChange =  (e: CustomEvent) => {\n      e.target.activeTabIndex = e.detail.activeTabIndex;\n  }\n\n  updateActiveTabIndex = (tabs: HTMLElement, newIndex: number = 0) => {\n    // manipulate code only section only in order to not rerender component and loose animations\n    const example = tabs.parentElement.parentElement;\n    const demo = example.querySelector('.demo');\n    const code = example.querySelector('code');\n    const attrs = code.querySelectorAll('.token:first-child .attr-value');\n    \n    // manipulate activeTabIndex\n    if (attrs.length) {\n      attrs[attrs.length - 1].innerText = `=\"${newIndex}\"`; \n    }\n    \n    // manipulate hidden attribute in code of accessibility playground\n    if (code.innerHTML.includes('Your content of Tab')) {\n      if (!this.hiddenNodes) {\n        this.hiddenNodes = document.evaluate(\"//span[text()='hidden']\", document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n      }\n\n      // hide/show and adjust offset of hidden attribute\n      for (let i = 0; i < this.hiddenNodes.snapshotLength; i++) {\n        const item = this.hiddenNodes.snapshotItem(i);\n        item.style.marginLeft = '';\n        item.innerText = 'hidden';\n        \n        if (i === newIndex) {\n          item.style.marginLeft = '-9px';\n          item.innerText = '';\n        }\n      }\n      \n      const panels = Array.from(demo.querySelectorAll('[role=\"tabpanel\"]'));\n      panels.forEach((panel, i) => {\n        panel.setAttribute('hidden', '');\n        if (i === newIndex) {\n          panel.removeAttribute('hidden');\n        }\n      });\n    }\n  }\n}\n</script>",
      "Usage": "# Tabs Bar\n\n## When to use\n  • Use Tabs Bar as a Skip-Navigation to jump to sections on a longer page.  \n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Tabs Bar as follows\n\n| Type | Usage |\n|----|----|\n| Standard | Standard (regular) will be used on a monochrome background. |\n| Highlight | Highlight (semibold) will be used on a polychrome background (e.g. on images) for better comprehensibility and accessibility. |\n| Small | Small are used to provide an additional level or for smaller viewports. | \n| Medium | Medium tabs are usually used in page header or for larger viewports. | \t\n\n## Behavior\n\n### Overflow\n\nWhen a set of Tabs cannot fit on screen the tab bar becomes horizontal swibeable and navigable with arrows. \nTo navigate back and forth use the arrows.\n\n## Usage\n\n### Scalable\n\nAs Tabs can horizontally scroll, technically a UI could have as many tabs as needed. You should use no more than six tabs. \n\n### Text label\n\nIt is recommended to always keep the label short. Try not to use more than two words for a tab label.\n\n---\n\n## Related Component\n* [Tabs](components/tabs)\n* [Pagination](components/pagination)",
      "Props": "# Tabs Bar\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type Size = 'small' | 'medium'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property              | Attribute               | Description                                                                                                  | Type                                                                                                                                                                                                        | Default     |\n| --------------------- | ----------------------- | ------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| `activeTabIndex`      | `active-tab-index`      | Defines which tab to be visualized as selected (zero-based numbering), undefined if none should be selected. | `number`                                                                                                                                                                                                    | `undefined` |\n| `gradientColorScheme` | `gradient-color-scheme` | Adapts the background gradient color of prev and next button.                                                | `'default'` <br>` 'surface'`                                                                                                                                                                                    | `'default'` |\n| `size`                | `size`                  | The text size.                                                                                               | `'small'` <br>` 'medium'` <br>` BreakpointCustomizable<Size>` | `'small'`   |\n| `theme`               | `theme`                 | Adapts the color when used on dark background.                                                               | `'dark'` <br>` 'light'` <br>` 'light-electric'`                                                                                                                                                                     | `'light'`   |\n| `weight`              | `weight`                | The text weight.                                                                                             | `'regular'` <br>` 'semibold'`                                                                                                                                                                                   | `'regular'` |\n\n\n## Events\n\n| Event       | Description                         | Type                                       |\n| ----------- | ----------------------------------- | ------------------------------------------ |\n| `tabChange` | Emitted when active tab is changed. | `CustomEvent<{ activeTabIndex: number; }>` |\n"
    },
    "Text Field": {
      "Examples": "# Text Field\n\nThe `p-text-field-wrapper` component is a styling wrapper for the native HTML input types and is essential for mostly any form.\n\nA `label` is a caption which informs the user what information a particular form field is asking for. The `p-text-field-wrapper` component can be used with or without a label but it's recommended to keep the label visible for better accessibility whenever possible. When used without a label, it's best practice to provide a descriptive label text for screen readers.  \n\nWhile a `placeholder` is optional but recommended to be set whenever bits of example content or hints shall be shown to give the user visual cues to fill out the form.\n\n## Basic example\n\n<Playground :markup=\"basic\" :config=\"config\">\n  <select v-model=\"label\">\n    <option disabled>Select a label mode</option>\n    <option value=\"show\">With label</option>\n    <option value=\"hide\">Without label</option>\n    <option value=\"responsive\">Responsive</option>\n  </select>\n</Playground>\n\n---\n\n## With description text\n\nA description text can be added to explain the meaning of a specific form field. It's meant to be a textual enhancement of the label text and is technically connected with the `hide-label` property.\n\n<Playground :markup=\"withDescriptionText\" :config=\"config\"></Playground>\n\n---\n\n## Required\n\n<Playground :markup=\"required\" :config=\"config\"></Playground>\n\n---\n\n## Disabled\n\n<Playground :markup=\"disabled\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIn general, you should **prevent** using the `disabled=\"true\"` state. Disabled elements are not reachable (focusable) anymore and can be missed by screen reader users. \nThey can be confusing for sighted users as well by not pointing out why these elements are disabled. \nA good practice when to use the disabled state is during **form submission** to prevent changes while this process is performed.\n\n---\n\n## Read only\n\n<Playground :markup=\"readonly\" :config=\"config\"></Playground>\n\n--- \n\n## Types\n\nThe following types listed in the configurator below are supported. Browser specific UI helpers (e.g. calendar dropdown in Chrome) may occur inside the input field which are explicitly not reset by the `p-text-field-wrapper` component.\nFor better accessibility it's recommended to **not** reset these browser default UI helpers.\n\n### Basic\n\n<Playground :markup=\"typesBasic\" :config=\"config\">\n  <select v-model=\"type\">\n    <option disabled>Select a type</option>\n    <option value=\"text\">Text</option>\n    <option value=\"number\">Number</option>\n    <option value=\"email\">Email</option>\n    <option value=\"tel\">Tel</option>\n    <option value=\"search\">Search</option>\n    <option value=\"url\">Url</option>\n    <option value=\"date\">Date</option>\n    <option value=\"time\">Time</option>\n    <option value=\"month\">Month</option>\n    <option value=\"week\">Week</option>\n  </select>\n</Playground>\n\n### Number\n\nInputs with type number can display a unit (e.g. €, EUR, km/h, etc.) with a **maximum** of five characters.\nA description of the used unit should be provided to ensure accessibility.\n\n<Playground :markup=\"typesNumber\" :config=\"config\">\n  <select v-model=\"unitPosition\">\n    <option disabled>Select a unit position</option>\n    <option value=\"prefix\">Prefix</option>\n    <option value=\"suffix\">Suffix</option>    \n  </select>\n</Playground>\n\n### Password\n\n<Playground :markup=\"typesPassword\" :config=\"config\"></Playground>\n\n### Search\n\n<Playground :markup=\"typesSearch\" :config=\"config\"></Playground>\n\n---\n\n## Validation states\n\nThe `p-text-field-wrapper` component supports the visualisation of inline validation. The `message` and `input` is colored and visible/hidden depending on the defined `state`.\n\n<Playground :markup=\"validationStates\" :config=\"config\">\n  <select v-model=\"state\">\n    <option disabled>Select a validation state</option>\n    <option value=\"error\">Error</option>\n    <option value=\"success\">Success</option>\n    <option value=\"none\">None</option>\n  </select>\n</Playground>\n\n---\n\n## Slots\n\nSometimes it's useful to be able to render markup (e.g. an anchor tag) for `label`, `description` or `message`. Therefore a named slot can be used. Make sure **not** to define the corresponding property on the host element when a named slot is used (because a property definition is preferred over a named slot).\nFor named slots only [phrasing content](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content) is allowed.\n\n<Playground :markup=\"slots\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIf using **slotted contents** to serve form elements, make sure to provide the right **ARIA attributes** to give screen reader users the corresponding information:\n1. Add a unique ID to the `slot=\"label\"` element\n1. Add a unique ID to the `slot=\"message\"` element (if they are created)\n1. Add corresponding `aria-labelledby=\"some-label-id\"` to the `input` element which points to the `label` ID\n1. Add corresponding `aria-describedby=\"some-description-id some-message-id\"` to the `input` element which points to both, the `description` ID (if set) and the `message` ID when the (error/success) message appears \n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { spacing: 'block' };\n\n    label = 'show';\n    type = 'text';\n    state = 'error';\n    unitPosition = 'prefix';\n\n    get basic() {\n      const labelAttr = ` hide-label=\"${this.label === 'hide' ? 'true' : this.label === 'responsive' ? '{ base: true, l: false }' : 'false'}\"`;\n      return `<p-text-field-wrapper label=\"Some label\"${labelAttr}>\n  <input type=\"text\" name=\"some-name\" />\n</p-text-field-wrapper>\n<p-text-field-wrapper label=\"Some label\"${labelAttr}>\n  <input type=\"text\" placeholder=\"Some placeholder text\" name=\"some-name\" />\n</p-text-field-wrapper>`;\n    }\n    \n    withDescriptionText =\n`<p-text-field-wrapper label=\"Some label\" description=\"Some description\">\n  <input type=\"text\" name=\"some-name\" />\n</p-text-field-wrapper>`;\n\n    required =\n`<p-text-field-wrapper label=\"Some label\">\n  <input type=\"text\" name=\"some-name\" value=\"Some value\" required />\n</p-text-field-wrapper>`;\n\n    disabled =\n`<p-text-field-wrapper label=\"Some label\">\n  <input type=\"text\" name=\"some-name\" value=\"Some value\" disabled />\n</p-text-field-wrapper>`;\n\n    readonly =\n`<p-text-field-wrapper label=\"Some label\">\n  <input type=\"text\" name=\"some-name\" value=\"Some value\" readonly />\n</p-text-field-wrapper>`;\n\n    get typesBasic() {\n      return `<p-text-field-wrapper label=\"Some label\">\n  <input type=\"${this.type}\" name=\"some-name\" />\n</p-text-field-wrapper>`;\n    }\n\n    get typesNumber() {\n      return `<p-text-field-wrapper label=\"Some label\" description=\"The price in Euro\" unit=\"EUR\" unit-position=\"${this.unitPosition}\">\n  <input type=\"number\" name=\"some-name\" value=\"500\" />\n</p-text-field-wrapper>`;\n    }\n    \n    typesPassword =\n`<p-text-field-wrapper label=\"Some label\">\n  <input type=\"password\" name=\"some-name\" value=\"some password\" />\n</p-text-field-wrapper>`;\n\n    typesSearch =\n`<form action=\"#\" onsubmit=\"alert('submit'); return false;\">\n  <p-text-field-wrapper label=\"Some label\">\n    <input type=\"search\" name=\"some-name\" />\n  </p-text-field-wrapper>\n</form>`;\n\n    get validationStates() {\n      const attr = `message=\"${this.state !== 'none' ? `Some ${this.state} validation message.` : ''}\"`;\n      return `<p-text-field-wrapper label=\"Some label\" state=\"${this.state}\" ${attr}>\n  <input type=\"text\" name=\"some-name\" />\n</p-text-field-wrapper>`;\n    }\n    \n    slots =\n`<p-text-field-wrapper state=\"error\">\n  <span slot=\"label\" id=\"some-label-id\">Some label with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n  <span slot=\"description\" id=\"some-description-id\">Some description with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n  <input type=\"text\" name=\"some-name\" aria-labelledby=\"some-label-id\" aria-describedby=\"some-description-id some-message-id\" />\n  <span slot=\"message\" id=\"some-message-id\">Some error message with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n</p-text-field-wrapper>`;\n  }\n</script>",
      "Usage": "# Text Field\n\n## When to use\n\n  • Use the Text Field in forms to help users enter text.\n\n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Text Field as follows\n\n| Type | Usage |\n|----|----|\n| Default | You can choose between several input types for the basic Text Field _(Number, Email, Phone number, URL, Date, Time, Month & Week)_. Each one comes either with a formatting preset or with an automatic validation for the dedicated input type resulting in an error in case of a non-matching input.  |\n| Placeholder | Placeholder text disappears when a user types in the input. If a user doesn’t enter a value and moves to another part of a form, the placeholder text reappears in the former text box. However, using placeholder text is not recommended since users can misinterpret it as already filled in content.  |\n| Password | Password fields have the ability to hide/show the typed password.  |\n| Search | Search fields have the ability to activate the search function.    |\n| Pure | The Pure variant (without label) is only to be used if the context clearly describes the purpose of the Text Field and no further explanation is required.    |\n| Description text | Sometimes it’s helpful for the user to get further information on the input. This can be done by providing a description text displayed openly and directly outside the form field. Please find more information in the [Form pattern guideline](patterns/forms).    |\n\n\n## Behavior\n\n### Label\nThe label text (always in copytext) gives the user an information about the option that can be selected. Try to keep the label short and descriptive (one  word or two).\n\n### Validation and error\nValidation text for a field is placed right below the field box in order to make it clear for the user which Text Field the validation belongs to.\nPlease find more information in the [Form pattern guideline](patterns/forms).\n\n### Mandatory and optional fields\nMark required fields. Our tests (optional vs. required with an asterisk) showed that mark required fields with an red asterisk is an easy way to improve the usability of forms. Please find more information in the [Form pattern guideline](patterns/forms).\n\n<div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n    <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n    <img src=\"./assets/text-field-examples.png\" alt=\"Examples for text field usage\" />\n</div>\n\n## Do's & Don'ts\n\n### Long text inputs\nDon't use the Text Field component if you need to allow users to enter longer text. In this case, you should use the Textarea component.\n\n![Longer Text in Text Field](./assets/textfield-dont-long-text-inputs.png)\n\n### Description text\nDon't use instructional or description text for the label.\n\n![How to use description text](./assets/textfield-dont-description-text.png)\n\n---\n\n## Related Components\n\n* [Textarea](components/textarea)\n",
      "Props": "# Text Field\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type HideLabel = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property       | Attribute       | Description                                                                                            | Type                                                                                                                               | Default    |\n| -------------- | --------------- | ------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------- | ---------- |\n| `description`  | `description`   | The description text.                                                                                  | `string`                                                                                                                           | `''`       |\n| `hideLabel`    | `hide-label`    | Show or hide label and description text. For better accessibility it is recommended to show the label. | `boolean` <br>` BreakpointCustomizable<HideLabel>` | `false`    |\n| `label`        | `label`         | The label text.                                                                                        | `string`                                                                                                                           | `''`       |\n| `message`      | `message`       | The message styled depending on validation state.                                                      | `string`                                                                                                                           | `''`       |\n| `state`        | `state`         | The validation state.                                                                                  | `'error'` <br>` 'none'` <br>` 'success'`                                                                                                   | `'none'`   |\n| `unit`         | `unit`          | The unit text.                                                                                         | `string`                                                                                                                           | `''`       |\n| `unitPosition` | `unit-position` | The unit position.                                                                                     | `'prefix'` <br>` 'suffix'`                                                                                                             | `'prefix'` |\n"
    },
    "Text List": {
      "Examples": "# Text List\n\nThe `p-text-list` component is used to display listed data in form of an unordered or ordered list. A list depends on two parts (like any native HTML list):\nA list wrapper which defines the type of the list (unordered or ordered) and the list items. \nNesting is also provided and follows the same nesting rules like native HTML lists. For more complex data you should consider the use of a data table.\n\n## Unordered list\n\n<Playground :markup=\"list()\" :config=\"config\"></Playground>\n\n## Ordered list - numbered\n\n<Playground :markup=\"list('ordered')\" :config=\"config\"></Playground>\n\n## Ordered list - alphabetically\n\n<Playground :markup=\"list('ordered', 'alphabetically')\" :config=\"config\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n    \n    list(listType?: string, orderType?: string) {\n      const attr = (listType ? ` list-type=\"${listType}\"` : '') + (orderType ? ` order-type=\"${orderType}\"` : '');\n      return `<p-text-list${attr}>\n  <p-text-list-item>The quick brown fox jumps over the lazy dog</p-text-list-item>\n  <p-text-list-item>The quick <a href=\"https://porsche.com\">brown fox</a> jumps <b>over</b> the <strong>lazy</strong> dog\n    <p-text-list${attr}>\n      <p-text-list-item>The quick brown fox jumps over the lazy dog</p-text-list-item>\n      <p-text-list-item>The quick brown fox jumps over the lazy dog, the lazy dog jumps over the quick brown fox</p-text-list-item>\n        <p-text-list-item>The quick <a href=\"https://porsche.com\">brown fox</a> jumps <b>over</b> the <strong>lazy</strong> dog\n          <p-text-list${attr}>\n            <p-text-list-item>The quick brown fox jumps over the lazy dog</p-text-list-item>\n            <p-text-list-item>The quick brown fox jumps over the lazy dog, the lazy dog jumps over the quick brown fox</p-text-list-item>\n          </p-text-list>\n        </p-text-list-item>\n    </p-text-list>\n  </p-text-list-item>\n  <p-text-list-item>The quick brown fox jumps over the lazy dog</p-text-list-item>\n</p-text-list>`;\n    }\n  }\n</script>",
      "Usage": "# Text List\n\n## When to use\n  • Use a Text List to display short pieces of information in form of an unordered or ordered list.\n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Text List as follows\n\n| Type | Usage |\n|----|----|\n| Unordered List  | Content with equal value is displayed in unordered lists. |\n| Ordered List  | Sequenced content should be displayed in an ordered list.|\n\n## Usage\n\n### Order\nArrange list items in a logical way, e.g. from  highest to lowest level. If necessary (depending on the total length of the list) you should split the content into smaller and more specific categories and group them. \n\n### Writing style\nIt is recommended to stick to a homogeneous writing structure and style within one list. Avoid e.g. mixing active with passive voice or declarative with imperative sentences. \n\n### Capitalization\nUse sentence-style capitalization for each list item. Capitalize only the first letter of the item.\n\n## Do's & Don'ts\n\n### Hierarchy\n\nText Lists should not exceed two hierarchy levels.",
      "Props": "# Text List\n\n## Properties\n\n| Property    | Attribute    | Description                                                                                      | Type                             | Default       |\n| ----------- | ------------ | ------------------------------------------------------------------------------------------------ | -------------------------------- | ------------- |\n| `listType`  | `list-type`  | The type of the text list.                                                                       | `'ordered'` <br>` 'unordered'`       | `'unordered'` |\n| `orderType` | `order-type` | The list style type of an ordered list.                                                          | `'alphabetically'` <br>` 'numbered'` | `'numbered'`  |\n| `theme`     | `theme`      | Adapts the text color depending on the theme. Has no effect when 'inherit' is set as color prop. | `'dark'` <br>` 'light'`              | `'light'`     |\n"
    },
    "Textarea": {
      "Examples": "# Textarea\n\nThe `p-textarea-wrapper` component is a styling wrapper for the native HTML `<textarea>` form element. Don't use a Textarea component if you want to allow users to enter shorter responses that are no longer than a single line, \nsuch as a phone number or name. In this case, you should use the Text Field component. \n\nA `label` is a caption which informs the user what information a particular form field is asking for. The `p-textarea-wrapper` component can be used with or without a label but it's recommended to keep the label visible for better accessibility whenever possible. When used without a label, it's best practice to provide a descriptive label text for screen readers.  \n\nWhile a `placeholder` is optional but recommended to be set whenever bits of example content or hints shall be shown to give the user visual cues to fill out the form.\n\n## Basic example\n\n<Playground :markup=\"basic\" :config=\"config\">\n  <select v-model=\"label\">\n    <option disabled>Select a label mode</option>\n    <option value=\"show\">With label</option>\n    <option value=\"hide\">Without label</option>\n    <option value=\"responsive\">Responsive</option>\n  </select>\n</Playground>\n\n--- \n\n## With description text\n\nA description text can be added to explain the meaning of a specific form field. It's meant to be a textual enhancement of the label text and is technically connected with the `hide-label` property.\n\n<Playground :markup=\"withDescriptionText\" :config=\"config\"></Playground>\n\n---\n\n## Required\n\n<Playground :markup=\"required\" :config=\"config\"></Playground>\n\n---\n\n## Disabled\n\n<Playground :markup=\"disabled\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIn general, you should **prevent** using the `disabled=\"true\"` state. Disabled elements are not reachable (focusable) anymore and can be missed by screen reader users.\nThey can be confusing for sighted users as well by not pointing out why these elements are disabled.\nA good practice when to use the disabled state is during **form submission** to prevent changes while this process is performed.\n\n---\n\n## Read only\n\n<Playground :markup=\"readonly\" :config=\"config\"></Playground>\n\n---\n\n## Validation states\n\nThe `p-textarea-wrapper` component supports the visualisation of inline validation. \n\n<Playground :markup=\"validationStates\" :config=\"config\">\n  <select v-model=\"state\">\n    <option disabled>Select a validation state</option>\n    <option value=\"error\">Error</option>\n    <option value=\"success\">Success</option>\n    <option value=\"none\">None</option>\n  </select>\n</Playground>\n\n---\n\n## Slots\n\nSometimes it's useful to be able to render markup (e.g. an anchor tag) for `label` or `message`. Therefore a named slot can be used. Make sure **not** to define the corresponding property on the host element when a named slot is used (because a property definition is preferred over a named slot).\nFor named slots only [phrasing content](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content) is allowed.\n\n<Playground :markup=\"slots\" :config=\"config\"></Playground>\n\n### <p-icon name=\"accessibility\" size=\"medium\" color=\"notification-neutral\" aria-hidden=\"true\"></p-icon> Accessibility hints\nIf using **slotted contents** to serve form elements, make sure to provide the right **ARIA attributes** to give screen reader users the corresponding information:\n1. Add a unique ID to the `slot=\"label\"` element\n1. Add a unique ID to the `slot=\"message\"` element (if they are created)\n1. Add corresponding `aria-labelledby=\"some-label-id\"` to the `textarea` element which points to the `label` ID\n1. Add corresponding `aria-describedby=\"some-description-id some-message-id\"` to the `textarea` element which points to both, the `description` ID (if set) and the `message` ID when the (error/success) message appears\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { spacing: 'block' };\n\n    label = 'show';\n    state = 'error';\n\n    get basic() {\n      const attr = `hide-label=\"${this.label === 'hide' ? 'true' : this.label === 'responsive' ? '{ base: true, l: false }' : 'false'}\"`;\n      return `<p-textarea-wrapper label=\"Some label\" ${attr}>\n  <textarea name=\"some-name\"></textarea>\n</p-textarea-wrapper>\n<p-textarea-wrapper label=\"Some label\" ${attr}>\n  <textarea name=\"some-name\" placeholder=\"Some placeholder text\"></textarea>\n</p-textarea-wrapper>`;\n    }\n\n    withDescriptionText =\n`<p-textarea-wrapper label=\"Some label\" description=\"Some description\">\n  <textarea name=\"some-name\"></textarea>\n</p-textarea-wrapper>`;\n\n    required =\n`<p-textarea-wrapper label=\"Some label\">\n  <textarea name=\"some-name\" required>Some value</textarea>\n</p-textarea-wrapper>`;\n\n    disabled =\n`<p-textarea-wrapper label=\"Some label\">\n  <textarea name=\"some-name\" disabled>Some value</textarea>\n</p-textarea-wrapper>`;\n\n    readonly =\n`<p-textarea-wrapper label=\"Some label\">\n  <textarea name=\"some-name\" readonly>Some value</textarea>\n</p-textarea-wrapper>`;\n\n    get validationStates() {\n      const attr = `message=\"${this.state !== 'none' ? `Some ${this.state} validation message.` : ''}\"`;\n      return `<p-textarea-wrapper label=\"Some label\" state=\"${this.state}\" ${attr}>\n  <textarea aria-invalid=\"${this.state === 'error'}\" name=\"some-name\">Some value</textarea>\n</p-textarea-wrapper>`;\n    }\n    \n    slots = `<p-textarea-wrapper state=\"error\">\n  <span slot=\"label\" id=\"some-label-id\">Some label with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n  <span slot=\"description\" id=\"some-description-id\">Some description with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n  <textarea name=\"some-name\" aria-labelledby=\"some-label-id\" aria-describedby=\"some-description-id some-message-id\"></textarea>\n  <span slot=\"message\" id=\"some-message-id\">Some error message with a <a href=\"https://designsystem.porsche.com\">link</a>.</span>\n</p-textarea-wrapper>`;\n  }\n</script>",
      "Usage": "# Textarea\n\n## When to use\n\n  • Use Textareas in forms when you need to let users enter and edit an amount of text that’s longer than a single line.\n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Textarea as follows\n\n| Type | Usage |\n|----|----|\n| Default | The basic type contain a Label and this is the most way to create a Textarea inside of a form. |\n| Without label | The variant without label (Pure) is only to be used if the context clearly describes the purpose of the Text Field and no further explanation is required.    |\n\n\n## Behavior\n\n### Label\nThe label text (always in copytext) gives the user an information about the option that can be selected. Try to keep the label short and descriptive (one word or two).\n\n### Validation and error\nValidation text for a field is placed right below the field box in order to make it clear for the user which Textarea the validation belongs to.\nPlease find more information in the [Form pattern guideline](patterns/forms).\n\n### Height\nWe recommend a minimum height of 192 px (equals 7 text lines). Unless predefined characters are specified. \nIn this case we recommend to adapt the Textarea to the content. Please find more information in the [Form pattern guideline](patterns/forms).\n\n### Mandatory and optional fields\nMark required fields. Our tests (optional vs. required with an asterisk) showed that mark required fields with an red asterisk is an easy way to improve the usability of forms. Please find more information in the [Form pattern guideline](patterns/forms).\n\n\n <div style=\"background:#F2F2F2; width:100%; margin-top: 64px; padding-top: 32px; padding-left: 42px; padding-bottom: 42px;\">\n    <p-headline variant=\"headline-3\" tag=\"h3\" style=\"margin-bottom: 24px;\">Examples</p-headline>\n    <img src=\"./assets/textarea-examples.png\" alt=\"Examples for textarea usage\" />\n</div>\n\n## Do's & Don'ts\n\n### Short text inputs\nDon't use a Text Area when text entry is expected to be short since it could confuse users. Use an input instead.\n\n![Short Text in Text Field](./assets/textarea-dont-short-text-inputs.png)\n\n### Number of Textareas\nTo ensure that we don't overwhelm users, there should be no more than two Textareas on a page.\n\n---\n\n## Related Components\n\n* [Text Field](components/text-field)\n",
      "Props": "# Textarea\n\n## Properties\n\n<p style=\"max-width: 100%\">\n\n`type HideLabel = boolean`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property      | Attribute     | Description                                                                       | Type                                                                                                                               | Default  |\n| ------------- | ------------- | --------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| `description` | `description` | The description text.                                                             | `string`                                                                                                                           | `''`     |\n| `hideLabel`   | `hide-label`  | Show or hide label. For better accessibility it is recommended to show the label. | `boolean` <br>` BreakpointCustomizable<HideLabel>` | `false`  |\n| `label`       | `label`       | The label text.                                                                   | `string`                                                                                                                           | `''`     |\n| `message`     | `message`     | The message styled depending on validation state.                                 | `string`                                                                                                                           | `''`     |\n| `state`       | `state`       | The validation state.                                                             | `'error'` <br>` 'none'` <br>` 'success'`                                                                                                   | `'none'` |\n"
    },
    "Typography": {
      "Text": "# Typography\nTypography plays an important role for the general brand impression and is indispensable for the use in digital applications, not to say: Typography **is** the interface. Typography enables meaningful information with well structured hierarchy and is therefore one of the most important elements to provide user guidance.\n\n---\n\n## Text\n\n**Text component** for predefined copy text sizes which are either fixed or can respond to different viewports.\n\n## Default\n\nThe text component is the most flexible way to display text strings on your page.  \nRendering defaults to variant `small` and font weight `regular`.  \nThe default semantic HTML element renders as a `p` tag, but you can change it to your needs (see chapter \"Semantics\").\n\n<Playground :markup=\"basic\" :config=\"config\"></Playground>\n\n--- \n\n## Size\n\nThere are predefined default text sizes for the text component which should cover most use cases. \nIf a specific text size is needed, the size can be set to `inherit` to specify the text size from outside.\n\n**Hint:** Be aware of that the line-height will be calculated based on the Porsche type-scaling formula automatically. This is the case for predefined text sizes as well as for `inherit` mode.\n\n<Playground :markup=\"sizeMarkup\" :config=\"config\">\n  <select v-model=\"size\">\n    <option disabled>Select a size</option>\n    <option>x-small</option>\n    <option>small</option>\n    <option>medium</option>\n    <option>large</option>\n    <option>x-large</option>\n    <option>inherit</option>\n  </select>\n</Playground>\n\n### Responsive\n\nThe settings above can also be used on different major breakpoints `xs`, `s`, `m`, `l`, `xl`.\n\n<Playground :markup=\"responsive\" :config=\"config\"></Playground>\n\n--- \n\n## Semantics\n\nTo provide more contextual HTML semantics you can either pass them with the `tag` property or directly inside a slot.\n\n<Playground :markup=\"semantics\" :config=\"config\"></Playground>\n\n--- \n\n## Color\nPredefined colors associated with its theme are available but also inherit mode can be used to define a custom color.\n\n<Playground :markup=\"colorMarkup\" :config=\"config\">\n  <select v-model=\"color\">\n    <option disabled>Select a color</option>\n    <option value=\"brand\">Brand</option>\n    <option value=\"default\">Default</option>\n    <option value=\"neutral-contrast-high\">Neutral Contrast High</option>\n    <option value=\"neutral-contrast-medium\">Neutral Contrast Medium</option>\n    <option value=\"neutral-contrast-low\">Neutral Contrast Low</option>\n    <option value=\"notification-success\">Notification Success</option>\n    <option value=\"notification-warning\">Notification Warning</option>\n    <option value=\"notification-error\">Notification Error</option>\n    <option value=\"notification-neutral\">Notification Neutral</option>\n    <option value=\"inherit\">Inherit</option>\n  </select>\n</Playground>\n\n--- \n\n## Weight\n\nThere are predefined default text weights for copy text. Be aware of using the `thin` variant only with larger text sizes.\n\n<Playground :markup=\"weightMarkup\" :config=\"config\">\n  <select v-model=\"weight\">\n    <option disabled>Select a weight</option>\n    <option value=\"thin\">Thin</option>\n    <option value=\"regular\">Regular</option>\n    <option value=\"semibold\">Semibold</option>\n    <option value=\"bold\">Bold</option>\n  </select>\n</Playground>\n\n---\n\n## Alignment\n\n<Playground :markup=\"alignment\" :config=\"config\">\n  <select v-model=\"align\">\n    <option disabled>Select an alignment</option>\n    <option value=\"left\">Left</option>\n    <option value=\"center\">Center</option>\n    <option value=\"right\">Right</option>\n  </select>\n</Playground>\n\n---\n\n## Ellipsis mode\nThis will force any text to never wrap into a new line and in case it's to long for a single line then dots (…) at the end are used to visualize it.\n\n<Playground :markup=\"ellipsis\" :config=\"config\"></Playground>\n\n---\n\n## Text with a link and bold text as children\n\n<Playground :markup=\"textWithLink\" :config=\"config\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  const sentence = 'The quick brown fox jumps over the lazy dog';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n  \n    size = 'medium';\n    weight = 'thin';\n    color = 'default';\n    align = 'center';\n    \n    basic =\n`<p-text>${sentence}</p-text>`;\n    \n    get sizeMarkup() {\n      const style = this.size === 'inherit' ? ' style=\"font-size: 48px;\"' : '';\n      return `<p-text size=\"${this.size}\"${style}>${sentence}</p-text>`;\n    }\n    \n    responsive =\n`<p-text size=\"{ base: 'small', l: 'medium' }\">${sentence}</p-text>`;\n\n    semantics =\n`<p-text tag=\"blockquote\">${sentence}</p-text>\n<p-text><blockquote>${sentence}</blockquote></p-text>`;\n\n    get colorMarkup() {\n      const style = this.color === 'inherit' ? ' style=\"color: deeppink;\"' : '';\n      return `<p-text color=\"${this.color}\"${style}>${sentence}</p-text>`;\n    }\n    \n    get weightMarkup() {\n      return `<p-text size=\"medium\" weight=\"${this.weight}\">${sentence}</p-text>`;\n    }\n    \n    get alignment() {\n      return `<p-text align=\"${this.align}\">${sentence}</p-text>`;\n    }\n\n    ellipsis =\n`<p-text ellipsis=\"true\">Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.</p-text>`;\n\n    textWithLink =\n`<p-text>Lorem ipsum dolor sit amet <a href=\"https://porsche.com\">linked text</a> et, <b>bold text</b> & <strong>strong text</strong></p-text>`;\n  }\n</script>",
      "Headline": "# Typography\n\n## Headline\n\n**Headline component** to specify headline styling and hierarchy in documents.\n\n## Variant\nVariants for predefined headlines and automated responsive sizing to fit into all major breakpoints. \nThere are multiple predefined styling variants available. \n\n<Playground :markup=\"variant\" :config=\"config\"></Playground>\n\n### Default Tags\nDefault rendered semantic tag hierarchy equals to headline variant.\n\n**Note**: You always have to take care of the **semantic structure** of your HTML tags. This is very important for **SEO** and **Accessibility**.\nRegarding of your **page structure** you need to set a **corresponding headline tag** via the `tag` property. This means, that a headline can look like an `h1` but doesn't need to be an `h1` in the document (see also section \"**Custom tag hierarchy**\").\n\n| Headline Variant | Rendered HTML Tag |\n| ---------------- | ----------------- |\n| `large-title`    | `<h1>`            |\n| `headline-1`     | `<h1>`            |\n| `headline-2`     | `<h2>`            |\n| `headline-3`     | `<h3>`            |\n| `headline-4`     | `<h4>`            |\n| `headline-5`     | `<h5>`            |\n\n## Custom Variant\nIf you need more control over sizing and responsiveness, you can use predefined text sizes on different major breakpoints `xs`, `s`, `m`, `l`, `xl` or `inherit` mode.\n\n**Hint:** When using `inherit` you have to take the **[typeScale](components/typography/usage)** values in account.\n\n**Note:** If you choose a custom responsive size, you have to take care of your **semantic tag hierarchy**. It defaults to `h1` for every combination.\n\n<Playground :markup=\"customVariantMarkup\" :config=\"config\">\n <select v-model=\"customVariant\">\n    <option disabled>Select an custom variant</option>\n    <option value=\"{ base: 'small', l: 'medium' }\">Custom Breakpoints</option>\n    <option value=\"inherit\">Inherit</option>\n  </select>\n</Playground>\n\n---\n\n## Custom tag hierarchy\nIf a custom tag hierarchy is needed, **individual headline tags** can be set from `h1` to `h6` either by referencing the corresponding `tag` property or setting the HTML headline tags directly as slots. \n\n<Playground :markup=\"customTagHierarchy\" :config=\"config\"></Playground>\n\n---\n\n## Color\nA predefined default color associated with its theme is available but also inherit mode can be used to define a custom color.\n\n<Playground :markup=\"colorMarkup\" :config=\"config\">\n  <select v-model=\"color\">\n    <option disabled>Select a color</option>\n    <option value=\"default\">Default</option>\n    <option value=\"inherit\">Inherit</option>\n  </select>\n</Playground>\n\n---\n\n## Alignment\n\n<Playground :markup=\"alignment\" :config=\"config\">\n  <select v-model=\"align\">\n    <option disabled>Select an alignment</option>\n    <option value=\"left\">Left</option>\n    <option value=\"center\">Center</option>\n    <option value=\"right\">Right</option>\n  </select>\n</Playground>\n\n---\n\n## Ellipsis mode\nThis will force any text to never wrap into a new line and in case it's too long for a single line then dots (…) at the end are used to visualize it.\n\n<Playground :markup=\"ellipsisMode\" :config=\"config\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import {HEADLINE_VARIANTS} from './headline-utils';\n  \n  const sentence = 'The quick brown fox jumps over the lazy dog';\n  \n  @Component\n  export default class Code extends Vue {\n    config = { themeable: true };\n\n    customVariant = \"{ base: 'small', l: 'medium' }\";\n    color = 'default';\n    align = 'center';\n\n    variant = HEADLINE_VARIANTS.map((item) => `<p-headline variant=\"${item}\">${sentence}</p-headline>`).join('\\n');\n\n    get customVariantMarkup() {\n      const style = this.customVariant === 'inherit' ? ' style=\"font-size: 3.75rem;\"' : '';\n      return `<p-headline variant=\"${this.customVariant}\"${style}>${sentence}</p-headline>`;\n    }\n\n    customTagHierarchy =\n`<p-headline variant=\"headline-1\" tag=\"h3\">${sentence}</p-headline>\n<p-headline variant=\"headline-3\" tag=\"h1\">${sentence}</p-headline>\n<p-headline variant=\"headline-1\">\n  <h3>${sentence}</h3>\n</p-headline>\n<p-headline variant=\"headline-3\">\n  <h1>${sentence}</h1>\n</p-headline>`;\n\n    get colorMarkup() {\n      const style = this.color === 'inherit' ? ' style=\"color: deeppink;\"' : '';\n      return `<p-headline variant=\"headline-3\" color=\"${this.color}\"${style}>${sentence}</p-headline>`\n    }\n \n    get alignment() {\n      return `<p-headline variant=\"headline-3\" align=\"${this.align}\">${sentence}</p-headline>`;\n    }\n    \n    ellipsisMode =\n`<p-headline variant=\"headline-3\" ellipsis=\"true\">Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.</p-headline>`;\n  }\n</script>",
      "Usage": "# Typography\n\n## Principles\n\nFor Porsche web applications, good typography is…\n\n### … functional.\nUse typography to provide clear hierarchy, to organize content and to guide the user through the digital product journey.\n\n### … clear.\nUse typography to provide both efficiency and, from a more visual point of view, support for a clear and modern \nlook and feel of the Porsche application.\n\n### … readable.\nNever use typography by the sake of itself or as \"eye candy\". It should always support the usability of \na website by making text readable due to a good text color contrast and sufficient text sizes.\n\n### … purposeful.\nUse typography wisely and always keep an eye on the user's needs and the purpose of the content you want to communicate.\n\n### … a matter of course.\nAlways use typography in a professional manner in order to support the exclusiveness and high-quality-standard of the brand.\nThis not only means to make use of the pre-defined type styles provided in the Porsche Design System, but also to follow the general rules\nof good (micro) typography, such as using the right kind of apostrophes in the respective language. \n\n---\n\n## Porsche Next\n\nThe special Porsche feeling and the high recognisability across different touchpoints is decisively shaped by the use of the corporate typeface Porsche Next, which has been exclusively designed for Porsche. Therefore it is the only typeface allowed to be used for Porsche in both print and digital media.\n\nFormally, the impression of the Porsche Next is largely determined by the visual character of the \"squircle\", a combination of square and circle, which is reflected in the curves and circular shapes of the typeface.\n\n![Porsche Next Squircles](./assets/typography-squircle.png)\n\n### Download\n\nYou can download the [Porsche Next font here](https://cdn.ui.porsche.com/porsche-design-system/font/v1/Porsche_Next_WebOTF_Lat-Gr-Cyr.zip).\n\n---\n\n## Types\n\nTo ensure a seamless UX in all Porsche web applications it is recommended to use the Typography as follows\n\n| Type | Usage |\n|----|----|\n| Copytext | The copytext (text small) are typically to be used for long-form writing. The copy text x-small is only recommended for additional, low-informative text such as disclaimers or captions. |\n| Headline | The Porsche headline should only be used for first-level headlines whose function is to lead a page, section or content area. For Porsche headlines styles, only semibold weight is used to provide a good readability and making it as easy as possible to focus on the content sections of a page. |\n| Additional text | For short text parts that are not explicitly a page or section headline, but need a bit more focus or should be displayed larger due to aesthetic purpose, you can stick to the additional sizes provided in the Porsche Design System. |\n\n\n## Behavior\n\n### Type scale\nAdditional text sizes can be defined based on the Porsche type scale system. \n\n<p-text size=\"x-small\" tag=\"span\" color=\"inherit\" class=\"type-scale highlight\">12</p-text>\n<p-text tag=\"span\" color=\"inherit\" class=\"type-scale highlight\">16</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-18\">18</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-20\">20</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-22\">22</p-text>\n<p-text size=\"medium\" tag=\"span\" color=\"inherit\" class=\"type-scale highlight\">24</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-28\">28</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-30\">30</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-32\">32</p-text>\n<p-text size=\"large\" tag=\"span\" color=\"inherit\" class=\"type-scale highlight\">36</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-42\">42</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-44\">44</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-48\">48</p-text>\n<p-text size=\"x-large\" tag=\"span\" color=\"inherit\" class=\"type-scale highlight\">52</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-60\">60</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-62\">62</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-72\">72</p-text>\n<p-text size=\"inherit\" tag=\"span\" class=\"type-scale f-84\">84</p-text>\n\n\n### Type Scale Calculator\n  \nEnter a font-size in px unit based on Porsche Type Scale.  \n<input type=\"number\" v-model=\"size\" />\n\n```\n{{this.typeScale(size +'px')}}\n```\n\n**Example Text**\n<p-text size=\"inherit\" :style=\"typeScale(size +'px', false)\">The quick brown fox jumps over the lazy dog</p-text>\n\n\n### Fallback fonts\n\nIf in some cases the `Porsche Next` web font can't be rendered by the browser (e.g. due to download errors or not containing needed unicode character) you have to provide fallback fonts which must be stacked like this: \n1. Porsche Next\n2. Arial Narrow\n3. Arial\n4. Heiti SC\n5. SimHei\n6. sans-serif\n\n### Latin, Greek & Coptic, Cyril\n\nThe `Porsche Next` web font contains all typeface characters required for Latin, Greek and Cyrillic languages.\nArabic, Pashtu, Persian and Urdu are not yet supported by the Porsche Design System but available as separate typeface packages on request.\n\n#### Chinese / Japanese\n\nFor Chinese and Japanese charset the `Heiti SC` (iOS/macOS) and `SimHei` (Windows) pre-installed OS font must be used, sticking to the default Porsche font scaling system.\n\n#### Korean\n\nFor Korean charset some pre-installed OS font shall be used, sticking to the default Porsche font scaling system.\n\n---\n\n## Usage\n\n### Applying headline styles\n\nDepending on your layout, you don't necessarily have to start with headline 1. Also, it is possible to skip headline sizes whenever it serves the information structure.\nIt is much more important to keep an eye on a homogeneous use of text sizes within one application.\nAlso, please note that the headline class namings don't necessarily refer to the HTML font tags. For example the style headline 1 can also technically be implemented as `<h2>`.\n\n### Line height\n\nFor reasons of legibility, the line height should always be adjusted to the respective text size. The text styles provided work with a 4 px baseline unit that fits to the [8 px spacing system](components/spacing) in order to follow a harmonious overall vertical rhythm.\n\n### Headline-subline combinations\n\nA first-level headline can be supplemented by a corresponding subline. Sublines must be set in Regular using an \"additional sizes\" class with minimum 16px size.\n\n| Headline size    | Subline size                                      |\n|------------------|-------------------------------------------------  |\n| 16-18 px         | 16 px                                             |\n| 20-42 px         | Min. 2 sizes smaller (see Porsche type scale)     |\n| 44 px or larger  | Min. 4 sizes smaller (see Porsche type scale)     |\n\nExamples:\n\n![Headline-subline combinations](./assets/typography-headline-subline.png)\n\n### Headline\n\nThe headline styles span from large title, that can be used optionally and only once per page, to headlines 1 to 5 that can be used multiple times.\nIn the exceptional case that the headline 1 to 5 does not meet the requirements, there is the possibility to generate a new size. Observe the correct line height and the semibold typeface.\n\n### Weights\n\nThe Porsche Next is available in different font weights that enable to add emphasis and create a visual content hierarchy.\nFor digital applications, we recommend only to use semibold, regular and thin:\n\n- **Porsche Next Semibold** for first-level headlines.\n- **Porsche Next Bold** for copytext highlights.\n- **Porsche Next Regular** for copytext, stand-alone text or sublines (in combination with first-level headlines).\n- **Porsche Next Thin** for stand-alone text larger than 20px.\n\n<p-text size=\"x-large\" weight=\"thin\">Porsche Next Thin</p-text>\n<p-text size=\"x-large\">Porsche Next Regular</p-text>\n<p-headline variant=\"headline-1\">Porsche Next Semibold</p-headline>\n<p-text size=\"x-large\" weight=\"bold\">Porsche Next Bold</p-text>\n\n### Alignment\n\nPer default, the Porsche Next is always used left-aligned. In individual cases or certain components it can also be used centered,\nbut keep in mind to not exceed 3 text lines, as it is much harder to read. Right-aligned text is also possible in exceptional\ncases, for example in tables where right-aligned numbers should support readability.\n\nPlease avoid…\n\n- … using the font in block typesetting, as this does not correspond with the high-quality brand image.\n- … mixing up different text alignments within one paragraph. Keep it straight and simple.\n\n### Line length\n\nThe longer a text line gets, the harder it is for the user to jump from the end of the current line to the beginning of the next line. Therefore we should always aim at a line length that supports good readability.\n\nFor UI applications it is recommended to use [no more than 80 characters or glyphs per line](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-visual-presentation.html). This might differ a bit depending on the respective line height and viewport size and results in different pixel widths depending on the Porsche type class in use:\n\n- Copytext X-Small (12 px): max. 400-450 px\n- Copytext Small (16 px): max. 500-550 px\n- Headlines and additional sizes (20-84 px): max. 700 up to max. 2700 px\n\n\n### Multi-column text\n\nGenerally, text paragraphs should be set as single column. Multi-column text should never exceed 3 columns and is only allowed when it can be ensured that all text columns are in the visible viewport range (\"above the fold\"). The user should not have to scroll before being able\nto read the full content.\n\n### Paragraph spacing\n\nThe vertical spacing between copytext paragraphs should be at least 24px, which equals the space of one line of text in-between.\n\n![Copytext paragraph spacing](./assets/typography-paragraph-spacing.png)\n\n\n### Upper case\nThe usage of upper case text is possible, but should be handled with care, as upper case text is always a matter of readability.\nUpper case text should only be used for:\n\n- Exceptional, one-of-a-kind design cases like standing-out parts of a (graphical) composition or in sole design elements like a tag cloud.\n- Special components for which readability is generally not critical (such as short tags).\n- Proper names such as GTS or BOSE.\n\n![Example for uppercase text](./assets/typography-uppercase.png)\n\n\n---\n\n## Accessibility\nAs we stick to the common [WCAG 2.1 Standard](https://www.w3.org/WAI/standards-guidelines/wcag/new-in-21/),\nyou should always ensure a sufficient contrast ratio when designing with text. \nThe combination of text and background color should pass the WCAG AA standard \nand have a contrast ratio of at least 4.5:1 for standard text size and 3:1 \nfor larger text sizes. \n\n\n\nAlso, you should not rely on color only to convey information. \nWhen communicating element states with text (for example a password validation \ninformation in forms), make sure to always use additional text stylings to make it easy for visually impaired people to recognise\nstatus information even if they can’t see the color – this is of even higher\nimportance the more critical the information is.\n\n---\n\n## Do's & Don'ts\n\n### Text modifications\n\nPlease avoid to transform the Porsche Next manually (e.g. within Sketch or via CSS), as this would have a big and undesirable\nimpact on the origin character of the company typeface. This includes:\n\n- No change of letter-spacing.\n- No use of (drop) shadows on text.\n- No formal change of letters (for example distortion).\n- No use of outline borders on text.\n- No use of opacity for text colors.\n  \n![Example for uppercase text](./assets/typography-donts.png)\n\n<style lang=\"scss\" scoped>\n  @import '~@porsche-design-system/utilities/scss';\n  \n  .type-scale {\n    display: inline-block;\n    margin-right: 1rem;\n    \n    &.highlight {\n      color: #00D5B9;\n    }\n    \n    &.f-18 {\n      @include p-generate-type-scale(18px);\n    }\n    \n    &.f-20 {\n      @include p-generate-type-scale(20px);\n    }\n    \n    &.f-22 {\n      @include p-generate-type-scale(22px);\n    }\n    \n    &.f-28 {\n      @include p-generate-type-scale(28px);\n    }\n    \n    &.f-30 {\n      @include p-generate-type-scale(30px);\n    }\n    \n    &.f-32 {\n      @include p-generate-type-scale(32px);\n    }\n    \n    &.f-42 {\n      @include p-generate-type-scale(42px);\n    }\n    \n    &.f-44 {\n      @include p-generate-type-scale(44px);\n    }\n    \n    &.f-48 {\n      @include p-generate-type-scale(48px);\n    }\n    \n    &.f-60 {\n      @include p-generate-type-scale(60px);\n    }\n    \n    &.f-62 {\n      @include p-generate-type-scale(62px);\n    }\n    \n    &.f-72 {\n      @include p-generate-type-scale(72px);\n    }\n    \n    &.f-84 {\n      @include p-generate-type-scale(84px);\n    }\n  }\n</style>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { calculateLineHeight } from '@porsche-design-system/utilities';\n  \n  @Component\n  export default class PlaygroundTypography extends Vue {\n    public size: string = '16';\n    public typeScale(fontSize: string, comment: boolean = true): string {\n      const fittedLineHeightFactor = calculateLineHeight(fontSize);\n      const fittedLineHeightPx = Math.round(fontSize.slice(0, -2) * fittedLineHeightFactor);\n      const fontSizeRem = fontSize.slice(0, -2) / 16;\n      \n      if (comment) {\n        return \"font-size: \"+ fontSizeRem +\"rem; // \"+ fontSize +\"\\nline-height: \"+ fittedLineHeightFactor +\"; // \"+ fittedLineHeightPx +\"px\";\n      }\n      \n      return \"font-size: \"+ fontSizeRem +\"rem; line-height: \"+ fittedLineHeightFactor +\";\";\n    }\n  }\n</script>\n",
      "Props": "# Typography\n\n## Headline\n\n### Properties\n\n<p style=\"max-width: 100%\">\n\n`type Variant = 'small' | 'medium' | 'x-small' | 'large' | 'x-large' | 'inherit'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property   | Attribute  | Description                                                                                      | Type| Default        |\n| ---------- | ---------- | ------------------------------------------------------------------------------------------------ || -------------- |\n| `align`    | `align`    | Text alignment of the component.                                                                 | `'center'` <br>` 'left'` <br>` 'right'`| `'left'`       |\n| `color`    | `color`    | Basic text color variations depending on theme property.                                         | `'default'` <br>` 'inherit'`| `'default'`    |\n| `ellipsis` | `ellipsis` | Adds an ellipsis to a single line of text if it overflows.                                       | `boolean`| `false`        |\n| `tag`      | `tag`      | Sets a custom HTML tag depending of the usage of the headline component.                         | `'h1'` <br>` 'h2'` <br>` 'h3'` <br>` 'h4'` <br>` 'h5'` <br>` 'h6'`| `undefined`    |\n| `theme`    | `theme`    | Adapts the text color depending on the theme. Has no effect when 'inherit' is set as color prop. | `'dark'` <br>` 'light'`| `'light'`      |\n| `variant`  | `variant`  | Predefined style of the headline.                                                                | `'small'` <br>` 'medium'` <br>` 'x-small'` <br>` 'large'` <br>` 'x-large'` <br>` 'inherit'` <br>` BreakpointCustomizable<Variant>` | `'headline-1'` |\n\n## Text\n\n### Properties\n\n<p style=\"max-width: 100%\">\n\n`type Size = 'small' | 'medium' | 'x-small' | 'large' | 'x-large' | 'inherit'`  \n`type BreakpointCustomizable<T> = { base: T; xs?: T; s?: T; m?: T; l?: T; xl?: T; }`\n\n</p>\n\n| Property   | Attribute  | Description                                                                                                                                                   | Type| Default     |\n| ---------- | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- || ----------- |\n| `align`    | `align`    | Text alignment of the component.                                                                                                                              | `'center'` <br>` 'left'` <br>` 'right'`| `'left'`    |\n| `color`    | `color`    | Basic text color variations depending on theme property.                                                                                                      | `'brand'` <br>` 'default'` <br>` 'inherit'` <br>` 'neutral-contrast-high'` <br>` 'neutral-contrast-low'` <br>` 'neutral-contrast-medium'` <br>` 'notification-error'` <br>` 'notification-neutral'` <br>` 'notification-success'` <br>` 'notification-warning'`                                                                                                                                                                                                                                                                                                                                               | `'default'` |\n| `ellipsis` | `ellipsis` | Adds an ellipsis to a single line of text if it overflows.                                                                                                    | `boolean`| `false`     |\n| `size`     | `size`     | Size of the text. Also defines the size for specific breakpoints, like {base: 'small', l: 'medium'}. You always need to provide a base value when doing this. | `'small'` <br>` 'medium'` <br>` 'x-small'` <br>` 'large'` <br>` 'x-large'` <br>` 'inherit'` <br>` BreakpointCustomizable<Size>` | `'small'`   |\n| `tag`      | `tag`      | Sets a custom HTML tag depending of the usage of the text component.                                                                                          | `'address'` <br>` 'blockquote'` <br>` 'cite'` <br>` 'div'` <br>` 'figcaption'` <br>` 'legend'` <br>` 'p'` <br>` 'span'` <br>` 'time'`                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | `'p'`       |\n| `theme`    | `theme`    | Adapts the text color depending on the theme. Has no effect when 'inherit' is set as color prop.                                                              | `'dark'` <br>` 'light'`| `'light'`   |\n| `weight`   | `weight`   | The weight of the text.                                                                                                                                       | `'bold'` <br>` 'regular'` <br>` 'semibold'` <br>` 'thin'`| `'regular'` |\n"
    }
  },
  "Help": {
    "Support": "# Support\n\nTo drive continuous communication within the community of users, contributors and the Porsche Design System team, specific use-case-related communication channels and methods are provided.\n\n## Website as an information hub\nThis website offers a comprehensive overview of all relevant information and guidelines, such as usable components with their corresponding guidelines. Before using other channels, the website content should be read completely.\n\n## Personal communication via Slack and mail\nWe use Slack for public discussions and questions, that can be read and answered by the whole community and the Porsche Design System team. The Porsche Design System is hosting the channel [#tool-porsche-design-system](https://porschedev.slack.com/app_redirect?channel=tool-porsche-design-system) in the workspace of porschedev.slack.com. Also, messages to designsystem@porsche.de will be answered by the team as quickly as possible.\n\n## Get notifications per mail\nLet us notify you whenever there is relevant news for you regarding Porsche Design System or general design topics. We will use your account registration for sending mails. If you are not yet registered, please sign up via [Start Designing](start-designing/introduction) or [Start Coding](start-coding/introduction)\n\n## Bug, issue and contribution management at GitHub\nBug reports or feature requests can be forwarded to the Porsche Design System team by creating issues in the [public Porsche Design System GitHub repository](https://github.com/porscheui/porsche-ui-contribution). If you want to contribute solutions or fixes, you can create pull requests in the [private Porsche Design System repository](https://github.com/porscheui/porsche-design-system) after you have been granted access.",
    "Faq": "# Faq\n\nTo answer the most frequently asked questions the following list is constantly updated. Please read through before using the support and communication channels for questions. **Still missing anything? [We are happy to hear from you!](help/support)**\n\n## Who develops the Porsche Design System?\nThe Porsche Design System is developed and maintained centrally by a designated team from Porsche AG in Germany. In an open community, everyone is encouraged to participate and contribute to the Porsche Design System and give feedback at any time.\n\n## How can I get in contact with the Porsche Design System team?\nWe want to enable continuous communication within the community. Therefore we offer different use-case-related communication channels to get in contact or ask for support or submit support requests. You can find all of them [in the support section](help/support).\n\n## How can I access the Porsche Design System files?\n**Developer**  \nThe source code of the Porsche Design System is stored and developed within a private GitHub repository and distributed via a private NPM registry. Both managed by the Porsche Design System team. If you are not yet registered, please sign up via [Start Coding](start-coding/introduction).\n\n**Designer**  \nThe Porsche Design System Sketch library is created and maintained within a private Abstract project. If you are not yet registered, please sign up via [Start Designing](start-designing/introduction).\n\n## What is the release strategy and how are the issues prioritized?\nAll versioned releases of the Porsche Design System combine both design and code. All changes are based on the overall business goals and the actual needs of the teams. The upcoming release content is accessible in the [quarterly roadmap](news/roadmap). The roadmap is not a delivery commitment and may be changed based on upcoming needs, feedback and associated requirements.\n\n## What happens with contents marked as deprecated?\nPlease take a look at our [versioning and release strategy](news/versioning).\n\n## How to handle older versions?\nIf you are still running older versions (e.g. `@porsche/ui-kit-core`–`v0` or `@porsche/ui-kit-react`–`v0`), we highly recommend updating to the latest Porsche Design System release if possible. If you have to stick to `v0` components because they do not exist in the new version, you can include both libraries in parallel.\n\nIf using both libraries in parallel, only use one component of the same type, e.g. do not use `button`-component of `v0` and `v1` in parallel, which could cause design inconsistencies and performance issues.\n\n## How do I submit bug reports or feature requests and how are they handled?\nOnce you find a reproducible bug, you can either [open an issue](https://github.com/porscheui/porsche-ui-contribution/issues/new/choose) in the [public-contribution GitHub repository](https://github.com/porscheui/porsche-ui-contribution) or directly submit a fix as a pull request within the [private Porsche Design System](https://github.com/porscheui/porsche-design-system). We will address and respond to new bug reports as soon as possible, usually within a few days. Bugs should be fixed within one sprint depending on current capacity planning. The best approach for urgent bugs is to fix them locally within your project and submit the fix or create a PR afterwards.",
    "Troubleshooting": "# Troubleshooting\n\nIf you experience any problems with the Porsche Design System, it's always a good idea to check here\nfirst, if there is a known solution for it.\n\n## Components are not working in IE11\n1. With old New Relic snippets, there might be incompatibilities with the loaded polyfills. This might break the components in IE11. Please try to update your New Relic snippet to the latest version.\n1. There might be polyfill conflicts with other libraries that you use. Please check if there are any libs that load polyfills, especially ones that provide web components. For example if the widely used [`document-register-element`](https://github.com/WebReflection/document-register-element) polyfill is loaded in parallel to the Porsche Design System or other Stencil based libraries, Stencil will fail to load. Be sure to use the polyfills that Stencil provides and don't load the ones from other libraries, or load Stencil compatible polyfills before the other libraries are loaded.\n",
    "Browser Compatibility": "# Browser Compatibility\n\nAt Porsche we want the best performance, security and modern feature opportunities for our applications and users. Therefore we follow the release cycles of the global browser providers and continuously measure our browser & platform usage share of all Porsche applications ([view data](https://datastudio.google.com/open/1kMBbEg9F79q_QOg2zFtz52I_S85Fy47b)).\n\nTo ensure visual and functional compatibility, we do automatic and manual testing for the defined set of browsers and versions. If a browser is not listed on this page we don’t test it, provide assistance or fix bugs for it.\n\n## Supported Browsers & Platforms\n\nWe support the **following Browsers in the latest stable and deprecated predecessor version**:\n\n- **Google Chrome** on Windows and macOS, Android and iOS ([see version history](https://en.wikipedia.org/wiki/Google_Chrome_version_history))\n- **Microsoft Edge Chromium** on Windows ([see version history](https://en.wikipedia.org/wiki/Microsoft_Edge#Release_history))\n- **Mozilla Firefox** on Windows and macOS ([see version history](https://en.wikipedia.org/wiki/Firefox_version_history))\n- **Apple Safari** on macOS and iOS ([see version history](https://en.wikipedia.org/wiki/Safari_version_history#Safari_13))\n\n<p-text size=\"x-small\">Chromium is the basis of Microsoft Edge since 79.0, Android Webview since 33.0 and of Samsung Internet since 11.0. <br/>We want to support the deprecated predecessor version, to bridge the temporal updating period of the users.</p-text>\n\n## End of support for IE 11 and EdgeHTML\n\nPorsche decided to **end the support for Microsoft Internet Explorer 11 and EdgeHTML**.\n\nThe **Porsche Design System v1.x** is the last major version to support Microsoft Internet Explorer 11 and EdgeHTML. New features introduced starting with the Porsche Design System v2.x are only compatible and tested with the listed browsers and only bugs specific to them will be fixed.\n\n### Why do we stop the support?\n\nTo empower the opportunities of modern web standards including our technical foundation of using web components (Custom Elements, Shadow DOM, CSS Variables), and to deliver the best possible user experience, performance and stability. Also, the share of IE11 and EdgeHTML users is the significant minority of our total users. Thus, we don't want to impair the experience for the vast majority.\n\nIn 2015 Microsoft released Edge to supersede Internet Explorer, pre-installed on Windows 10 and also [recommended by Microsoft to be used as default browser](https://docs.microsoft.com/de-de/lifecycle/faq/internet-explorer-microsoft-edge). Since 2020 the new Microsoft Edge versions are based on Chromium, available for all operating systems. Thus, both IE11 and Microsoft Edge 18 are outdated browsers.\n\n### Can users still access our applications?\n\nWindows, macOS, iOS and Android have at least one supported browser pre-installed. In most cases continuously or at least frequently updated to the latest version. If a user runs into problems using your site with a not-supported browser, they can easily open it with a different browser.\n\n**In order to guide the users and avoid dead-ends, we created an easy-to-use Browser Notification snippet, that should be implemented in all applications using the Porsche Design System.**\n\n### Browser Notification\n\nTo help inform the user about the **end of support of Microsoft Internet Explorer 11 and EdgeHTML** we provide a **Browser Notification Banner** and **Overlay** in form of a npm package `@porsche-design-system/browser-notification`.\n\n#### Install\n\nIt's necessary to have access to the Porsche Design System private npm registry to be able to install the `@porsche-design-system/browser-notification` npm package. If you don't have an account yet, please first [read more about getting started as developer](start-coding/introduction).\n\n```\n// install with npm:\nnpm install @porsche-design-system/browser-notification\n\n// install with yarn:\nyarn add @porsche-design-system/browser-notification\n```\n\n#### Usage\n\nWe provide two notifications variants to show the user the corresponding information in regard to its used browser.\n\nInclude the **Browser Notification** into your project by importing and calling the provided `includeBanner()` or `includeOverlay()` function within your `index.html` just before the closing `</body>` tag (requires a bundler like Webpack, Rollup or a small Node JS script). This adds a `<script>` tag with pre-defined browser- and feature detection pointing to the corresponding browser notification JS snippet hosted on a CDN.\n\n##### Banner notification\n\nThe **Banner** variant is meant to inform the user if they access the application with a browser which doesn't get full support by the application. The banner is placed above the page and can be closed by the user.\n\nIntegration through `includeBanner()` partial.\n\n| Browser Detection           | Initialized |\n| --------------------------- | ----------- |\n| **MS Edge(HTML) <= 18**     | ✓           |\n| **IE <= 11**                | ✓           |\n| **Microsoft Edge Chromium** | ✗           |\n\n##### Overlay notification\n\nThe **Overlay** variant is meant to inform the user when they access the application if their browser doesn't support **custom elements** \nor browser technologies like [**IntersectionObserver**](https://caniuse.com/?search=intersectionobserver) and [**MutationObserver**](https://caniuse.com/?search=mutationobserver) which are required to render the Porsche Design System components. \nThe overlay is placed above the page, covers it completely and can't be closed or removed by the user.\n\nIntegration through `includeOverlay()` partial.\n\n| Feature Detection                                                                               | Initialized |\n| ------------------------------------------------------------------------------------------------| ----------- |\n| **Custom elements != true**                                                                     | ✓           |\n| **IntersectionObserver != true**                                                                | ✓           |\n| **MutationObserver != true**                                                                    | ✓           |\n| **Custom elements && IntersectionObserver && MutationObserver**                                 | ✗           |\n\n##### React / Vue JS\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Some title</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n\n    <!-- inline version of the banner or overlay init script -->\n    <%= require('@porsche-design-system/browser-notification').includeBanner() %>\n    <%= require('@porsche-design-system/browser-notification').includeOverlay() %>\n  </body>\n</html>\n```\n\n##### Angular / Vanilla JS\n\n```\n// index.html\n<body>\n  <!--PLACEHOLDER-->\n</body>\n\n// package.json\n\"scripts\": {\n  \"banner\": \"partial=$(node -e 'console.log(require(\\\"@porsche-design-system/browser-notification\\\").includeBanner().replace((\\\\\\\\[bd\\\\/]|&)/g, \\\"\\\\\\\\$1\\\"))') && regex='<!--PLACEHOLDER-->|<script>.*browser-notification.*<\\\\/script>' && sed -i'' -E -e \\\"s@$regex@$partial@\\\" index.html\",\n  \"overlay\": \"partial=$(node -e 'console.log(require(\\\"@porsche-design-system/browser-notification\\\").includeOverlay().replace((\\\\\\\\[bd\\\\/]|&)/g, \\\"\\\\\\\\$1\\\"))') && regex='<!--PLACEHOLDER-->|<script>.*browser-notification.*<\\\\/script>' && sed -i'' -E -e \\\"s@$regex@$partial@\\\" index.html\"\n}\n```\n\n#### Translations\n\nAutomatic translations for the following languages are provided:  \n`'de' | 'ru' | 'fr' | 'en' | 'it' | 'pt' | 'es' | 'ja' | 'ko' | 'zh' | 'nl' | 'pl' | 'cs' | 'da' | 'et' | 'fi' | 'lt' | 'lv' | 'no' | 'sl' | 'sv' | 'tr' | 'uk'`\n\nThe **Browser Notification** is looking once as soon as the script initializes for the obligatory `lang` attribute defined in the `html` tag. Support is given for the following formats, e.g.:\n\n- `lang=\"en\"`\n- `lang=\"en_US\"`\n- `lang=\"en-US\"`\n\nIf none of these languages can be found, it will fall back to `en`.\n\n#### Troubleshooting\n\nThere always might be a case where something goes wrong. Here are some possible answers:\n\n1. **Q:** Why does the translation not get recognized automatically?  \n   **A:** Mostly this is a result of false order of script loading and setting translation key by the application. It's required that the `lang` attribute in the `html` tag is defined with the correct value before the **Browser Notification** script gets initialized.  \n   **A:** The translation key is not part of the provided keys (see \"Translations\")  \n   **A:** The translation key has not the correct format (see \"Translations\")\n2. **Q:** Why are there no implementation guidelines for my JS framework?  \n   **A:** Implementing a third party script can be done in many ways regarding the setup of your application. So there isn't a solely true way to integrate it in a specific framework. Just one rule of thumb: **It should be initialized as late as possible.**\n"
  },
  "Accessibility": {
    "Introduction": "# Introduction\n\n## The \"What\"\nWhen we say a site is accessible we mean that the site's content is available to, and its functionality can be operated by, literally anyone (this includes non-human visitors to your site, e.g. search engine robots too).\nFor developers/designers, it's easy for them to assume that all users can see and use a keyboard, mouse or touch screen, and can interact with the page content the same way they do. \nThis can lead to an experience that works well for those people but creates issues which range from simple annoyances to show-stoppers.\n\nAccessibility relates to the experience of users who might be outside of the narrow range of the \"typical\" user, and who might access or interact with things differently than you expect. \nSpecifically, it concerns users experiencing some type of impairment or disability – and bear in mind that such an experience might be non-physical or temporary.\n\nFor example, although we tend to centre our discussion of accessibility on users with physical impairments, we can all relate to the experience of using an interface that is not accessible to us for other reasons. \nHave you ever had a problem using a desktop site on a mobile phone, or seen the message \"This content is not available in your area\", or couldn't read a text because the font-size and contrast were to low? Those are all accessibility issues we have to face and find practical solutions.\n\n## The \"Why\"\nAs maintainers of the Porsche Design System, we always want the best experience for all users. You might argue that, as an OEM in the automotive sector, we do not need to give support to visually impaired people. But this is a very short-sighted point of view.\nJust think about all the services Porsche wants to offer around the car that has nothing to do with driving itself. Or think about people which have a \"simple\" red-green color blindness (about 10% of all humans). \nOr what about the average age of the target audience of Porsche customers? It's an average of 55 years! As you can see, Web Accessibility is for all users, not just blind people.\n\nAnd last but not least Porsche as a global company needs to support Web Accessibility by law.  \n[Read more about this topic on our Compliance page.](accessibility/compliance)\n\n## The \"How\"\nAt Porsche we are driven by excellence and we have the approach to deliver highly usable and accessible components that are not limited to certain users or use cases. They should work everywhere and for everyone! \nThat's why we develop and offer high-quality, standardized and accessible components for all possible environments and use cases which are compliant with and tested against the most important official ruleset of [WCAG 2.1 (AA)](https://www.w3.org/TR/WCAG21/).\n\nTo avoid possible [**violations against country-specific law**](accessibility/compliance) (e.g. ADA in the U.S.) we highly recommend following our guidelines to gather more accessibility in your projects.\n\nTo integrate accessibility into your product workflow, follow these guidelines:\n\n<p-link href=\"accessibility/workflow\">The Accessibility Workflow</p-link>\n",
    "Compliance": "# Compliance\n\n## Accessibility and the law\nIn most countries there are certain laws to protect the civil rights of persons with disabilities. \nDue to the fact that the internet provides global access to information, stores, education, financial institutions, etc., these laws often include the support of Web Accessibility in web applications.\n\nIn some countries (especially in the U.S.) website owners are **going to get sued** by lawyers which complain about the lack of (basic) accessibility support. \nThere are a lot of [country specific standards](https://www.w3.org/WAI/policies/) and legislation which cannot be covered by only one ruleset mostly known as the Web Content Accessibility Guidelines [WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/) from the World Wide Web Consortium [W3C](https://www.w3.org/). \n\nBut we can **reduce risk of legal entanglement** (receiving demand letter/getting sued), by following our **[accessibility workflow](accessibility/workflow)**.\n\n--- \n\n## Regions/Countries and web accessibility standards\n\n### USA \n\n#### Americans with Disabilities Act (ADA)\nThe [Americans with Disabilities Act (ADA)](https://www.ada.gov/) is a federal statute and thus any lawsuits filed under The ADA go straight to U.S. District Court. \n\nRecently the number of ADA Website Compliance lawsuits has been increased immensely because claims are easy for plaintiffs to make – and they can be made from any state.\n\nTo make a Porsche web application accessibility conform with ADA's directives you have to follow the [WCAG 2.0 AA guidelines](https://www.w3.org/TR/WCAG20/) which can be seen as a basis of ADA.\n\n### Europe\n\n#### EU Web Accessibility Directive / European Accessibility Act\nThe [EU Web Accessibility Directive](https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=uriserv:OJ.L_.2016.327.01.0001.01.ENG), in force since 22 December 2016, will provide people with disabilities better access to the websites and mobile apps of public services.\n\nTo make a Porsche web application accessibility conform with the EU's directives, you have to follow the latest harmonized standard of [Accessibility requirements for ICT products and services](https://www.etsi.org/deliver/etsi_en/301500_301599/301549/02.01.02_60/en_301549v020102p.pdf) which are also based on the [WCAG 2.1 AA guidelines](https://www.w3.org/TR/WCAG21/).\n\n### Germany\n\n#### Barrier-Free Information Technology (BITV 2.0)\nThe [Barrier-Free Information Technology](https://www.gesetze-im-internet.de/bitv_2_0/index.html) law was updated in late 2019 and follows now mostly the [WCAG 2.1 guidelines](https://www.w3.org/TR/WCAG21/).\n\nAlthough the BITV guidelines apply only for public institutions it is always recommended and a future save practice to make your own application **WCAG 2.1** compliant and therefore less vulnerable against legal entanglement.\n\n### China\n\n#### Law on the Protection of Persons with Disabilities\nIn China, the old standard [Law on the Protection of Persons with Disabilities](http://www.cdpf.org.cn/english/Resources/lawsregulations/201603/t20160303_542879.shtml) of 2008 will be replaced in March 2020 by the new standard [Information Technology Requirements and Testing Methods for Accessibility of Web Content](https://www.w3.org/blog/2020/02/updated-chinese-accessibility-standard/), which is also based on the **WCAG 2.0**.\n\n--- \n\n## How to deal with accessibility and the law\nTo improve the support of accessibility in general, start by observing worldwide regulations (W3C), as individual countries tend to base their regulations on global agreements. \nTherefore the [Web Content Accessibility Guidelines 2.0 AA](https://www.w3.org/TR/WCAG20/) are a good starting point which can be augmented by [Article 9 on Accessibility](https://www.un.org/development/desa/disabilities/convention-on-the-rights-of-persons-with-disabilities/article-9-accessibility.html) from the Convention on the Rights of Persons with Disabilities (CRPD).\n\nBut as you might see, all these guidelines have one pitfall: they are very hard to read and difficult to interpret. Therefore we have developed a stepwise accessibility workflow which is the **most effective way to maximize compliance** and should help designers and developers to implement and support Web Accessibility in their applications.\n\n<p-link href=\"accessibility/workflow\">Web Accessibility Workflow</p-link>\n\n**But always keep in mind:** Accessibility is not the fulfilment of a fixed ruleset or following a bunch of technical requirements. Instead, it's more about a mindset which should be a fixed part at the beginning of a project and face every possible aspect like strategy, conception, ux, ui, design, development, performance, etc. \n\n--- \n\n### Further information\n* [The ADA Book](https://adabook.com/)\n* [Website Accessibility & the Law: Why Your Website Must Be Compliant](https://www.searchenginejournal.com/website-accessibility-law/285199)\n* [The International Accessibility Standards You Need to Follow](https://www.telerik.com/blogs/the-international-accessibility-standards-you-need-to-follow)\n* [THE EU Web Accessibility Directive](https://ec.europa.eu/digital-single-market/en/web-accessibility)\n* [Countries that Have Adopted WCAG Standards](https://www.3playmedia.com/2017/08/22/countries-that-have-adopted-wcag-standards-map/)\n",
    "Workflow": "# Workflow\n\n## The 5 principles for developing accessible digital products\n\n<p-tabs size=\"medium\">\n  <p-tabs-item label=\"1. Learn\">\n    <p-headline variant=\"headline-3\">What is web accessibility?</p-headline>\n    <p-text>\n      When websites and web tools are properly designed and coded, people with disabilities can use them. However, currently many sites and tools are developed with <strong>accessibility barriers</strong> that make them difficult or impossible for some people to use.\n      Integrating accessibility into websites brings broader benefits to organizations, website visitors and society. For example, easier code maintenance and better user experiences, particularly on mobile devices. <a href=\"https://www.w3.org/WAI/\">International web standards</a> define what is needed for accessibility.\n    </p-text>\n    <p-text>\n      The better you and your colleagues understand accessibility, the more effectively it can be implemented and promoted in your team.\n      Deepening your understanding of web accessibility helps you to address issues more effectively. Some sources for learning the basics include:\n    </p-text>\n    <p-text-list>\n      <p-text-list-item>\n        Research introductory articles and videos\n      </p-text-list-item>\n      <p-text-list-item>\n        Find training appropriate for your particular role\n      </p-text-list-item>\n      <p-text-list-item>\n        Seek information or training from accessibility and disability organizations\n      </p-text-list-item>\n      <p-text-list-item>\n        Set up assistive technology demonstrations and let people try them out\n      </p-text-list-item>\n    </p-text-list>\n    <p-text>\n      First-hand experience of how people with disabilities access web content is often enlightening and inspiring.\n      This can help you and others to understand the benefits and value of accessibility.\n    </p-text>\n    <p-headline variant=\"headline-3\">Start learning now!</p-headline>\n    <p-text>There are countless <strong>learning resources</strong> in the wild and it can be difficult to find the right one to get started even if you are searching for specific information regarding your role as Product Owner, Designer, Developer, Writer or Content Creator in a project.</p-text>\n    <p-text>The following is an incomplete list of starting points grouped by disciplines.</p-text>\n    <p-headline variant=\"headline-4\">Fundamentals for all</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        <a href=\"https://www.w3.org/WAI/fundamentals/\">Introduction to Web Accessibility</a> – Introduces Web Accessibility and links to additional resources.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://a11yresources.webflow.io/\">The A11y Resources</a> – A growing list of accessibility tools and resources.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://www.a11yproject.com/\">The A11y Project</a> – A community-driven effort to make digital accessibility easier.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://www.w3.org/WAI/people-use-web/\">How People with Disabilities Use the Web</a> – Explores the impact of accessible design with real-life examples.\n      </p-text-list-item>\n      <p-text-list-item>\n        Take part in the Porsche <strong>Accessibility Fundamentals Deep Dive</strong> sessions. \n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-4\">For Product Owners</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        <a href=\"https://www.w3.org/WAI/business-case/\">The Business Case for Digital Accessibility</a> – Examines the rationale for organizations to address accessibility.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://www.w3.org/WAI/policies/\">Web Accessibility Laws &amp;amp; Policies</a> – Governmental policies related to web accessibility.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://www.essentialaccessibility.com/blog/web-accessibility-lawsuits/\">Web Accessibility Lawsuits</a> – What’s the Current Landscape?\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-4\">For Developers</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        <a href=\"https://www.w3.org/WAI/tips/developing/\">Developing for Web Accessibility</a> – Basic considerations to help you get started developing accessible web content.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://www.udacity.com/course/web-accessibility--ud891\">Accessibility Fundamentals</a> – Free Online Course on Udacity from Google.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://egghead.io/courses/start-building-accessible-web-applications-today\">Start Building Accessible Web Applications Today</a> – Excellent series of video tutorials.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://dequeuniversity.com/resources/\">Accessibility Resources and Code Examples</a> – Curated list of helpful resources from Deque University.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://www.accessibility-developer-guide.com/\">The Accessibility Developer Guide</a> – Learn more about designing and implementing fully accessible websites.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree\">The Accessibility Tree</a> – learn the differences between the DOM tree and AOM tree.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://www.w3.org/WAI/standards-guidelines/aria/\">WAI-ARIA Overview</a> – Introduction to the Accessible Rich Internet Applications suite of web standards.\n      </p-text-list-item>\n      <p-text-list-item>\n        <strong>Advanced:</strong> <a href=\"https://wicg.github.io/aom/\">The Accessibility Object Model (AOM)</a> – JavaScript API to modify the accessibility tree for an HTML page.\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-4\">For UX Designers</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        <a href=\"https://www.w3.org/WAI/tips/designing/\">Designing for Web Accessibility</a> – Get started to make your user interface design and visual design more accessible.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://inclusive-components.design/\">Inclusive Components</a> – All about designing inclusive web interfaces, piece by piece.\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-4\">For Writers</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        <a href=\"https://www.w3.org/WAI/tips/writing/\">Writing for Web Accessibility</a> – Considerations to help you get started writing web content that is more accessible to people with disabilities.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://soap.stanford.edu/tips-and-tools/tips/writing-web-accessibility-mind\">Writing with Web Accessibility in Mind</a> – Guidance that makes writing on the web more accessible.\n      </p-text-list-item>\n    </p-text-list>\n  </p-tabs-item>\n  <p-tabs-item label=\"2. Setup\">\n    <p-headline variant=\"headline-3\">Integrate accessibility into your agile workflow</p-headline>\n    <p-text>If you know the basics and the importance of accessibility, start with <strong>setting up your team and environments</strong> to effectively implement accessibility improvements into your product.</p-text>\n    <p-headline variant=\"headline-4\">Team setup</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        In your team, designate a <strong>person responsible</strong> for accessibility.\n      </p-text-list-item>\n      <p-text-list-item>\n        Enable the team to <strong>improve their accessibility skills</strong> by giving them time and space to learn.\n      </p-text-list-item>\n      <p-text-list-item>\n        <strong>Accessibility is a mindset</strong> and should be observed by every discipline like UX, Development, Writing.\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-4\">Workflow setup</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        Encourage the team to <strong>account for accessibility</strong> in the earliest phases when creating and estimating stories.\n      </p-text-list-item>\n      <p-text-list-item>\n        Add accessibility support of <a href=\"https://www.w3.org/TR/WCAG21/\">WCAG 2.1 AA</a> as an<strong>acceptance criterion</strong>, a <strong>non-functional requirement</strong> or into your <strong>definition of done</strong> to be a basic condition for each story or new feature.\n      </p-text-list-item>\n      <p-text-list-item>\n        Add <strong>accessibility testing</strong> into each development sprint or QA check.\n      </p-text-list-item>\n      <p-text-list-item>\n        When a new accessibility issue arises that you may have missed, <strong>prioritize those issues</strong> appropriately against other development concerns.\n        Consider whether the error is critical, less critical, or minor:\n        <p-text-list>\n          <p-text-list-item>\n            Critical issues will cause serious problems and/or stop most users of assistive technology from using the site.\n          </p-text-list-item>\n          <p-text-list-item>\n            Less critical issues may cause problems or increased frustration for certain users.\n          </p-text-list-item>\n          <p-text-list-item>\n            Minor issues will cause problems or frustration for a small number of users.\n          </p-text-list-item>\n        </p-text-list>\n      </p-text-list-item>\n      <p-text-list-item>\n        Consider prioritizing the issue if it appears on high-touch pages, critical user paths, or site-wide templates.\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-4\">Technical setup</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        All of the members of the development team should be enabled to <strong>install and use the right accessibility tools</strong> like browser plugins, screen reader, contrast checker, etc.\n      </p-text-list-item>\n      <p-text-list-item>\n        Work with your front end developers to choose an <strong>automated testing plan</strong>.\n      </p-text-list-item>\n      <p-text-list-item>\n        Including automated accessibility testing throughout the development process can help quickly catch many accessibility errors, but can’t guarantee that your site is accessible. <strong>Always combine automated testing with ongoing manual testing</strong>.\n      </p-text-list-item>\n    </p-text-list>\n  </p-tabs-item>\n  <p-tabs-item label=\"3. Build\">\n    <p-headline variant=\"headline-3\">Building Accessible Software</p-headline>\n    <p-text>Building accessible software might be hard, especially if the user interface is complex comes with many interactions. Therefore it is substantial that every discipline is working together and sharing their findings with the whole team.</p-text>\n    <p-headline variant=\"headline-5\" tag=\"h4\">Level of Web Accessibility we need to support</p-headline>\n    <p-text>As a <strong>global acting company</strong> Porsche has to fulfill certain accessibility criteria which can be different from country to country. To grant a well balanced and global level of accessibility, we recommend making all web applications compliant with the <strong>Web Content Accessibility Guidelines 2.1</strong> <a href=\"https://www.w3.org/TR/WCAG21/\">WCAG-2.1</a> at <strong>level AA</strong>.</p-text>\n    <p-text>Do not expect that accessibility is a one time effort, it is more an iterative process of constantly learning, building, testing and hopefully improving accessibility in your product. Building accessible software has to be seen as a whole concept which concerns many disciplines:</p-text>\n    <p-headline variant=\"headline-4\">Design</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        Take people with diverse abilities into account while performing <strong>research activities</strong>, persona creation and user stories.\n      </p-text-list-item>\n      <p-text-list-item>\n        Make yourself firm with and design for every possible <strong>input device</strong> like keyboard, touch and screen reader.\n      </p-text-list-item>\n      <p-text-list-item>\n        <strong>Logically structure your designs</strong> and split the main page and content areas into smaller parts and name them accordingly (to the HTML specifications), like <strong>header, main, footer, nav, section, article, etc</strong>.\n      </p-text-list-item>\n      <p-text-list-item>\n        Always test your designs against possible <strong>contrast issues</strong> that might affect people with low vision.\n      </p-text-list-item>\n      <p-text-list-item>\n        Always provide <strong>visual support for certain states (like focus, hover, active, etc.)</strong> of trigger elements if available (e.g. links, buttons, forms, etc.). \n      </p-text-list-item>\n      <p-text-list-item>\n        Design for user interfaces that support a <strong>wide range of possible browser input devices</strong> (e.g. mouse, finger, pen, etc.).\n      </p-text-list-item>\n      <p-text-list-item>\n        Prevent <strong>flashing or moving content</strong> and time constraints of user interactions.\n      </p-text-list-item>\n      <p-text-list-item>\n        Follow <strong>inclusive design principles</strong> and make a rock-solid and consistent user interface. \n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-5\">Design Tools</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        <a href=\"https://www.getstark.co/\">Stark for Sketch</a> - Suite of tools to make software products more accessible and compliant.\n      </p-text-list-item>\n      <p-text-list-item><a href=\"https://superhighfives.com/pika\">Pika</a> - An open-source colour picker app for macOS.</p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl/related\">No Coffee Vision Simulator</a> - Chrome plugin to simulate slight to extreme vision problems.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://toolness.github.io/accessible-color-matrix/\">Color Palette Builder</a> - Online tool to build accessible color palettes.\n      </p-text-list-item>\n      <p-text-list-item>\n        <a href=\"https://contrast-grid.eightshapes.com/\">Contrast Grid</a> - Online tool to test foreground and background color combos.\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-4\">Develop</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        <strong>\"If it looks like a button and acts as a button, make it a button.\"</strong><br>\n        Start with <strong>valid HTML semantic</strong> and use the right HTML tags for the right purpose: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">HTML Element Reference Overview</a>.\n      </p-text-list-item>\n      <p-text-list-item>\n        Always take care of your <strong>document structure</strong> from top to bottom. Use the right headline tags without any logical breaks and add logical HTML region tags like header, main, footer.\n      </p-text-list-item>\n      <p-text-list-item>\n        Make yourself firm with <a href=\"https://www.w3.org/WAI/standards-guidelines/aria/\">ARIA</a> and check how to enhance accessibility with the right <strong>usage of ARIA roles and attributes</strong>.\n      </p-text-list-item>\n      <p-text-list-item>\n        Manually test as much as you can. Make <strong>small iterations</strong> of build - test - improve. Do not try to implement accessibility afterwards!\n      </p-text-list-item>\n      <p-text-list-item>\n        Add <strong>automatic accessibility testing</strong> to your build pipeline. \n      </p-text-list-item>\n      <p-text-list-item>\n        Keep attention while using <strong>3rd party software</strong>. This must also be accessibility compliant.\n      </p-text-list-item>\n      <p-text-list-item>\n        Use as many <strong>Porsche Design System components</strong> as possible. They are tested against accessibility compliance.\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-5\">Developer Tools</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        Web Developer Tools - Inspect and test your application with the Browser built-in developer and accessibility tools (Firefox and Chrome).\n      </p-text-list-item>\n      <p-text-list-item>\n        HTML Validator - Online tool to <a href=\"https://validator.w3.org/\">validate</a> your HTML code.\n      </p-text-list-item>\n      <p-text-list-item>\n        Accessibility Browser Plugins- Test your application with <a href=\"https://www.deque.com/axe/\">AXE</a> and <a href=\"https://wave.webaim.org/extension/\">WAVE</a> accessibility plugins.\n      </p-text-list-item>\n      <p-text-list-item>\n        Screen reader - Test your application with VoiceOver (on Mac), NVDA (PC) or Chromevox (Chrome Plugin).\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-5\">Support common keymap concepts</p-headline>\n    <p-text>The following table includes many of the most common online interactions, the standard keystrokes for the interaction, and additional information on things to consider during building usable interfaces:</p-text>\n    <table>\n      <thead>\n        <tr>\n          <th scope=\"col\">Interaction </th>\n          <th scope=\"col\">Keystrokes</th>\n          <th scope=\"col\">Notes</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Navigate to interactive elements</td>\n          <td><ul>\n            <li><span class=\"key\">Tab</span></li>\n            <li><span class=\"key\">Shift</span> + <span class=\"key\">Tab</span> - navigate backward</li>\n          </ul>\t\t\t</td>\n          <td>\n            <ul>\n              <li>Keyboard focus indicators must be present.</li>\n              <li>Navigation order should be logical and intuitive.</li>\n            </ul>\n          </td>\n        </tr>\n        <tr>\n          <td>Link</td>\n          <td><span class=\"key\">Enter</span> - activate the link</td>\n          <td></td>\n        </tr>\n        <tr>\n          <td>Button</td>\n          <td><span class=\"key\">Enter</span> or <span class=\"key\">Spacebar</span>  - activate the button</td>\n          <td>Ensure elements with ARIA <code>role=\"button\"</code> can be activated with both key commands.</td>\n        </tr>\n        <tr>\n          <td>Checkbox</td>\n          <td><span class=\"key\">Spacebar</span> - check/uncheck a checkbox</td>\n          <td>Checkboxes should be used when one or more option in a group can be selected.</td>\n        </tr>\n        <tr>\n          <td>Radio buttons</td>\n          <td>\n            <ul>\n              <li><span class=\"key\">↑</span>/<span class=\"key\">↓</span> or <span class=\"key\">←</span>/<span class=\"key\">→</span> - select an option. </li>\n              <li><span class=\"key\">Tab</span> - move to the next element.</li>\n            </ul>\n          </td>\n          <td>Radio buttons should be used when only one option from a group can be selected.</td>\n        </tr>\n        <tr>\n          <td>Select (dropdown) menu</td>\n          <td>\n            <ul>\n              <li><span class=\"key\">↑</span>/<span class=\"key\">↓</span> - navigate between menu options</li>\n              <li><span class=\"key\">Spacebar</span> - expand</li>\n            </ul>\n          </td>\n          <td>You can also filter or jump to options in the menu as you type letters.</td>\n        </tr>\n        <tr>\n          <td>Autocomplete</td>\n          <td>\n            <ul>\n              <li>Type to begin filtering</li>\n              <li><span class=\"key\">↑</span>/<span class=\"key\">↓</span> - navigate to an option</li>\n              <li><span class=\"key\">Enter</span> - select an option</li>\n            </ul>\n          </td>\n          <td></td>\n        </tr>\n        <tr>\n          <td>Dialog</td>\n          <td><span class=\"key\">Esc</span> - close</td>\n          <td>\n            <ul>\n              <li>Modal dialogs should maintain keyboard focus.</li>\n              <li>Non-modal dialogs should close automatically when they lose focus.</li>\n              <li>When a dialog closes, the focus should usually return to the element that opened the dialog.</li>\n            </ul>\n          </td>\n        </tr>\n        <tr>\n          <td>Slider</td>\n          <td>\n            <ul>\n              <li><span class=\"key\">↑</span>/<span class=\"key\">↓</span> or <span class=\"key\">←</span>/<span class=\"key\">→</span> - increase or decrease slider value</li>\n              <li><span class=\"key\">Home</span>/<span class=\"key\">End</span> - beginning or end</li>\n            </ul>\t\t\t\t\t\t\t\t\n          </td>\n          <td>\n            <ul>\n              <li>For double-headed sliders (to set a range), <span class=\"key\">Tab</span>/<span class=\"key\">Shift</span> + <span class=\"key\">Tab</span> should toggle between each end.</li>\n              <li>In some sliders, <span class=\"key\">PageUp</span>/<span class=\"key\">PageDown</span> can move by a larger increment (e.g., by 10%).</li>\n            </ul>\t\t\t\t\t\t\t\t\n          </td>\n        </tr>\n        <tr>\n          <td>Menu bar</td>\n          <td>\n            <ul>\n              <li><span class=\"key\">↑</span>/<span class=\"key\">↓</span> - Previous/next menu option</li>\n              <li><span class=\"key\">Enter</span> - expand the menu (optional) and select an option.</li>\n              <li><span class=\"key\">←</span>/<span class=\"key\">→</span> - expand/collapse submenu</li>\n            </ul>\n          </td>\n          <td>\n            <ul>\n              <li>A menu bar dynamically changes content within an application. Links that utilize <span class=\"key\">Tab</span>/<span class=\"key\">Enter</span> are NOT menu bars.</li>\n            </ul>\n          </td>\n        </tr>\n        <tr>\n          <td>Tab panel</td>\n          <td>\n            <ul>\n              <li><span class=\"key\">Tab</span> - once to navigate into the group of tabs and once to navigate out of the group of tabs</li>\n              <li><span class=\"key\">↑</span>/<span class=\"key\">↓</span> or <span class=\"key\">←</span>/<span class=\"key\">→</span> - choose and activate the previous/next tab.</li>\t\t\t\t\t\t\t\t\t\n            </ul>\n          </td>\n          <td>\n            <ul>\n              <li>This is for 'application' tabs that dynamically change content within the tab panel. If a menu looks like a group of tabs but is a group of links to different pages, <span class=\"key\">Tab</span> and <span class=\"key\">Enter</span> are more appropriate.</li>\n            </ul>\n          </td>\n        </tr>\n        <tr>\n          <td>'Tree' menu</td>\n          <td>\n            <ul>\n              <li><span class=\"key\">↑</span>/<span class=\"key\">↓</span> - Navigate Previous/next menu option</li>\n              <li><span class=\"key\">←</span>/<span class=\"key\">→</span> - expand/collapse submenu, move up/down one level.</li>\n            </ul>\n          </td>\n          <td></td>\n        </tr>\n        <tr>\t\t\t\t\t\t\n          <td>Scroll </td>\n          <td>\n            <ul>\n              <li><span class=\"key\">↑</span>/<span class=\"key\">↓</span> - scroll vertically</li>\n              <li><span class=\"key\">←</span>/<span class=\"key\">→</span> - scroll horizontally</li>\n              <li><span class=\"key\">Spacebar</span>/<span class=\"key\">Shift</span> + <span class=\"key\">Spacebar</span> - scroll by page</li>\n            </ul>\n          </td>\n          <td>\n            <p>The space bar will, by default, scroll the page is an interactive control that allows space bar input is not focused. Horizontal scrolling should be minimized.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <p-headline variant=\"headline-4\">Write</p-headline>\n    <p-text-list>\n      <p-text-list-item>\n        For every page define a unique and descriptive <strong>Page Title</strong>.\n      </p-text-list-item>\n      <p-text-list-item>\n        <strong>Structure contents</strong> in a clear, hierarchical and meaningful way.\n      </p-text-list-item>\n      <p-text-list-item>\n        Think and act <strong>from top to bottom and from left to right</strong> as that’s the way screen readers read content. Important information needs to be in front of the control element, e.g., label, additional information, tooltip link.\n      </p-text-list-item>\n      <p-text-list-item>\n        Take care that textual content is short, <strong>understandable</strong> and easy to read.\n      </p-text-list-item>\n      <p-text-list-item>\n        Prevent using <strong>acronyms</strong> and complex technical terms.\n      </p-text-list-item>\n      <p-text-list-item>\n         <strong>\"Design for the ears\"</strong>. Make sure that the context of your texts and interaction elements are clear, even if you won’t see the UI and images around. Name your buttons so that the action is clear to the user or they know exactly where they are going by clicking.\n      </p-text-list-item>\n      <p-text-list-item>\n        Provide <strong>textual alternatives</strong> to images, videos, charts and every content which transports meaning without text. Especially when they have a functionality, e.g., icons in a mobile interface.\n      </p-text-list-item>\n      <p-text-list-item>\n        Create an <strong>Accessibility Statement</strong> which should be a page of your application where the current state of accessibility is stated.\n      </p-text-list-item>\n    </p-text-list>\n  </p-tabs-item>\n  <p-tabs-item label=\"4. Audit\">\n    <p-headline variant=\"headline-3\">Make an Audit</p-headline>\n    <p-text>\n      In most cases, a software application is orchestrated out of many individual components, modules, microservices and even 3rd party software. Though each of them should be tested and verified during development, we have to make sure, that they all fit into the application and are <strong>accessibility compliant</strong> as a whole.\n      This is where an Accessibility Audit comes into play.\n    </p-text>\n    <p-headline variant=\"headline-3\">Prerequisites</p-headline>\n    <p-text>To perform an Accessibility Audit you should define what and how to test.</p-text>\n    <p-text-list>\n      <p-text-list-item>\n        Define a whole user journey or dedicated pages/modules to be tested.\n      </p-text-list-item>\n      <p-text-list-item>\n        Make sure your application is reachable for the testers.\n      </p-text-list-item>\n      <p-text-list-item>\n        Define exactly what you want to test. Is it more technical, or design/content related or at least all of them? \n      </p-text-list-item>\n      <p-text-list-item>\n        Before performing an audit, make sure that the development team has done the best to enhance accessibility.  \n      </p-text-list-item>\n      <p-text-list-item>\n        Try to make an additional audit with people with real disabilities, e.g. by using <a href=\"https://makeitfable.com/\">Fable</a>.\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-3\">Accessibility Checklist</p-headline>\n    <p-text>\n      The <strong>Accessibility Checklist</strong> guides you on what tests should be performed by an Accessibility Audit. It contains a set of basic rules which are mandatory for most web applications. \n      Be aware that this list is not complete guidance to achieve full accessibility compliance regarding the official <strong>WCAG 2.1 AA</strong> specifications.\n      For <strong>full WCAG 2.1 AA compliance</strong>, head over to <a href=\"https://www.w3.org/WAI/WCAG21/quickref/?currentsidebar=%23col_overview&levels=aaa\">How to meet WCAG (Quick Reference)</a>. \n    </p-text>\n    <p-headline variant=\"headline-4\">Top 5</p-headline>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Does <strong>descriptive alt text</strong> on images accurately reflect the purpose of the image and/or provides an accurate description?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Is your application fully <strong>keyboard accessible</strong> and is the focus order in a logical sequence (navigable with tab/enter/arrow key)?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Is the <strong>color contrast</strong> ratio of 4.5:1  on fore- and backgrounds respected?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Is <strong>scalability of text</strong> (at least up to 200%) and overall content supported?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Test your application with an accessibility checker tool (Browser Plugin) like LightHouse, AXE, WAVE. Are all <strong>errors and warnings</strong> fixed?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-headline variant=\"headline-4\">Structure</p-headline>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Is the content <strong>semantically structured</strong> so assistive technologies, search engines, and website visitors understand the page hierarchy and type of contents?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Are <strong>headlines</strong> used as structuring elements (while not breaking the headline hierarchy)?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Is a <strong>\"Skip Navigation\"</strong> link at the top of pages provided that allows assistive technologies to skip directly to the page’s main content?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Are there no logical breaks in the <strong>focus order</strong>?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-headline variant=\"headline-4\">Text</p-headline>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Are <strong>page titles</strong> provided which accurately reflect the topic on the page for better SEO results and improved visitor experience?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Is the correct <strong>language attribute</strong> added to the HTML document?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Are textual elements <strong>short, meaningful and descriptive</strong> and are instructions based solely on location or color on the page avoided?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-headline variant=\"headline-4\">Links and Buttons</p-headline>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Are <strong>textual labels of links and buttons</strong> written in a meaningful way and describe the link target, especially when read out of context? Are texts like \"read more\" or \"click here\" avoided?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Is link text kept to <strong>100 characters or less</strong>?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Are all the <strong>links valid</strong> (not broken)?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-headline variant=\"headline-4\">Images</p-headline>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Is the usage of <strong>images with text</strong> on it avoided? Does alt text of images communicate the same information as the text in the image?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">If graphs or diagrams are used, do they <strong>include accompanying text</strong> to explain the meaning?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-headline variant=\"headline-4\">Forms</p-headline>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Does every form element have a corresponding <strong>descriptive label</strong>?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Are logical parts of the form <strong>grouped</strong> by a fieldset/legend structure?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Do <strong>error messages</strong> describe the error and the solution?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-headline variant=\"headline-4\">Video/Motion/Timing</p-headline>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Are <strong>closed captions</strong> for videos with sound provided?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Are <strong>time constraints</strong> for user interactions avoided?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Are possibilities to <strong>pause/stop/hide</strong> content that blinks/scrolls/moves provided?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n    <p-headline variant=\"headline-4\">Content</p-headline>\n    <p-checkbox-wrapper>\n      <span slot=\"label\">Is an <strong>Accessibility Statement</strong> as part of the application provided?</span>\n      <input type=\"checkbox\" name=\"some-name\" />\n    </p-checkbox-wrapper>\n  </p-tabs-item>\n  <p-tabs-item label=\"5. Sustain\">\n    <p-headline variant=\"headline-3\">Accessibility is never done</p-headline>\n    <p-text>Though your team has weighed in a lot of effort regarding accessibility and your application seems to be fully accessible compliant, your work is not done yet. With every change, with every new feature, with every update comes the responsibility that accessibility remains a priority and issues are identified and solved.</p-text>\n    <p-headline variant=\"headline-4\">Monitor</p-headline>\n    <p-text>Integrating an <strong>automated accessibility test</strong> into your build pipeline is a good starting point to keep track of possible issues when the application is updated. But automated testing covers only up to 20% of possible issues. Therefore it is a good choice to have audits and <strong>manual tests</strong> regulary.</p-text>\n    <p-text>Monitoring your application is mandatory and should be part of your production workflow. Monitoring shouldn't be limited to finding issues but <strong>measuring your progress</strong> should be part as well.</p-text>\n    <p-text>Some of possible measurable criteria could be:</p-text>\n    <p-text-list>\n      <p-text-list-item>\n        The number of WCAG Success Criteria passed, and their level.\n      </p-text-list-item>\n      <p-text-list-item>\n        Number of complaints received related to accessibility.\n      </p-text-list-item>\n      <p-text-list-item>\n        Calls were handley by people who were unable to process their application online.\n      </p-text-list-item>\n      <p-text-list-item>\n        Positive social media comments on the accessibility of service.\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-4\">Prioritize</p-headline>\n    <p-text>If accessibility issues are detected, it is common to prioritize them regarding their estimated effort and they might be prioritized down so that other development goals could be achieved. This shouldn't happen but as we all know this can happen e.g. due to tight timelines.</p-text>\n    <p-text>To prevent this situation of always prioritizing down, make sure to split accessibility issues into smaller stories and plan at least a fixed number in every sprint. Always keep in mind, that the later accessibility is observed the more effort it will take to implement. </p-text>\n    <p-headline variant=\"headline-4\">Track standards and laws</p-headline>\n    <p-text>Though it might give the impression that the official standards of <strong>WCAG 2.1</strong> don't have changed since a decade, the W3C is working on the following standard of <strong>WCAG 3.0</strong> which currently is in a first public working draft. So it's a good choice to keep up with the latest progressions and be prepared if they are released.</p-text>\n    <p-text>But not only the official standards may change, even more important is to keep an eye on <strong>worldwide laws and policies</strong> and how they are handled by regions and countries. Here are some of the latest changes in important markets:</p-text>\n    <p-text-list>\n      <p-text-list-item>\n        In Canada, the Accessibility for Ontarians with Disabilities Act dictates that private or non-profit organizations with more than 50 employees have to <strong>accessibility compliant</strong> with WCAG 2.0 AA <strong>from January 2021</strong>.\n      </p-text-list-item>\n      <p-text-list-item>\n        In the U.S. they are working on a new <strong>Online Accessibility Act</strong> which will extend the current <strong>Americans with Disabilities Act</strong> to cover <strong>consumer-facing websites</strong> and mobile applications that are owned or operated by a private entity.\n      </p-text-list-item>\n      <p-text-list-item>\n        Europe adopted the <strong>Europeans with Disabilities Act</strong> in 2019 which also includes the accessibility conformance of <strong>e-commerce</strong> and mobile applications.\n      </p-text-list-item>\n    </p-text-list>\n    <p-headline variant=\"headline-4\">Adapt to new technologies</p-headline>\n    <p-text>Not only Browsers do evolve, but also <strong>assistive technologies</strong>. Include devices like screen readers into your support list and enhance your tests also to mobile devices which come with huge improvements and tools for people with disabilities to better access your applications.</p-text>\n    <p-headline variant=\"headline-4\">Hear your users</p-headline>\n    <p-text>User feedback is one of the most valuable things you can get. By adding an <strong>Accessibility Statement</strong> on your application, you give users a good overview of the current state of accessibility and give the possibility for direct feedback as well.</p-text>\n    <p-headline variant=\"headline-4\">Share your knowledge</p-headline>\n    <p-text>As we all know, building accessible products is not easy. The more we have to pull together and exchange our knowledge and experiences. As a starting point, take part in our (upcoming) <strong>Accessibility-Guild</strong> on Slack.</p-text>\n    <p-text>But not only sharing experiences is helpful for others, but also showing your successes. <strong>Be proud of building better products for everyone!</strong></p-text>\n  </p-tabs-item>\n</p-tabs>\n\n\n<style scoped lang=\"scss\">\n  @import \"~@porsche-design-system/utilities/scss\";\n\n  p-tabs {\n    margin-top: $p-spacing-40;\n  }\n\n  p-tabs-item {\n    padding-top: $p-spacing-24;\n  }\n\n  p-tabs-item > *:first-child {\n    margin-top: 0;\n  }\n\n  p-text,\n  p-text-list {\n    margin-top: $p-spacing-24;\n  }\n\n  p-text-list p-text-list {\n    margin-top: 0;\n  }\n\n  p-headline {\n    margin-top: $p-spacing-40;\n  }\n\n  p-headline + * {\n    margin-top: $p-spacing-16;\n  }\n\n  p-checkbox-wrapper + p-checkbox-wrapper {\n    margin-top: $p-spacing-8;\n  }\n  \n  table {\n    margin-top: $p-spacing-32;\n    @include p-generate-font-definition($p-font-size-small, $p-font-weight-regular);\n    text-align: left;\n    border-collapse: collapse;\n    ul {\n      list-style-type: none;\n    }\n  }\n\n  tr {\n    border-bottom: 1px solid $p-color-neutral-contrast-low;\n  }\n  \n  td, th {\n    padding: $p-spacing-8 $p-spacing-16 $p-spacing-8 0;\n  }\n\n  th {\n    color: $p-color-neutral-contrast-high;\n  }\n  .key {\n    background-color: $p-color-neutral-contrast-low;\n    border: 1px solid $p-color-neutral-contrast-medium;\n    border-radius: 5px;\n    color: $p-color-neutral-contrast-high;\n    padding: 0 $p-spacing-4;\n    margin: 1px;\n    font-weight: bold;\n    font-size: $p-font-size-12;\n    min-width: $p-spacing-16;\n    display: inline-block;\n    text-align: center;\n    vertical-align: text-bottom;\n  }\n</style>\n",
    "Accessibility Statement": "# Accessibility Statement\n\n## Definition\n\n### An accessibility statement has two basic functions:  \n**Firstly**, an accessibility statement is a powerful declaration of commitment. People visiting the website, particularly those with disabilities, will appreciate the open acknowledgement that accessibility is a key driver for the website.\n\n**Secondly**, it can present further information about the target level of web accessibility for the website and the methods used to achieve those targets. It also can enable the website owner to acknowledge any areas of the website where accessibility targets have not been met and outline the proposed plan for resolving any such problem.  \n\n**A word of caution however:**\nAn accessibility statement that makes rash or false claims will only damage the reputation of the website, not enhance it and it does not prevent the site owner from getting sued if the website lacks accessibility support.\n\n## Where to put an accessibility statement\n**Accessibility statements should be easy to find** and should be linked from each page. Placing it in the **footer area** is a proven way. \nUse consistent link names for your accessibility statement to help users recognize them. \n\n## Example template\n**There are no strict specifications** on how to write an accessibility statement, but it should announce the intent and commitment to accessibility.\nThe following example can be seen as a blueprint and **should be adapted to your specific needs**.\n\nThis template is based on the guidelines on [How to develop an Accessibility Statement](https://www.w3.org/WAI/planning/statements/) provided by **W3C**.\n\n<Playground :markup=\"statement\" class=\"p-accessibility-statement\"></Playground>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  \n  @Component\n  export default class Code extends Vue {\n    \n    get statement() {\n      return `\n<p-headline variant=\"headline-3\"><h1>Accessibility Statement</h1></p-headline>\n  <p-text>\n    We are committed to ensuring digital accessibility for people with disabilities.<br>\n    We are continually improving the user experience for everyone, and applying the relevant accessibility standards.\n  </p-text>\n  <p-headline variant=\"headline-4\"><h2>Measures to support accessibility [optional - choose from list]</h2></p-headline>\n  <p-text>\n    We take the following measures to ensure accessibility of this Website:\n  </p-text>\n  <p-text-list>\n    <p-text-list-item>Include accessibility as part of our mission statement.</p-text-list-item>\n    <p-text-list-item>Integrate accessibility into our procurement practices.</p-text-list-item>\n    <p-text-list-item>Appoint an accessibility officer and/or ombudsperson.</p-text-list-item>\n    <p-text-list-item>Provide continual accessibility training for our staff.</p-text-list-item>\n    <p-text-list-item>Include people with disabilities in our design personas.</p-text-list-item>\n    <p-text-list-item>Include automatic and manual testing strategies.</p-text-list-item>\n  </p-text-list>\n  <p-headline variant=\"headline-4\"><h2>Conformance status</h2></p-headline>\n  <p-text>\n    The <a href=\"https://www.w3.org/WAI/standards-guidelines/wcag/\">Web Content Accessibility Guidelines (WCAG)</a> defines requirements for designers and developers to improve accessibility for people with disabilities.\n  </p-text>\n  <p-text>\nPorsche is committed to making its websites usable by all people by meeting or exceeding the requirements of the Web Content Accessibility Guidelines 2.1 Level AA (the Guidelines). \nWe continually assess and work to ensure that our Web presence is in conformance with the Guidelines.\n  </p-text>\n  <p-text>\n    Please be aware that our efforts are ongoing as our current website provider implements the relevant improvements to meet the Guidelines over time.\n  </p-text>\n  <p-headline variant=\"headline-4\"><h2>Feedback</h2></p-headline>\n  <p-text>\n    If you experience any difficulty in accessing any part of this website, please feel free to contact us. Please be sure to specify the Web page and describe the issue in detail and we will make reasonable efforts to make that page accessible. We welcome feedback on how we can improve as well.\n  </p-text>\n  <p-text-list>\n    <p-text-list-item>E-mail: <a>[e-mail address]</a></p-text-list-item>\n    <p-text-list-item>\n      Postal address: <br>\n      Dr. Ing. h.c. F. Porsche AG<br>\n      Porscheplatz 1<br>\n      D-70435 Stuttgart\n    </p-text-list-item>\n  </p-text-list>\n`\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"~@porsche-design-system/utilities/scss\";\n\n.p-accessibility-statement {\n  p-text,\n  p-text-list {\n    margin-top: $p-spacing-16;\n  }\n\n  p-text + p-headline[variant=\"headline-3\"],\n  p-text-list + p-headline[variant=\"headline-3\"] {\n    margin-top: $p-spacing-48;\n  }\n\n  p-text + p-headline[variant=\"headline-4\"],\n  p-text-list + p-headline[variant=\"headline-4\"],\n  p-text + p-headline[variant=\"headline-5\"],\n  p-text-list + p-headline[variant=\"headline-5\"] {\n    margin-top: $p-spacing-32;\n  }\n}\n</style>\n"
  },
  "Patterns": {
    "Forms": {
      "Guidelines": "# Forms\n\nThe digital world cannot be imagined without forms. **Whenever we need information from the user that is to be processed by the application or when we want to enable the user to configure options**, forms are best to be used.\n\n**Well-designed forms are a crucial part of a good UX** and also a flagship for the brand experience in general: Users perceive well-designed forms as evidence for helpfulness, professionality, technical expertise and simply enjoy working with it. However, designing forms well is always a question of the perfect combination of structure, sequence, form elements, labels, help and feedback. If this fits perfectly together (and makes users happy), chances are high to increase conversions.\n\n**Common cases for form use are for example:**\n\n* Account login or registration process\n* Contact forms\n* Checkout process\n* Setting configuration\n* Surveys\n\n**Download patterns as Sketch file**  \n\nIn order to make designing forms as easy as possible we provide you with a Sketch file containing **templates for the most common form types for both desktop and mobile**, easily adaptable to your requirements:\n\n<p-link-pure href=\"https://designsystem.porsche.com/sketch/porsche-design-system-form-templates.sketch\" icon=\"download\" download>Download Sketch form templates</p-link-pure>\n\n---\n\n## Form DNA\n\nA typical form in Porsche web applications is made up of five basic elements:\n\n1. **The general structure**  \n  … is defined by how the form is being layed out within the specific page, involving column layout, logical sections as well as proper spacings helping the user to capture the form at first sight.  \n  \n2. **Form fields**  \n  … provide all input options the user needs to fill out the form, whether it's commonly used free-form text input (Text Fields, Text Areas) or specific data inputs (such as Checkboxes, Radio Buttons, Select). They can have different states and variants that are described in the specific component guidelines.  \n  \n3. **Labels**  \n  … accompany the form fields, helping the user to understand the type of input that is required. They should always be short and descriptive (optimal: 1-3 words), stating the required input. Always start labels capitalized. In all Porsche Design System components, labels are placed top-aligned to support scannability and speed up form completion.  \n  \n4. **Good feedback**  \n  … is crucial to give the user both a feeling of success when completing the form fields correctly as well as providing valuable support in case of wrong entry.  \n  \n5. **Call-to-actions**  \n  … are needed to initiate further processing, for example submitting, sending or cancelling a form input. Most forms come with two call-to-actions. The successive (and therefore most important) button should be emphasized. As red is a very sensitive color in forms (due to error notifications) we highly recommend to go for a [Secondary Button](components/button) in grey, accompanied by a Tertiary Button for the cancelling / least important option. Button labels have an effect on the conversion rate and should always be short and descriptive, informing the user about what to expect. Something like \"submit\" is not clear enough. Good examples are \"Get a free demo\", \"Create account\" or \"Subscribe now\".  \n\n  \n ![The five basic elements of Porsche forms](../../../assets/patterns-forms-dna.png)\n\n---\n\n## User-centric form design\n\nFollow these basic tips to design forms for Porsche web applications that make users happy:\n\n### Go for relevance\n\n**Only ask for information that is really needed from the user.**  \n  Not only will the user be more likely to fill out the form, but you also preserve the user from the cognitive load (especially on mobile devices). The shorter the form, the better the completion time – and the better the conversion rate.  \n\n**Start with fields that are easy to fill in.**  \n  Keep the hurdle for the user low to fill out the complete form by providing easy-to-fill-out fields first. Good example: Start with name and e-mail before asking for the credit card number.  \n\n**Pre-fill or auto-detect as much as possible.**  \n  We already know some information about the user, like name, country or e-mail address, for example? Perfect! Pre-fill the form with this information in order to make it easier for the user to fill in the form.\n\n### Your form should be intuitive\n\n**Keep the form in a logical, intuitive order.**  \nFor example first name prior to the last name. Don't forget to take international formatting into account, as the order of form fields is often market-dependent.  \n\n**Auto-focus the first field (or the needed one) by default.**  \nThis allows users to step in quickly and tab through the form elements in a logical way. The form elements provided in the Porsche Design System are already equipped with an on-board focus state.  \n  \n**Provide the correct input type.**  \nIn the best case, the correct input format (for example e-mail address, URL, phone number) should be technically preset to make the input easier for the user.  \n\n**Avoid placeholder text.**  \nPlaceholder text tends to be disadvantageous in several respects: Once the form field is in focus or filled in, the placeholder is gone or overwritten and it's hard for the user to remember what the placeholder was all about – in the worst case, the user is forced to delete the input text to re-reveal the placeholder. Also, placeholders make it hard for the user to quickly scan the form and see what fields have already been filled out. When you want to give the user some information about the input format, go for information text outside the form field instead ([Nielsen Norman Group, 2014](https://www.nngroup.com/articles/form-design-placeholders/)).  \n\n**Explain all options for action to the user.**  \nThe user should always be aware of all possibilities. Therefore, form fields that are not touch- or clickable (yet) should be clearly distinguishable from active form fields. Go for disabled form states when needed which you will find in the Porsche Design System form components.\n\n### Support scannability\n\nYou should make it easy as possible for the user to perceive a form quickly:\n\n**Avoid visual hurdles.**   \nThe more fluid a form is perceived, the better the conversion rate. \"From our research studies, we've learned that even the slightest moment of hesitation when completing a form can significantly hurt the form’s response rate (that is, the number of people who complete the form).\" ([Nielsen Norman Group, 2013](https://www.nngroup.com/articles/form-design-white-space/)).  \n\n**Work with spacings.**  \nCluster the form in logical, coherent parts (see \"Form layout\" below).  \n\n**Split long processes.**  \nGo for multi-step forms in case of a long process (see below) in order to prevent cognitive overload – forms should always be kept manageable for the user**.**\nAlways provide a progress bar (% or the number of steps) to give the user a hint on what’s already finished.\n\n### Provide help\n\n**… only when help is truly required!**  \nOtherwise, the user might feel overwhelmed or, in the worst case, patronized. \n \n**Always provide status information.**  \nGive the user a hint on the progress state, success or error states or the completion of a form. \n \n**Provide extra information, when needed.**  \nSometimes it's helpful for the user to get further information, for example on the input format or on why the information is needed. It depends on the length and quality of the information on how it should be displayed:\n\n* **Short and/or very important information** that's essential for the completion of the form should be displayed directly outside the form field, so that users are not forced to make further clicks. At Porsche, we always place description text on top of the form fields (as the bottom space is reserved for validation messages) in Copytext x-small in order to distinguish it from label text. You'll find detailed information on the correct placement of the description text in the specific form component guidelines.  \n    \n  ![Information displayed outside the form field](../../../assets/patterns-forms-helptext-open.png)  \n\n* **Longer and/or less important information** (even more so if it's optional to read) should be hidden in an \"information\" icon that is placed directly (spacing 4 px) after the field label and reveals an explanation in a tooltip on hover (desktop) or on click (tablet/mobile). As soon as the user continues filling out the form, the tooltip should disappear. This way, we keep the form short and prevent the user from extra scrolling. But be aware to use tooltips sparingly.  \n    \n  ![Information displayed in tooltip](../../../assets/patterns-forms-helptext-tooltip.png)\n\n### Handle with care: Sensitive and personal data\n\nMany users are afraid of spam or hackers and especially do not like to enter their personal data in forms. In order to prevent users from cancelling their form input:  \n  \n\n**Ask for as little information as possible.**  \nUsers shouldn't get the feeling that they are being asked for irrelevant or unnecessary information or even that information is only collected for the purpose of data collection.  \n\n**Give deeper information on a specific input.**  \nSometimes it's helpful to give some more information on the \"why\" of a required input, in order to remove any doubt from the user, even more, when it comes to very specific data the user is not used to fill in or when the further processing of information is not clear enough. In this case, a tooltip with an \"information\" icon (right behind the input label) is the best way to go.\n\n  ![Tooltip information on personal data input](../../../assets/patterns-forms-personal-data.png)\n  \n**Respect GDPR and other legal regulations.**  \nThe user should be asked to enter only information that is absolutely necessary.\n\n---\n\n## Form layout\n\n### Example of the anatomy of a form\n\n1. **Headline and subline**  \n   A clear title gives the user some information on what to expect when filling out the form.  \n   \n2. **Sections including form elements**  \n   The longer a form, the more crucial it is to split it into content-related sub-areas in order to increase scannability.  \n   Thus form fields that require similar information should be grouped together to create a logical order. This can be set as a coding property \"fieldset\". \n   Each fieldset should be initiated by a title that gives the user short information on what data is required in this section.\n   \n   | Viewport | Range                  | Headline    | Subline     | Section Headline | Section    |\n   | -------- | ---------------------- | ----------- | ----------- | ---------------- | ---------- |\n   | **XS-S** | 320-999 px             | Headline  1 | Text Small  | Headline 4       | Headline 5 |\n   | **M-XL** | 1000-1760 px or larger | Headline  1 | Text Medium | Headline 4       | Headline 5 |\n\n\n3. **Call-to-actions**  \n   Call-to-actions are needed to submit or cancel the form input and should always be placed left-aligned.\n   \n\n### Single-column layout\n\nEven though today's displays offer a lot of space: **Good forms are always single-column!** This is even more important when it comes to mobile view or longer forms, especially multi-step forms. A research study revealed that single-column forms could be completed 15.4 sec faster than a comparable multi-column form and at a 95% confidence level ([CXL Institute, 2018](https://cxl.com/research-study/form-field-usability/)).  \n\nThis is why:\n\n- Single-column forms make it easier for the user to scan a form fluently and with less distraction.\n- The common reading direction is zigzag (\"Z\"). This makes it harder to perceive a multi-column form.\n\n### Form layout spacings\n\nAccording to the [\"law of proximity\" in Gestalt psychology](https://lawsofux.com/law-of-proximity) objects that are near or proximate to each other tend to be grouped together. So in order to make it easy for the user to scan the form you should cluster the form in logical, coherent parts by working with spacings. We differ the following spacings (according to the **Porsche Design System spacing system**): \nDepending on the viewport you're designing for you should stick to slightly different spacings for your form:\n\n| Viewport | Range             | Total max. width of the form | Min. form top / bottom spacing (A) | Section spacing (B) | Min. vertical/horizontal form field spacing (C) |\n| -------- | ----------------- | ---------------------------- | ---------------------------------- | ------------------- | ----------------------------------------------- |\n| **XS**   | 320-759 px        | 12 grid columns              | 48/64 px                           | 40 px               | 16 px                                           |\n| **S**    | 760-999 px        | 10 grid columns              | 48/64 px                           | 40 px               | 16 px                                           |\n| **M**    | 1000-1299 px      | 8 grid columns               | 64/80 px                           | 48 px               | 16 px                                           |\n| **L**    | 1300-1759 px      | 6 grid columns               | 64/80 px                           | 48 px               | 16 px                                           |\n| **XL**   | 1760 px or larger | 6 grid columns               | 64/80 px                           | 48 px               | 16 px                                           |\n\nAs for the smallest grouped element within a form – label and form field – we recommend using 4 px spacing. This is also predefined in the Porsche Design System form elements.\n  \n![Form layout with spacings](../../../assets/patterns-forms-anatomy-mobile-spacings.png)\n\n\n### Form field widths \n\nIt's commonly recommended to set the form field width to the estimated length of the required input. As we design for international markets at Porsche it's often quite hard to predict the estimated length depending on the language. Also, this might lead to a quite unbalanced and \"fluttering\" look and feel of the form in general. \nThus, we recommend to go the \"golden middle way\" in order to cover both the reflection of the intended content length, but also visual pleasure:\n\n**Form fields should be set to full form width (100 %) by default** to keep the fluttering effect low.\nHowever, we recommend to break out of that rule and **go for estimated form field lengths in the following cases** (even if this doesn't mean 100 % in total for that row) as this supports the user's perception:\n\n- When setting form elements in a row (one or more) that _aren't_ Text Fields, for example Selects or Radio Button Groups.\n- When setting multiple form fields in a row (only when it makes sense, e.g. in case of ZIP code and city input).\n- In case of very short forms (up to 3 fields).\n\n### Form Grid\n\nWhen setting field widths to the estimated length you should stick to the following standard values to support a common overall look and feel for Porsche forms.\nThe % values always refer to the full maximum width of the form (see table above):  \n  \n**25 % / 33.33 % / 50 % / 66.66 % / 75 % / 100 %**\n\n\n![Form field widths](../../../assets/patterns-forms-field-widths.png)\n\n--- \n\n## Designing forms for mobile\n\nIn favor of a better conversion rate, it's highly recommended to put an extra eye on the mobile version – not only for your website in general but especially for the forms provided on your website. Instead of copy-and-paste-ing the desktop view (as this might lead to problems with readability and perception), optimize your forms on smaller viewports for a mobile-friendly experience and focus especially on the following aspects:\n\n### Provide state information\n\nSet the visual focus to the current form field to give orientation and enable the user to perceive information quickly. Also, you should always give the user information about the **current progress status** by providing a progress bar (% or \"step 1 of 3\"). This is not only relevant for longer or multi-step forms in general, but especially on mobile viewports, where the user has no clear overview of the length of the complete form. \n\n### Use native components\n\nUsers are familiar with device-specific UI patterns (for example the iOS date picker). So the first choice for a good mobile UX should be to go for native elements instead of individual UI patterns.\n\n![iPhone screen with native date picker](../../../assets/patterns-forms-native-date-picker.png)\n\n### Provide correct input types\n\nWhenever possible, the required input type should be technically preset, so that users are provided automatically with the correct UI controls. This helps fill out the form much faster.\n\n### Automate actions (when possible)\n\nMake it easy for users by providing autocorrect (meaning the form automatically corrects e.g. spelling errors) and autocomplete (specific fields are automatically completed such as filling in the user's ZIP code based on the location).\n\n### Use input contraints\n\nWhen it makes sense you should set input constraints to your Text Fields and Textareas to limit the input length, as some users tend to over-explain and therefore spend much time filling out the form, which might lead to frustrating and bad ratings in the end.\n\n---\n\n# Form validation\n\nGood forms provide **valuable support** – both **for success**, when the user completes form fields correctly, and **for error cases**, when the user makes a wrong entry. However, there's a direct correlation between *how* and *when* users are presented with form validation errors and the pace and effort with which they are able to resolve them.\n\n\n![Form layouts with error and success notification](../../../assets/patterns-forms-validation.png)\n\n_Example input field with error | 1. Asterisk, 2. Border highlight, 3. Error message_\n\n\n### Client-side validation\n\n**In the best case, you should always give direct feedback**. This is why we recommend validating the user’s data before submitting the form (called client-side validation). This type of inline validation should be done at the moment after the input field is out of focus. This will help quickly identify the elements that need to be corrected and help users get through forms better and faster.\n\n**Common reasons for errors**\n\n- input incorrectly formatting data\n- leaving a mandatory field blank\n- leaving a mandatory field incomplete\n\n**Form validation guideline**\n\n- **Mark required fields.** Our tests (optional vs. required with an asterisk) showed that mark required fields with an red asterisk is an easy way to improve the usability of forms.\n\n- **Display of the error message.** Inline validation feedback should always be displayed in the direct context of the action, ideally below the respective form field \n\n- **Validate input fields directly.** Validation should happen at the moment after the input field is out of focus.\n\n- **Scroll to first error.** When the user tries to send a form that includes an error, the user should automatically be scroll to the first error field and set the focus on the input.\n\n- **Error summary.** Additional to the error message beneath the input fields, you can include an error summary at the top of the form to summarise the mistakes a user has made.\nIt might also make sense if you don't want to show which field has an error, f.e. login or have a required group of fields rather than a specific one.\n\n- **Radio Button and Checkbox group.** To avoid providing each Radio Button and each Checkbox with its own error message within a group, we recommend marking the fieldset required. The error message will then be displayed for the entire group at the last item.\n\n![Form validation within a group](../../../assets/validation-fieldset.png)\n\n---\n\n# Error messages\n\n### Tonality and content\n\nError messages explain clearly and simply what the problem is. Avoid the word \"error\" and technical terms or abbreviations.\n\nYou should offer a solution so that users can repeat a step to complete a task or try another route to proceed their action.\n\nKeep in my mind that experiencing an error is frustrating for the user and ask yourself what you can do or say to absorb frustration and improve the experience. For example, with a bit of humor. But don’t go overboard. And do not neglect the clarity within your copy.\n\n**Error messages should be**\n\n- brief\n- written out\n- describe the solution\n- displayed below the form field\n- visible immediately after lost focus\n- removed after successfully corrected input\n\n\n\n**The following questions should be answered to create a good error message**\n1.\tWhat did the user try to do when the error message appeared?\n2.\tWhy was the error message displayed?\n3.\tHow can the user continue and complete the process?\n4.\tIf there is no immediate solution, can we offer the user alternatives? E.g. a search input field or a contact of the support team\n\n---\n\n### **Writing examples** \n\n### Credit card number is incorrect\n\n**Instead of saying**  \n*Invalid input*\n\n**Describe the problem**  \n*Numbers are missing in your credit card number.*\n\n**Offer a solution**  \n*Numbers are missing in your credit card number. Please check your input.*\n\n**Add a human touch**  \n*Is the card number complete? Please check your input.*\n\n---\n\n### Mandatory free text input field is not filled\n\n**Instead of saying**  \n*This field is obligatory.*\n\n**Describe the problem**  \n*Please enter your message.*\n\n**Add a human touch**  \n*What would you like to tell us?*\n\n---\n\n### Server error on website\n\n**Instead of saying**  \nService not available. The server is temporarily busy. Please try again later.\n\n**Describe the problem**  \n*Unfortunately, we can’t load the site because of a problem with our server.*\n\n**Offer a solution**  \n*Unfortunately, we can’t load the site because of a problem with our server. Try again later or visit another site:*\n- Porsche Website\n- My Porsche\n- Porsche Shop\n\n**Add a human touch**  \n*Not our claim to performance.\nUnfortunately, we can’t load the site because of a problem with our server. Try again later or visit another site, while we’re working on a solution:*\n- Porsche Website\n- My Porsche\n- Porsche Shop\n\n---\n### **Prevent errors** \n\nYour microcopy might even help in preventing errors, e.g. by telling a user as clear as possible what format and input is required for a certain input field. E.g. List the necessary characters that a password must contain. \n\n---\n\n## Accessibility\n\nAlways stick to the defined [Accessibility criteria](accessibility/introduction) (WCAG level AA) when designing web applications for Porsche. For form design you should consider in particular the following aspects:\n\n* Forms should **provide 100% keyboard navigation**, which means: Users should be able to jump through the whole form using the tab key.\n* Always **provide focus states** to show the user both the starting and when proceeding the current position. The Porsche Design System form components are provided with a focus state on board.\n* **Never use color as a single indicator for a type of use or state**. In form layout, this means that for error or success notifications and for highlighting incorrect form fields it's highly recommended to work with further formatting, e.g. a larger border width. This is also already predefined in the Porsche Design System form components.\n* **Provide a sufficient click/touch area** for each component. [Apple’s Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/) suggest providing a tappable area of 44 x 44 px for all controls. As this \"safe zone\" might result in large spacings between components (just think of a stacked checkbox list) or overlapping of the tappable areas, we'd recommend defining the tappable area component-based, as the size of the tappable area is also a matter of the general height *and* width of a component. You'll find detailed information in the respective component guidelines.\n\n---\n\n## Related components\n\n* [Text Field](components/text-field)\n* [Textarea](components/textarea)\n* [Checkbox](components/checkbox)\n* [Radio Button](components/radio-button)\n* [Select](components/select)",
      "Resources": "# Forms\n\nTo help you better understand how to use our form guidelines we provide you with basic form patterns as pre-designed Sketch templates as well as the corresponding coded examples:\n\n## Sketch form templates\n\n<p-link-pure href=\"https://designsystem.porsche.com/sketch/porsche-design-system-form-templates.sketch\" icon=\"download\" download>Download Sketch form templates</p-link-pure>\n\n--- \n\n## Form pattern example pages\n\n| Form type        | View code example                                                                                                                  |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| Login            | <p-link-pure href=\"patterns/forms/example/login\" icon=\"external\" target=\"_blank\">Example - Login</p-link-pure>                   |\n| Create Account   | <p-link-pure href=\"patterns/forms/example/create-account\" icon=\"external\" target=\"_blank\">Example - Create Account</p-link-pure> |\n| Contact          | <p-link-pure href=\"patterns/forms/example/contact\" icon=\"external\" target=\"_blank\">Example - Contact</p-link-pure>               |\n| Various examples | <p-link-pure href=\"patterns/forms/example/various\" icon=\"external\" target=\"_blank\">Example - Various</p-link-pure>               |\n\n\n--- \n\n## Form grid examples\n\nThe basic form grid can be achieved nearly out of the box with Porsche Design System capabilities in addition with some extra CSS magic. \nBasically, you can use the following approach to serve the form grid described in the [design guidelines](patterns/forms/guidelines).\n\n### Form header\n\nThe form header can be fully styled with **components** and corresponding **properties**. The only extra CSS you need is a `margin-top` for the subline. \nYou have to add your own class based spacing system to your project because it is not bundled with the Porsche Design System.\n\n<Playground>\n  <p-grid class=\"form-top-spacing\">\n    <p-grid-item size=\"{ base: 12, m: 8 }\">\n      <p-headline variant=\"headline-2\" tag=\"h1\">Some Form Headline</p-headline>\n      <p-text size=\"{ base: 'small', l: 'medium' }\" class=\"spacing-mt-8\">Some Form Subline.</p-text>\n    </p-grid-item>\n  </p-grid>\n</Playground>\n\n### Form body\n\nThe form body is mainly a mix out of basic `grid` and `flex` components in addition with some CSS classes to provide the horizontal and vertical form grid spacings.  \nBelow you can find the explanations of the used class names.\n\n<Playground>\n  <p-grid class=\"form-section-spacing\">\n    <p-grid-item size=\"{ base: 12, s: 10, m: 8, l: 6 }\">\n      <form novalidate>\n        <p-fieldset-wrapper label=\"Form legend text\">\n          <p-flex direction=\"{base: 'column', m: 'row'}\" class=\"form-grid-item-container\">\n            <p-flex-item class=\"form-grid-item\" width=\"{base: 'full', m: 'one-quarter'}\">\n              <p-text-field-wrapper label=\"Some label\"><input type=\"text\" name=\"some name\"></p-text-field-wrapper>\n            </p-flex-item>\n            <p-flex-item class=\"form-row-spacing form-row-spacing--zero-m form-grid-item\" width=\"{base: 'full', m: 'one-quarter'}\">\n              <p-text-field-wrapper label=\"Some label\"><input type=\"text\" name=\"some name\"></p-text-field-wrapper>\n            </p-flex-item>\n            <p-flex-item class=\"form-row-spacing form-row-spacing--zero-m form-grid-item\" width=\"{base: 'full', m: 'one-quarter'}\">\n              <p-text-field-wrapper label=\"Some label\"><input type=\"text\" name=\"some name\"></p-text-field-wrapper>\n            </p-flex-item>\n            <p-flex-item class=\"form-row-spacing form-row-spacing--zero-m form-grid-item\" width=\"{base: 'full', m: 'one-quarter'}\">\n              <p-text-field-wrapper label=\"Some label\"><input type=\"text\" name=\"some name\"></p-text-field-wrapper>\n            </p-flex-item>\n          </p-flex>\n          <p-flex direction=\"{base: 'column', m: 'row'}\" class=\"form-row-spacing form-grid-item-container\">\n            <p-flex-item class=\"form-grid-item\" width=\"{base: 'full', m: 'one-third'}\">\n              <p-text-field-wrapper label=\"Some label\"><input type=\"text\" name=\"some name\"></p-text-field-wrapper>\n            </p-flex-item>\n            <p-flex-item class=\"form-row-spacing form-row-spacing--zero-m form-grid-item\" width=\"{base: 'full', m: 'one-third'}\">\n              <p-text-field-wrapper label=\"Some label\"><input type=\"text\" name=\"some name\"></p-text-field-wrapper>\n            </p-flex-item>\n            <p-flex-item class=\"form-row-spacing form-row-spacing--zero-m form-grid-item\" width=\"{base: 'full', m: 'one-third'}\">\n              <p-text-field-wrapper label=\"Some label\"><input type=\"text\" name=\"some name\"></p-text-field-wrapper>\n            </p-flex-item>\n          </p-flex>\n          <p-flex direction=\"{base: 'column', m: 'row'}\" class=\"form-row-spacing form-grid-item-container\">\n            <p-flex-item class=\"form-grid-item\" width=\"{base: 'full', m: 'half'}\">\n              <p-text-field-wrapper label=\"Some label\"><input type=\"text\" name=\"some name\"></p-text-field-wrapper>\n            </p-flex-item>\n            <p-flex-item class=\"form-row-spacing form-row-spacing--zero-m form-grid-item\" width=\"{base: 'full', m: 'half'}\">\n              <p-text-field-wrapper label=\"Some label\"><input type=\"text\" name=\"some name\"></p-text-field-wrapper>\n            </p-flex-item>\n          </p-flex>\n          <p-text-field-wrapper label=\"Some label\" class=\"form-row-spacing\"><input type=\"text\" name=\"some name\"></p-text-field-wrapper>\n        </p-fieldset-wrapper>\n        <p-button-group class=\"form-section-spacing form-bottom-spacing\">\n          <p-button type=\"submit\">Send</p-button>\n          <p-button variant=\"tertiary\" icon=\"close\"type=\"reset\">Cancel</p-button>\n        </p-button-group>       \n      </form>\n    </p-grid-item>\n  </p-grid>\n</Playground>\n\n### Explanation of used class names\n\nHere you can find the **SCSS** of the used class names. This is meant to be just **one** possible solution to build the form grid. \nIt's totally up to you and your team how to achieve the form grid described in the [design guidelines](patterns/forms/guidelines).\n\nSetting the responsive widths of the flex-items should always be in context to the specific form and application environment.\n\n#### Top spacing\n\nTop spacing defines the larger between the beginning of the form and the top of the page or section.\n\n```scss\n.form-top-spacing {\n  margin-top: $p-spacing-48;\n\n  @include p-media-query('m') {\n    margin-top: $p-spacing-64;\n  }\n}\n``` \n\n#### Bottom spacing\n\nBottom spacing defines the larger between the end of the form and the bottom of the page or section.\n\n```scss\n.form-bottom-spacing {\n  padding-bottom: $p-spacing-64;\n  \n  @include p-media-query('m') {\n    padding-bottom: $p-spacing-80;\n  }\n}\n``` \n\n#### Section and fieldset spacing\n\nThis slightly larger spacing is used to separate form sections or fieldsets from each other.\n\n```scss\n.form-section-spacing {\n  margin-top: $p-spacing-40;\n  @include p-media-query('m') {\n    margin-top: $p-spacing-48;\n  }\n}\n``` \n\n#### Row spacing\n\nRow spacing is used to add a small spacing between form rows. This should be responsive to support the switch between rows and columns regarding of specific breakpoints.\n\n```scss\n.form-row-spacing {\n  margin-top: $p-spacing-16;\n  @include p-media-query('xs') {\n    &--xs {\n      margin-top: $p-spacing-16;\n    }\n    &--zero-xs {\n      margin-top: 0;\n    }\n  }\n  \n  @include p-media-query('s') {\n    &--s {\n      margin-top: $p-spacing-16;\n    }\n    &--zero-s {\n      margin-top: 0;\n    }\n  }\n\n  @include p-media-query('m') {\n    &--m {\n      margin-top: $p-spacing-16;\n    }\n    &--zero-m {\n      margin-top: 0;\n    }\n  }\n\n  @include p-media-query('l') {\n    &--l {\n      margin-top: $p-spacing-16;\n    }\n    &--zero-l {\n      margin-top: 0;\n    }\n  }\n\n  @include p-media-query('xl') {\n    &--xl {\n      margin-top: $p-spacing-16;\n    }\n    &--zero-xl {\n      margin-top: 0;\n    }\n  }\n}\n``` \n\n### Grid spacings\n\nThe horizontal form grid spacings of the grid-container and the grid-item.\n\n```scss\n.form-grid-item-container {\n  margin-left: - $p-spacing-8;\n  margin-right: - $p-spacing-8;\n}\n\n.form-grid-item {\n  padding-left: $p-spacing-8;\n  padding-right: $p-spacing-8;\n}\n```",
      "Legal": "# Forms\n\n## Privacy and EU data protection guidelines\n\nWe also have the responsibility to sign the consent form (Declaration of consent) in accordance with the EU data protection basic regulation (DSGVO) by using design guidelines and implement measures in such a way that consent is given by the user voluntarily. Studies show that especially when the user does not feel that they have control over their data or that the disclosure would have (or may cause) negative consequences they won’t share their data. Therefore, not only the benefits of data disclosure should be transparent to the user (for example the sending of an advertising brochure), but also the exclusion of possible risks (for example, that data will not be passed on to third parties for undefined purposes) and give a feeling of control.\n\nIn principle, it is helpful for a successful implementation of the maxims to be oriented towards the function of the purpose statement: The purpose must allow users to understand the consequences of data sharing and handling for them. A successful implementation of the maxims therefore enables the users to effectively control the consequences indicated by the purposes.\nIn the section **Handle with care: Sensitive and personal data** we already mentioned some guidelines about handling personal data. In this section we will give you a little more insights about all of the Privacy Principles. \n\n\n**The Privacy UX Design Guidelines Principles are:**\n\n1. **Limitation**\n   A dialogue may only collect the data required for the specified purpose. Which and how much personal data may be collected therefore depends on how concrete (or how general) the purposes were expressed. If, for example, a data processor needs to know whether the user is already of age in order to release a service, this only requires the user to indicate the age of majority, but not the specific age.\n\n2. **Selection and control**\n    The users must always be able to give (or refuse) their consent for each individual purpose. In doing so, they must actively decide to save data for a clearly defined purposes (so-called opt-in). The users must therefore take active steps to give their declaration of consent, for example by clicking a checkbox or toggling an online form. On the other hand, a ticked box does not require any active action by the users and does not provide a valid declaration of consent in the general view. If the data collection is to be based on the user's declaration of consent (and not another legal basis), the user must therefore expressly have agreed to this before the data may be collected. Because users evaluate the sensitivity of their data differently, they should always be given as much choice as possible (for example, how to contact the users).\n\n3. **Explanation**\n    Can the user understand why which data is collected? Textual and/or graphic explanatory guides can be used for this purpose. In addition, added value should also be presented visually whenever possible. Putting things into context (explained in the next section) is another important strategy to make the collection of data \"meaningful\" for the user. At the very best, the user can also be informed about the extent to which the disadvantages feared by him with the data disclosure are already excluded, reduced or at least controlled by the data processor (i.e. the Porsche AG) due to the protective measures provided. Measures are, for example, the pseudonymisation of personal data, their encryption as well as technical-organizational access controls.\n\n4. **Contextualisation of the consent**\n    Consent should preferably be obtained \"just in time\", i.e. at the time when it is necessary (but no later than at the time of collection of the data or at the time when data is processed for a different purpose than previously indicated). The justification for collecting and obtaining consent, both in terms of time, space and logic, should be sent directly and without interruption to be tied to each other.\n\n5. **Controllability**\n    Dialogs should be controllable in order to make the flow of processes transparent for the user (for example, when entering data). There should be no dependencies and couplings between providing data or the booking of services. Instead, it should be possible to agree to each processing purpose individually. Users should be able to manipulate, terminate and resume processes at any time, even retroactively. An attractive controllability is especially important for mobile devices. For this purpose, the user must be provided with sufficient information for orientation and navigation. This also refers to accurate, friendly, and complete feedback in case of unexpected behavior or errors.\n\n6. **Support**\n    Filling in fields or forms should always be supported as much as possible. This includes responsive design, error tolerances, auto-completion, search function (for example for dropdowns), logical (alphabetical) sorting, the use of common formats for for example date entries. Relationships can also exist across fields.\n\n7. **Minimalism and continuity**\n    Dialogues and processes should have a clear overall structure and clearly distinguish individual topics or contents to separate them from each other. Visual and informational overload must be avoided. This prevents the user from being overwhelmed and gives a feeling of familiarity and security.\n\n8. **Appreciation**\n    The consideration of correct salutations, titles and names, if necessary, is an element that creates trust and closeness. Individuality should be respected (for example no pressure to choose 'man' or 'woman' in a form field for gender selection).  This also includes the possibility for the user to specify titles (for example Prof. Dr.).\n\n9. **User testing**\n    These principles describe possible implementations of the consent form, which should enable the user to effectively control the consequences or risks associated with the disclosure of data. In order to ensure a successful implementation, this must be contextualised (i.e. tested empirically with users using the respective touchpoint). This does not only mean technical functional tests.  Rather, it must be checked whether the concrete implementation of the principles really leads to the users' understanding of the consequences and risks of data disclosure and feel that they can be effectively controlled."
    }
  },
  "Assets": {
    "Introduction": "# Introduction\n\n## Porsche Design System - Assets\nPorsche Design System stores some files like icons, fonts, marque, etc. as versioned static assets on a CDN for fast delivery and improved caching. \nMost of these assets are used within our components (e.g. `<p-marque>`) but can also be used as standalone assets in projects which either can't use the Porsche Design System or it does not exist a corresponding component for the asset (e.g. favicons).\n\nTo give teams the possibility to get the versioned file paths to these static assets we provide an asset package which contains **manifest files** (not the assets itself) to easily reference to our global asset files.\n\n**Actually we provide assets for:**\n- [Icons](assets/icons)\n- [Meta Icons](assets/meta-icons) (like favicon and touch icons)\n- [Marque](assets/marque)\n- [Fonts](assets/fonts)\n\n### Install\nIt's necessary to have access to the Porsche Design System private npm registry to be able to install the `@porsche-design-system/assets` npm package. \nIf you don't have an account yet, please first [read more about getting started as developer](start-coding/introduction).\n\n```shell\n// install with npm:\nnpm install @porsche-design-system/assets\n\n// install with yarn:\nyarn add @porsche-design-system/assets\n```\n\n### Usage\nSee corresponding section of [Icons](assets/icons), [Meta Icons](assets/meta-icons) (like favicon and touch icons), [Marque](assets/marque) and [Fonts](assets/fonts)",
    "Icons": "# Icons\n\n## Introduction\nIf a team can't use the \"Icon Component\" or needs the Porsche icon SVG images to build something new, we provide a manifest file to easily reference to the different icon images.\n\n## Usage \nOnce the `@porsche-design-system/assets` package [is installed](assets/introduction) you have access to the CDN path and the corresponding file names, e.g.:\n\n```ts\nimport { ICONS_CDN_BASE_URL, ICONS_MANIFEST } from '@porsche-design-system/assets';\n\nconst iconUrl = `${ICONS_CDN_BASE_URL}/${ICONS_MANIFEST.arrowRight}`;\n```\n",
    "Meta Icons": "# Meta Icons\n\n## Introduction\n\nMeta Icons are a set of icons to be used for the following purposes: **Favicon**, **Apple Touch Icons**, **Android Touch Icons** and **Microsoft Windows Tiles**.\n\nTo simplify the implementation process we provide a `getMetaTagsAndIconLinks` partial.\n\nSee [Meta Tags And Icon Links Partial](partials/meta-tags-and-icon-links) for more details.",
    "Marque": "# Marque\n\n## Introduction\nIf a team can't use the \"Marque\" component or needs the Porsche marque images to build something new, we provide a manifest file to easily reference to the different marque images.\n\n## Usage \nOnce the `@porsche-design-system/assets` package [is installed](assets/introduction) you have access to the CDN path and the corresponding file names, e.g.:\n\n```ts\nimport { MARQUE_CDN_BASE_URL, MARQUE_MANIFEST } from '@porsche-design-system/assets';\n\nconst marqueUrl = `${MARQUE_CDN_BASE_URL}/${MARQUE_MANIFEST.porscheMarqueTrademark.medium.1x}`;\n```\n",
    "Fonts": "# Fonts\n\n## Introduction\nIf a team can't use the Design System components, we provide a manifest file to easily reference to the different webfont files.\n\n## Usage \nOnce the `@porsche-design-system/assets` package [is installed](assets/introduction) you have access to the CDN path and the corresponding file names, e.g.:\n\n```ts\nimport { FONTS_CDN_BASE_URL, FONTS_MANIFEST } from '@porsche-design-system/assets';\n\nconst fontUrl = `${FONTS_CDN_BASE_URL}/${FONTS_MANIFEST.porscheNextWLaRegular.woff2}`;\n```\n"
  },
  "Utilities": {
    "Introduction": "# Introduction\n\n## Porsche Design System - Utilities\n\nThis package contains helpful SCSS & JS variables, functions and helpers.\n\n### Install\nIt's necessary to have access to the Porsche Design System private npm registry to be able to install the `@porsche-design-system/utilities` npm package. \nIf you don't have an account yet, please first [read more about getting started as developer](start-coding/introduction).\n\n```shell\n// install with npm:\nnpm install @porsche-design-system/utilities\n\n// install with yarn:\nyarn add @porsche-design-system/utilities\n```\n\n### Usage SCSS\n\nAssuming a proper SCSS compiler is set up within your project: Simply import the following file \nat the place where you want to make use of the **@porsche-design-system/utilities**.\n\n```scss\n@import '~@porsche-design-system/utilities/scss';\n```\n\nIf your SCSS compiler does not support '~' (tilde) imports, you can also import it trough a relative path from your **node_modules**.\n\n```scss\n@import 'path-to-your-node_modules/@porsche-design-system/utilities/scss';\n```\n\nA sample usage might look like as follows:\n\n```scss\n@import '~@porsche-design-system/utilities/scss';\n\n#app {\n  color: $p-color-default;\n  \n  @include p-media-query('s') {\n    color: $p-color-brand;\n  }\n}\n```\n\n### Usage JavaScript\n\n**Note!** The JavaScript utilities are especially made for JSS frameworks like [styled-components](https://styled-components.com) which allows e.g. the usage of [media queries](https://developer.mozilla.org/de/docs/Web/CSS/Media_Queries/Using_media_queries) in JavaScript. \nTherefore examples are made with styled components.\n\n```jsx\nimport { headline, color, font } from '@porsche-design-system/utilities';\n\nconst StyledHeadline = styled.h1`\n  ${headline['1']}\n`\n\nconst StyledP = styled.p`\n  color: ${color.brand}\n  font-size: ${font.size.small} \n`\n\nrender (\n  <StyledHeadline>\n    I am styled\n  </StyledHeadline>\n  <StyledP>\n    I am styled\n  </StyledP>\n)\n```",
    "Scss": {
      "Variables": "# Scss\n\n## Color\n\nA light and dark theme is available depending on which background it's used.   \n\n<br>\n<select id=\"theme-selector\" v-model=\"theme\" :data-selected=\"theme\">\n  <option disabled>Select a theme</option>\n  <option value=\"light\">Theme light</option>\n  <option value=\"dark\">Theme dark</option>\n</select>\n\n### Theme {{theme}}\n\n#### Brand colors\n\n|                                                   |       |                     \t             |\n|---------------------------------------------------|------|------------------------------------|\n| <ColorBadge :theme=\"theme\" color=\"brand\"/>  \t    | **Brand** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}brand`   |\n\n#### Background colors\n\n|                                                   |                |      \t             |\n|---------------------------------------------------|----------------|--------------------|\n| <ColorBadge :theme=\"theme\" color=\"background-default\"/>      | **Default**    | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}background-default` |\n| <ColorBadge :theme=\"theme\" color=\"background-surface\"/>      | **Surface**    | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}background-surface` |\n| <ColorBadge :theme=\"theme\" color=\"background-shading\"/>      | **Shading**    | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}background-shading` |\n\n#### Background notification colors\n\n|                                                   |                |      \t             |\n|---------------------------------------------------|----------------|--------------------| \n| <ColorBadge :theme=\"theme\" color=\"notification-error-soft\"/>  \t| **Error Soft** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}notification-error-soft`     |\n| <ColorBadge :theme=\"theme\" color=\"notification-success-soft\"/>  \t| **Success Soft** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}notification-success-soft`     |\n| <ColorBadge :theme=\"theme\" color=\"notification-warning-soft\"/>  \t| **Warning Soft** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}notification-warning-soft`     |\n| <ColorBadge :theme=\"theme\" color=\"notification-neutral-soft\"/>  \t| **Neutral Soft** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}notification-neutral-soft`     |\n\n#### Base color\n\n|                                                   |             |         \t             |\n|---------------------------------------------------|-------------|-----------------------|\n| <ColorBadge :theme=\"theme\" color=\"default\"/>      | **Default** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}default` |\n\n#### Neutral colors\n\n|                                                   |                      \t                |                         |\n|---------------------------------------------------|---------------------------------------|-------------------------|\n| <ColorBadge :theme=\"theme\" color=\"neutral-contrast-high\"/>  \t| **Neutral Contrast High** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}neutral-contrast-high`   |\n| <ColorBadge :theme=\"theme\" color=\"neutral-contrast-medium\"/>  | **Neutral Contrast Medium** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}neutral-contrast-medium` |\n| <ColorBadge :theme=\"theme\" color=\"neutral-contrast-low\"/>  \t| **Neutral Contrast Low** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}neutral-contrast-low`    |\n\n#### Notification colors\n\n|                                                           |            |          \t                            |\n|-----------------------------------------------------------|------------|---------------------------------------|\n| <ColorBadge :theme=\"theme\" color=\"notification-error\"/>  \t| **Error** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}notification-error`     |\n| <ColorBadge :theme=\"theme\" color=\"notification-success\"/> | **Success** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}notification-success`   |\n| <ColorBadge :theme=\"theme\" color=\"notification-warning\"/> | **Warning** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}notification-warning`   |\n| <ColorBadge :theme=\"theme\" color=\"notification-neutral\"/> | **Neutral** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}notification-neutral`   |\n\n#### State colors\n\n|                                                     |           |                      \t                  |\n|-----------------------------------------------------|-----------|-------------------------------------------|\n| <ColorBadge :theme=\"theme\" color=\"state-hover\"/>    | **:hover**    | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}state-hover`    |\n| <ColorBadge :theme=\"theme\" color=\"state-active\"/>   | **:active**   | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}state-active`   |\n| <ColorBadge :theme=\"theme\" color=\"state-focus\"/>    | **:focus**    | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}state-focus`    |\n| <ColorBadge :theme=\"theme\" color=\"state-disabled\"/> | **:disabled** | `$p-color{{theme === 'dark' ? '-theme-dark-' : '-'}}state-disabled` |\n\n---\n\n### External brand colors\n\n|                                           |               |                      \t         |\n| ----------------------------------------- | ------------- |--------------------------------|\n| <ColorBadge color=\"external-facebook\"/>   | **Facebook**  | `$p-color-external-facebook`   |\n| <ColorBadge color=\"external-google\"/>  \t  | **Google**    | `$p-color-external-google`     |\n| <ColorBadge color=\"external-instagram\"/>  | **Instagram** | `$p-color-external-instagram`  |\n| <ColorBadge color=\"external-kakaotalk\"/> | **KakaoTalk** | `$p-color-external-kakaotalk` |\n| <ColorBadge color=\"external-linkedin\"/>   | **LinkedIn**  | `$p-color-external-linkedin`   |\n| <ColorBadge color=\"external-naver\"/>  \t  | **Naver**     | `$p-color-external-naver`      |\n| <ColorBadge color=\"external-pinterest\"/>  | **Pinterest** | `$p-color-external-pinterest`  |\n| <ColorBadge color=\"external-reddit\"/>  \t  | **Reddit**    | `$p-color-external-reddit`     |\n| <ColorBadge color=\"external-tiktok\"/>  \t  | **TikTok**    | `$p-color-external-tiktok`     |\n| <ColorBadge color=\"external-twitter\"/>    | **Twitter**   | `$p-color-external-twitter`    |\n| <ColorBadge color=\"external-wechat\"/>  \t  | **WeChat**    | `$p-color-external-wechat`     |\n| <ColorBadge color=\"external-whatsapp\"/>   | **WhatsApp**  | `$p-color-external-whatsapp`   |\n| <ColorBadge color=\"external-xing\"/>  \t    | **XING**      | `$p-color-external-xing`       |\n| <ColorBadge color=\"external-youtube\"/>    | **YouTube**   | `$p-color-external-youtube`    |\n\n---\n\n## Spacing\n\nGiven values are:  \n`4 | 8 | 16 | 24 | 32 | 40 | 48 | 56 | 64 | 72 | 80`\n\nPossible variable for usage with SCSS (where {v} is the spacing value):\n```scss\n$p-spacing-{v};\n```\n\nOr the reduced set of spacings which should be used as main layout spacings for spacings between elements:\n\nGiven values are:  \n`x-small | small | medium | large | x-large | xx-large`\n\nPossible variable for usage with SCSS (where {v} is the spacing value):\n```scss\n$p-layout-{v};\n```\n\n---\n\n## Font\nFor font styling it's recommended to use the [`<p-headline>`](components/typography/headline)/[`<p-text>`](components/typography/text) component or [text/headline scss mixins](utilities/scss/mixins).\n\n### Family\nContains Porsche Next and predefined fallback fonts:\n\n```scss\n$p-font-family\n```\n\n### Weight\nGiven values are:  \n`thin | regular | semibold | bold`\n\nPossible variable for usage with SCSS (where {v} is the font weight value):\n\n```scss\n$p-font-weight-{v};\n```\n\n### Size\n\n#### Font scaling system\nGiven values are:  \n\n`12 | 16 | 18 | 20 | 24 | 28 | 30 | 32 | 36 | 42 | 44 | 48 | 52 | 60 | 62 | 72 | 84`\n\nPossible variable for usage with SCSS (where {v} is the font size value):\n```scss\n$p-font-size-{v};\n```\n\n#### Predefined font sizes\nGiven values are:  \n \n`x-small | small | medium | large | x-large`\n\nPossible variable for usage with SCSS (where {v} is the font size value):\n```scss\n$p-font-size-{v};\n```\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { Theme } from '@/models';\n  \n  @Component\n  export default class Variables extends Vue {\n    public theme: Theme = 'light';\n  }\n</script>",
      "Functions": "# Scss\n\n## Media Query\nPredefined breakpoints can easily be used as in the following examples.\n\nAvailable breakpoints:  \n`xxs | xs | s | m | l | xl | xxl`\n\n#### Example predefined breakpoint\n```scss\n@import '~@porsche-design-system/utilities/scss';\n\ndiv {\n  color: inherit;\n  \n  // from predefined breakpoint xs to m apply color aqua\n  @include p-media-query('xs', 'm') {\n    color: aqua;\n  }\n\n  // from predefined breakpoint m apply color deeppink\n  @include p-media-query('m') {\n    color: deeppink;\n  }\n}\n```\n\n---\n\n#### Example custom breakpoint\n```scss\n@import '~@porsche-design-system/utilities/scss';\n\ndiv {\n  color: inherit;\n  \n  // from 480px to 760px viewport width apply color aqua\n  @include p-media-query(480px, 760px) {\n    color: aqua;\n  }\n\n  // from 760px viewport width apply color deeppink\n  @include p-media-query(760px) {\n    color: deeppink;\n  }\n}\n```\n\n---\n\n## Typography\n\n**Note:** For font-styling it's recommended to use the [`<p-headline>`](components/typography/headline)/[`<p-text>`](components/typography/text) components.\n\n### Text\n\nGiven values are:  \n`x-small | small | medium | large | x-large`\n\nPossible text mixin for usage with SCSS (where {v} is the value):\n```\n@include p-text-{v};\n```\n\n#### Example\n```scss\n@import '~@porsche-design-system/utilities/scss';\n\nh1 {\n  @include p-text-small;\n}\n```\n\n#### Result\n```css\np {\n  font-family: \"Porsche Next\", \"Arial Narrow\", Arial, 'Heiti SC', SimHei, sans-serif;\n  font-weight: 400;\n  font-size: 1rem;\n  line-height: 1.5;\n}\n```\n\n### Headline\n\nGiven values are:  \n`title-large | headline-1 | headline-2 | headline-3 | headline-4 | headline-5`\n\nPossible headline mixin for usage with SCSS (where {v} is the value):\n```\n@include p-{v};\n```\n\n#### Example\n```scss\n@import '~@porsche-design-system/utilities/scss';\n\nh1 {\n  @include p-headline-1;\n}\n```\n\n#### Result\n```css\nh1 {\n  font-family: \"Porsche Next\", \"Arial Narrow\", Arial, 'Heiti SC', SimHei, sans-serif;\n  font-weight: 600;\n  font-size: 1.75rem;\n  line-height: 1.4285714286;\n}\n\n@media (min-width: 760px) and (max-width: 999px) {\n  h1 {\n    font-size: 2.25rem;\n    line-height: 1.2222222222;\n  }\n}\n\n@media (min-width: 1000px) and (max-width: 1299px) {\n  h1 {\n    font-size: 2.75rem;\n    line-height: 1.1818181818;\n  }\n}\n\n@media (min-width: 1300px) and (max-width: 1759px) {\n  h1 {\n    font-size: 3.25rem;\n    line-height: 1.2307692308;\n  }\n}\n\n@media (min-width: 1760px) {\n  h1 {\n    font-size: 3.75rem;\n    line-height: 1.2;\n  }\n}\n```\n\n---\n\n## State\n\n### Focus\n\nThe `:focus` state helps the user to navigate through all interactive elements via tab key and is required by accessibility guidelines and law. \nThe provided SCSS mixin ensures focus is shown by keyboard navigation only.\n\nGiven parameters are: \n* `$color`: Can be overwritten when default (`currentColor`) is not sufficient, e.g. a custom button with background-color and white text on a page with white surface.  \n* `$offset`: Can be overwritten when default offset is not sufficient.  \n* `$pseudo`: Needed whenever the invisible clickable and focusable area of an element shall be increased relative to a wrapping element.\n\n#### Example\n\n```scss\n@import '~@porsche-design-system/utilities/scss';\n\na {\n  @include p-focus;\n}\n\n.some-wrapper {\n  // to control the focusable area of the nested button a proper position needs to be defined\n  position: relative;\n  padding: 1rem;\n\n  button {\n    // use '::before' or '::after' if the focusable area needs to be enlarged relative to a wrapping element\n    @include p-focus($p-color-state-focus, 1px, '::before');\n  }\n}\n```\n\n#### Result\n\n```css\na { \n  outline: transparent solid 1px;\n  outline-offset: 2px;\n}\na::-moz-focus-inner { border: 0; }\na:focus { outline-color: currentColor; }\na:focus:not(:focus-visible) { outline-color: transparent; }\n\n.some-wrapper {\n  position: relative;\n  padding: 1rem;\n}\n.some-wrapper button::-moz-focus-inner { border:0; }\n.some-wrapper button::before { \n  content: \"\";\n  outline: transparent solid 1px;\n  outline-offset: 1px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n.some-wrapper button:focus::before { outline-color: currentColor; }\n.some-wrapper button:focus:not(:focus-visible)::before { outline-color: transparent; }\n```\n",
      "Helper": "# Scss\n\n## p-generate-font-definition($fontSize, $fontWeight)\n\nWith this mixin, it's possible to get various kinds of text variants (size and weight) by passing two parameters as variables for `size` and `weight`. \n\nPre defined **size** values are, `$p-font-size-{v};` where `v` is:  \n`12 | 16 | 18 | 20 | 24 | 28 | 30 | 32 | 36 | 42 | 44 | 48 | 52 | 60 | 62 | 72 | 84 | x-small | small | medium | large | x-large`\n\nPre defined **weight** values are:  \n`$p-font-weight-thin | $p-font-weight-regular | $p-font-weight-semibold | $p-font-weight-bold`\n\n#### Example\n\n```scss\np {\n  @include p-generate-font-definition($p-font-size-large, $p-font-weight-thin);\n}\n```\n\n#### Result\n```css\np {\n  font-family: \"Porsche Next\", \"Arial Narrow\", Arial, 'Heiti SC', SimHei, sans-serif;\n  font-weight: 100;\n  font-size: 2.25rem;\n  line-height: 1.33333;\n}\n```\n\n---\n\n## p-generate-type-scale($size)\nGenerates font-size and line-height styling definition to fit into Porsche Vertical Grid System.\n`$size` only accepts value in rem or px, e.g. 12px or 1.5rem.\n\n#### Example\n```scss\np {\n  @include p-generate-type-scale($p-font-size-32);\n}\n```\n\n#### Result\n```css\np {\n  font-size: 2rem;\n  line-height: 1.375;\n}\n```\n\n---\n\n## p-calculate-line-height($size)\nCalculates line-height to fit into Porsche Vertical Grid System.\nThe `$size` parameter only accepts value in rem or px, e.g. 12px or 1.5rem.\n\n#### Example\n```scss\np {\n  line-height: p-calculate-line-height($p-font-size-32);\n}\n```\n\n#### Result\n```css\np {\n  line-height: 1.375;\n}\n```\n\n---\n\n## p-px-to-rem($px)\nConverts px to rem unit. The base for rem calculation is defined with 16px by default.  \n`$px` only accepts value in px unit, e.g. 12px.\n\n#### Example\n```scss\ndiv {\n  width: p-px-to-rem(123px);\n}\n```\n\n#### Result\n```css\ndiv {\n  width: 7.6875rem;\n}\n```\n\n---\n\n## p-rem-to-px($rem)\nConverts rem to px unit. The base for rem calculation is defined with 16px by default.  \n`$rem` only accepts value in rem unit, e.g. 1.5rem.\n\n#### Example\n```scss\ndiv {\n  width: p-rem-to-px(1rem);\n}\n```\n\n#### Result\n```css\ndiv {\n  width: 16px;\n}\n```"
    },
    "Js": {
      "Variables": "# Js\n\n## Color\n\nA light (default) and dark theme is available depending on which background it's used.\n\n<br>\n<select id=\"theme-selector\" v-model=\"theme\" :data-selected=\"theme\">\n  <option disabled>Select a theme</option>\n  <option value=\"light\">Theme light</option>\n  <option value=\"dark\">Theme dark</option>\n</select>\n\n### Theme {{theme}}\n\n#### Brand colors\n\n|                                            |           |                                                        |\n| ------------------------------------------ | --------- | ------------------------------------------------------ |\n| <ColorBadge :theme=\"theme\" color=\"brand\"/> | **Brand** | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}brand` |\n\n#### Background colors\n\n|                                                 |                |                                                             |\n| ----------------------------------------------- | -------------- | ----------------------------------------------------------- |\n| <ColorBadge :theme=\"theme\" color=\"background-default\"/>    | **Default**    | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}background.default` |\n| <ColorBadge :theme=\"theme\" color=\"background-surface\"/>    | **Surface**    | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}background.surface`    |\n| <ColorBadge :theme=\"theme\" color=\"background-shading\"/>    | **Shading**    | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}background.shading`    |\n\n#### Background notification colors\n\n|                                                   |                |      \t             |\n|---------------------------------------------------|----------------|--------------------| \n| <ColorBadge :theme=\"theme\" color=\"notification-error-soft\"/>   | **Error Soft**   | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}notification.errorSoft`   |\n| <ColorBadge :theme=\"theme\" color=\"notification-success-soft\"/>   | **Success Soft**   | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}notification.successSoft`   |\n| <ColorBadge :theme=\"theme\" color=\"notification-warning-soft\"/>   | **Warning Soft**   | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}notification.warningSoft`   |\n| <ColorBadge :theme=\"theme\" color=\"notification-neutral-soft\"/>   | **Neutral Soft**   | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}notification.neutralSoft`   |\n\n#### Base color\n\n|                                              |             |                                                          |\n| -------------------------------------------- | ----------- | -------------------------------------------------------- |\n| <ColorBadge :theme=\"theme\" color=\"default\"/> | **Default** | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}default` |\n\n#### Neutral colors\n\n|                                                              |                             |                                                                         |\n| ------------------------------------------------------------ | --------------------------- | ----------------------------------------------------------------------- |\n| <ColorBadge :theme=\"theme\" color=\"neutral-contrast-high\"/>   | **Neutral Contrast High**   | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}neutralContrast.high`   |\n| <ColorBadge :theme=\"theme\" color=\"neutral-contrast-medium\"/> | **Neutral Contrast Medium** | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}neutralContrast.medium` |\n| <ColorBadge :theme=\"theme\" color=\"neutral-contrast-low\"/>    | **Neutral Contrast Low**    | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}neutralContrast.low`    |\n\n#### Notification colors\n\n|                                                          |             |                                                                       |\n| -------------------------------------------------------- | ----------- | --------------------------------------------------------------------- |\n| <ColorBadge :theme=\"theme\" color=\"notification-error\"/>   | **Error**   | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}notification.error`   |\n| <ColorBadge :theme=\"theme\" color=\"notification-success\"/> | **Success** | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}notification.success` |\n| <ColorBadge :theme=\"theme\" color=\"notification-warning\"/> | **Warning** | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}notification.warning` |\n| <ColorBadge :theme=\"theme\" color=\"notification-neutral\"/> | **Neutral** | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}notification.neutral` |\n\n#### State colors\n\n|                                                     |               |                                                                 |\n| --------------------------------------------------- | ------------- | --------------------------------------------------------------- |\n| <ColorBadge :theme=\"theme\" color=\"state-hover\"/>    | **:hover**    | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}state.hover`    |\n| <ColorBadge :theme=\"theme\" color=\"state-active\"/>   | **:active**   | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}state.active`   |\n| <ColorBadge :theme=\"theme\" color=\"state-focus\"/>    | **:focus**    | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}state.focus`    |\n| <ColorBadge :theme=\"theme\" color=\"state-disabled\"/> | **:disabled** | `color{{theme === 'dark' ? '.darkTheme.' : '.'}}state.disabled` |\n\n---\n\n### External brand colors\n\n|                                           |               |                            |\n| ----------------------------------------- | ------------- | -------------------------- |\n| <ColorBadge color=\"external-facebook\"/>   | **Facebook**  | `color.external.facebook`  |\n| <ColorBadge color=\"external-google\"/>     | **Google**    | `color.external.google`    |\n| <ColorBadge color=\"external-instagram\"/>  | **Instagram** | `color.external.instagram` |\n| <ColorBadge color=\"external-kakaotalk\"/> | **KakaoTalk** | `color.external.kakaotalk` |\n| <ColorBadge color=\"external-linkedin\"/>   | **LinkedIn**  | `color.external.linkedin`  |\n| <ColorBadge color=\"external-naver\"/>      | **Naver**     | `color.external.naver`     |\n| <ColorBadge color=\"external-pinterest\"/>  | **Pinterest** | `color.external.pinterest` |\n| <ColorBadge color=\"external-reddit\"/>     | **Reddit**    | `color.external.reddit`    |\n| <ColorBadge color=\"external-tiktok\"/>     | **TikTok**    | `color.external.tiktok`    |\n| <ColorBadge color=\"external-twitter\"/>    | **Twitter**   | `color.external.twitter`   |\n| <ColorBadge color=\"external-wechat\"/>     | **WeChat**    | `color.external.wechat`    |\n| <ColorBadge color=\"external-whatsapp\"/>   | **WhatsApp**  | `color.external.whatsapp`  |\n| <ColorBadge color=\"external-xing\"/>       | **XING**      | `color.external.xing`      |\n| <ColorBadge color=\"external-youtube\"/>    | **YouTube**   | `color.external.youtube`   |\n\n---\n\n## Spacing\n\nGiven values are:  \n`4 | 8 | 16 | 24 | 32 | 40 | 48 | 56 | 64 | 72 | 80`\n\n**Example:**\n\n```\nimport { spacing } from '@porsche-design-system/utilities';\n\n// 'v' is the spacing value\nspacing[v]\n```\n\nOr the reduced set of spacings which should be used as main layout spacings for spacings between elements:\n\nGiven values are:  \n`xSmall | small | medium | large | xLarge | xxLarge`\n\n**Example:**\n\n```\nimport { layout } from '@porsche-design-system/utilities';\n\n// 'v' is the layout value\nlayout[v]\n```\n\n---\n\n## Font\n\nFor font styling it's recommended to use the [`<p-headline>`](components/typography/headline)/[`<p-text>`](components/typography/text) component or [text/headline js functions](utilities/js/functions).\n\n### Family\n\nContains Porsche Next and predefined fallback fonts:\n\n```\nimport { font } from '@porsche-design-system/utilities';\n\nfont.family\n```\n\n### Weight\n\nGiven values are:  \n`thin | regular | semibold | bold`\n\n**Example:**\n\n```\nimport { font } from '@porsche-design-system/utilities';\n\n// 'v' is the spacing value\nfont.weight[v]\n```\n\n### Size\n\n#### Font scaling system\n\nBy selecting a specific size you will get the according `lineHeight` and `fontSize`.\n\nGiven values are:\n\n`12 | 16 | 18 | 20 | 24 | 28 | 30 | 32 | 36 | 42 | 44 | 48 | 52 | 60 | 62 | 72 | 84`\n\nPredefined text sizes are also provided:\n\n`xSmall | small | medium | large | xLarge`\n\n**Example general:**\n\n```\nimport { font } from '@porsche-design-system/utilities';\n\n// 'v' is the spacing value\nfont.size[v]\n```\n\n**Example specific:**\n```\nimport { font } from '@porsche-design-system/utilities';\n\nfont.size['16']\n```\n\n**Result:**\n\n```\nlineHeight: 1.5;\nfontSize: '1rem';\n```\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { Theme } from '@/models';\n  \n  @Component\n  export default class Variables extends Vue {\n    public theme: Theme = 'light';\n  }\n</script>",
      "Functions": "# Js\n\n## Breakpoints\n\nWe provide a `breakpoint` object with predefined values: `xxs | xs | s | m | l | xl | xxl` \n\n#### Example\n\n```tsx\nimport { breakpoint } from '@porsche-design-system/utilities';\n\nif (window.matchMedia(`(min-width: ${breakpoint.m}px)`).matches) {\n  /* The viewport is greater than, or equal to the breakpointValue wide */\n} else {\n  /* The viewport is less than breakpointValue wide */\n}\n```\n\n## Media Query\n\nThe function has two parameter `mediaQuery(minBreakpoint: breakpoint | number, maxBreakpoint?: breakpoints | number)` where the `minBreakpoint` parameter is mandatory.\nYou can choose any number as pixel value or our predefined breakpoints as `minBreakpoint` or `maxBreakpoint`.\n\nThe type `breakpoint` includes predefined breakpoints: `xxs | xs | s | m | l | xl | xxl`\n\nThe `mediaQuery()` function returns a `@media (min-width: minBreakpoints) || @media (min-width: minBreakpoint) and (max-width: maxBreakpoint)`\n\n#### Example predefined breakpoint\n\n```tsx\nimport { mediaQuery, breakpoint } from '@porsche-design-system/utilities';\n\nconst StyledDiv = css`{\n  color: 'royalblue',\n\n  // from predefined breakpoint xs to m apply color aqua\n  [mediaQuery(breakpoint.xs, breakpoint.m)]: { color: 'aqua' },\n\n  // from predefined breakpoint m apply color deeppink\n  [mediaQuery(breakpoint.m)]: { color: 'deeppink' }\n}`\n\nrender (\n  <StyledDiv>\n    Styled Text\n  </StyledDiv>\n)\n```\n\n---\n\n#### Example custom breakpoint\n\n```tsx\nimport { mediaQuery } from '@porsche-design-system/utilities';\n\nconst StyledDiv = css`{\n  color: 'royalblue',\n\n  // from 480px to 760px viewport width apply color aqua\n  [mediaQuery(480, 760)]: { color: 'aqua' },\n\n  // from 760px viewport width apply color deeppink\n  [mediaQuery(760)]: { color: 'deeppink' }\n}`\n\nrender (\n  <StyledDiv>\n    Styled Text\n  </StyledDiv>\n)\n```\n\n---\n\n## Typography\n\n**Note:** For font-styling it's recommended to use the [`<p-headline>`](components/typography/headline)/[`<p-text>`](components/typography/text) components.\n\nThe predefined variables for `text` and `headline` **only** work with JSS frameworks like styled-components due to the necessity of font sizes in relation to breakpoints.\nYou can follow e.g. [React media queries Hooks](https://medium.com/@ttennant/react-inline-styles-and-media-queries-using-a-custom-react-hook-e76fa9ec89f6) and style your custom component according to [Typography Guidelines](components/typography).\n\n### Text\n\nGiven values are:  \n`text.xSmall | text.small | text.medium | text.large | text.xLarge`\n\n#### Example\n\n```tsx\nimport { text } from '@porsche-design-system/utilities';\nimport styled from 'styled-components';\n\nconst PTextSmall = styled.p`\n  ${text.small}\n`;\n```\n\n#### Result\n\n```css\np {\n  font-family: \"Porsche Next\", \"Arial Narrow\", Arial, 'Heiti SC', SimHei, sans-serif;\n  font-weight: 400;\n  font-size: 1rem;\n  line-height: 1.5;\n}\n```\n\n### Headline\n\nGiven variables are:  \n`title.large | headline['1'] | headline['2'] | headline['3'] | headline['4'] | headline['5']`\n\n#### Example\n\n```tsx\nimport { headline } from '@porsche-design-system/utilities';\nimport styled from 'styled-components';__\n\nconst PHeadline = styled.h1`\n  ${headline['1']}\n`;\n```\n\n#### Result\n\n```css\nh1 {\n  font-family: \"Porsche Next\", \"Arial Narrow\", Arial, 'Heiti SC', SimHei, sans-serif;\n  font-weight: 600;\n  font-size: 1.75rem;\n  line-height: 1.4285714286;\n}\n\n@media (min-width: 760px) and (max-width: 999px) {\n  h1 {\n    font-size: 2.25rem;\n    line-height: 1.2222222222;\n  }\n}\n\n@media (min-width: 1000px) and (max-width: 1299px) {\n  h1 {\n    font-size: 2.75rem;\n    line-height: 1.1818181818;\n  }\n}\n\n@media (min-width: 1300px) and (max-width: 1759px) {\n  h1 {\n    font-size: 3.25rem;\n    line-height: 1.2307692308;\n  }\n}\n\n@media (min-width: 1760px) {\n  h1 {\n    font-size: 3.75rem;\n    line-height: 1.2;\n  }\n}\n```\n\n---\n\n## State\n\n### Focus\n\nThe `:focus` state helps the user to navigate through all interactive elements via tab key and is required by accessibility guidelines and law. \nThe provided SCSS mixin ensures focus is shown by keyboard navigation only.\n\nGiven options object keys: \n* `color`: Can be overwritten when default (`currentColor`) is not sufficient, e.g. a custom button with background-color and white text on a page with white surface.  \n* `offset`: Can be overwritten when default offset is not sufficient.\n* `pseudo`: Needed whenever the invisible clickable and focusable area of an element shall be increased relative to a wrapping element.\n\n#### Example\n\n```tsx\nimport { color, focus } from '@porsche-design-system/utilities';\nimport styled from 'styled-components';\n\nconst Anchor = styled.a`${focus()}`;\nconst Button = styled.div`\n  // to control the focusable area of the nested button a proper position needs to be defined\n  position: relative; \n  padding: 1rem;\n  \n  // use '::before' or '::after' if the focusable area needs to be enlarged relative to a wrapping element\n  button {\n    ${focus({color: color.state.focus, offset: '1px', pseudo: '::before'})}\n  }`;\n\nreturn (\n  <>\n    <Anchor>Some Label</Anchor>\n    <Button>Some Label</Button>\n  </>\n);\n```\n\n#### Result\n\n```css\na { \n  outline: transparent solid 1px;\n  outline-offset: 2px;\n}\na::-moz-focus-inner { border: 0; }\na:focus { outline-color: currentColor; }\na:focus:not(:focus-visible) { outline-color: transparent; }\n\ndiv {\n  position: relative;\n  padding: 1rem;\n}\ndiv button::-moz-focus-inner { border:0; }\ndiv button::before { \n  content: \"\";\n  outline: transparent solid 1px;\n  outline-offset: 1px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\ndiv button:focus::before { outline-color: currentColor; }\ndiv button:focus:not(:focus-visible)::before { outline-color: transparent; }\n```",
      "Helper": "# Js\n\n## generateFontDefinition(fontSize, fontWeight)\n\nWith the `generateFontDefinition()` function it is possible to get various kinds of font variants (size and weight) by passing two parameters as variables for `fontSize` and `fontWeight`.\nThe `fontSize` is freely selectable, for the `fontWeight` one of the predefined weight values must be chosen.\n\nPredefined size values are:  \n `12 | 16 | 18 | 20 | 24 | 28 | 30 | 32 | 36 | 42 | 44 | 48 | 52 | 60 | 62 | 72 | 84 | xSmall | small | medium | large | xLarge`  \n\nPre defined weight values are:  \n `thin | regular | semibold | bold`\n\n#### Example usage\n\n```\nimport { generateFontDefinition } from '@porsche-design-system/utilities';\n\nconst StyledText = styled.p`\n  ${generateFontDefinition('large', 'thin')};\n`\n```\n\n#### Result\n\n```\np {\n  font-family: \"Porsche Next\", \"Arial Narrow\", Arial, 'Heiti SC', SimHei, sans-serif;\n  font-weight: 100;\n  font-size: 2.25rem;\n  line-height: 1.33333;\n}\n```\n\n## generateTypeScale(fontSize)\n\nGenerates font-size and line-height styling definition to fit into Porsche Vertical Grid System.\nThe `fontSize` parameter only accepts value in rem or px, e.g. 12px or 1.5rem.\n\n#### Example\n\n```\nimport { generateTypeScale } from '@porsche-design-system/utilities';\n\nconst StyledP = styled.p`\n  ${generateTypeScale('32px')}\n`\n```\n\n#### Result\n\n```\np {\n  font-size: 2rem;\n  line-height: 1.375;\n}\n```\n\n---\n\n## calculateLineHeight(fontSize)\n\nCalculates line-height to fit into Porsche Vertical Grid System. \nThe `fontSize` parameter only accepts value in rem or px, e.g. 12px or 1.5rem.\n\n#### Example\n\n```\nimport { calculateLineHeight } from '@porsche-design-system/utilities';\n\nconst StyledP = styled.p`\n  lineHeight: ${calculateLineHeight('32px')}\n`\n```\n\n#### Result\n\n```\np {\n  line-height: 1.375;\n}\n```\n\n---\n\n## pxToRem(px)\n\nConverts px to rem unit. The base for rem calculation is defined with 16px by default.  \nParameter `px` only accepts value in px unit, e.g. 12px.\n\n#### Example\n\n```\nimport { pxToRem } from '@porsche-design-system/utilities';\n\ndiv {\n  width: pxToRem('123px');\n}\n```\n\n#### Result\n\n```\ndiv {\n  width: 7.6875rem;\n}\n```\n\n---\n\n## remToPx(rem)\n\nConverts rem to px unit. The base for rem calculation is defined with 16px by default.  \nParameter `rem` only accepts value in rem unit, e.g. 1.5rem.\n\n#### Example\n\n```\nimport { remToPx } from '@porsche-design-system/utilities';\n\ndiv {\n  width: remToPx('1rem');\n}\n```\n\n#### Result\n\n```\ndiv {\n  width: 16px;\n}\n```"
    }
  },
  "Partials": {
    "Loader Script": "# Loader Script\n**Function name:** `getLoaderScript()`\n\nWhen using `porsche-design-system/components-{angular|react}` our core loader gets bundled into your application.  \nThis impacts the loading behavior of Porsche Design System components because the code gets executed later, once the framework bootstraps.\n\nTo achieve this bootstrapping **earlier** we provide a partial called `getLoaderScript()` in all `@porsche-design-system/components-{js|angular|react}` packages which needs to be imported into the `<body>` of your `index.html`.\n\n## Supported options:\n- **prefix**: string | string[] = undefined\n- **withoutTags**: boolean = false\n\n### Example usage with dynamic template\n\nThe example shows how to implement the partial in a webpack (or similar) project.\n\n```html\n// index.html\n\n<body>\n  // Using template syntax\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getLoaderScript() %>\n\n  // With custom prefix\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getLoaderScript({ prefix: 'my-prefix' }) %>\n\n  // With multiple custom prefixes\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getLoaderScript({ prefix: ['my-prefix', 'another-prefix'] }) %>\n</body>\n\n<body>\n  // without script tag  \n  <script><%= require('@porsche-design-system/components-{js|angular|react}/partials').getLoaderScript({ withoutTags: true }) %></script>\n</body>\n```\n\n### Alternative: Example usage with placeholder\n\nIf your bundler (webpack or similar) does not work with the syntax of the previous example you can put a placeholder in your markup and replace its content with a script.\n\n```html\n// index.html\n\n<body>\n  <!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_LOADER_SCRIPT-->\n</body>\n``` \n\n```json\n// package.json (tested on macOS, the script may need to be adjusted depending on the operating system used), make sure to adjust the path to the index.html file and use the correct partials package import from your framework {js|angular|react}\n\n\"scripts\": {\n  \"prestart\": \"yarn replace\",\n  \"replace\": \"placeholder='<!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_LOADER_SCRIPT-->' && partial=$placeholder$(node -e 'console.log(require(\\\"@porsche-design-system/components-js/partials\\\").getLoaderScript())') && regex=$placeholder'.*' && sed -i '' -E -e \\\"s@$regex@$partial@\\\" index.html\",\n}\n```\n",
    "Component Chunk Links": "# Component Chunk Links\n**Function name:** `getComponentChunkLinks()`\n\nPorsche Design System components load dynamically from a CDN as soon as they are used for the first time.  \nThis results in a waterfall like loading behaviour where your application bootstraps first, then loads the Porsche Design System Core and when any component rendered the corresponding component chunk gets loaded afterwards.  \nThis can be optimized by fetching used chunks in parallel while the application is bootstrapping.\n\nTherefore, we provide a ready to use partial in all `@porsche-design-system/components-{js|angular|react}` packages called `getComponentChunkLinks()` which needs to be imported into the `<head>` of your `index.html`.\n\n## Supported options:\n- **components**: ({{this.componentChunks}})[] = []\n- **cdn:** 'auto' | 'cn' = 'auto'\n- **withoutTags**: boolean = false\n\nBy default, our core is always preloaded when using this partial.\n\n### Example usage with dynamic template\n\nThe example shows how to implement the partial in a webpack (or similar) project.\n\n```html\n// index.html\n\n<head>\n  // Using template syntax (make sure to preload only components chunks which are really needed initially!)\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getComponentChunkLinks({ components: ['button', 'marque'] }) %>\n</head>\n\n<head>\n  // force using China CDN\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getComponentChunkLinks({ cdn: 'cn' }) %>\n</head>\n\n<head>\n  // without link tags\n  // first element is core which needs to be loaded with crossorigin attribute\n  <link rel=\"preload\" href=\"<%= require('@porsche-design-system/components-{js|angular|react}/partials').getComponentChunkLinks({ withoutTags: true, components: ['button'] })[0] %>\" crossorigin>\n  // further elements are the ones passed into components array\n  <link rel=\"preload\" href=\"<%= require('@porsche-design-system/components-{js|angular|react}/partials').getComponentChunkLinks({ withoutTags: true, components: ['button'] })[1] %>\">\n</head>\n```\n\n### Alternative: Example usage with placeholder\n\nIf your bundler (webpack or similar) does not work with the syntax of the previous example you can put a placeholder in your markup and replace its content with a script.\n\n```html\n// index.html\n\n<head>\n  <!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_COMPONENT_CHUNKS-->\n</head>\n``` \n\n```json\n// package.json (tested on macOS, the script may need to be adjusted depending on the operating system used), make sure to adjust the path to the index.html file and use the correct partials package import from your framework {js|angular|react}\n\n\"scripts\": {\n  \"prestart\": \"yarn replace\",\n  \"replace\": \"placeholder='<!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_COMPONENT_CHUNKS-->' && partial=$placeholder$(node -e 'console.log(require(\\\"@porsche-design-system/components-js/partials\\\").getComponentChunkLinks({ components: [\\\"button\\\", \\\"marque\\\"] }))') && regex=$placeholder'.*' && sed -i '' -E -e \\\"s@$regex@$partial@\\\" index.html\",\n}\n``` \n\nYou can find an implemented example in our [Sample VanillaJS Integration](https://github.com/porscheui/sample-integration-vanillajs), [Sample Angular Integration](https://github.com/porscheui/sample-integration-angular) or [Sample React Integration](https://github.com/porscheui/sample-integration-react)\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { COMPONENT_CHUNK_NAMES } from '../../../../components-js/projects/components-wrapper';\n  \n  @Component\n  export default class Code extends Vue {\n    public componentChunks: string = COMPONENT_CHUNK_NAMES.map(x => `'${x}'`).join(' | ');\n  }\n</script>",
    "Initial Styles": "# Initial Styles\n**Function name:** `getInitialStyles()`\n\nIf you use `Porsche Design System` components, we take care that your application only renders those if they are fully styled.\nHowever, it takes a moment until our core is fully loaded and only then we can take action. This short timespan has to be covered.\n\nTherefore, we provide a ready to use partial in all `@porsche-design-system/components-{js|angular|react}` packages called `getInitialStyles()` which needs to be imported into the `<head>` of your `index.html`.\n\n## Supported options:\n- **prefix:** string = ''\n- **withoutTags**: boolean = false\n\n### Example usage with dynamic template \n\nThe example shows how to implement the partial in a webpack (or similar) project.\n\n```html\n// index.html\n\n<head>\n  // without parameters\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getInitialStyles() %>\n</head>\n\n<head>\n  // with custom prefix to match your prefixed components\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getInitialStyles({ prefix: 'custom-prefix' }) %>\n</head>\n\n<head>\n  // without style tags\n  <style>\n    <%= require('@porsche-design-system/components-{js|angular|react}/partials').getInitialStyles({ withoutTags: true }) %>\n  </style>\n</head>\n``` \n\n### Alternative: Example usage with placeholder \n\nIf your bundler (webpack or similar) does not work with the syntax of the previous example you can put a placeholder in your markup and replace its content with a script.\n\n```html\n// index.html\n\n<head>\n  <!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_INITIAL_STYLES-->\n</head>\n``` \n\n```json\n// package.json (tested on macOS, the script may need to be adjusted depending on the operating system used), make sure to adjust the path to the index.html file and use the correct partials package import from your framework {js|angular|react}\n\n\"scripts\": {\n  \"prestart\": \"yarn replace\",\n  \"replace\": \"placeholder='<!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_INITIAL_STYLES-->' && partial=$placeholder$(node -e 'console.log(require(\\\"@porsche-design-system/components-js/partials\\\").getInitialStyles())') && regex=$placeholder'.*' && sed -i '' -E -e \\\"s@$regex@$partial@\\\" index.html\",\n} \n``` \n\nYou can find an implemented example in our [Sample VanillaJS Integration](https://github.com/porscheui/sample-integration-vanillajs), [Sample Angular Integration](https://github.com/porscheui/sample-integration-angular) or [Sample React Integration](https://github.com/porscheui/sample-integration-react)\n",
    "Font Face Stylesheet": "# Font Face Stylesheet\n**Function name:** `getFontFaceStylesheet()`\n\nIf you use the Porsche Design System components we inject a stylesheet with all font-face definitions into the head of your application as soon as our core is loaded.\nRegarding which font-styles you use on your page, these fonts are downloaded from our CDN. This can lead (for the first time) to a decent rendering glitch of your texts. \nTo improve rendering we recommend that you load the stylesheet on your own. \n\nTherefore, we provide a ready to use partial in all `@porsche-design-system/components-{js|angular|react}` packages called `getFontFaceStylesheet()` which needs to be imported into the `<head>` of your `index.html`.\n\n## Supported options:\n- **cdn:** 'auto' | 'cn' = 'auto'\n- **withoutTags**: boolean = false\n\n### Example usage with dynamic template\n\nThe example shows how to implement the partial in a webpack (or similar) project.\n\n```html\n// index.html\n\n<head>\n  // without parameters\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getFontFaceStylesheet() %>\n</head>\n\n<head>\n  // force using China CDN\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getFontFaceStylesheet({ cdn: 'cn' }) %>\n</head>\n\n<head>\n  // without link tags\n  <link rel=\"stylesheet\" href=\"<%= require('@porsche-design-system/components-{js|angular|react}/partials').getFontFaceStylesheet({ withoutTags: true }) %>\" type=\"text/css\" crossorigin>\n</head>\n```\n\n### Alternative: Example usage with placeholder\n\nIf your bundler (webpack or similar) does not work with the syntax of the previous example you can put a placeholder in your markup and replace its content with a script.\n\n```html\n// index.html\n\n<head>\n  <!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_FONT_FACE_STYLESHEET-->\n</head>\n``` \n\n```json\n// package.json (tested on macOS, the script may need to be adjusted depending on the operating system used), make sure to adjust the path to the index.html file and use the correct partials package import from your framework {js|angular|react}\n\n\"scripts\": {\n  \"prestart\": \"yarn replace\",\n  \"replace\": \"placeholder='<!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_FONT_FACE_STYLESHEET-->' && partial=$placeholder$(node -e 'console.log(require(\\\"@porsche-design-system/components-js/partials\\\").getFontFaceStylesheet())') && regex=$placeholder'.*' && sed -i '' -E -e \\\"s@$regex@$partial@\\\" index.html\",\n} \n```\n\nYou can find an implemented example in our [Sample VanillaJS Integration](https://github.com/porscheui/sample-integration-vanillajs), [Sample Angular Integration](https://github.com/porscheui/sample-integration-angular) or [Sample React Integration](https://github.com/porscheui/sample-integration-react)\n",
    "Font Links": "# Font Links\n**Function name:** `getFontLinks()`\n\nFonts should be loaded as soon as possible but only those which are needed. \nThe Porsche Design System is not able to determine which components you use on the site and which fonts to be provided **initially**.\nThat's why the font face stylesheet of the Porsche Design System handles the correct font to be loaded by unicode-range definition but during runtime and after bootstrapping of your application, which might result in FOUT.\n\nTherefore, we provide a ready to use partial in all `@porsche-design-system/components-{js|angular|react}` packages called `getFontLinks()` which needs to be imported into the `<head>` of your `index.html`.\n\n##### Supported options:\n- **subset**: 'latin' | 'greek' | 'cyril' = 'latin'\n- **weights**: ('thin' | 'regular' | 'semi-bold' | 'bold')[] = ['regular']\n- **cdn:** 'auto' | 'cn' = 'auto'\n- **withoutTags**: boolean = false\n\n#### Example usage with dynamic template\n\nThe example shows how to implement the partial in a webpack (or similar) project.\n\n```html\n// index.html\n\n<head>\n  // Using template syntax (make sure to preload only fonts which are really needed initially!)\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getFontLinks({ weights: ['regular', 'semi-bold'] }) %>\n</head>\n\n<head>\n  // force using China CDN\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getFontLinks({ cdn: 'cn' }) %>\n</head>\n\n<head>\n  // without link tags\n  <link rel=\"preload\" href=\"<%= require('@porsche-design-system/components-{js|angular|react}/partials').getFontLinks({ withoutTags: true })[0] %>\" as=\"font\" type=\"font/woff2\" crossorigin>\n</head>\n```\n\n#### Alternative: Example usage with placeholder\n\nIf your bundler (webpack or similar) does not work with the syntax of the previous example you can put a placeholder in your markup and replace its content with a script.\n\n```html\n// index.html\n\n<head>\n  <!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_FONT_LATIN-->\n</head>\n``` \n\n```json\n// package.json (tested on macOS, the script may need to be adjusted depending on the operating system used), make sure to adjust the path to the index.html file and use the correct partials package import from your framework {js|angular|react}\n\n\"scripts\": {\n  \"prestart\": \"yarn replace\",\n  \"replace\": \"placeholder='<!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_FONT_LATIN-->' && partial=$placeholder$(node -e 'console.log(require(\\\"@porsche-design-system/components-js/partials\\\").getFontLinks({ weights: [\\\"regular\\\", \\\"semi-bold\\\"] }))') && regex=$placeholder'.*' && sed -i '' -E -e \\\"s@$regex@$partial@\\\" index.html\",\n}\n``` \n\nYou can find an implemented example in our [Sample VanillaJS Integration](https://github.com/porscheui/sample-integration-vanillajs), [Sample Angular Integration](https://github.com/porscheui/sample-integration-angular) or [Sample React Integration](https://github.com/porscheui/sample-integration-react)\n",
    "Icon Links": "# Icon Links\n**Function name:** `getIconLinks()`\n\nPorsche Design System icons are loaded dynamically from a CDN as soon as they are used for the first time.  \nThis results in a waterfall like loading behaviour where your application is bootstrapped first, then loads the Porsche Design System Core and when any icon is rendered the corresponding icon is loaded afterwards.  \nThis can be optimized by prefetching used icons in parallel while the application is being bootstrapped.\nKeep in mind that prefetching is not yet supported on Safari and Safari on iOS, so you will not see a performance benefit there. [Current prefetch status on CanIUse](https://caniuse.com/link-rel-prefetch)\n\nTherefore, we provide a ready to use partial in all `@porsche-design-system/components-{js|angular|react}` packages called `getIconLinks()` which needs to be imported into the `<head>` of your `index.html`.\n\n## Supported options:\n- **icons**: ({{this.iconNames}})[] = []\n- **cdn:** 'auto' | 'cn' = 'auto'\n- **withoutTags**: boolean = false\n\n### Example usage with dynamic template\n\nThe example shows how to implement the partial in a webpack (or similar) project.\n\n```html\n// index.html\n\n<head>\n  // Using template syntax (make sure to preload only icons which are really needed initially!)\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getIconLinks({ icons: ['arrowHeadRight', 'plus'] }) %>\n</head>\n\n<head>\n  // force using China CDN\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getIconLinks({ icons: ['arrowHeadRight', 'plus'], cdn: 'cn' }) %>\n</head>\n\n<head>\n  // without link tags  \n  <link rel=\"prefetch\" href=\"<%= require('@porsche-design-system/components-{js|angular|react}/partials').getIconLinks({ withoutTags: true, icons: ['arrowHeadRight'] })[0] %>\" as=\"image\" type=\"image/svg+xml\" crossorigin>\n</head>\n```\n\n### Alternative: Example usage with placeholder\n\nIf your bundler (webpack or similar) does not work with the syntax of the previous example you can put a placeholder in your markup and replace its content with a script.\n\n```html\n// index.html\n\n<head>\n  <!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_ICONS-->\n</head>\n``` \n\n```json\n// package.json (tested on macOS, the script may need to be adjusted depending on the operating system used), make sure to adjust the path to the index.html file and use the correct partials package import from your framework {js|angular|react}\n\n\"scripts\": {\n  \"prestart\": \"yarn replace\",\n  \"replace\": \"placeholder='<!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_ICONS-->' && partial=$placeholder$(node -e 'console.log(require(\\\"@porsche-design-system/components-js/partials\\\").getIconLinks({ icons: [\\\"arrowHeadRight\\\", \\\"plus\\\"] }))') && regex=$placeholder'.*' && sed -i '' -E -e \\\"s@$regex@$partial@\\\" index.html\",\n}\n``` \n\nYou can find an implemented example in our [Sample VanillaJS Integration](https://github.com/porscheui/sample-integration-vanillajs), [Sample Angular Integration](https://github.com/porscheui/sample-integration-angular) or [Sample React Integration](https://github.com/porscheui/sample-integration-react)\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { ICON_NAMES } from '@porsche-design-system/icons';\n  \n  @Component\n  export default class Code extends Vue {\n    public iconNames: string = ICON_NAMES.map(x => `'${x}'`).join(' | ');\n  }\n</script>\n",
    "Meta Tags And Icon Links": "# Meta Tags And Icon Links\n**Function name:** `getMetaTagsAndIconLinks()`\n\n## Introduction\nMeta Icons are a set of icons to be used for the following purposes: **Favicon**, **Apple Touch Icons**, **Android Touch Icons** and **Microsoft Windows Tiles**.\nTo simplify the implementation process we provide a `getMetaTagsAndIconLinks` partial.\n\n##### Options:\n- **appTitle:** string\n- **cdn:** 'auto' | 'cn' = 'auto'\n\n#### Example usage with dynamic template\n\nThe example shows how to implement the partial in a webpack (or similar) project.\n\n```html\n// index.html\n\n<head>  \n  // with appTitle only\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getMetaTagsAndIconLinks({ appTitle: 'TITLE_OF_YOUR_APP' }) %>\n</head>\n\n<head>\n  // force using China CDN\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getMetaTagsAndIconLinks({ appTitle: 'TITLE_OF_YOUR_APP', cdn: 'cn' }) %>\n</head>\n```\n\n##### Result\n\nThe result of this partial looks like this:\n\n<pre><code class=\"language-html readonly\">{{this.metaTagsAndIconLinks}}</code></pre>\n\n\n#### Alternative: Example usage with placeholder\n\nIf your bundler (webpack or similar) does not work with the syntax of the previous example you can put a placeholder in your markup and replace its content with a script.\n\n```html\n// index.html\n\n<head>\n  <!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_META_TAGS_AND_ICON_LINKS-->\n</head>\n``` \n\n```json\n// package.json (tested on macOS, the script may need to be adjusted depending on the operating system used), make sure to adjust the path to the index.html file and use the correct partials package import from your framework {js|angular|react}\n\n\"scripts\": {\n  \"prestart\": \"yarn replace\",\n  \"replace\": \"placeholder='<!--PLACEHOLDER_PORSCHE_DESIGN_SYSTEM_META_TAGS_AND_ICON_LINKS-->' && partial=$placeholder$(node -e 'console.log(require(\\\"@porsche-design-system/components-js/partials\\\").getMetaTagsAndIconLinks({ appTitle: \\\"TITLE_OF_YOUR_APP\\\" }))') && regex=$placeholder'.*' && sed -i '' -E -e \\\"s@$regex@$partial@\\\" index.html\",\n}\n```\n\nYou can find an implemented example in our [Sample VanillaJS Integration](https://github.com/porscheui/sample-integration-vanillajs), [Sample Angular Integration](https://github.com/porscheui/sample-integration-angular) or [Sample React Integration](https://github.com/porscheui/sample-integration-react)\n\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { getMetaTagsAndIconLinks } from '@porsche-design-system/components-js/partials';\n  \n  @Component\n  export default class Code extends Vue {\n    public metaTagsAndIconLinks: string = getMetaTagsAndIconLinks({ appTitle: 'TITLE_OF_YOUR_APP' }).replaceAll('><', '>\\n<');\n  }\n</script>"
  },
  "Performance": {
    "Cdn": "# Cdn\n\nThe Porsche Design System **components**, **marque**, **icons**, **fonts** and **styles** are delivered by CDN (cdn.ui.porsche.com). \nThis way all digital Porsche products share and use the cached and versioned assets independently. \n\n## Explanation\nLet's have a look at following applications and assume that all of these applications have integrated a Porsche Design System Button:\n* [Porsche.com](https://www.porsche.com) created with Vanilla JS\n* [Porsche Finder](https://finder.porsche.com) created with React\n* [My Porsche](https://login.porsche.com/login) created with Angular\n\nWhen e.g. a user visits **Porsche.com** then the Porsche Design System Button gets loaded for the first time and will be automatically stored in browser cache.\nImagine the same user switches to the **Porsche Finder** or **My Porsche** application which uses the same button then it will instantly be available because it's already in browser cache.\nWhich means for the second and any further application less network requests and loading time.\n\nThis way performance and consistency can be dramatically increased across all digital Porsche products using the Porsche Design System.\n\n## China CDN\nWhen requests are made from China the CDN (cdn.ui.porsche.**com**) is configured to automatically forward those requests to a CDN hosted in China (cdn.ui.porsche.**cn**) which finally responses the request.\nWhy? Because it's local law. Anyway this way we provide an easy way to use the Porsche Design System assets without worrying about performance in China or the rest of world with zero configuration.\n\nBecause of the automatic forwarding strategy the amount of requests increases in China and the forwarding itself also costs each time some milliseconds. \nThat's why the Porsche Design System provides the optional possibility to define from which CDN those assets shall be loaded to get maximum performance in China.\n\nTo achieve this, a global browser variable `PORSCHE_DESIGN_SYSTEM_CDN` was introduced which can be defined in the projects `index.html`.  \nPossible values that can be assigned:\n* `auto` (default - using RoW CDN and forwards to Chinese CDN automatically when necessary) \n* `cn` (forces using Chinese CDN only)\nThis gives the possibility for the consuming application to bundle to separate builds for their application. One for China and one for RoW (rest of world).\n\n### Example (index.html)\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\"/>\n  <title>Porsche Design System</title>\n  <script type=\"text/javascript\" src=\"path-to-porsche-design-system.js\"></script>\n</head>\n<body>\n<script>\n  // All requests to the Porsche Design System CDN are forced to use the Chinese CDN directly.\n  // It's very important that the variable is defined before the Porsche Design System get initialized!\n  PORSCHE_DESIGN_SYSTEM_CDN = 'cn';\n  porscheDesignSystem.load();\n</script>\n</body>\n</html>\n```\n\nAlso, the function `getFontFaceStylesheet()` of the `@porsche-design-system/components-{js|angular|react}/partials` packages was extended with the option `{ cdn: 'auto' | 'cn' }` to force loading the font-face style definitions from Chinese CDN only, e.g.:\n\n```html\n<head>\n  <%= require('@porsche-design-system/components-{js|angular|react}/partials').getFontFaceStylesheet({ cdn: 'cn' }) %>\n</head>\n```",
    "Loading Behaviour": "# Loading Behaviour\n\n**Unstyled content** when opening an application or website creates a bad first impression.\nTo prevent this, the Porsche Design System offers various **partials** as part of the `@porsche-design-system/components-{js|angular|react}` package to ensure all necessary Porsche Design System fonts and components are fully loaded.\n\nRead further on how to prevent **Flash of Unstyled Content** (FOUC) and **Flash of Unstyled Text** (FOUT) to\nboost your application.\n\n## Prevent Flash of Unstyled Content (FOUC)\n\n- [Initialize Porsche Design System early](partials/loader-script)\n- [Preload component chunks](partials/component-chunk-links)\n- [Inject initial styles](partials/initial-styles)\n- [Prefetch icon svg files](partials/icon-links)\n\n## Prevent Flash of Unstyled Text (FOUT)\n\n- [Inject Font Face Stylesheet](partials/font-face-stylesheet)\n- [Preload specific font files](partials/font-links)\n"
  },
  "Security": {
    "Cve": "# Cve\n\nThe Porsche Design System uses Dependabot provided by Github to check for **common vulnerabilities and exposures (CVE)** in integrated packages. \nThis process is invoked automatically in our pipeline and thus ensures the protection. \n\nFor more information about Dependabot, please visit [Github](https://docs.github.com/en/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies)."
  },
  "Helpers": {
    "Components Ready": "# Components Ready\n\nSince the components are loaded lazily, it might be hard to tell when they are ready if you rely on them programmatically.\nTo solve that we provide the `componentsReady` function which returns a promise that resolves as soon as all currently used components are loaded and ready to use.\n\nIf the DOM changes later on you can call it again to know when the new components are loaded.\n\nThe `componentsReady` function is provided as part of the following components packages:\n* @porsche-design-system/components-js\n* @porsche-design-system/components-angular\n* @porsche-design-system/components-react\n\n## Basic Example\n\n`componentsReady` is quite flexible. You can call it wherever and as often as you like.  \nBy default, it uses the current document's `body` element to look for any web component of the Porsche Design System.  \n\n```tsx\nimport { componentsReady } from '@porsche-design-system/components-{js|angular|react}';\n\nconst doSomeStuff = async () => {\n  // doing some changes to the DOM and add new Porsche Design System components to it\n\n  await componentsReady();\n  \n  // some code that relies on the newly added components\n}\n```\n\n## Advanced Example\n\nIn case you want to limit the search radius of `componentsReady` you can pass any `HTMLElement` as a parameter.  \nThis is useful when you want to show a loading indicator for only a part of your application's interface, e.g. the sidebar and only care about components inside.\n\n```tsx\nimport { componentsReady } from '@porsche-design-system/components-{js|angular|react}';\n\nconst initSomeSidebar = async () => {\n  const sidebarEl = document.querySelector('.sidebar');\n  let showSpinner = true;\n  \n  // wait until all Porsche Design System components used within sidebar are ready\n  await componentsReady(sidebarEl);\n  showSpinner = false;\n}\n```",
    "Testing": "# Testing\n\nOne problem you might encounter while testing is, that the components get\nlazily loaded. That means, that they might not be ready when your tests start\nto access the elements.  \nYou can solve that by using the [componentsReady-function](helpers/components-ready)\n to know when all loading is finished.\n \nDetailed information about tests in frameworks like [React](start-coding/react), Angular etc. can be found in the respective test projects\n\n## Unit Tests\n\nA simple Jasmine example could look like this:\n```javascript\nimport { componentsReady } from '@porsche-design-system/components-js';\n\n/*\n * the function to test which adds a porsche design system\n * component to the document (usually this is done by a\n * template engine of a framework)\n */\n\nfunction addPText() {\n  const element = document.createElement('p-text');\n  element.innerText = 'Hello World';\n  document.body.appendChild(element);\n}\n\ndescribe(\"The p-text\", function() {\n  /**\n   * this test might fail, because the component is not\n   * ready if it wasn't used before\n   * in that case innerText would be empty string until\n   * the component finished loading\n   */\n  it(\"should have content\", function() {\n    addPText();\n    const element = document.querySelector('p-text');\n    expect(element.innerText).toBe('Hello World');\n    element.remove();\n  });\n \n  /**\n   * this test should work, even if the component\n   * still needs to be loaded, because the\n   * componentsReady() function returns a promise\n   * that resolves as soon as everything is ready\n   */\n  it(\"should have content\", async function() {\n    addPText();\n    await componentsReady();\n    const element = document.querySelector('p-text');\n    expect(element.innerText).toBe('Hello World');\n    element.remove();\n  });\n\n});\n```\n\n## E2E Tests\n\nUsually E2E tests are robust enough that the lazy loading shouldn't cause\nany issues. However, there are a lot of different setups for E2E tests.\n\nIf you face any problems, we would appreciate if you report them. We'll\ndo our best to find a solution.  \nAlso, it might be handy to know that all components get a `hydrated` class,\nas soon as they are loaded and ready, that you can wait for. Waiting for the functionality is available in most E2E frameworks.  \nAnother option would be to make the `componentsReady` function available\nin the browser and call it from the E2E tests to know when the page is\nready.\n\n## Visual Regression Testing\n\nFor Visual Regression Testing we recommend waiting for all network traffic\nto be finished. This should be handled by the Visual Regression Testing\ntools you use."
  }
}