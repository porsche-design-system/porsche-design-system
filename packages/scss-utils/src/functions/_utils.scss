/* Internal functions */
@function p-strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function p-is-number($value) {
  @return type-of($value) == 'number';
}

@function p-is-rem($value) {
  @return p-is-number($value) and index('rem', unit($value)) != null;
}

@function p-is-px($value) {
  @return p-is-number($value) and index('px', unit($value)) != null;
}

@function p-pow($number, $exponent) {
  @if (round($exponent) != $exponent) {
    @return p-exp($exponent * p-ln($number));
  }

  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }

  @return $value;
}

@function p-factorial($value) {
  $result: 1;

  @if $value == 0 {
    @return $result;
  }

  @for $index from 1 through $value {
    $result: $result * $index;
  }

  @return $result;
}

@function p-summation($iteratee, $input, $initial: 0, $limit: 100) {
  $sum: 0;

  @for $index from $initial to $limit {
    $sum: $sum + call(get-function($iteratee), $input, $index);
  }

  @return $sum;
}

@function p-exp-maclaurin($x, $n) {
  @return (p-pow($x, $n) / p-factorial($n));
}

@function p-exp($value) {
  @return p-summation('p-exp-maclaurin', $value, 0, 100);
}

@function p-ln-maclaurin($x, $n) {
  @return (p-pow(-1, $n + 1) / $n) * (p-pow($x - 1, $n));
}

@function p-ln($value) {
  $ten-exp: 1;
  $ln-ten: 2.30258509;

  @while ($value > p-pow(10, $ten-exp)) {
    $ten-exp: $ten-exp + 1;
  }

  @return p-summation(p-ln-maclaurin, $value / p-pow(10, $ten-exp), 1, 100) + $ten-exp * $ln-ten;
}
