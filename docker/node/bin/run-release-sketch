#!/usr/bin/env bash

set -o errexit
set -o pipefail

if [[ -z "${AWS_ACCESS_KEY_ID}" ]]; then
  echo "Please provide the \$AWS_ACCESS_KEY_ID environment variable."
  exit 1
fi

if [[ -z "${AWS_SECRET_ACCESS_KEY}" ]]; then
  echo "Please provide the \$AWS_SECRET_ACCESS_KEY environment variable."
  exit 1
fi

if [[ -z "${GITHUB_SHA}" ]]; then
  echo "Please provide the \$GITHUB_SHA environment variable."
  exit 1
fi

if [[ -z "${GITHUB_TOKEN}" ]]; then
  echo "Please provide the \$GITHUB_TOKEN environment variable."
  exit 1
fi

setup() {
  echo "task: [$(date)] \"setup\""
  export AWS_DEFAULT_REGION=eu-central-1
}

copy_sketch_library_and_create_rss_feed() {
  echo "task: [$(date)] \"copy_sketch_library_and_create_rss_feed\" (${PACKAGE_LOCATION}, ${PACKAGE_NAME}, ${PACKAGE_VERSION})"

  local title
  local publish_date
  title="$(echo "${PACKAGE_NAME}" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1')"
  publish_date="$(git log -1 --format=%aD "${GITHUB_SHA}" | cat)"

  cat << _EOF_ > "${PACKAGE_NAME}.sketch.xml"
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Porsche Design System</title>
    <description>Porsche Design System Sketch Library</description>
    <item>
      <title>${title} (v${PACKAGE_VERSION})</title>
      <pubDate>${publish_date}</pubDate>
      <enclosure url="https://designsystem.porsche.com/sketch/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.sketch" sparkle:version="${PACKAGE_VERSION}" type="application/octet-stream"/>
    </item>
  </channel>
</rss>
_EOF_
}

upload_s3() {
  echo "task: [$(date)] \"upload_s3\" (${PACKAGE_NAME}, ${PACKAGE_VERSION})"

  aws s3 cp "${PACKAGE_NAME}.sketch.xml" "${BUCKET_URL}/${BUCKET_FILE_PATH_XML}" --only-show-errors
  aws s3 cp "${PACKAGE_LOCATION}/${PACKAGE_NAME}.sketch" "${BUCKET_URL}/${BUCKET_FILE_PATH_SKETCH}" --only-show-errors

#  TODO: can't be used with GH Pages and GH Actions because of super strong caching
#  local n=1
#  local max=20
#  local delay=60
#  local http_status_code
#  local return_code=1
#  while true
#  do
#    http_status_code="$(curl -s -o /dev/null -w "%{http_code}" -H "Cache-Control: no-cache" "https://designsystem.porsche.com/sketch/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.sketch")"
#    echo "Check deployment status. Attempt ${n}/${max} (${http_status_code}) - https://designsystem.porsche.com/sketch/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.sketch [$(date)]"
#    if [[ ${http_status_code} == 200 ]]; then
#      echo "All right, deployment was verified."
#      return_code=0 # true
#      break
#    elif [[ ${n} -lt ${max} ]]; then
#      ((n++))
#    else
#      echo "Deployment could not be verified after ${n} attempts."
#      return_code=1 # false
#      break
#    fi
#    sleep ${delay}
#  done
#
#  return ${return_code}
  return 0
}

purge_cloudfront() {
  echo "task: [$(date)] \"purge_cloudfront\" (${BUCKET_FILE_PATH_XML})"
  result="$(aws cloudfront create-invalidation \
    --distribution-id E2KJVI0036W7XP \
    --paths "/${BUCKET_FILE_PATH_XML}")"
  status_code="${PIPESTATUS[@]}"

  if [[ $status_code == 0 ]]; then
    echo "Cloudfront purge was successful."
  else
    echo "Cloudfront purge wasn't successful."
    echo $result;
    exit 1
  fi
}

is_version_published() {
  echo "task: [$(date)] \"is_version_published\" (${PACKAGE_NAME}, ${PACKAGE_VERSION})"
  file=$(aws s3 ls "${BUCKET_URL}/${BUCKET_FILE_PATH_SKETCH}")

  if [[ "${file}" ]]; then
    return 0 # true
  else
    return 1 # false
  fi
}

add_git_tag() {
  echo "task: [$(date)] \"add_git_tag\" ${GIT_TAG_NAME}, ${GITHUB_SHA}"
  curl -s -X POST "https://api.github.com/repos/porscheui/porsche-design-system/git/refs" \
    -H "Authorization: token ${GITHUB_TOKEN}" \
    -d @- <<EOF
{
  "ref": "refs/tags/${GIT_TAG_NAME}",
  "sha": "${GITHUB_SHA}"
}
EOF
}

PACKAGE_LOCATION="${1}" # sketch/basic or sketch/web
PACKAGE_INFO="${PACKAGE_LOCATION}/package.env"
PACKAGE_NAME="$(grep NAME "${PACKAGE_INFO}" | cut -d '=' -f2)"
PACKAGE_VERSION="$(grep VERSION "${PACKAGE_INFO}" | cut -d '=' -f2)"
GIT_TAG_NAME="sketch-library-${PACKAGE_NAME:22}-v${PACKAGE_VERSION}"
BUCKET_URL="s3://porsche-design-system-storefront"
BUCKET_FILE_PATH_SKETCH="sketch/${PACKAGE_NAME}/${PACKAGE_VERSION}/${PACKAGE_NAME}.sketch"
BUCKET_FILE_PATH_XML="${PACKAGE_NAME}.sketch.xml"

setup
if ! is_version_published; then
  copy_sketch_library_and_create_rss_feed
  if upload_s3; then
    purge_cloudfront
    add_git_tag
    echo "Version \"${PACKAGE_VERSION}\" of \"${PACKAGE_NAME}\" Sketch Library published 🎉"
  else
    echo "Publishing version \"${PACKAGE_VERSION}\" of \"${PACKAGE_NAME}\" Sketch Library failed 😢"
    exit 1
  fi
else
  echo "Version \"${PACKAGE_VERSION}\" of \"${PACKAGE_NAME}\" Sketch Library is already published 🤷‍♂️"
fi
