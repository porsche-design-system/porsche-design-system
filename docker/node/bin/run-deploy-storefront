#!/usr/bin/env bash

set -o errexit
set -o pipefail

if [[ -z "${GITHUB_REPOSITORY}" ]]; then
  echo "Please provide the \$GITHUB_REPOSITORY environment variable."
  exit 1
fi

if [[ -z "${GITHUB_ACTOR}" ]]; then
  echo "Please provide the \$GITHUB_ACTOR environment variable."
  exit 1
fi

if [[ -z "${GITHUB_REF}" ]]; then
  echo "Please provide the \$GITHUB_REF environment variable."
  exit 1
fi

if [[ -z "${GITHUB_SHA}" ]]; then
  echo "Please provide the \$GITHUB_SHA environment variable."
  exit 1
fi

if [[ -z "$(ls -A ./packages/storefront/dist)" ]]; then
  echo "Please provide the build artifact."
  exit 1
fi

setup() {
  echo "task: [$(date)] \"setup\""
  git config --global user.name "${GITHUB_ACTOR}"
  git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
  git remote set-url origin "git@github.com:${GITHUB_REPOSITORY}.git"
}

checkout_gh_pages() {
  echo "task: [$(date)] \"checkout_gh_pages\""
  git clone --single-branch -b gh-pages "git@github.com:${GITHUB_REPOSITORY}.git" "/opt/porsche-design-system-gh-pages"
}

prepare_deployment() {
  echo "task: [$(date)] \"prepare_deployment\" (${1})"
  rm -rf "/opt/porsche-design-system-gh-pages/${1}"
}

copy_storefront() {
  echo "task: [$(date)] \"copy_storefront\" (${1})"
  mkdir -p "/opt/porsche-design-system-gh-pages/${1}"
  cp -r "./packages/storefront/dist/." "/opt/porsche-design-system-gh-pages/${1}"
}

add_deployment_version() {
  echo "task: [$(date)] \"add_deployment_version\" (${1})"
  mkdir -p "/opt/porsche-design-system-gh-pages/${1}"
  echo "${GITHUB_SHA}" > "/opt/porsche-design-system-gh-pages/${1}/version.md"
}

deploy_to_gh_pages() {
  echo "task: [$(date)] \"deploy_to_gh_pages\""
  pushd "/opt/porsche-design-system-gh-pages"
    git add -A
    git commit -m "Automated deployment of Porsche Design System - Storefront (${P_CURRENT_BRANCH}): ${GITHUB_SHA}" --allow-empty
    git push origin gh-pages --force
  popd
}

verify_deployment() {
  echo "task: [$(date)] \"verify_deployment\" (${1})"
  local n=1
  local max=20
  local delay=60
  local http_response=""
  while true
  do
    # verify deployment via aws lambda
    http_response="$(curl -s -H "Cache-Control: no-cache" "https://plygxm12t4.execute-api.eu-central-1.amazonaws.com/prod/verify?branch=${1}")"
    echo "Check deployment status (${1}). Attempt ${n}/${max} (${http_response}). [$(date)]"
    if [[ "${http_response}" == "${GITHUB_SHA}" ]]; then
      echo "All right, deployment was verified (${1})."
      break
    elif [[ ${n} -lt ${max} ]]; then
      ((n++))
    else
      echo "Deployment could not be verified after ${n} attempts (${1})."
      exit 1
    fi
    sleep ${delay}
  done
}

isCurrentBranchMasterBranch() {
  if [[ "${P_CURRENT_BRANCH}" == "master" ]]; then
    return 0
  fi
  return 1
}

P_CURRENT_BRANCH="${GITHUB_REF:11}"
SCRIPT_DIR="$(cd `dirname ${0}` && pwd)"

source "${SCRIPT_DIR}/../shared/ensure-github-credentials.sh"

if isCurrentBranchMasterBranch; then
  setup
  checkout_gh_pages
  prepare_deployment "latest"
  copy_storefront "latest"
  add_deployment_version "latest"
  deploy_to_gh_pages
  verify_deployment "latest"
else
  setup
  checkout_gh_pages
  prepare_deployment "${P_CURRENT_BRANCH}"
  copy_storefront "${P_CURRENT_BRANCH}"
  add_deployment_version "${P_CURRENT_BRANCH}"
  deploy_to_gh_pages
  verify_deployment "${P_CURRENT_BRANCH}"
fi
