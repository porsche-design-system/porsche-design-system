#!/usr/bin/env bash

set -o errexit
set -o pipefail

if [[ -z "${AWS_ACCESS_KEY_ID}" ]]; then
  echo "Please provide the \$AWS_ACCESS_KEY_ID environment variable."
  exit 1
fi

if [[ -z "${AWS_SECRET_ACCESS_KEY}" ]]; then
  echo "Please provide the \$AWS_SECRET_ACCESS_KEY environment variable."
  exit 1
fi

if [[ -z "${GITHUB_REF}" ]]; then
  echo "Please provide the \$GITHUB_REF environment variable."
  exit 1
fi

if [[ -z "${GITHUB_SHA}" ]]; then
  echo "Please provide the \$GITHUB_SHA environment variable."
  exit 1
fi

if [[ -z "$(ls -A ./packages/storefront/dist)" ]]; then
  echo "Please provide the build artifact."
  exit 1
fi

setup() {
  echo "task: [$(date)] \"setup\""
  export AWS_DEFAULT_REGION=eu-central-1
}

prepare_deployment() {
  echo "task: [$(date)] \"prepare_deployment\" (${1})"
  aws s3 rm "${BUCKET_URL}/${1}" --recursive --only-show-errors
}

add_deployment_version() {
  echo "task: [$(date)] \"add_deployment_version\" (${1})"
  echo "${GITHUB_SHA}" > "./packages/storefront/dist/version.md"
}

update_base_tag(){
  echo "task: [$(date)] \"update_base_tag\" (${1})"
  sed -i -E -e 's$<base href="/">$<base href="/'${1}'/">$' ./packages/storefront/dist/index.html
}

upload_s3() {
  echo "task: [$(date)] \"upload_s3\" (${1})"
  aws s3 cp "./packages/storefront/dist/." "${BUCKET_URL}/${1}" --recursive --only-show-errors
}

purge_cloudfront() {
  echo "task: [$(date)] \"purge_cloudfront\" (${1})"
  result="$(aws cloudfront create-invalidation \
    --distribution-id E2KJVI0036W7XP \
    --paths "/${1}/" "/${1}/*")"
  status_code="${PIPESTATUS[@]}"

  if [[ $status_code == 0 ]]; then
    echo "Cloudfront purge was successful."
  else
    echo "Cloudfront purge wasn't successful."
    echo $result;
    exit 1
  fi
}

verify_deployment() {
  echo "task: [$(date)] \"verify_deployment\" (${1})"
  local n=1
  local max=20
  local delay=60
  local http_response=""
  while true
  do
    http_response="$(curl -s -H "Cache-Control: no-cache" "https://dnc07obdl6ycv.cloudfront.net/${1}/version.md")"
    echo "Check deployment status (${1}). Attempt ${n}/${max} (${http_response}). [$(date)]"
    if [[ "${http_response}" == "${GITHUB_SHA}" ]]; then
      echo "All right, deployment was verified (${1})."
      break
    elif [[ ${n} -lt ${max} ]]; then
      ((n++))
    else
      echo "Deployment could not be verified after ${n} attempts (${1})."
      exit 1
    fi
    sleep ${delay}
  done
}

isCurrentBranchMasterBranch() {
  if [[ "${P_CURRENT_BRANCH}" == "master" ]]; then
    return 0
  fi
  return 1
}

P_CURRENT_BRANCH="${GITHUB_REF:11}" # strip first 11 characters
SCRIPT_DIR="$(cd `dirname ${0}` && pwd)"
BUCKET_URL="s3://porsche-design-system-storefront"

if isCurrentBranchMasterBranch; then
  setup
  prepare_deployment "latest"
  add_deployment_version "latest"
  update_base_tag "latest"
  upload_s3 "latest"
  purge_cloudfront "latest"
  verify_deployment "latest"
else
  setup
  prepare_deployment "${P_CURRENT_BRANCH}"
  add_deployment_version "${P_CURRENT_BRANCH}"
  update_base_tag "${P_CURRENT_BRANCH}"
  upload_s3 "${P_CURRENT_BRANCH}"
  purge_cloudfront "${P_CURRENT_BRANCH}"
  verify_deployment "${P_CURRENT_BRANCH}"
fi
