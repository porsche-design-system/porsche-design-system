#!/usr/bin/env bash

set -o errexit
set -o pipefail

publish() {
  echo "task: [$(date)] \"publish\" $1"
  result=$(yarn publish --non-interactive --registry=https://porscheui.jfrog.io/porscheui/api/npm/npm-local/ $1)

  if [[ $result == *"Done"* ]]; then
    return 0 # true
  else
    return 1 # false
  fi
}

is_version_published() {
  echo "task: [$(date)] \"is_version_published\" $1@$2"
  http_status_code="$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $PORSCHE_NPM_REGISTRY_TOKEN" "https://porscheui.jfrog.io/porscheui/api/npm/npm/$1/$2")"

  if [[ $http_status_code == 200 ]]; then
    return 0 # true
  else
    return 1 # false
  fi
}

SCRIPT_DIR="$(cd `dirname ${0}` && pwd)"
source "${SCRIPT_DIR}/../shared/ensure-artifactory-credentials.sh"

PACKAGE_LOCATION=$1

PACKAGE_JSON=$PACKAGE_LOCATION/package.json
PACKAGE_VERSION=$(cat $PACKAGE_JSON | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[:,\",]//g;s/version//' | tr -d '[[:space:]]')
PACKAGE_NAME=$(cat $PACKAGE_JSON | grep name | head -1 | awk -F= "{ print $2 }" | sed 's/[:,\",]//g;s/name//' | tr -d '[[:space:]]')

if ! is_version_published $PACKAGE_NAME $PACKAGE_VERSION; then
  if publish $PACKAGE_LOCATION; then
    echo "Version \"$PACKAGE_VERSION\" of \"$PACKAGE_NAME\" published üéâ"
  else
    echo "Publishing Version \"$PACKAGE_VERSION\" of \"$PACKAGE_NAME\" failed üò¢"
  fi
else
  echo "Version \"$PACKAGE_VERSION\" of \"$PACKAGE_NAME\" is already published ü§∑‚Äç‚ôÇÔ∏è"
fi
