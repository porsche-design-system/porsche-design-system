#!/usr/bin/env bash

set -o errexit
set -o pipefail

SCRIPT_DIR="$(cd `dirname ${0}` && pwd)"
source "${SCRIPT_DIR}/../shared/ensure-github-credentials.sh"

if [[ -z "${GITHUB_REPOSITORY}" ]]; then
  echo "Please provide the \$GITHUB_REPOSITORY environment variable."
  exit 1
fi

if [[ -z "${GITHUB_ACTOR}" ]]; then
  echo "Please provide the \$GITHUB_ACTOR environment variable."
  exit 1
fi

if [[ -z "${GITHUB_REF}" ]]; then
  echo "Please provide the \$GITHUB_REF environment variable."
  exit 1
fi

if [[ -z "${GITHUB_SHA}" ]]; then
  echo "Please provide the \$GITHUB_SHA environment variable."
  exit 1
fi

if [[ -z "$(ls -A ./packages/storefront/build)" ]]; then
  echo "Please provide the build artifact."
  exit 1
fi

P_ABBR_REF="$(git rev-parse --abbrev-ref ${GITHUB_REF})"
P_PUBLISH_DATE="$(git log -1 --format=%aD ${GITHUB_SHA} | cat)"
P_PUBLISH_ID="$(git log -1 --format=%at ${GITHUB_SHA} | cat)"

setup_github() {
  git config --global user.name "${GITHUB_ACTOR}"
  git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
}

checkout_gh_pages() {
  git clone --single-branch -b gh-pages "git@github.com:${GITHUB_REPOSITORY}.git" "/opt/porsche-ui-kit-gh-pages"
}

cleanup_previous_deployment() {
  rm -rf "/opt/porsche-ui-kit-gh-pages/${P_ABBR_REF}"
}

copy_porsche-ui-kit-storefront() {
  mkdir -p "/opt/porsche-ui-kit-gh-pages/${P_ABBR_REF}"
  cp -r "./packages/storefront/build/." "/opt/porsche-ui-kit-gh-pages/${P_ABBR_REF}"
}

copy_sketch_libraries_create_rss_feed() {
  mkdir -p "/opt/porsche-ui-kit-gh-pages/${P_ABBR_REF}"
  cp "./sketch/${2}" "/opt/porsche-ui-kit-gh-pages/${P_ABBR_REF}"
  cat << _EOF_ > "/opt/porsche-ui-kit-gh-pages/${2}.xml"
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Porsche UI</title>
    <description>A Porsche UI Sketch library.</description>
    <item>
      <title>${1} (${P_ABBR_REF}.${P_PUBLISH_ID})</title>
      <pubDate>${P_PUBLISH_DATE}</pubDate>
      <enclosure url="https://ui.porsche.com/${P_ABBR_REF}/${2}" sparkle:version="${P_ABBR_REF:1}.${P_PUBLISH_ID}" type="application/octet-stream"/>
    </item>
  </channel>
</rss>
_EOF_
}

add_deployment_sha() {
  mkdir -p "/opt/porsche-ui-kit-gh-pages/${P_ABBR_REF}/version"
  touch "/opt/porsche-ui-kit-gh-pages/${P_ABBR_REF}/version/${GITHUB_SHA}"
}

deploy_to_gh_pages() {
  pushd "/opt/porsche-ui-kit-gh-pages"
    git add -A
    git commit -m "Automated deployment of Porsche UI Kit (${P_ABBR_REF}): ${GITHUB_SHA}" --allow-empty
    git push origin gh-pages --force-with-lease
  popd
}

verify_deployment() {
  local n=1
  local max=12
  local delay=10
  while true
  do
    echo "Check deployment status. Attempt ${n}/${max}."
    local http_code="$(curl -s -o /dev/null -w "%{http_code}" "https://ui.porsche.com/${P_ABBR_REF}/version/${GITHUB_SHA}")"
    if [[ "${http_code}" -eq 200 ]]; then
      echo "All right, deployment was verified."
      break
    elif [[ ${n} -lt ${max} ]]; then
      ((n++))
    else
      echo "Deployment could not be verified after ${n} attempts."
      exit 1
    fi
    sleep ${delay}
  done
}

setup_github
checkout_gh_pages
cleanup_previous_deployment
copy_porsche-ui-kit-storefront
if [[ "${P_ABBR_REF}" =~ ${GIT_RELEASE_FILTER} ]]; then
  copy_sketch_libraries_create_rss_feed "Porsche UI Kit App" "porsche-ui-kit-app.sketch"
  copy_sketch_libraries_create_rss_feed "Porsche UI Kit Basic" "porsche-ui-kit-basic.sketch"
  copy_sketch_libraries_create_rss_feed "Porsche UI Kit Web \"Prep\"" "porsche-ui-kit-web.prep.sketch"
  copy_sketch_libraries_create_rss_feed "Porsche UI Kit Web" "porsche-ui-kit-web.sketch"
fi
add_deployment_sha
deploy_to_gh_pages
verify_deployment
