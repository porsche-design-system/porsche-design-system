#!/usr/bin/env bash

set -o errexit
set -o pipefail

SCRIPT_DIR="$(cd `dirname ${0}` && pwd)"
source "${SCRIPT_DIR}/../shared/ensure-github-credentials.sh"

if [[ -z "${GITHUB_REPOSITORY}" ]]; then
  echo "Please provide the \$GITHUB_REPOSITORY environment variable."
  exit 1
fi

if [[ -z "${GITHUB_ACTOR}" ]]; then
  echo "Please provide the \$GITHUB_ACTOR environment variable."
  exit 1
fi

if [[ -z "${GITHUB_REF}" ]]; then
  echo "Please provide the \$GITHUB_REF environment variable."
  exit 1
fi

if [[ -z "${GITHUB_SHA}" ]]; then
  echo "Please provide the \$GITHUB_SHA environment variable."
  exit 1
fi

if [[ -z "$(ls -A ./packages/storefront/build)" ]]; then
  echo "Please provide the build artifact."
  exit 1
fi

setup() {
  echo "task: [$(date)] \"setup\""
  git config --global user.name "${GITHUB_ACTOR}"
  git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
  git remote set-url origin "git@github.com:${GITHUB_REPOSITORY}.git"

  P_WORKING_BRANCH="$(git rev-parse --abbrev-ref ${GITHUB_REF})"
  P_LATEST_STABLE_BRANCH="$(git remote show origin | grep "HEAD branch" | sed "s/.*: //")"
  P_LATEST_STABLE_SKETCH_PUBLISH_DATE="$(git log -1 --format=%aD ${GITHUB_SHA} | cat)"
  P_LATEST_STABLE_SKETCH_VERSION="1.0.0"
}

checkout_gh_pages() {
  echo "task: [$(date)] \"checkout_gh_pages\""
  git clone --single-branch -b gh-pages "git@github.com:${GITHUB_REPOSITORY}.git" "/opt/porsche-ui-kit-gh-pages"
}

prepare_deployment() {
  echo "task: [$(date)] \"prepare_deployment\""
  rm -rf "/opt/porsche-ui-kit-gh-pages/${P_WORKING_BRANCH}"
}

copy_porsche_ui_kit() {
  echo "task: [$(date)] \"copy_porsche_ui_kit\""
  mkdir -p "/opt/porsche-ui-kit-gh-pages/${P_WORKING_BRANCH}"
  cp -r "./packages/storefront/build/." "/opt/porsche-ui-kit-gh-pages/${P_WORKING_BRANCH}"
}

add_version_sha() {
  echo "task: [$(date)] \"add_version_sha\""
  mkdir -p "/opt/porsche-ui-kit-gh-pages/${P_WORKING_BRANCH}/version"
  touch "/opt/porsche-ui-kit-gh-pages/${P_WORKING_BRANCH}/version/${GITHUB_SHA}"
}

prepare_latest_stable_deployment() {
  echo "task: [$(date)] \"prepare_latest_stable_deployment\""
  rm -rf "/opt/porsche-ui-kit-gh-pages/latest"
}

copy_latest_stable_porsche_ui_kit() {
  echo "task: [$(date)] \"copy_latest_stable_porsche_ui_kit\""
  mkdir -p "/opt/porsche-ui-kit-gh-pages/latest"
  cp -r "./packages/storefront/build/." "/opt/porsche-ui-kit-gh-pages/latest"
}

add_latest_stable_version_sha() {
  echo "task: [$(date)] \"add_latest_stable_version_sha\""
  mkdir -p "/opt/porsche-ui-kit-gh-pages/latest/version"
  touch "/opt/porsche-ui-kit-gh-pages/latest/version/${GITHUB_SHA}"
}

copy_latest_stable_sketch_library_and_create_rss_feed() {
  echo "task: [$(date)] \"copy_latest_stable_sketch_library_and_create_rss_feed\""
  mkdir -p "/opt/porsche-ui-kit-gh-pages/latest"
  cp "./sketch/${2}" "/opt/porsche-ui-kit-gh-pages/latest"
  cat << _EOF_ > "/opt/porsche-ui-kit-gh-pages/${2}.xml"
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Porsche UI</title>
    <description>A Porsche UI Sketch library.</description>
    <item>
      <title>${1} (v${P_LATEST_STABLE_SKETCH_VERSION})</title>
      <pubDate>${P_LATEST_STABLE_SKETCH_PUBLISH_DATE}</pubDate>
      <enclosure url="https://ui.porsche.com/latest/${2}" sparkle:version="${P_LATEST_STABLE_SKETCH_VERSION}" type="application/octet-stream"/>
    </item>
  </channel>
</rss>
_EOF_
}

deploy_to_gh_pages() {
  echo "task: [$(date)] \"deploy_to_gh_pages\""
  pushd "/opt/porsche-ui-kit-gh-pages"
    git add -A
    git commit -m "Automated deployment of Porsche UI Kit (${P_WORKING_BRANCH}): ${GITHUB_SHA}" --allow-empty
    git push origin gh-pages --force-with-lease
  popd
}

verify_deployment() {
  echo "task: [$(date)] \"verify_deployment\""
  local n=1
  local max=15
  local delay=60
  while true
  do
    echo "Check deployment status. Attempt ${n}/${max}."
    local http_code="$(curl -H "Cache-Control: no-cache" -s -o /dev/null -w "%{http_code}" "https://ui.porsche.com/${1}/version/${GITHUB_SHA}")"
    echo "https://ui.porsche.com/${1}/version/${GITHUB_SHA}"
    echo "http code: ${http_code}"
    if [[ "${http_code}" -eq "200" ]]; then
      echo "All right, deployment was verified."
      break
    elif [[ ${n} -lt ${max} ]]; then
      ((n++))
    else
      echo "Deployment could not be verified after ${n} attempts."
      exit 1
    fi
    sleep ${delay}
  done
}

isWorkingBranchLatestStableBranch() {
  if [[ "${P_WORKING_BRANCH}" -eq "${P_LATEST_STABLE_BRANCH}" ]]; then
    return 1
  fi
  return 0
}

setup
checkout_gh_pages
prepare_deployment
copy_porsche_ui_kit
add_version_sha
if [[ isWorkingBranchLatestStableBranch ]]; then
  prepare_latest_stable_deployment
  copy_latest_stable_porsche_ui_kit
  add_latest_stable_version_sha
  copy_latest_stable_sketch_library_and_create_rss_feed "Porsche UI Kit App" "porsche-ui-kit-app.sketch"
  copy_latest_stable_sketch_library_and_create_rss_feed "Porsche UI Kit Basic" "porsche-ui-kit-basic.sketch"
  copy_latest_stable_sketch_library_and_create_rss_feed "Porsche UI Kit Web \"Prep\"" "porsche-ui-kit-web.prep.sketch"
  copy_latest_stable_sketch_library_and_create_rss_feed "Porsche UI Kit Web" "porsche-ui-kit-web.sketch"
fi
deploy_to_gh_pages
#verify_deployment "${P_WORKING_BRANCH}"
#if [[ isWorkingBranchLatestStableBranch ]]; then
#  verify_deployment "latest"
#fi
